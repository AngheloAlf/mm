0x80000300 = osTvType; // type:UNK_TYPE size:0x4
0x80000304 = osRomType; // type:UNK_TYPE size:0x4
0x80000308 = osRomBase; // type:UNK_TYPE size:0x4
0x8000030C = osResetType; // type:UNK_TYPE size:0x4
0x80000310 = osCicId; // type:UNK_TYPE size:0x4
0x80000314 = osVersion; // type:UNK_TYPE size:0x4
0x80000318 = osMemSize; // type:UNK_TYPE size:0x4
0x8000031C = osAppNmiBuffer; // type:s32 size:0x40
0x80000500 = gFramebuffer1; // type:u16 size:0x25800
0x80025D00 = D_80025D00; // type:u8 size:0x1 # TODO size
0x800969C0 = rspbootTextStart; // type:u64 size:0x160
0x80096B20 = D_80096B20; // type:u8 size:0x1
0x80096B24 = gViConfigUseDefault; // type:vu8 size:0x1
0x80096B28 = gViConfigAdditionalScanLines; // type:u8 size:0x1
0x80096B2C = gViConfigFeatures; // type:u32 size:0x4
0x80096B30 = gViConfigXScale; // type:f32 size:0x4
0x80096B34 = gViConfigYScale; // type:f32 size:0x4
0x80096B40 = gCartHandle; // type:OSPiHandle* size:0x4
0x80096B50 = sDmaMgrDmaBuffSize; // type:u32 size:0x4
0x80096B60 = gIrqMgrResetStatus; // type:vs32 size:0x4
0x80096B68 = sIrqMgrResetTime; // type:volatile OSTime size:0x8
0x80096B70 = sIrqMgrRetraceTime; // type:volatile OSTime size:0x8
0x80096B78 = sIrqMgrRetraceCount; // type:s32 size:0x4
0x80096B80 = sCpuExceptions; // type:char* size:0x48
0x80096BC8 = sFpuExceptions; // type:char* size:0x18
0x80096BE0 = sFaultDrawContext; // type:FaultDrawer* size:0x4
0x80096BE4 = sFaultDrawerDefault; // type:FaultDrawer size:0x3c
0x80096C20 = gLoadLogSeverity; // type:UNK_TYPE4 size:0x4
0x80096C30 = gLoad2LogSeverity; // type:UNK_TYPE4 size:0x4
0x80096C40 = sStackInfoListStart; // type:StackEntry* size:0x4
0x80096C44 = sStackInfoListEnd; // type:StackEntry* size:0x4
0x80096C50 = sGfxPrintFontTLUT; // type:u16 size:0x80
0x80096CD0 = sGfxPrintRainbowTLUT; // type:u16 size:0x20
0x80096CF0 = sGfxPrintRainbowData; // type:u8 size:0x8
0x80096CF8 = sGfxPrintFontData; // type:u8 size:0x800
0x80097500 = sInitFuncs; // type:void* size:0x4
0x80097504 = sNew; // type:char size:0x4
0x80097508 = D_80097508; // type:[24] size:0x18
0x80097520 = qNaN0x3FFFFF; // type:f32 size:0x4
0x80097524 = qNaN0x10000; // type:f32 size:0x4
0x80097528 = sNaN0x3FFFFF; // type:f32 size:0x4
0x80097530 = sRandInt; // type:u32 size:0x4
0x80097540 = osViModeNtscHpf1; // type:OSViMode size:0x50
0x80097590 = osViModePalLan1; // type:OSViMode size:0x50
0x800975E0 = sintable; // type:s16 size:0x800
0x80097DE0 = __osHwIntTable; // type:__osHwInt size:0x28
0x80097E08 = __osPiIntTable; // type:__osHwInt size:0x28
0x80097E10 = __osThreadTail; // type:OSThread* size:0x4
0x80097E18 = __osRunQueue; // type:OSThread* size:0x4
0x80097E1C = __osActiveQueue; // type:OSThread* size:0x4
0x80097E20 = __osRunningThread; // type:OSThread* size:0x4
0x80097E24 = __osFaultedThread; // type:OSThread* size:0x4
0x80097E30 = __osSiAccessQueueEnabled; // type:u32 size:0x4
0x80097E40 = D_80097E40; // type:UNK_TYPE4 size:0x4
0x80097E50 = osClockRate; // type:u64 size:0x8
0x80097E58 = osViClock; // type:s32 size:0x4
0x80097E5C = __osShutdown; // type:UNK_TYPE4 size:0x4
0x80097E60 = __OSGlobalIntMask; // type:UNK_TYPE4 size:0x4
0x80097E70 = __osPiDevMgr; // type:OSDevMgr size:0x1c
0x80097E8C = __osPiTable; // type:OSPiHandle* size:0x4
0x80097E90 = __osCurrentHandle; // type:OSPiHandle* size:0x8
0x80097EA0 = __osPiAccessQueueEnabled; // type:UNK_TYPE4 size:0x4
0x80097EB0 = osViModeNtscHpn1; // type:OSViMode size:0x50
0x80097F00 = __osPfsInodeCacheChannel; // type:s32 size:0x4
0x80097F04 = __osPfsInodeCacheBank; // type:u8 size:0x1
0x80097F10 = D_80097F10; // type:UNK_TYPE4 size:0x4
0x80097F20 = spaces; // type:char size:0x21
0x80097F44 = zeroes; // type:char size:0x24
0x80097F70 = __osTimerList; // type:OSTimer* size:0x4
0x80097F80 = D_80097F80; // type:f32 size:0x4
0x80097F90 = D_80097F90; // type:f32 size:0x4
0x80097FA0 = D_80097FA0; // type:UNK_TYPE1 size:0x1
0x80097FA4 = D_80097FA4; // type:UNK_TYPE1 size:0x1
0x80097FA5 = D_80097FA5; // type:UNK_TYPE1 size:0x1
0x80097FB0 = __osPfsLastChannel; // type:s32 size:0x4
0x80097FC0 = osViModeNtscLan1; // type:OSViMode size:0x50
0x80098010 = osViModeMpalLan1; // type:OSViMode size:0x50
0x80098060 = D_80098060; // type:__OSViContext size:0x60
0x800980C0 = __osViCurr; // type:__OSViContext* size:0x4
0x800980C4 = __osViNext; // type:__OSViContext* size:0x4
0x800980D0 = sCartRomNeedsInit; // type:UNK_TYPE4 size:0x4
0x800980E0 = osViModeFpalLan1; // type:OSViMode size:0x50
0x80098130 = ldigs; // type:u8 size:0x14
0x80098144 = udigs; // type:u8 size:0x14
0x80098160 = __osViDevMgr; // type:OSDevMgr size:0x1c
0x8009817C = __additional_scanline; // type:UNK_TYPE4 size:0x4
0x80098180 = D_80098180; // type:UNK_TYPE1 size:0x1
0x80098190 = D_80098190; // type:char size:0x5
0x80098198 = D_80098198; // type:char size:0x5
0x800981A0 = D_800981A0; // type:char size:0x7
0x800981A8 = D_800981A8; // type:char size:0x5
0x800981B0 = D_800981B0; // type:f32 size:0x4
0x800981C4 = dmamgrString800981C4; // type:char size:0xf
0x800981D4 = dmamgrString800981D4; // type:char size:0xf
0x800981E4 = dmamgrString800981E4; // type:char size:0xf
0x800981F4 = dmamgrString800981F4; // type:char size:0xf
0x80098204 = dmamgrThreadName; // type:char size:0x7
0x80098210 = D_80098210; // type:char size:0xe
0x80098220 = D_80098220; // type:char size:0x1c
0x8009823C = D_8009823C; // type:char size:0x1e
0x80098260 = jtbl_80098260; // type:UNK_PTR size:0x4
0x80098280 = D_80098280; // type:char size:0xf
0x80098290 = D_80098290; // type:char size:0x13
0x800982A4 = D_800982A4; // type:char size:0xa
0x800982B0 = D_800982B0; // type:char size:0xa
0x800982BC = D_800982BC; // type:char size:0x11
0x800982D0 = D_800982D0; // type:char size:0x16
0x800982E8 = D_800982E8; // type:char size:0x17
0x80098300 = D_80098300; // type:char size:0x16
0x80098318 = D_80098318; // type:char size:0x17
0x80098330 = D_80098330; // type:char size:0x13
0x80098344 = D_80098344; // type:char size:0x12
0x80098358 = D_80098358; // type:char size:0x16
0x80098370 = D_80098370; // type:char size:0x15
0x80098388 = D_80098388; // type:char size:0x15
0x800983A0 = D_800983A0; // type:char size:0x15
0x800983B8 = D_800983B8; // type:char size:0x14
0x800983CC = D_800983CC; // type:char size:0xf
0x800983DC = D_800983DC; // type:char size:0x1b
0x800983F8 = D_800983F8; // type:char size:0x19
0x80098414 = D_80098414; // type:char size:0x15
0x8009842C = D_8009842C; // type:char size:0x1a
0x80098448 = D_80098448; // type:char size:0x18
0x80098460 = D_80098460; // type:char size:0x12
0x80098474 = D_80098474; // type:char size:0x11
0x80098488 = D_80098488; // type:char size:0x9
0x80098494 = D_80098494; // type:char size:0xa
0x800984A0 = D_800984A0; // type:char size:0x12
0x800984B4 = D_800984B4; // type:char size:0x37
0x800984EC = D_800984EC; // type:char size:0x36
0x80098524 = D_80098524; // type:char size:0x47
0x8009856C = D_8009856C; // type:char size:0x4a
0x800985B8 = D_800985B8; // type:char size:0xe
0x800985C8 = D_800985C8; // type:char size:0x12
0x800985DC = D_800985DC; // type:char size:0xe
0x800985EC = D_800985EC; // type:char size:0x12
0x80098600 = D_80098600; // type:char size:0xd
0x80098610 = D_80098610; // type:char size:0x5
0x80098618 = D_80098618; // type:char size:0x2
0x8009861C = D_8009861C; // type:char size:0xe
0x8009862C = D_8009862C; // type:char size:0x6
0x80098634 = D_80098634; // type:char size:0x13
0x80098648 = D_80098648; // type:char size:0x1c
0x80098664 = D_80098664; // type:char size:0x1c
0x80098680 = D_80098680; // type:char size:0x1c
0x8009869C = D_8009869C; // type:char size:0x1c
0x800986B8 = D_800986B8; // type:char size:0x1c
0x800986D4 = D_800986D4; // type:char size:0x1c
0x800986F0 = D_800986F0; // type:char size:0x1c
0x8009870C = D_8009870C; // type:char size:0x1c
0x80098728 = D_80098728; // type:char size:0x1c
0x80098744 = D_80098744; // type:char size:0x1c
0x80098760 = D_80098760; // type:char size:0x1d
0x80098780 = D_80098780; // type:char size:0x2
0x80098784 = D_80098784; // type:char size:0x2
0x80098788 = D_80098788; // type:char size:0x2
0x8009878C = D_8009878C; // type:char size:0x2
0x80098790 = D_80098790; // type:char size:0x2
0x80098794 = D_80098794; // type:char size:0x2
0x80098798 = D_80098798; // type:char size:0x2
0x8009879C = D_8009879C; // type:char size:0x2
0x800987A0 = D_800987A0; // type:char size:0x2
0x800987A4 = D_800987A4; // type:char size:0xb
0x800987B0 = D_800987B0; // type:char size:0x2
0x800987B4 = D_800987B4; // type:char size:0x16
0x800987CC = D_800987CC; // type:char size:0x20
0x800987EC = D_800987EC; // type:char size:0x20
0x8009880C = D_8009880C; // type:char size:0x20
0x8009882C = D_8009882C; // type:char size:0x20
0x8009884C = D_8009884C; // type:char size:0x20
0x8009886C = D_8009886C; // type:char size:0x20
0x8009888C = D_8009888C; // type:char size:0x20
0x800988AC = D_800988AC; // type:char size:0x20
0x800988CC = D_800988CC; // type:char size:0x20
0x800988EC = D_800988EC; // type:char size:0x20
0x8009890C = D_8009890C; // type:char size:0x20
0x8009892C = D_8009892C; // type:char size:0x2
0x80098930 = D_80098930; // type:char size:0x2
0x80098934 = D_80098934; // type:char size:0x2
0x80098938 = D_80098938; // type:char size:0x2
0x8009893C = D_8009893C; // type:char size:0x2
0x80098940 = D_80098940; // type:char size:0x2
0x80098944 = D_80098944; // type:char size:0x2
0x80098948 = D_80098948; // type:char size:0x2
0x8009894C = D_8009894C; // type:char size:0x2
0x80098950 = D_80098950; // type:char size:0x2
0x80098954 = D_80098954; // type:char size:0x8
0x8009895C = D_8009895C; // type:char size:0xa
0x80098968 = D_80098968; // type:char size:0x5
0x80098970 = D_80098970; // type:char size:0x5
0x80098978 = D_80098978; // type:char size:0x5
0x80098980 = D_80098980; // type:char size:0xc
0x8009898C = D_8009898C; // type:char size:0x18
0x800989A4 = D_800989A4; // type:char size:0xa
0x800989B0 = D_800989B0; // type:char size:0x9
0x800989BC = D_800989BC; // type:char size:0xd
0x800989CC = D_800989CC; // type:char size:0xc
0x800989D8 = D_800989D8; // type:char size:0x19
0x800989F4 = D_800989F4; // type:char size:0xa
0x80098A00 = D_80098A00; // type:char size:0x9
0x80098A0C = D_80098A0C; // type:char size:0xd
0x80098A1C = D_80098A1C; // type:char size:0x2
0x80098A20 = D_80098A20; // type:char size:0x22
0x80098A44 = D_80098A44; // type:char size:0x22
0x80098A68 = D_80098A68; // type:char size:0x1e
0x80098A88 = D_80098A88; // type:char size:0x35
0x80098AC0 = D_80098AC0; // type:char size:0x31
0x80098AF4 = D_80098AF4; // type:char size:0x33
0x80098B28 = D_80098B28; // type:char size:0x21
0x80098B4C = D_80098B4C; // type:char size:0x1a
0x80098B68 = D_80098B68; // type:char size:0x19
0x80098B84 = D_80098B84; // type:char size:0x19
0x80098BA0 = D_80098BA0; // type:char size:0x19
0x80098BBC = D_80098BBC; // type:char size:0x19
0x80098BD8 = faultThreadName; // type:char size:0x6
0x80098BE0 = D_80098BE0; // type:char size:0x15
0x80098BF8 = D_80098BF8; // type:char size:0x4
0x80098BFC = D_80098BFC; // type:char size:0x7
0x80098C04 = D_80098C04; // type:char size:0x4
0x80098C08 = D_80098C08; // type:char size:0x7
0x80098C10 = D_80098C10; // type:char size:0x15
0x80098C28 = D_80098C28; // type:char size:0x4
0x80098C2C = D_80098C2C; // type:char size:0x7
0x80098C34 = D_80098C34; // type:char size:0x4
0x80098C38 = D_80098C38; // type:char size:0x7
0x80098C40 = D_80098C40; // type:char size:0xd
0x80098C50 = sFaultDrawerFont; // type:u8 size:0x400
0x80099050 = D_80099050; // type:char size:0x4
0x80099054 = D_80099054; // type:char size:0x7
0x8009905C = D_8009905C; // type:char size:0x7
0x80099064 = D_80099064; // type:char size:0x9
0x80099070 = D_80099070; // type:char size:0x5
0x80099078 = D_80099078; // type:char size:0x2
0x8009907C = D_8009907C; // type:char size:0x3
0x80099080 = D_80099080; // type:char size:0x7
0x80099090 = jtbl_80099090; // type:UNK_PTR size:0x4
0x800990B0 = D_800990B0; // type:char size:0x6
0x800990C0 = D_800990C0; // type:f32 size:0x24
0x800990E4 = D_800990E4; // type:f32 size:0x4
0x800990E8 = D_800990E8; // type:f32 size:0x4
0x800990EC = D_800990EC; // type:f32 size:0x4
0x800990F0 = D_800990F0; // type:f32 size:0x4
0x800990F4 = D_800990F4; // type:f32 size:0x4
0x800990F8 = D_800990F8; // type:f32 size:0x4
0x800990FC = D_800990FC; // type:f32 size:0x4
0x80099100 = D_80099100; // type:f32 size:0x4
0x80099104 = D_80099104; // type:f32 size:0x4
0x80099108 = D_80099108; // type:f32 size:0x4
0x8009910C = D_8009910C; // type:f32 size:0x4
0x80099110 = D_80099110; // type:char size:0x1
0x80099128 = D_80099128; // type:char size:0x1
0x8009915C = D_8009915C; // type:char size:0x1
0x80099178 = D_80099178; // type:char size:0x1
0x800991A0 = D_800991A0; // type:u16 size:0x80
0x80099220 = P; // type:du size:0x28
0x80099248 = rpi; // type:du size:0x8
0x80099250 = pihi; // type:du size:0x8
0x80099258 = pilo; // type:du size:0x8
0x80099260 = zero; // type:fu size:0x4
0x80099270 = D_80099270; // type:UNK_TYPE1 size:0x1
0x80099290 = __osIntTable; // type:UNK_PTR size:0x4
0x800992C0 = D_800992C0; // type:f64 size:0x8
0x800992D0 = jtbl_800992D0; // type:UNK_PTR size:0x4
0x800992F0 = D_800992F0; // type:f64 size:0x8
0x800992F8 = D_800992F8; // type:f64 size:0x8
0x80099300 = D_80099300; // type:char size:0x4
0x80099304 = D_80099304; // type:char size:0x6
0x8009930C = D_8009930C; // type:unsigned int size:0x18
0x80099324 = jtbl_80099324; // type:UNK_PTR size:0x4
0x80099400 = D_80099400; // type:f64 size:0x28
0x80099428 = D_80099428; // type:f64 size:0x8
0x80099430 = D_80099430; // type:f64 size:0x8
0x80099438 = D_80099438; // type:f64 size:0x8
0x80099440 = D_80099440; // type:f32 size:0x4
0x80099450 = __libm_qnan_f; // type:UNK_TYPE4 size:0x4 # float? but gnu as uses a different value for NaN
0x80099460 = D_80099460; // type:f64 size:0x48
0x800994A8 = D_800994A8; // type:char size:0x4
0x800994AC = D_800994AC; // type:char size:0x4
0x800994B0 = D_800994B0; // type:char size:0x2
0x800994B8 = D_800994B8; // type:f64 size:0x8
0x800994C0 = D_800994C0; // type:u64 size:0x8
0x800994C8 = D_800994C8; // type:u64 size:0x8
0x800994D0 = D_800994D0; // type:char size:0xc
0x800994DC = D_800994DC; // type:char size:0x12
0x800994F0 = D_800994F0; // type:char size:0x1
0x80099500 = sBootThreadInfo; // type:StackEntry size:0x1c
0x80099520 = sIdleThread; // type:OSThread size:0x1b0
0x800996D0 = sIdleThreadStack; // type:u8 size:0x400
0x80099AD0 = sIdleThreadInfo; // type:StackEntry size:0x1c
0x80099AF0 = sBootThreadStack; // type:u8 size:0x400
0x80099EF0 = gIrqMgr; // type:IrqMgr size:0x280
0x8009A170 = sIrqMgrStack; // type:u8 size:0x500
0x8009A670 = sIrqMgrStackInfo; // type:StackEntry size:0x1c
0x8009A690 = gMainThread; // type:OSThread size:0x1b0
0x8009A840 = sMainStack; // type:u8 size:0x900
0x8009B140 = sMainStackInfo; // type:StackEntry size:0x1c
0x8009B160 = sPiMgrCmdBuff; // type:OSMesg size:0xc8
0x8009B228 = gPiMgrCmdQ; // type:OSMesgQueue size:0x18
0x8009B240 = gViConfigMode; // type:OSViMode size:0x50
0x8009B290 = D_8009B290; // type:u8 size:0x1
0x8009B2A0 = sDmaMgrStackInfo; // type:StackEntry size:0x1c
0x8009B2BC = numDmaEntries; // type:u16 size:0x2
0x8009B2C0 = sDmaMgrMsgQueue; // type:OSMesgQueue size:0x18
0x8009B2D8 = sDmaMgrMsgs; // type:OSMesg size:0x80
0x8009B358 = sDmaMgrThread; // type:OSThread size:0x1b0
0x8009B508 = sDmaMgrStack; // type:u8 size:0x500
0x8009BA10 = sYaz0DataBuffer; // type:u8 size:0x400
0x8009BE10 = sYaz0CurDataEnd; // type:u8* size:0x4
0x8009BE14 = sYaz0CurRomStart; // type:u32 size:0x4
0x8009BE18 = sYaz0CurSize; // type:u32 size:0x4
0x8009BE1C = sYaz0MaxPtr; // type:u8* size:0x4
0x8009BE20 = gYaz0DecompressDstEnd; // type:void* size:0x4
0x8009BE30 = D_8009BE30; // type:UNK_TYPE4 size:0x4
0x8009BE34 = D_8009BE34; // type:UNK_TYPE4 size:0x4
0x8009BE38 = romInfoFaultClient; // type:FaultClient size:0x10
0x8009BE50 = sFaultContext; // type:FaultThreadStruct* size:0x4
0x8009BE54 = D_8009BE54; // type:f32 size:0x4
0x8009BE58 = faultCustomOptions; // type:u32 size:0x4
0x8009BE5C = faultCopyToLog; // type:u32 size:0x4
0x8009BE60 = sFaultStack; // type:u8 size:0x600
0x8009C460 = sFaultThreadInfo; // type:StackEntry size:0x1c
0x8009C480 = gFaultStruct; // type:FaultThreadStruct size:0x848
0x8009CCD0 = sFaultDrawerStruct; // type:FaultDrawer size:0x3c
0x8009CD10 = D_8009CD10; // type:UNK_TYPE4 size:0x4
0x8009CD20 = gSystemArena; // type:Arena size:0x24
0x8009CD50 = sRandFloat; // type:f32 size:0x4
0x8009CD60 = sArenaLockMsg; // type:OSMesg size:0x4
0x8009CD70 = tmp_task; // type:OSTask size:0x40
0x8009CDB0 = osPifBuffers; // type:OSPifRam size:0x100
0x8009CEB0 = siAccessBuf; // type:OSMesg size:0x4
0x8009CEB8 = __osSiAccessQueue; // type:OSMesgQueue size:0x18
0x8009CED0 = __osContPifRam; // type:OSPifRam size:0x40
0x8009CF0C = D_8009CF0C; // type:UNK_TYPE1 size:0x1
0x8009CF10 = __osContLastPoll; // type:u8 size:0x1
0x8009CF11 = __osMaxControllers; // type:u8 size:0x1
0x8009CF18 = __osEepromTimer; // type:OSTimer size:0x20
0x8009CF38 = D_8009CF38; // type:OSMesgQueue size:0x18
0x8009CF50 = D_8009CF50; // type:OSMesg size:0x4
0x8009CF60 = D_8009CF60; // type:UNK_TYPE1 size:0x1
0x8009CF70 = D_8009CF70; // type:UNK_TYPE4 size:0x4
0x8009CF80 = __osThreadSave; // type:OSThread size:0x1b0
0x8009D130 = D_8009D130; // type:OSPiHandle size:0x74
0x8009D1A8 = D_8009D1A8; // type:OSPiHandle size:0x74
0x8009D220 = D_8009D220; // type:OSThread size:0x1b0
0x8009D3D0 = piManagerStack; // type:u8 size:0x1000
0x8009E3D0 = D_8009E3D0; // type:OSMesgQueue size:0x18
0x8009E3E8 = D_8009E3E8; // type:OSMesg size:0x4
0x8009E3F0 = D_8009E3F0; // type:OSMesg size:0x4
0x8009E3F8 = __osPiAccessQueue; // type:OSMesgQueue size:0x18
0x8009E410 = __osPfsInodeCache; // type:__OSInode size:0x100
0x8009E510 = __osEventStateTab; // type:__OSEventState size:0x80
0x8009E590 = D_8009E590; // type:OSTimer size:0x20
0x8009E5B0 = __osCurrentTime; // type:OSTime size:0x8
0x8009E5B8 = __osBaseCounter; // type:u32 size:0x4
0x8009E5BC = __osViIntrCount; // type:u32 size:0x4
0x8009E5C0 = __osTimerCounter; // type:u32 size:0x4
0x8009E5D0 = __osPfsPifRam; // type:OSPifRam size:0x40
0x8009E610 = CartRomHandle; // type:OSPiHandle size:0x74
0x8009E690 = viThread; // type:OSThread size:0x1b0
0x8009E840 = viThreadStack; // type:u8 size:0x1000
0x8009F840 = viEventQueue; // type:OSMesgQueue size:0x18
0x8009F858 = viEventBuf; // type:OSMesg size:0x14
0x8009F870 = viRetraceMsg; // type:OSIoMesg size:0x18
0x8009F888 = viCounterMsg; // type:OSIoMesg size:0x18
0x8009F8A0 = viRetrace; // type:u16 size:0x2
0x8009F8B0 = dmadata; // type:DmaEntry size:0x6200
0x80186028 = D_80186028; // type:s16 size:0xa48
0x801AAAB0 = aspMainTextStart; // type:UNK_TYPE1 size:0x1
0x801ABAB0 = gspS2DEX2_fifoTextStart; // type:UNK_TYPE1 size:0x1
0x801AD370 = njpgdspMainTextStart; // type:UNK_TYPE1 size:0x1
0x801ADE60 = En_A_Obj_InitVars; // type:ActorInit size:0x20
0x801ADE80 = enAObjCylinderInit; // type:ColliderCylinderInit size:0x2c
0x801ADEAC = enAObjInitVar; // type:ActorInitVar size:0x4
0x801ADEB0 = enAObjDisplayLists; // type:u32 size:0x8
0x801ADEC0 = En_Item00_InitVars; // type:ActorInit size:0x20
0x801ADEE0 = enItem00CylinderInit; // type:ColliderCylinderInit size:0x2c
0x801ADF0C = enItem00InitVars; // type:ActorInitVar size:0x4
0x801ADF10 = sEffectPrimColor; // type:ColorRGBA8 size:0x4
0x801ADF14 = sEffectEnvColor; // type:ColorRGBA8 size:0x4
0x801ADF18 = sEffectVelocity; // type:Vec3f size:0xc
0x801ADF24 = sEffectAccel; // type:Vec3f size:0xc
0x801ADF30 = sRupeeTextures; // type:UNK_PTR size:0x14
0x801ADF44 = sItemDropTextures; // type:UNK_PTR size:0x30
0x801ADF74 = sDropTable; // type:u8 size:0x110
0x801AE084 = sDropTableAmounts; // type:u8 size:0x110
0x801AE194 = D_801AE194; // type:s32 size:0x80
0x801AE214 = D_801AE214; // type:u8 size:0x20
0x801AE240 = D_801AE240; // type:UNK_TYPE4 size:0x4
0x801AE250 = D_801AE250; // type:UNK_TYPE4 size:0x4
0x801AE260 = D_801AE260; // type:UNK_PTR size:0xc
0x801AE26C = D_801AE26C; // type:UNK_TYPE4 size:0x4
0x801AE27C = D_801AE27C; // type:UNK_TYPE4 size:0x4
0x801AE28C = D_801AE28C; // type:UNK_TYPE4 size:0x4
0x801AE29C = D_801AE29C; // type:UNK_TYPE4 size:0x4
0x801AE2AC = D_801AE2AC; // type:UNK_TYPE4 size:0x4
0x801AE2BC = D_801AE2BC; // type:UNK_TYPE4 size:0x4
0x801AE2CC = D_801AE2CC; // type:UNK_TYPE4 size:0x4
0x801AE2DC = D_801AE2DC; // type:UNK_TYPE4 size:0x4
0x801AE2F0 = sEffectShieldParticleVertices; // type:F3DVertex size:0x40
0x801AE330 = sEffectInfoTable; // type:EffectInfo size:0x64
0x801AE3A0 = sEffectSsInfo; // type:EffectSsInfo size:0xc
0x801AE3B0 = D_801AE3B0; // type:Color_RGBA8 size:0x4
0x801AE3B4 = D_801AE3B4; // type:Color_RGBA8 size:0x4
0x801AE3B8 = D_801AE3B8; // type:Color_RGBA8 size:0x4
0x801AE3BC = D_801AE3BC; // type:Color_RGBA8 size:0x4
0x801AE3C0 = D_801AE3C0; // type:Color_RGBA8 size:0x4
0x801AE3C4 = D_801AE3C4; // type:Color_RGBA8 size:0x4
0x801AE3C8 = D_801AE3C8; // type:Color_RGBA8 size:0x4
0x801AE3CC = D_801AE3CC; // type:Color_RGBA8 size:0x4
0x801AE3D0 = D_801AE3D0; // type:Color_RGBA8 size:0x4
0x801AE3D4 = D_801AE3D4; // type:Color_RGBA8 size:0x4
0x801AE3D8 = D_801AE3D8; // type:UNK_TYPE4 size:0x4
0x801AE3DC = D_801AE3DC; // type:UNK_TYPE4 size:0x4
0x801AE3E0 = D_801AE3E0; // type:Vec3f size:0xC
0x801AE3EC = D_801AE3EC; // type:Vec3f size:0xC
0x801AE3F8 = D_801AE3F8; // type:Vec3f size:0xC
0x801AE404 = D_801AE404; // type:Vec3f size:0x78
0x801AE47C = D_801AE47C; // type:Color_RGBA8 size:0x4
0x801AE480 = D_801AE480; // type:Color_RGBA8 size:0x4
0x801AE484 = D_801AE484; // type:Color_RGBA8 size:0x4
0x801AE488 = D_801AE488; // type:Color_RGBA8 size:0x4
0x801AE48C = D_801AE48C; // type:Color_RGBA8 size:0x4
0x801AE490 = D_801AE490; // type:Color_RGBA8 size:0x10
0x801AE4A0 = gParticleOverlayTable; // type:EffectSsOverlay size:0x444
0x801AE8F0 = sFlagEntries; // type:FlagSetEntry size:0x8
0x801AEC70 = sEntryIndex; // type:s32 size:0x4
0x801AEC74 = sCurrentBit; // type:u32 size:0x4
0x801AEC78 = sTimer; // type:s32 size:0x4
0x801AEC80 = D_801AEC80; // type:Color_RGBA8 size:0x4
0x801AEC84 = sTatlColorList; // type:TatlColor size:0x68
0x801AECEC = actorMovementScale; // type:f32 size:0x4
0x801AECF0 = gTargetRanges; // type:f32 size:0x58
0x801AED48 = D_801AED48; // type:s16 size:0x10
0x801AED58 = D_801AED58; // type:UNK_TYPE4 size:0x4
0x801AED88 = actorDefaultHitColor; // type:Color_RGBA8 size:0x4
0x801AED8C = D_801AED8C; // type:UNK_TYPE1 size:0x1
0x801AED98 = D_801AED98; // type:Vec3f size:0xC
0x801AEDA4 = D_801AEDA4; // type:UNK_TYPE4 size:0x4
0x801AEDB0 = D_801AEDB0; // type:UNK_TYPE1 size:0x1
0x801AEDD4 = D_801AEDD4; // type:UNK_TYPE4 size:0x4
0x801AEE28 = D_801AEE28; // type:UNK_TYPE4 size:0x4
0x801AEE30 = D_801AEE30; // type:UNK_TYPE4 size:0x4
0x801AEE38 = D_801AEE38; // type:struct_801AEE38 size:0x150
0x801AEF88 = D_801AEF88; // type:UNK_TYPE1 size:0x1
0x801AEFA0 = D_801AEFA0; // type:UNK_TYPE1 size:0x1
0x801AEFA8 = sElectricSparkTextures; // type:UNK_TYPE1 size:0x1
0x801AEFB8 = D_801AEFB8; // type:UNK_TYPE1 size:0x1
0x801AEFBC = D_801AEFBC; // type:UNK_TYPE1 size:0x1
0x801AEFC0 = D_801AEFC0; // type:UNK_TYPE1 size:0x1
0x801AEFD0 = gActorOverlayTable; // type:ActorOverlay size:0x5640
0x801B4610 = gMaxActorId; // type:s32 size:0x4
0x801B46DC = sSceneSubdivisionList; // type:BgCheckSceneSubdivisionEntry size:0x24
0x801B4700 = sCustomDynapolyMem; // type:BgSpecialSceneMaxObjects size:0x8
0x801B4708 = D_801B4708; // type:UNK_TYPE1 size:0x1
0x801B4710 = sSetNormal0ModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B4738 = sSetNormal0ModeTargetData; // type:UNK_TYPE1 size:0x1
0x801B4768 = sSetNormal0ModeFollowTargetData; // type:UNK_TYPE1 size:0x1
0x801B4798 = sSetNormal0ModeBattleData; // type:UNK_TYPE1 size:0x1
0x801B47CC = sSetNormal0ModeFirstPersonData; // type:UNK_TYPE1 size:0x1
0x801B47F0 = sSetNormal0ModeTalkData; // type:UNK_TYPE1 size:0x1
0x801B4824 = sSetNormal0ModeClimbData; // type:UNK_TYPE1 size:0x1
0x801B4848 = sSetNormal0ModeBowArrowData; // type:UNK_TYPE1 size:0x1
0x801B486C = sSetNormal0ModeBowArrowZData; // type:UNK_TYPE1 size:0x1
0x801B4890 = sSetNormal0ModeHookshotData; // type:UNK_TYPE1 size:0x1
0x801B48B0 = sSetNormal0ModeBoomerangData; // type:UNK_TYPE1 size:0x1
0x801B48D4 = sSetNormal0ModeSlingshotData; // type:UNK_TYPE1 size:0x1
0x801B48F8 = sSetNormal0ModeClimbZData; // type:UNK_TYPE1 size:0x1
0x801B4710 = sSetNormal0ModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B4738 = sSetNormal0ModeTargetData; // type:UNK_TYPE1 size:0x1
0x801B4768 = sSetNormal0ModeFollowTargetData; // type:UNK_TYPE1 size:0x1
0x801B4798 = sSetNormal0ModeBattleData; // type:UNK_TYPE1 size:0x1
0x801B47CC = sSetNormal0ModeFirstPersonData; // type:UNK_TYPE1 size:0x1
0x801B47F0 = sSetNormal0ModeTalkData; // type:UNK_TYPE1 size:0x1
0x801B4824 = sSetNormal0ModeClimbData; // type:UNK_TYPE1 size:0x1
0x801B4848 = sSetNormal0ModeBowArrowData; // type:UNK_TYPE1 size:0x1
0x801B486C = sSetNormal0ModeBowArrowZData; // type:UNK_TYPE1 size:0x1
0x801B4890 = sSetNormal0ModeHookshotData; // type:UNK_TYPE1 size:0x1
0x801B48B0 = sSetNormal0ModeBoomerangData; // type:UNK_TYPE1 size:0x1
0x801B48D4 = sSetNormal0ModeSlingshotData; // type:UNK_TYPE1 size:0x1
0x801B48F8 = sSetNormal0ModeClimbZData; // type:UNK_TYPE1 size:0x1
0x801B491C = sSetNormal0ModeJumpData; // type:UNK_TYPE1 size:0x1
0x801B4944 = sSetNormal0ModeHangData; // type:UNK_TYPE1 size:0x1
0x801B4974 = sSetNormal0ModeHangZData; // type:UNK_TYPE1 size:0x1
0x801B49A4 = sSetNormal0ModeFreeFallData; // type:UNK_TYPE1 size:0x1
0x801B49D4 = sSetNormal0ModeChargeData; // type:UNK_TYPE1 size:0x1
0x801B4A04 = sSetNormal0ModeChargeZData; // type:UNK_TYPE1 size:0x1
0x801B4A34 = sSetNormal0ModeStillData; // type:UNK_TYPE1 size:0x1
0x801B4A5C = sSetNormal0ModePushPullData; // type:UNK_TYPE1 size:0x1
0x801B4A8C = sSetNormal0ModeFollowBoomerangData; // type:UNK_TYPE1 size:0x1
0x801B4ABC = sSetNormal0ModeDekuShootData; // type:UNK_TYPE1 size:0x1
0x801B4AE0 = sSetNormal0ModeGoronDashData; // type:UNK_TYPE1 size:0x1
0x801B4B08 = sSetNormal0ModeDekuHideData; // type:UNK_TYPE1 size:0x1
0x801B4B38 = sSetNormal0ModeDekuFlyData; // type:UNK_TYPE1 size:0x1
0x801B4B60 = sSetNormal0ModeDekuFlyZData; // type:UNK_TYPE1 size:0x1
0x801B4B90 = sSetNormal0ModeGoronJumpData; // type:UNK_TYPE1 size:0x1
0x801B4BB8 = sSetNormal0ModeZoraFinData; // type:UNK_TYPE1 size:0x1
0x801B4BDC = sSetNormal3ModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B4C04 = sSetNormal3ModeTargetData; // type:UNK_TYPE1 size:0x1
0x801B4C34 = sSetNormal3ModeFreeFallData; // type:UNK_TYPE1 size:0x1
0x801B4C5C = sSetNormal3ModeGoronJumpData; // type:UNK_TYPE1 size:0x1
0x801B4C84 = sSetNormal3ModeDekuFlyData; // type:UNK_TYPE1 size:0x1
0x801B4CAC = sSetNormal3ModeDekuHideData; // type:UNK_TYPE1 size:0x1
0x801B4CD4 = sSetNormal3ModeStillData; // type:UNK_TYPE1 size:0x1
0x801B4CFC = sSetNormal3ModeGoronDashData; // type:UNK_TYPE1 size:0x1
0x801B4D24 = sSetPivotDivingModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B4D34 = sSetPivotDivingModeTargetData; // type:UNK_TYPE1 size:0x1
0x801B4D44 = sSetHorseModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B4D68 = sSetHorseModeTargetData; // type:UNK_TYPE1 size:0x1
0x801B4D8C = sSetHorseModeJumpData; // type:UNK_TYPE1 size:0x1
0x801B4DB0 = sSetHorseModeBowArrowData; // type:UNK_TYPE1 size:0x1
0x801B4DD4 = sSetHorseModeSlingShotData; // type:UNK_TYPE1 size:0x1
0x801B4DF8 = sSetHorseModeBattleData; // type:UNK_TYPE1 size:0x1
0x801B4E2C = sSetHorseModeFollowTargetData; // type:UNK_TYPE1 size:0x1
0x801B4E5C = sSetHorseModeTalkData; // type:UNK_TYPE1 size:0x1
0x801B4E90 = sSetHorseModeStillData; // type:UNK_TYPE1 size:0x1
0x801B4EB4 = sSetZoraDivingModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B4ED8 = sSetPrerendFixedModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B4EDC = sSetPrerendPivotModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B4EE4 = sSetDoorCModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B4EF0 = D_801B4EF0; // type:UNK_TYPE1 size:0x1
0x801B4EF4 = sSetCutscenesModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B4EF8 = D_801B4EF8; // type:UNK_TYPE1 size:0x1
0x801B4F20 = D_801B4F20; // type:UNK_TYPE1 size:0x1
0x801B4F50 = D_801B4F50; // type:UNK_TYPE1 size:0x1
0x801B4F78 = D_801B4F78; // type:UNK_TYPE1 size:0x1
0x801B4FA0 = sSetNormal1ModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B4FC8 = sSetNormal1ModeStillData; // type:UNK_TYPE1 size:0x1
0x801B4FF0 = D_801B4FF0; // type:UNK_TYPE1 size:0x1
0x801B5018 = D_801B5018; // type:UNK_TYPE1 size:0x1
0x801B5034 = D_801B5034; // type:UNK_TYPE1 size:0x1
0x801B5050 = D_801B5050; // type:UNK_TYPE1 size:0x1
0x801B506C = D_801B506C; // type:UNK_TYPE1 size:0x1
0x801B507C = sSetSpiralDoorModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B5094 = sSetDungeon0ModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B50BC = sSetDungeon0ModeTargetData; // type:UNK_TYPE1 size:0x1
0x801B50EC = sSetDungeon0ModeFollowTargetData; // type:UNK_TYPE1 size:0x1
0x801B511C = sSetDungeon0ModeBattleData; // type:UNK_TYPE1 size:0x1
0x801B5150 = sSetDungeon0ModeFollowBoomerangData; // type:UNK_TYPE1 size:0x1
0x801B5180 = sSetDungeon0ModeJumpData; // type:UNK_TYPE1 size:0x1
0x801B51A8 = sSetDungeon0ModeFreeFallData; // type:UNK_TYPE1 size:0x1
0x801B51D8 = sSetDungeon0ModeClimbData; // type:UNK_TYPE1 size:0x1
0x801B51FC = sSetDungeon0ModeClimbZData; // type:UNK_TYPE1 size:0x1
0x801B5220 = sSetDungeon0ModeChargeData; // type:UNK_TYPE1 size:0x1
0x801B5250 = sSetDungeon0ModeChargeZData; // type:UNK_TYPE1 size:0x1
0x801B5280 = sSetDungeon0ModeHangData; // type:UNK_TYPE1 size:0x1
0x801B52B0 = sSetDungeon0ModeHangZData; // type:UNK_TYPE1 size:0x1
0x801B52E0 = sSetDungeon0ModeStillData; // type:UNK_TYPE1 size:0x1
0x801B5308 = sSetDungeon0ModePushPullData; // type:UNK_TYPE1 size:0x1
0x801B5338 = D_801B5338; // type:UNK_TYPE1 size:0x1
0x801B535C = D_801B535C; // type:UNK_TYPE1 size:0x1
0x801B5380 = D_801B5380; // type:UNK_TYPE1 size:0x1
0x801B53A4 = D_801B53A4; // type:UNK_TYPE1 size:0x1
0x801B53C8 = D_801B53C8; // type:UNK_TYPE1 size:0x1
0x801B53EC = D_801B53EC; // type:UNK_TYPE1 size:0x1
0x801B5410 = D_801B5410; // type:UNK_TYPE1 size:0x1
0x801B5434 = D_801B5434; // type:UNK_TYPE1 size:0x1
0x801B5458 = D_801B5458; // type:UNK_TYPE1 size:0x1
0x801B547C = D_801B547C; // type:UNK_TYPE1 size:0x1
0x801B54A0 = D_801B54A0; // type:UNK_TYPE1 size:0x1
0x801B54C4 = D_801B54C4; // type:UNK_TYPE1 size:0x1
0x801B54E8 = D_801B54E8; // type:UNK_TYPE1 size:0x1
0x801B550C = D_801B550C; // type:UNK_TYPE1 size:0x1
0x801B5530 = D_801B5530; // type:UNK_TYPE1 size:0x1
0x801B5554 = D_801B5554; // type:UNK_TYPE1 size:0x1
0x801B5578 = D_801B5578; // type:UNK_TYPE1 size:0x1
0x801B559C = D_801B559C; // type:UNK_TYPE1 size:0x1
0x801B55C0 = D_801B55C0; // type:UNK_TYPE1 size:0x1
0x801B55E4 = D_801B55E4; // type:UNK_TYPE1 size:0x1
0x801B5608 = D_801B5608; // type:UNK_TYPE1 size:0x1
0x801B562C = D_801B562C; // type:UNK_TYPE1 size:0x1
0x801B5650 = D_801B5650; // type:UNK_TYPE1 size:0x1
0x801B5674 = D_801B5674; // type:UNK_TYPE1 size:0x1
0x801B5698 = D_801B5698; // type:UNK_TYPE1 size:0x1
0x801B56BC = sSetDeathModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B56E0 = sSetDeathModeJumpData; // type:UNK_TYPE1 size:0x1
0x801B5704 = sSetDeathModeDekuShootData; // type:UNK_TYPE1 size:0x1
0x801B5728 = D_801B5728; // type:UNK_TYPE1 size:0x1
0x801B574C = D_801B574C; // type:UNK_TYPE1 size:0x1
0x801B5770 = sSetLongChestOpeningModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B577C = sSetDungeon1ModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B57A4 = sSetDungeon1ModeJumpData; // type:UNK_TYPE1 size:0x1
0x801B57CC = sSetDungeon1ModeStillData; // type:UNK_TYPE1 size:0x1
0x801B57F4 = sSetDungeon1ModePushPullData; // type:UNK_TYPE1 size:0x1
0x801B5824 = D_801B5824; // type:UNK_TYPE1 size:0x1
0x801B5834 = D_801B5834; // type:UNK_TYPE1 size:0x1
0x801B5844 = sSetMazeModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B5864 = sSetRemoteBombModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B5884 = D_801B5884; // type:UNK_TYPE1 size:0x1
0x801B58A0 = D_801B58A0; // type:UNK_TYPE1 size:0x1
0x801B58BC = D_801B58BC; // type:UNK_TYPE1 size:0x1
0x801B58D8 = D_801B58D8; // type:UNK_TYPE1 size:0x1
0x801B58F4 = D_801B58F4; // type:UNK_TYPE1 size:0x1
0x801B5904 = sSetTowerClimbModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B5928 = sSetTowerClimbModeJumpData; // type:UNK_TYPE1 size:0x1
0x801B5950 = sSetTowerClimbModeStillData; // type:UNK_TYPE1 size:0x1
0x801B5978 = D_801B5978; // type:UNK_TYPE1 size:0x1
0x801B59A8 = D_801B59A8; // type:UNK_TYPE1 size:0x1
0x801B59D0 = D_801B59D0; // type:UNK_TYPE1 size:0x1
0x801B59F4 = D_801B59F4; // type:UNK_TYPE1 size:0x1
0x801B5A00 = D_801B5A00; // type:UNK_TYPE1 size:0x1
0x801B5A0C = sSetBoatCruiseModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B5A30 = sSetVerticalClimbModeClimbData; // type:UNK_TYPE1 size:0x1
0x801B5A64 = D_801B5A64; // type:UNK_TYPE1 size:0x1
0x801B5A94 = sSetDungeon2ModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B5ABC = sSetDungeon2ModeBattleData; // type:UNK_TYPE1 size:0x1
0x801B5AF0 = sSetDungeon2ModeJumpData; // type:UNK_TYPE1 size:0x1
0x801B5B18 = sSetDungeon2ModeStillData; // type:UNK_TYPE1 size:0x1
0x801B5B40 = sSetDungeon2ModePushPullData; // type:UNK_TYPE1 size:0x1
0x801B5B70 = sSetBossOdolwaModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B5B98 = sSetBossOdolwaModeFollowTargetData; // type:UNK_TYPE1 size:0x1
0x801B5BC8 = sSetBossOdolwaModeTalkData; // type:UNK_TYPE1 size:0x1
0x801B5BFC = sSetBossOdolwaModeBattleData; // type:UNK_TYPE1 size:0x1
0x801B5C30 = sSetBossOdolwaModeJumpData; // type:UNK_TYPE1 size:0x1
0x801B5C58 = sSetBossOdolwaModeStillData; // type:UNK_TYPE1 size:0x1
0x801B5C80 = D_801B5C80; // type:UNK_TYPE1 size:0x1
0x801B5CB0 = D_801B5CB0; // type:UNK_TYPE1 size:0x1
0x801B5CCC = D_801B5CCC; // type:UNK_TYPE1 size:0x1
0x801B5CE8 = sSetMiniBossModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B5D10 = sSetMiniBossModeFollowTargetData; // type:UNK_TYPE1 size:0x1
0x801B5D40 = sSetMiniBossModeBattleData; // type:UNK_TYPE1 size:0x1
0x801B5D74 = sSetMiniBossModeJumpData; // type:UNK_TYPE1 size:0x1
0x801B5D9C = sSetMiniBossModeStillData; // type:UNK_TYPE1 size:0x1
0x801B5DC4 = D_801B5DC4; // type:UNK_TYPE1 size:0x1
0x801B5DD4 = sSetTreasureChestMinigameModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B5DFC = sSetTreasureChestMinigameModeTargetData; // type:UNK_TYPE1 size:0x1
0x801B5E2C = D_801B5E2C; // type:UNK_TYPE1 size:0x1
0x801B5E48 = D_801B5E48; // type:UNK_TYPE1 size:0x1
0x801B5E64 = D_801B5E64; // type:UNK_TYPE1 size:0x1
0x801B5E8C = D_801B5E8C; // type:UNK_TYPE1 size:0x1
0x801B5EB4 = sSetDungeon3ModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B5EDC = sSetDungeon3ModeTargetData; // type:UNK_TYPE1 size:0x1
0x801B5F0C = sSetDungeon3ModeJumpData; // type:UNK_TYPE1 size:0x1
0x801B5F34 = sSetDungeon3ModeStillData; // type:UNK_TYPE1 size:0x1
0x801B5F5C = sSetDungeon3ModePushPullData; // type:UNK_TYPE1 size:0x1
0x801B5F8C = sSetTelescopeModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B5FB0 = sSetTelescopeModeTargetData; // type:UNK_TYPE1 size:0x1
0x801B5FD4 = sSetTelescopeModeFirstPersonData; // type:UNK_TYPE1 size:0x1
0x801B5FF8 = sSetTelescopeModeDekuHideData; // type:UNK_TYPE1 size:0x1
0x801B601C = D_801B601C; // type:UNK_TYPE1 size:0x1
0x801B6044 = D_801B6044; // type:UNK_TYPE1 size:0x1
0x801B6074 = D_801B6074; // type:UNK_TYPE1 size:0x1
0x801B60A4 = D_801B60A4; // type:UNK_TYPE1 size:0x1
0x801B60D8 = D_801B60D8; // type:UNK_TYPE1 size:0x1
0x801B610C = D_801B610C; // type:UNK_TYPE1 size:0x1
0x801B6130 = D_801B6130; // type:UNK_TYPE1 size:0x1
0x801B6154 = D_801B6154; // type:UNK_TYPE1 size:0x1
0x801B617C = D_801B617C; // type:UNK_TYPE1 size:0x1
0x801B61AC = D_801B61AC; // type:UNK_TYPE1 size:0x1
0x801B61DC = D_801B61DC; // type:UNK_TYPE1 size:0x1
0x801B620C = D_801B620C; // type:UNK_TYPE1 size:0x1
0x801B623C = D_801B623C; // type:UNK_TYPE1 size:0x1
0x801B626C = D_801B626C; // type:UNK_TYPE1 size:0x1
0x801B6294 = D_801B6294; // type:UNK_TYPE1 size:0x1
0x801B62C4 = D_801B62C4; // type:UNK_TYPE1 size:0x1
0x801B62F4 = D_801B62F4; // type:UNK_TYPE1 size:0x1
0x801B631C = D_801B631C; // type:UNK_TYPE1 size:0x1
0x801B634C = D_801B634C; // type:UNK_TYPE1 size:0x1
0x801B6374 = D_801B6374; // type:UNK_TYPE1 size:0x1
0x801B63A4 = D_801B63A4; // type:UNK_TYPE1 size:0x1
0x801B63CC = D_801B63CC; // type:UNK_TYPE1 size:0x1
0x801B63FC = D_801B63FC; // type:UNK_TYPE1 size:0x1
0x801B6418 = D_801B6418; // type:UNK_TYPE1 size:0x1
0x801B6434 = D_801B6434; // type:UNK_TYPE1 size:0x1
0x801B645C = D_801B645C; // type:UNK_TYPE1 size:0x1
0x801B648C = D_801B648C; // type:UNK_TYPE1 size:0x1
0x801B64B4 = D_801B64B4; // type:UNK_TYPE1 size:0x1
0x801B64D8 = D_801B64D8; // type:UNK_TYPE1 size:0x1
0x801B64FC = D_801B64FC; // type:UNK_TYPE1 size:0x1
0x801B652C = D_801B652C; // type:UNK_TYPE1 size:0x1
0x801B655C = D_801B655C; // type:UNK_TYPE1 size:0x1
0x801B6584 = D_801B6584; // type:UNK_TYPE1 size:0x1
0x801B65AC = D_801B65AC; // type:UNK_TYPE1 size:0x1
0x801B65DC = D_801B65DC; // type:UNK_TYPE1 size:0x1
0x801B660C = D_801B660C; // type:UNK_TYPE1 size:0x1
0x801B6640 = D_801B6640; // type:UNK_TYPE1 size:0x1
0x801B6674 = D_801B6674; // type:UNK_TYPE1 size:0x1
0x801B6698 = D_801B6698; // type:UNK_TYPE1 size:0x1
0x801B66C0 = D_801B66C0; // type:UNK_TYPE1 size:0x1
0x801B66E8 = sSetBossMajoraModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B6710 = sSetBossMajoraModeFollowTargetData; // type:UNK_TYPE1 size:0x1
0x801B6740 = sSetBossMajoraModeBattleData; // type:UNK_TYPE1 size:0x1
0x801B6774 = sSetBossMajoraModeJumpData; // type:UNK_TYPE1 size:0x1
0x801B679C = sSetBossMajoraModeStillData; // type:UNK_TYPE1 size:0x1
0x801B67C4 = sSetBossTwinmoldModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B67EC = sSetBossTwinmoldModeTargetData; // type:UNK_TYPE1 size:0x1
0x801B681C = sSetBossTwinmoldModeFollowTargetData; // type:UNK_TYPE1 size:0x1
0x801B684C = sSetBossTwinmoldModeBattleData; // type:UNK_TYPE1 size:0x1
0x801B6880 = sSetBossTwinmoldModeJumpData; // type:UNK_TYPE1 size:0x1
0x801B68A8 = sSetBossTwinmoldModeStillData; // type:UNK_TYPE1 size:0x1
0x801B68D0 = sSetBossGohtModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B68F8 = sSetBossGohtModeBattleData; // type:UNK_TYPE1 size:0x1
0x801B692C = sSetBossGohtModeJumpData; // type:UNK_TYPE1 size:0x1
0x801B6954 = sSetBossGohtModeStillData; // type:UNK_TYPE1 size:0x1
0x801B697C = sSetBossGohtModeGoronDashData; // type:UNK_TYPE1 size:0x1
0x801B69A4 = sSetBossGyorgModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B69CC = sSetBossGyorgModeFollowTargetData; // type:UNK_TYPE1 size:0x1
0x801B69FC = sSetBossGyorgModeBattleData; // type:UNK_TYPE1 size:0x1
0x801B6A30 = sSetBossGyorgModeGoronJumpData; // type:UNK_TYPE1 size:0x1
0x801B6A58 = sSetBossGyorgModeDekuFlyData; // type:UNK_TYPE1 size:0x1
0x801B6A80 = sSetBossGyorgModeDekuHideData; // type:UNK_TYPE1 size:0x1
0x801B6AA8 = sSetBossGyorgModeStillData; // type:UNK_TYPE1 size:0x1
0x801B6AD0 = sSetPinnacleRockModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B6AF8 = sSetPinnacleRockModeTargetData; // type:UNK_TYPE1 size:0x1
0x801B6B28 = sSetPinnacleRockModeGoronJumpData; // type:UNK_TYPE1 size:0x1
0x801B6B50 = sSetPinnacleRockModeDekuFlyData; // type:UNK_TYPE1 size:0x1
0x801B6B78 = sSetPinnacleRockModeDekuHideData; // type:UNK_TYPE1 size:0x1
0x801B6BA0 = sSetPinnacleRockModeStillData; // type:UNK_TYPE1 size:0x1
0x801B6BC8 = sSetPinnacleRockModeGoronDashData; // type:UNK_TYPE1 size:0x1
0x801B6BF0 = sSetNormal2ModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B6C18 = sSetNormal2ModeTargetData; // type:UNK_TYPE1 size:0x1
0x801B6C48 = sSetNormal2ModeJumpData; // type:UNK_TYPE1 size:0x1
0x801B6C70 = sSetNormal2ModeStillData; // type:UNK_TYPE1 size:0x1
0x801B6C98 = D_801B6C98; // type:UNK_TYPE1 size:0x1
0x801B6CC0 = D_801B6CC0; // type:UNK_TYPE1 size:0x1
0x801B6CF0 = D_801B6CF0; // type:UNK_TYPE1 size:0x1
0x801B6D24 = D_801B6D24; // type:UNK_TYPE1 size:0x1
0x801B6D4C = D_801B6D4C; // type:UNK_TYPE1 size:0x1
0x801B6D74 = D_801B6D74; // type:UNK_TYPE1 size:0x1
0x801B6D90 = sSetWhirlpoolModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B6DB8 = sSetWhirlpoolModeFreeFallData; // type:UNK_TYPE1 size:0x1
0x801B6DE0 = sSetWhirlpoolModeGoronJumpData; // type:UNK_TYPE1 size:0x1
0x801B6E08 = sSetWhirlpoolModeDekuFlyData; // type:UNK_TYPE1 size:0x1
0x801B6E30 = sSetWhirlpoolModeDekuHideData; // type:UNK_TYPE1 size:0x1
0x801B6E58 = sSetWhirlpoolModeGoronDashData; // type:UNK_TYPE1 size:0x1
0x801B6E80 = sSetCuccoShackModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B6EA8 = sSetCuccoShackModeStillData; // type:UNK_TYPE1 size:0x1
0x801B6ED0 = sSetCuccoShackModeDekuHideData; // type:UNK_TYPE1 size:0x1
0x801B6EF8 = sSetGiantModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B6F20 = sSetGiantModeTargetData; // type:UNK_TYPE1 size:0x1
0x801B6F50 = sSetGiantModeJumpData; // type:UNK_TYPE1 size:0x1
0x801B6F78 = sSetGiantModeStillData; // type:UNK_TYPE1 size:0x1
0x801B6FA0 = D_801B6FA0; // type:UNK_TYPE1 size:0x1
0x801B6FB0 = D_801B6FB0; // type:UNK_TYPE1 size:0x1
0x801B6FD8 = D_801B6FD8; // type:UNK_TYPE1 size:0x1
0x801B7008 = D_801B7008; // type:UNK_TYPE1 size:0x1
0x801B703C = D_801B703C; // type:UNK_TYPE1 size:0x1
0x801B7064 = D_801B7064; // type:UNK_TYPE1 size:0x1
0x801B708C = D_801B708C; // type:UNK_TYPE1 size:0x1
0x801B70BC = D_801B70BC; // type:UNK_TYPE1 size:0x1
0x801B70E4 = D_801B70E4; // type:UNK_TYPE1 size:0x1
0x801B7114 = D_801B7114; // type:UNK_TYPE1 size:0x1
0x801B7148 = D_801B7148; // type:UNK_TYPE1 size:0x1
0x801B7170 = D_801B7170; // type:UNK_TYPE1 size:0x1
0x801B71A0 = D_801B71A0; // type:UNK_TYPE1 size:0x1
0x801B71D4 = D_801B71D4; // type:UNK_TYPE1 size:0x1
0x801B7204 = D_801B7204; // type:UNK_TYPE1 size:0x1
0x801B7210 = D_801B7210; // type:UNK_TYPE1 size:0x1
0x801B7244 = sSetNormal4ModeTalkData; // type:UNK_TYPE1 size:0x1
0x801B7278 = sSetElegyShellModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B729C = sSetElegyShellModeJumpData; // type:UNK_TYPE1 size:0x1
0x801B72C0 = sSetElegyShellModeDekuShootData; // type:UNK_TYPE1 size:0x1
0x801B72E4 = sSetElegyShellModeGoronDashData; // type:UNK_TYPE1 size:0x1
0x801B7308 = sSetElegyShellModeDekuFlyData; // type:UNK_TYPE1 size:0x1
0x801B732C = sSetDungeon4ModeNormalData; // type:UNK_TYPE1 size:0x1
0x801B7354 = sSetDungeon4ModeTargetData; // type:UNK_TYPE1 size:0x1
0x801B7384 = sSetDungeon4ModeJumpData; // type:UNK_TYPE1 size:0x1
0x801B73AC = sSetDungeon4ModeStillData; // type:UNK_TYPE1 size:0x1
0x801B73D4 = sCamSetNormal0Modes; // type:UNK_TYPE1 size:0x1
0x801B74C4 = sCamSetNormal3Modes; // type:UNK_TYPE1 size:0x1
0x801B759C = sCamSetPivotDivingModes; // type:UNK_TYPE1 size:0x1
0x801B75F4 = sCamSetHorseModes; // type:UNK_TYPE1 size:0x1
0x801B767C = sCamSetZoraDivingModes; // type:UNK_TYPE1 size:0x1
0x801B7684 = sCamSetPreRendFixedModes; // type:UNK_TYPE1 size:0x1
0x801B768C = sCamSetPreRendPivotModes; // type:UNK_TYPE1 size:0x1
0x801B7694 = sCamSetDoorCModes; // type:UNK_TYPE1 size:0x1
0x801B769C = sCamSetDemo0Modes; // type:UNK_TYPE1 size:0x1
0x801B76A4 = sCamSetFree0Modes; // type:UNK_TYPE1 size:0x1
0x801B76AC = sCamSetFukan0Modes; // type:UNK_TYPE1 size:0x1
0x801B777C = sCamSetNormal1Modes; // type:UNK_TYPE1 size:0x1
0x801B784C = sCamSetNanameModes; // type:UNK_TYPE1 size:0x1
0x801B791C = sCamSetCirc0Modes; // type:UNK_TYPE1 size:0x1
0x801B7984 = sCamSetFixed0Modes; // type:UNK_TYPE1 size:0x1
0x801B79EC = sCamSetSpiralDoorModes; // type:UNK_TYPE1 size:0x1
0x801B79F4 = sCamSetDungeon0Modes; // type:UNK_TYPE1 size:0x1
0x801B7AE4 = sCamSetItem0Modes; // type:UNK_TYPE1 size:0x1
0x801B7B14 = sCamSetItem1Modes; // type:UNK_TYPE1 size:0x1
0x801B7B44 = sCamSetItem2Modes; // type:UNK_TYPE1 size:0x1
0x801B7B74 = sCamSetItem3Modes; // type:UNK_TYPE1 size:0x1
0x801B7BA4 = sCamSetNaviModes; // type:UNK_TYPE1 size:0x1
0x801B7BAC = sCamSetWarp0Modes; // type:UNK_TYPE1 size:0x1
0x801B7BDC = sCamSetDeathModes; // type:UNK_TYPE1 size:0x1
0x801B7C0C = sCamSetRebirthModes; // type:UNK_TYPE1 size:0x1
0x801B7C3C = sCamSetLongChestOpeningModes; // type:UNK_TYPE1 size:0x1
0x801B7C44 = sCamSetMaskTransformationModes; // type:UNK_TYPE1 size:0x1
0x801B7C54 = sCamSetAttentionModes; // type:UNK_TYPE1 size:0x1
0x801B7C5C = sCamSetWarp1Modes; // type:UNK_TYPE1 size:0x1
0x801B7C64 = sCamSetDungeon1Modes; // type:UNK_TYPE1 size:0x1
0x801B7D34 = sCamSetFixed1Modes; // type:UNK_TYPE1 size:0x1
0x801B7D3C = sCamSetFixed2Modes; // type:UNK_TYPE1 size:0x1
0x801B7D44 = sCamSetMazeModes; // type:UNK_TYPE1 size:0x1
0x801B7D4C = sCamSetRemoteBombModes; // type:UNK_TYPE1 size:0x1
0x801B7D54 = sCamSetCirc1Modes; // type:UNK_TYPE1 size:0x1
0x801B7D5C = sCamSetCirc2Modes; // type:UNK_TYPE1 size:0x1
0x801B7D64 = sCamSetCirc3Modes; // type:UNK_TYPE1 size:0x1
0x801B7DCC = sCamSetCirc4Modes; // type:UNK_TYPE1 size:0x1
0x801B7DD4 = sCamSetFixed3Modes; // type:UNK_TYPE1 size:0x1
0x801B7E3C = sCamSetTowerClimbModes; // type:UNK_TYPE1 size:0x1
0x801B7F0C = sCamSetParallel0Modes; // type:UNK_TYPE1 size:0x1
0x801B7F14 = sCamSetNormDModes; // type:UNK_TYPE1 size:0x1
0x801B7F1C = sCamSetSubjectDModes; // type:UNK_TYPE1 size:0x1
0x801B7F24 = sCamSetStart0Modes; // type:UNK_TYPE1 size:0x1
0x801B7F2C = sCamSetStart2Modes; // type:UNK_TYPE1 size:0x1
0x801B7F34 = sCamSetStop0Modes; // type:UNK_TYPE1 size:0x1
0x801B7F3C = sCamSetBoatCruiseModes; // type:UNK_TYPE1 size:0x1
0x801B7FAC = sCamSetVerticalClimbModes; // type:UNK_TYPE1 size:0x1
0x801B807C = sCamSetSidedModes; // type:UNK_TYPE1 size:0x1
0x801B8084 = sCamSetDungeon2Modes; // type:UNK_TYPE1 size:0x1
0x801B8154 = sCamSetBossOdolwaModes; // type:UNK_TYPE1 size:0x1
0x801B8224 = sCamSetKeepBackModes; // type:UNK_TYPE1 size:0x1
0x801B82F4 = sCamSetCirc6Modes; // type:UNK_TYPE1 size:0x1
0x801B82FC = sCamSetCirc7Modes; // type:UNK_TYPE1 size:0x1
0x801B8304 = sCamSetMiniBossModes; // type:UNK_TYPE1 size:0x1
0x801B83D4 = sCamSetRFixed1Modes; // type:UNK_TYPE1 size:0x1
0x801B83DC = sCamSetTreasureChestMinigameModes; // type:UNK_TYPE1 size:0x1
0x801B8434 = sCamSetBombBasketModes; // type:UNK_TYPE1 size:0x1
0x801B843C = sCamSetCirc8Modes; // type:UNK_TYPE1 size:0x1
0x801B8444 = sCamSetFukan1Modes; // type:UNK_TYPE1 size:0x1
0x801B8514 = sCamSetDungeon3Modes; // type:UNK_TYPE1 size:0x1
0x801B85E4 = sCamSetTelescopeModes; // type:UNK_TYPE1 size:0x1
0x801B8664 = sCamSetRoom0Modes; // type:UNK_TYPE1 size:0x1
0x801B8754 = sCamSetRCirc0Modes; // type:UNK_TYPE1 size:0x1
0x801B875C = sCamSetCirc9Modes; // type:UNK_TYPE1 size:0x1
0x801B87C4 = sCamSetOnThePoleModes; // type:UNK_TYPE1 size:0x1
0x801B8894 = sCamSetInBushModes; // type:UNK_TYPE1 size:0x1
0x801B8964 = sCamSetBossMajoraModes; // type:UNK_TYPE1 size:0x1
0x801B8A34 = sCamSetBossTwinmoldModes; // type:UNK_TYPE1 size:0x1
0x801B8B04 = sCamSetBossGohtModes; // type:UNK_TYPE1 size:0x1
0x801B8BD4 = sCamSetBossGyorgModes; // type:UNK_TYPE1 size:0x1
0x801B8CAC = sCamSetConnect0Modes; // type:UNK_TYPE1 size:0x1
0x801B8CB4 = sCamSetPinnacleRockModes; // type:UNK_TYPE1 size:0x1
0x801B8D8C = sCamSetNormal2Modes; // type:UNK_TYPE1 size:0x1
0x801B8E5C = sCamSetBombBowlModes; // type:UNK_TYPE1 size:0x1
0x801B8F2C = sCamSetCircAModes; // type:UNK_TYPE1 size:0x1
0x801B8F34 = sCamSetWhirlpoolModes; // type:UNK_TYPE1 size:0x1
0x801B900C = sCamSetCuccoShackModes; // type:UNK_TYPE1 size:0x1
0x801B90D4 = sCamSetGiantModes; // type:UNK_TYPE1 size:0x1
0x801B91A4 = sCamSetScene0Modes; // type:UNK_TYPE1 size:0x1
0x801B91AC = sCamSetRoom1Modes; // type:UNK_TYPE1 size:0x1
0x801B927C = sCamSetWater2Modes; // type:UNK_TYPE1 size:0x1
0x801B9354 = sCamSetWoodfallSwampModes; // type:UNK_TYPE1 size:0x1
0x801B9424 = sCamSetForceKeepModes; // type:UNK_TYPE1 size:0x1
0x801B94F4 = sCamSetParallel1Modes; // type:UNK_TYPE1 size:0x1
0x801B95C4 = sCamSetStart1Modes; // type:UNK_TYPE1 size:0x1
0x801B95CC = sCamSetRoom2Modes; // type:UNK_TYPE1 size:0x1
0x801B969C = sCamSetNorm4Modes; // type:UNK_TYPE1 size:0x1
0x801B976C = sCamSetElegyShellModes; // type:UNK_TYPE1 size:0x1
0x801B979C = sCamSetDungeon4Modes; // type:UNK_TYPE1 size:0x1
0x801B986C = sCameraSettings; // type:CameraSetting size:0x444
0x801B9CB0 = sGlobalCamDataSettings; // type:s16 size:0x34
0x801B9CE4 = sGlobalCamDataSettingsPtr; // type:s16* size:0x4
0x801B9CE8 = sCameraUpdateHandlers; // type:camera_update_func size:0x11c
0x801B9E04 = sCameraNextUID; // type:UNK_TYPE2 size:0x2
0x801B9E08 = sCameraInterfaceFlags; // type:UNK_TYPE4 size:0x4
0x801B9E0C = sCameraHudVisibility; // type:UNK_TYPE4 size:0x4
0x801B9E10 = sCameraLetterboxSize; // type:UNK_TYPE4 size:0x4
0x801B9E14 = sCameraNegOne; // type:UNK_TYPE4 size:0x4
0x801B9E18 = D_801B9E18; // type:UNK_TYPE2 size:0x2
0x801B9E34 = D_801B9E34; // type:UNK_TYPE2 size:0x2
0x801B9E50 = sUpdateCameraDirection; // type:UNK_TYPE4 size:0x4
0x801B9E54 = sIsFalse; // type:UNK_TYPE4 size:0x4
0x801B9E58 = sCameraInitSceneTimer; // type:UNK_TYPE4 size:0x4
0x801B9E5C = D_801B9E5C; // type:UNK_TYPE4 size:0x4
0x801B9E60 = D_801B9E60; // type:f32 size:0x4
0x801B9E64 = D_801B9E64; // type:UNK_TYPE1 size:0x1
0x801B9E84 = D_801B9E84; // type:UNK_TYPE1 size:0x1
0x801B9EB4 = D_801B9EB4; // type:UNK_TYPE4 size:0x4
0x801B9ED4 = D_801B9ED4; // type:UNK_TYPE4 size:0x4
0x801B9F04 = sEarthquakeFreq; // type:UNK_TYPE4 size:0x4
0x801B9F0C = sEarthquakeTimer; // type:UNK_TYPE2 size:0x2
0x801B9F10 = sModeChangeFlags; // type:UNK_TYPE4 size:0x4
0x801B9F20 = sDamageTablePresets; // type:DamageTable size:0x2e0
0x801BA200 = damageMultipliers; // type:f32 size:0x40
0x801BA240 = defaultCollider; // type:Collider size:0x18
0x801BA258 = defaultColliderTouch; // type:ColliderTouch size:0x8
0x801BA260 = defaultColliderBump; // type:ColliderBump size:0xc
0x801BA26C = defaultColliderInfo; // type:ColliderInfo size:0x28
0x801BA294 = defaultColliderJntSphElementDim; // type:ColliderJntSphElementDim size:0x18
0x801BA2AC = defaultColliderCylinderDim; // type:Cylinder16 size:0xc
0x801BA2B8 = defaultColliderTrisElementDim; // type:TriNorm size:0x34
0x801BA2EC = defaultColliderQuadDim; // type:ColliderQuadDim size:0x40
0x801BA32C = defaultLinePoint; // type:Vec3f size:0xC
0x801BA338 = sATResetFuncs; // type:ColChkResetFunc size:0x14
0x801BA34C = sACResetFuncs; // type:ColChkResetFunc size:0x14
0x801BA360 = sOCResetFuncs; // type:ColChkResetFunc size:0x14
0x801BA374 = sBloodFuncs; // type:ColChkBloodFunc size:0x18
0x801BA38C = sHitInfo; // type:HitInfo size:0x1C
0x801BA3A8 = sColChkApplyFuncs; // type:ColChkApplyFunc size:0x14
0x801BA3BC = sACVsFuncs; // type:ColChkVsFunc size:0x64
0x801BA420 = sOCVsFuncs; // type:ColChkVsFunc size:0x64
0x801BA484 = defaultColChkInfo; // type:CollisionCheckInfo size:0x1c
0x801BA4A0 = sApplyDamageFuncs; // type:ColChkApplyFunc size:0x14
0x801BA4B4 = sOCLineCheckFuncs; // type:ColChkLineFunc size:0x14
0x801BA4C8 = shieldParticleInitMetal; // type:EffectShieldParticleInit size:0x40
0x801BA508 = shieldParticleInitWood; // type:EffectShieldParticleInit size:0x40
0x801BA550 = D_801BA550; // type:UNK_TYPE1 size:0x1
0x801BA750 = D_801BA750; // type:UNK_TYPE1 size:0x1
0x801BA790 = sDebugDisplay1DL; // type:UNK_TYPE1 size:0x1
0x801BA7F0 = D_801BA7F0; // type:UNK_TYPE1 size:0x1
0x801BA870 = sDebugDisplay2DL; // type:UNK_TYPE1 size:0x1
0x801BA8C0 = D_801BA8C0; // type:UNK_TYPE1 size:0x1
0x801BAAC0 = D_801BAAC0; // type:UNK_TYPE1 size:0x1
0x801BAB40 = sDebugDisplay3DL; // type:UNK_TYPE1 size:0x1
0x801BABB8 = D_801BABB8; // type:UNK_TYPE1 size:0x1
0x801BACB8 = D_801BACB8; // type:UNK_TYPE1 size:0x1
0x801BADB8 = D_801BADB8; // type:UNK_TYPE1 size:0x1
0x801BAEB8 = D_801BAEB8; // type:UNK_TYPE1 size:0x1
0x801BAFB8 = D_801BAFB8; // type:UNK_TYPE1 size:0x1
0x801BAFF8 = gDebugSpriteDL; // type:UNK_TYPE1 size:0x1
0x801BB010 = sDebugObjectDrawFuncTable; // type:UNK_TYPE1 size:0x1
0x801BB018 = sDebugObjectInfoTable; // type:UNK_TYPE1 size:0x1
0x801BB050 = sDebugDisplayLight1; // type:Lights1 size:0x24
0x801BB068 = D_801BB068; // type:UNK_TYPE2 size:0x2
0x801BB08C = D_801BB08C; // type:UNK_TYPE1 size:0x1
0x801BB090 = D_801BB090; // type:UNK_TYPE4 size:0x4
0x801BB094 = D_801BB094; // type:UNK_TYPE1 size:0x1
0x801BB0DC = D_801BB0DC; // type:UNK_TYPE1 size:0x1
0x801BB0FC = D_801BB0FC; // type:UNK_TYPE2 size:0x2
0x801BB100 = D_801BB100; // type:UNK_TYPE1 size:0x1
0x801BB124 = D_801BB124; // type:UNK_TYPE2 size:0x2
0x801BB128 = D_801BB128; // type:UNK_TYPE2 size:0x2
0x801BB12C = D_801BB12C; // type:UNK_TYPE1 size:0x1
0x801BB130 = sCutsceneStoredPlayerForm; // type:UNK_TYPE1 size:0x1
0x801BB134 = sCsStateHandlers1; // type:cutscene_update_func size:0x14
0x801BB148 = sCsStateHandlers2; // type:cutscene_update_func size:0x14
0x801BB15C = D_801BB15C; // type:UNK_TYPE2 size:0x2
0x801BB160 = D_801BB160; // type:UNK_TYPE4 size:0x4
0x801BB170 = sDrawItemTable; // type:DrawItemTableEntry size:0x1098
0x801BC210 = D_801BC210; // type:UNK_TYPE1 size:0x1
0x801BC240 = D_801BC240; // type:Gfx size:0x48
0x801BC288 = D_801BC288; // type:Gfx size:0x18
0x801BC2A0 = D_801BC2A0; // type:UNK_TYPE1 size:0x1
0x801BC3F0 = gEnHyBodyParts; // type:UNK_TYPE1 size:0x1
0x801BC400 = gEnHyParentBodyParts; // type:UNK_TYPE1 size:0x1
0x801BC410:("gEnHyShadowSizes","s32",[],0x10),
0x801BC420 = sReactionTextIds; // type:u16 size:0x140A
0x801BD830 = actorCutscenesGlobalCutscenes; // type:ActorCutscene size:0x80
0x801BD8B0 = actorCutsceneCurrent; // type:s16 size:0x2
0x801BD8B2 = actorCutsceneCurrentLength; // type:s16 size:0x2
0x801BD8B4 = actorCutsceneEnding; // type:s16 size:0x2
0x801BD8B6 = actorCutsceneCurrentCamera; // type:s16 size:0x2
0x801BD8B8 = actorCutsceneCurrentCutsceneActor; // type:Actor* size:0x4
0x801BD8BC = actorCutsceneStartMethod; // type:UNK_TYPE4 size:0x4
0x801BD8C0 = actorCutscenesPlayState; // type:PlayState* size:0x4
0x801BD8C4 = actorCutsceneReturnCamera; // type:s16 size:0x2
0x801BD8C6 = D_801BD8C6; // type:s16 size:0x2
0x801BD8D0 = sFireObjCollisionInit; // type:ColliderCylinderInit size:0x2c
0x801BD8FC = sFireObjColors; // type:FireObjColors size:0x08
0x801BD904 = sFireObjLightParams; // type:FireObjLightParams size:0x08
0x801BD910 = gGameStateOverlayTable; // type:GameStateOverlay size:0x150
0x801BDA60 = graphNumGameStates; // type:UNK_TYPE4 size:0x4
0x801BDA70 = D_801BDA70; // type:UNK_TYPE2 size:0x2
0x801BDA74 = D_801BDA74; // type:UNK_TYPE2 size:0x2
0x801BDA78 = D_801BDA78; // type:UNK_TYPE2 size:0x2
0x801BDA7C = D_801BDA7C; // type:UNK_TYPE2 size:0x2
0x801BDA9C = D_801BDA9C; // type:UNK_TYPE4 size:0x4
0x801BDAA0 = D_801BDAA0; // type:UNK_TYPE4 size:0x4
0x801BDAA4 = D_801BDAA4; // type:UNK_TYPE4 size:0x4
0x801BDAA8 = D_801BDAA8; // type:UNK_TYPE2 size:0x2
0x801BDAAA = D_801BDAAA; // type:UNK_TYPE2 size:0x2
0x801BDAAC = D_801BDAAC; // type:UNK_TYPE2 size:0x2
0x801BDAAE = D_801BDAAE; // type:UNK_TYPE2 size:0x2
0x801BDAB0 = D_801BDAB0; // type:UNK_TYPE2 size:0x2
0x801BDAB2 = D_801BDAB2; // type:UNK_TYPE2 size:0x2
0x801BDAB4 = D_801BDAB4; // type:UNK_TYPE2 size:0x2
0x801BDAB6 = D_801BDAB6; // type:UNK_TYPE2 size:0x2
0x801BDAC0 = D_801BDAC0; // type:UNK_TYPE4 size:0x4
0x801BDAC4 = D_801BDAC4; // type:UNK_TYPE4 size:0x4
0x801BDAC8 = D_801BDAC8; // type:UNK_TYPE4 size:0x4
0x801BDACC = D_801BDACC; // type:UNK_TYPE4 size:0x4
0x801BDAF0 = D_801BDAF0; // type:UNK_TYPE4 size:0x4
0x801BDAF8 = D_801BDAF8; // type:UNK_TYPE4 size:0x4
0x801BDB00 = sKaleidoSetupRightPageIndex; // type:UNK_TYPE1 size:0x1
0x801BDB08 = sKaleidoSetupRightPageEyeX; // type:UNK_TYPE1 size:0x1
0x801BDB18 = sKaleidoSetupRightPageEyeZ; // type:UNK_TYPE1 size:0x1
0x801BDB30 = kanfontOrdering; // type:u8 size:0x5c
0x801BDB90 = D_801BDB90; // type:f32 size:0x4
0x801BDB94 = D_801BDB94; // type:UNK_TYPE4 size:0x4
0x801BDB98 = D_801BDB98; // type:UNK_TYPE4 size:0x4
0x801BDB9C = D_801BDB9C; // type:UNK_TYPE2 size:0x2
0x801BDBA0 = D_801BDBA0; // type:UNK_TYPE1 size:0x1
0x801BDBA4 = D_801BDBA4; // type:UNK_TYPE1 size:0x1
0x801BDBA8 = D_801BDBA8; // type:UNK_TYPE1 size:0x1
0x801BDBB0 = gWeatherMode; // type:u8 size:0x1
0x801BDBB4 = D_801BDBB4; // type:UNK_TYPE1 size:0x1
0x801BDBB8 = D_801BDBB8; // type:UNK_TYPE1 size:0x1
0x801BDBBC = D_801BDBBC; // type:UNK_TYPE1 size:0x1
0x801BDBC0 = D_801BDBC0; // type:UNK_TYPE1 size:0x1
0x801BDBC4 = D_801BDBC4; // type:UNK_TYPE1 size:0x1
0x801BDBC8 = D_801BDBC8; // type:u8 size:0x1
0x801BDBCC = D_801BDBCC; // type:UNK_TYPE1 size:0x1
0x801BDCF4 = D_801BDCF4; // type:UNK_TYPE1 size:0x1
0x801BE38E = D_801BE38E; // type:UNK_TYPE1 size:0x1
0x801BE38F = D_801BE38F; // type:UNK_TYPE1 size:0x1
0x801BE390 = D_801BE390; // type:UNK_TYPE1 size:0x1
0x801BE4D4 = D_801BE4D4; // type:UNK_TYPE1 size:0x1
0x801BE4F4 = D_801BE4F4; // type:UNK_TYPE1 size:0x1
0x801BE534 = D_801BE534; // type:UNK_TYPE1 size:0x1
0x801BE6D4 = D_801BE6D4; // type:UNK_TYPE1 size:0x1
0x801BE874 = D_801BE874; // type:UNK_TYPE1 size:0x1
0x801BE894 = D_801BE894; // type:UNK_TYPE4 size:0x4
0x801BE8BC = D_801BE8BC; // type:UNK_TYPE4 size:0x4
0x801BE8E4 = D_801BE8E4; // type:UNK_TYPE4 size:0x4
0x801BE90C = D_801BE90C; // type:UNK_TYPE1 size:0x1
0x801BE92C = D_801BE92C; // type:UNK_TYPE1 size:0x1
0x801BE944 = D_801BE944; // type:UNK_TYPE1 size:0x1
0x801BE960 = sInitChainHandlers; // type:actor_init_var_func size:0x2c
0x801BE990 = sHeartsPrimColors; // type:s16 size:0x12
0x801BE9A4 = sHeartsEnvColors; // type:s16 size:0x12
0x801BE9B8 = sHeartsPrimFactors; // type:s16 size:0x12
0x801BE9CC = sHeartsEnvFactors; // type:s16 size:0x12
0x801BE9E0 = sHeartsDDPrimColors; // type:s16 size:0x12
0x801BE9F4 = sHeartsDDEnvColors; // type:s16 size:0x12
0x801BEA08 = sHeartsDDPrimFactors; // type:s16 size:0x12
0x801BEA1C = sHeartsDDEnvFactors; // type:s16 size:0x12
0x801BEA30 = HeartTextures; // type:UNK_TYPE1 size:0x1
0x801BEA70 = HeartDDTextures; // type:UNK_TYPE1 size:0x1
0x801BEAB0 = posBindFuncs; // type:LightsPosBindFunc size:0xc
0x801BEABC = dirBindFuncs; // type:LightsBindFunc size:0xc
0x801BEAD4 = D_801BEAD4; // type:UNK_TYPE4 size:0x4
0x801BEAD8 = D_801BEAD8; // type:UNK_TYPE4 size:0x4
0x801BEAE0 = D_801BEAE0; // type:UNK_TYPE1 size:0x1
0x801BEAF4 = D_801BEAF4; // type:UNK_TYPE4 size:0x4
0x801BEAF8 = D_801BEAF8; // type:UNK_TYPE4 size:0x4
0x801BEB04 = D_801BEB04; // type:UNK_TYPE4 size:0x4
0x801BEB08 = D_801BEB08; // type:UNK_TYPE4 size:0x4
0x801BEB14 = D_801BEB14; // type:UNK_TYPE4 size:0x4
0x801BEB18 = D_801BEB18; // type:UNK_TYPE4 size:0x4
0x801BEB24 = D_801BEB24; // type:UNK_TYPE4 size:0x4
0x801BEB28 = D_801BEB28; // type:UNK_TYPE4 size:0x4
0x801BEB38 = D_801BEB38; // type:UNK_TYPE1 size:0x1
0x801BEBB8 = D_801BEBB8; // type:UNK_TYPE4 size:0x4
0x801BEBD8 = D_801BEBD8; // type:UNK_TYPE4 size:0x4
0x801BEBF8 = D_801BEBF8; // type:UNK_TYPE2 size:0x2
0x801BEBFA = D_801BEBFA; // type:UNK_TYPE2 size:0x2
0x801BEBFC = D_801BEBFC; // type:UNK_TYPE2 size:0x2
0x801BEC10 = D_801BEC10; // type:UNK_TYPE2 size:0x2
0x801BEC14 = D_801BEC14; // type:UNK_PTR size:0x4
0x801BEC1C = D_801BEC1C; // type:UNK_TYPE4 size:0x4
0x801BEC20 = D_801BEC20; // type:UNK_TYPE4 size:0x4
0x801BEC24 = D_801BEC24; // type:UNK_TYPE1 size:0x1
0x801BEC2C = D_801BEC2C; // type:UNK_TYPE1 size:0x1
0x801BEC5C = D_801BEC5C; // type:UNK_TYPE2 size:0x2
0x801BEC5E = D_801BEC5E; // type:UNK_TYPE2 size:0x2
0x801BEC70 = D_801BEC70; // type:UNK_TYPE4 size:0x4
0x801BEC84 = D_801BEC84; // type:UNK_TYPE1 size:0x1
0x801BECA4 = D_801BECA4; // type:UNK_TYPE1 size:0x1
0x801BECC4 = D_801BECC4; // type:UNK_TYPE1 size:0x1
0x801BECE4 = D_801BECE4; // type:UNK_TYPE1 size:0x1
0x801BED00 = D_801BED00; // type:UNK_TYPE1 size:0x1
0x801BED24 = D_801BED24; // type:UNK_TYPE2 size:0x2
0x801BED3C = D_801BED3C; // type:UNK_TYPE1 size:0x1
0x801BED40 = D_801BED40; // type:UNK_TYPE1 size:0x1
0x801BED4C = D_801BED4C; // type:UNK_TYPE1 size:0x1
0x801BED54 = D_801BED54; // type:UNK_TYPE1 size:0x1
0x801BED55 = D_801BED55; // type:UNK_TYPE1 size:0x1
0x801BED56 = D_801BED56; // type:UNK_TYPE1 size:0x1
0x801BED88 = D_801BED88; // type:UNK_TYPE1 size:0x1
0x801BEFC8 = D_801BEFC8; // type:UNK_TYPE1 size:0x1
0x801BF15C = D_801BF15C; // type:UNK_TYPE1 size:0x1
0x801BF170 = D_801BF170; // type:UNK_TYPE1 size:0x1
0x801BF176 = D_801BF176; // type:UNK_TYPE1 size:0x1
0x801BF177 = D_801BF177; // type:UNK_TYPE1 size:0x1
0x801BF178 = D_801BF178; // type:UNK_TYPE1 size:0x1
0x801BF3B4 = D_801BF3B4; // type:UNK_TYPE1 size:0x1
0x801BF550 = D_801BF550; // type:UNK_TYPE2 size:0x2
0x801BF554 = D_801BF554; // type:UNK_TYPE2 size:0x2
0x801BF558 = D_801BF558; // type:UNK_TYPE2 size:0x2
0x801BF55C = D_801BF55C; // type:UNK_TYPE4 size:0x4
0x801BF580 = D_801BF580; // type:UNK_TYPE4 size:0x4
0x801BF594 = D_801BF594; // type:UNK_TYPE4 size:0x4
0x801BF5A4 = D_801BF5A4; // type:UNK_TYPE4 size:0x4
0x801BF5B0 = D_801BF5B0; // type:UNK_TYPE2 size:0x2
0x801BF5C0 = D_801BF5C0; // type:UNK_PTR size:0x4
0x801BF68C = D_801BF68C; // type:UNK_TYPE1 size:0x1
0x801BF6C0 = sRestrictionFlags; // type:RestrictionFlags size:0x1c4
0x801BF884 = sPictoState; // type:UNK_TYPE2 size:0x2
0x801BF888 = sPictoPhotoBeingTaken; // type:UNK_TYPE2 size:0x2
0x801BF88C = sHBAScoreTier; // type:UNK_TYPE2 size:0x2
0x801BF890 = sMinigameScoreDigits; // type:UNK_TYPE2 size:0x2
0x801BF898 = sCUpInvisible; // type:UNK_TYPE2 size:0x2
0x801BF89C = sCUpTimer; // type:UNK_TYPE2 size:0x2
0x801BF8A0 = sMagicMeterOutlinePrimRed; // type:UNK_TYPE2 size:0x2
0x801BF8A4 = sMagicMeterOutlinePrimGreen; // type:UNK_TYPE2 size:0x2
0x801BF8A8 = sMagicMeterOutlinePrimBlue; // type:UNK_TYPE2 size:0x2
0x801BF8AC = sMagicBorderRatio; // type:UNK_TYPE2 size:0x2
0x801BF8B0 = sMagicBorderStep; // type:UNK_TYPE2 size:0x2
0x801BF8DC = sEnvHazard; // type:UNK_TYPE2 size:0x2
0x801BF8E0 = sEnvTimerActive; // type:UNK_TYPE2 size:0x2
0x801BF8E4 = sPostmanBunnyHoodState; // type:UNK_TYPE2 size:0x2
0x801BF8E8 = sTimerPausedOsTime; // type:UNK_TYPE4 size:0x4
0x801BF8F0 = sBottleTimerPausedOsTime; // type:u64 size:0x8
0x801BF8F8 = D_801BF8F8; // type:u64 size:0x38
0x801BF930 = D_801BF930; // type:u64 size:0x38
0x801BF968 = sIsTimerPaused; // type:UNK_TYPE4 size:0x4
0x801BF96C = sIsBottleTimerPaused; // type:UNK_TYPE4 size:0x4
0x801BF970 = sTimerId; // type:UNK_TYPE4 size:0x4
0x801BF974 = D_801BF974; // type:UNK_TYPE4 size:0x4
0x801BF978 = D_801BF978; // type:UNK_TYPE4 size:0x4
0x801BF97C = D_801BF97C; // type:UNK_TYPE4 size:0x4
0x801BF980 = D_801BF980; // type:UNK_TYPE4 size:0x4
0x801BF988 = sScreenFillSetupDL; // type:Gfx size:0x28
0x801BF9B0 = D_801BF9B0; // type:UNK_TYPE2 size:0x2
0x801BF9B4 = D_801BF9B4; // type:UNK_TYPE1 size:0x1
0x801BF9BC = D_801BF9BC; // type:UNK_TYPE1 size:0x1
0x801BF9C4 = D_801BF9C4; // type:UNK_TYPE1 size:0x1
0x801BF9C8 = D_801BF9C8; // type:UNK_TYPE1 size:0x1
0x801BF9CC = D_801BF9CC; // type:UNK_TYPE1 size:0x1
0x801BF9D4 = D_801BF9D4; // type:UNK_TYPE4 size:0x4
0x801BF9D8 = D_801BF9D8; // type:UNK_TYPE4 size:0x4
0x801BF9DC = D_801BF9DC; // type:UNK_TYPE4 size:0x4
0x801BF9E0 = D_801BF9E0; // type:UNK_TYPE4 size:0x4
0x801BF9E4 = D_801BF9E4; // type:UNK_TYPE4 size:0x4
0x801BF9E8 = D_801BF9E8; // type:UNK_TYPE4 size:0x4
0x801BF9EC = sFinalHoursClockDigitsRed; // type:UNK_TYPE4 size:0x4
0x801BF9F0 = sFinalHoursClockFrameEnvRed; // type:UNK_TYPE2 size:0x2
0x801BF9F4 = sFinalHoursClockFrameEnvGreen; // type:UNK_TYPE2 size:0x2
0x801BF9F8 = sFinalHoursClockFrameEnvBlue; // type:UNK_TYPE2 size:0x2
0x801BF9FC = sFinalHoursClockColorTimer; // type:UNK_TYPE2 size:0x2
0x801BFA00 = sFinalHoursClockColorTargetIndex; // type:UNK_TYPE2 size:0x2
0x801BFA04 = sActionVtxPosX; // type:UNK_TYPE2 size:0x2
0x801BFA1C = sActionVtxWidths; // type:UNK_TYPE2 size:0x2
0x801BFA34 = sActionVtxPosY; // type:UNK_TYPE2 size:0x2
0x801BFA4C = sActionVtxHeights; // type:UNK_TYPE2 size:0x2
0x801BFA64 = sPerfectLettersCenterX; // type:UNK_TYPE2 size:0x2
0x801BFA74 = sPerfectLettersCenterY; // type:UNK_TYPE2 size:0x2
0x801BFA84 = sPostmanTimerInputBtnAPressed; // type:UNK_TYPE4 size:0x4
0x801BFAB0 = sDoActionTextures; // type:UNK_TYPE1 size:0x1
0x801BFAB8 = magicBorderColors; // type:UNK_TYPE1 size:0x1
0x801BFAC4 = magicBorderIndices; // type:UNK_TYPE1 size:0x1
0x801BFACC = magicBorderColorTimerIndex; // type:UNK_TYPE1 size:0x1
0x801BFAD4 = cUpLabelTextures; // type:UNK_TYPE1 size:0x1
0x801BFAF4 = D_801BFAF4; // type:UNK_TYPE4 size:0x4
0x801BFAF8 = D_801BFAF8; // type:UNK_TYPE4 size:0x4
0x801BFAFC = D_801BFAFC; // type:UNK_TYPE4 size:0x4
0x801BFB04 = D_801BFB04; // type:UNK_TYPE1 size:0x1
0x801BFB0C = D_801BFB0C; // type:UNK_TYPE1 size:0x1
0x801BFB14 = D_801BFB14; // type:UNK_TYPE1 size:0x1
0x801BFB1C = D_801BFB1C; // type:UNK_TYPE1 size:0x1
0x801BFB24 = D_801BFB24; // type:UNK_TYPE1 size:0x1
0x801BFB2C = sThreeDayClockAlpha; // type:UNK_TYPE2 size:0x2
0x801BFB30 = D_801BFB30; // type:UNK_TYPE2 size:0x2
0x801BFB34 = D_801BFB34; // type:UNK_TYPE2 size:0x2
0x801BFB38 = sThreeDayClockHours; // type:UNK_TYPE1 size:0x1
0x801BFB6C = sThreeDayClockHourTextures; // type:UNK_TYPE1 size:0x1
0x801BFBCC = D_801BFBCC; // type:UNK_TYPE2 size:0x2
0x801BFBD0 = D_801BFBD0; // type:UNK_TYPE2 size:0x2
0x801BFBD4 = D_801BFBD4; // type:UNK_TYPE2 size:0x2
0x801BFBD8 = D_801BFBD8; // type:UNK_TYPE2 size:0x2
0x801BFBDC = D_801BFBDC; // type:UNK_TYPE2 size:0x2
0x801BFBE0 = D_801BFBE0; // type:UNK_TYPE2 size:0x2
0x801BFBE4 = D_801BFBE4; // type:UNK_TYPE2 size:0x2
0x801BFBE8 = D_801BFBE8; // type:UNK_TYPE2 size:0x2
0x801BFBEC = D_801BFBEC; // type:UNK_TYPE1 size:0x1
0x801BFBF0 = D_801BFBF0; // type:UNK_TYPE1 size:0x1
0x801BFBF4 = D_801BFBF4; // type:UNK_TYPE1 size:0x1
0x801BFBF8 = D_801BFBF8; // type:UNK_TYPE1 size:0x1
0x801BFBFC = D_801BFBFC; // type:UNK_TYPE1 size:0x1
0x801BFC00 = D_801BFC00; // type:UNK_TYPE1 size:0x1
0x801BFC04 = D_801BFC04; // type:UNK_TYPE1 size:0x1
0x801BFC08 = D_801BFC08; // type:UNK_TYPE1 size:0x1
0x801BFC0C = D_801BFC0C; // type:UNK_TYPE1 size:0x1
0x801BFC10 = D_801BFC10; // type:UNK_TYPE1 size:0x1
0x801BFC14 = sFinalHoursDigitTextures; // type:UNK_TYPE1 size:0x1
0x801BFC40 = D_801BFC40; // type:UNK_TYPE1 size:0x1
0x801BFC50 = sPerfectLettersType1OffScreenAngles; // type:UNK_TYPE2 size:0x2
0x801BFC60 = sPerfectLettersType1PrimColorTargets; // type:s16 size:0xC
0x801BFC6C = sPerfectLettersType2SpellingOffsetsX; // type:UNK_TYPE4 size:0x4
0x801BFC7C = sPerfectLettersType2OffScreenOffsetsX; // type:UNK_TYPE2 size:0x2
0x801BFC8C = sPerfectLettersType2PrimColorTargets; // type:UNK_TYPE1 size:0x1
0x801BFC98 = sPerfectLettersType3SpellingOffsetsX; // type:UNK_TYPE2 size:0x2
0x801BFCA8 = sPerfectLettersType3OffScreenAngles; // type:UNK_TYPE2 size:0x2
0x801BFCB8 = sPerfectLettersType3PrimColorTargets; // type:UNK_TYPE1 size:0x1
0x801BFCC4 = sPerfectLettersTextures; // type:UNK_TYPE4 size:0x4
0x801BFCE4 = sTimerStateTimer; // type:UNK_TYPE4 size:0x4
0x801BFCE8 = sTimerDigits; // type:u16 size:0x10
0x801BFCF8 = sTimerBeepSfxSeconds; // type:UNK_TYPE4 size:0x4
0x801BFCFC = D_801BFCFC; // type:UNK_TYPE4 size:0x4
0x801BFD0C = D_801BFD0C; // type:UNK_TYPE4 size:0x4
0x801BFD1C = sRupeeDigitsFirst; // type:UNK_TYPE1 size:0x1
0x801BFD24 = sRupeeDigitsCount; // type:UNK_TYPE1 size:0x1
0x801BFD2C = sRupeeCounterIconPrimColors; // type:UNK_TYPE1 size:0x1
0x801BFD40 = sRupeeCounterIconEnvColors; // type:UNK_TYPE1 size:0x1
0x801BFD54 = sMinigameCountdownTextures; // type:UNK_TYPE1 size:0x1
0x801BFD64 = sMinigameCountdownTexWidths; // type:UNK_TYPE1 size:0x1
0x801BFD6C = sMinigameCountdownPrimColors; // type:UNK_TYPE2 size:0x2
0x801BFD84 = sStoryTextures; // type:UNK_TYPE1 size:0x1
0x801BFD8C = sStoryTLUTs; // type:UNK_TYPE1 size:0x1
0x801BFD94 = sIsSunsPlayedAtDay; // type:UNK_TYPE4 size:0x4
0x801BFD98 = sPrevTimeSpeed; // type:UNK_TYPE4 size:0x8
0x801BFDA0 = sMaskObjectIds; // type:s16 size:0x30
0x801BFDD0 = D_801BFDD0; // type:UNK_TYPE1 size:0x1
0x801BFDE8 = sMaskItemIds; // type:UNK_TYPE1 size:0x1
0x801BFE00 = gPlayerSkeletons; // type:FlexSkeletonHeader* size:0x14
0x801BFE14 = D_801BFE14; // type:UNK_TYPE1 size:0x1
0x801BFF34 = sCItemButtons; // type:UNK_TYPE2 size:0x2
0x801BFF3C = sActionModelGroups; // type:UNK_TYPE1 size:0x1
0x801BFF90 = D_801BFF90; // type:UNK_TYPE1 size:0x1
0x801BFF98 = sPlayerStrengths; // type:UNK_TYPE1 size:0x1
0x801BFFA0 = sEnvHazardTextTriggers; // type:UNK_TYPE1 size:0x1
0x801BFFB0 = gPlayerModelTypes; // type:UNK_TYPE1 size:0x1
0x801BFFFC = gPlayerWaistDLs; // type:UNK_TYPE1 size:0x1
0x801C0024 = gPlayerHandHoldingShields; // type:UNK_TYPE1 size:0x1
0x801C0034 = gPlayerSheath12DLs; // type:UNK_TYPE1 size:0x1
0x801C005C = gPlayerSheath13DLs; // type:UNK_TYPE1 size:0x1
0x801C0084 = gPlayerSheath14DLs; // type:UNK_TYPE1 size:0x1
0x801C00AC = gPlayerShields; // type:UNK_TYPE1 size:0x1
0x801C00BC = gPlayerSheathedSwords; // type:UNK_TYPE1 size:0x1
0x801C00D4 = gPlayerSwordSheaths; // type:UNK_TYPE1 size:0x1
0x801C00EC = gPlayerLeftHandTwoHandSwordDLs; // type:UNK_TYPE1 size:0x1
0x801C0114 = gPlayerLeftHandOpenDLs; // type:UNK_TYPE1 size:0x1
0x801C013C = gPlayerLeftHandClosedDLs; // type:UNK_TYPE1 size:0x1
0x801C0164 = gPlayerLeftHandOneHandSwordDLs; // type:UNK_TYPE1 size:0x1
0x801C018C = D_801C018C; // type:UNK_TYPE1 size:0x1
0x801C01A4 = gPlayerRightHandOpenDLs; // type:UNK_TYPE1 size:0x1
0x801C01CC = gPlayerRightHandClosedDLs; // type:UNK_TYPE1 size:0x1
0x801C01F4 = gPlayerRightHandBowDLs; // type:UNK_TYPE1 size:0x1
0x801C021C = gPlayerRightHandInstrumentDLs; // type:UNK_TYPE1 size:0x1
0x801C0244 = gPlayerRightHandHookshotDLs; // type:UNK_TYPE1 size:0x1
0x801C026C = gPlayerLeftHandBottleDLs; // type:UNK_TYPE1 size:0x1
0x801C0294 = D_801C0294; // type:UNK_TYPE1 size:0x1
0x801C02A8 = D_801C02A8; // type:UNK_TYPE1 size:0x1
0x801C02BC = D_801C02BC; // type:UNK_TYPE1 size:0x1
0x801C02D0 = D_801C02D0; // type:UNK_TYPE1 size:0x1
0x801C02E4 = D_801C02E4; // type:UNK_TYPE1 size:0x1
0x801C02F8 = sPlayerDListGroups; // type:UNK_PTR size:0x4
0x801C0340 = D_801C0340; // type:UNK_TYPE1 size:0x1
0x801C0368 = D_801C0368; // type:UNK_TYPE1 size:0x1
0x801C03A0 = D_801C03A0; // type:UNK_TYPE1 size:0x1
0x801C03C0 = D_801C03C0; // type:UNK_TYPE1 size:0x1
0x801C03E0 = D_801C03E0; // type:UNK_TYPE1 size:0x1
0x801C0410 = D_801C0410; // type:UNK_TYPE1 size:0x1
0x801C0428 = D_801C0428; // type:UNK_TYPE1 size:0x1
0x801C0460 = D_801C0460; // type:UNK_TYPE1 size:0x1
0x801C0490 = D_801C0490; // type:UNK_TYPE1 size:0x1
0x801C0510 = D_801C0510; // type:UNK_TYPE1 size:0x1
0x801C0538 = D_801C0538; // type:UNK_TYPE1 size:0x1
0x801C0560 = D_801C0560; // type:UNK_TYPE1 size:0x1
0x801C0580 = D_801C0580; // type:UNK_TYPE1 size:0x1
0x801C05A8 = D_801C05A8; // type:UNK_TYPE1 size:0x1
0x801C05C8 = D_801C05C8; // type:UNK_TYPE1 size:0x1
0x801C05D8 = D_801C05D8; // type:UNK_TYPE1 size:0x1
0x801C05F0 = D_801C05F0; // type:struct_80124618 size:0x18
0x801C0608 = D_801C0608; // type:UNK_TYPE1 size:0x1
0x801C0628 = D_801C0628; // type:UNK_TYPE1 size:0x1
0x801C0678 = D_801C0678; // type:UNK_TYPE1 size:0x1
0x801C0698 = D_801C0698; // type:UNK_TYPE1 size:0x1
0x801C06B8 = D_801C06B8; // type:UNK_TYPE1 size:0x1
0x801C06E0 = D_801C06E0; // type:UNK_TYPE1 size:0x1
0x801C06F8 = D_801C06F8; // type:UNK_TYPE1 size:0x1
0x801C0718 = D_801C0718; // type:UNK_TYPE1 size:0x1
0x801C0730 = D_801C0730; // type:UNK_TYPE1 size:0x1
0x801C0740 = D_801C0740; // type:UNK_TYPE1 size:0x1
0x801C0750 = D_801C0750; // type:UNK_TYPE1 size:0x1
0x801C0778 = D_801C0778; // type:UNK_TYPE1 size:0x1
0x801C0784 = D_801C0784; // type:UNK_TYPE1 size:0x1
0x801C07AC = D_801C07AC; // type:UNK_TYPE1 size:0x1
0x801C07C0 = D_801C07C0; // type:UNK_TYPE1 size:0x1
0x801C07F0 = D_801C07F0; // type:UNK_TYPE1 size:0x1
0x801C0820 = D_801C0820; // type:UNK_TYPE1 size:0x1
0x801C0838 = D_801C0838; // type:UNK_TYPE1 size:0x1
0x801C0850 = gCullBackDList; // type:UNK_TYPE1 size:0x1
0x801C0860 = gCullFrontDList; // type:UNK_TYPE1 size:0x1
0x801C0870 = sPlayerEyesTextures; // type:UNK_PTR size:0x4
0x801C0890 = sPlayerMouthTextures; // type:UNK_TYPE1 size:0x1
0x801C08A0 = sPlayerFaces; // type:UNK_TYPE1 size:0x20
0x801C08C0 = D_801C08C0; // type:UNK_TYPE1 size:0x1
0x801C08FC = D_801C08FC; // type:UNK_TYPE1 size:0x1
0x801C0910 = D_801C0910; // type:UNK_TYPE1 size:0x1
0x801C0924 = D_801C0924; // type:UNK_TYPE1 size:0x1
0x801C0938 = D_801C0938; // type:UNK_TYPE1 size:0x1
0x801C094C = D_801C094C; // type:Vec3f size:0xC
0x801C0958 = D_801C0958; // type:UNK_TYPE4 size:0x4
0x801C095C = D_801C095C; // type:UNK_PTR size:0x4
0x801C0964 = D_801C0964; // type:UNK_TYPE1 size:0x1
0x801C096C = D_801C096C; // type:UNK_TYPE1 size:0x1
0x801C0970 = D_801C0970; // type:UNK_TYPE1 size:0x1
0x801C0994 = D_801C0994; // type:UNK_TYPE4 size:0x4
0x801C09B8 = D_801C09B8; // type:UNK_TYPE1 size:0x1
0x801C09DC = D_801C09DC; // type:UNK_TYPE1 size:0x1
0x801C0A00 = D_801C0A00; // type:UNK_TYPE1 size:0x1
0x801C0A24 = D_801C0A24; // type:UNK_TYPE1 size:0x1
0x801C0A48 = D_801C0A48; // type:UNK_TYPE1 size:0x1
0x801C0A6C = D_801C0A6C; // type:UNK_TYPE1 size:0x1
0x801C0A90 = D_801C0A90; // type:UNK_TYPE1 size:0x1
0x801C0AB4 = D_801C0AB4; // type:UNK_TYPE1 size:0x1
0x801C0ABC = D_801C0ABC; // type:UNK_TYPE1 size:0x1
0x801C0AC4 = D_801C0AC4; // type:UNK_TYPE1 size:0x1
0x801C0ADC = D_801C0ADC; // type:UNK_TYPE1 size:0x1
0x801C0AF4 = D_801C0AF4; // type:UNK_PTR size:0x4
0x801C0AFC = D_801C0AFC; // type:UNK_PTR size:0x4
0x801C0B04 = D_801C0B04; // type:UNK_PTR size:0x4
0x801C0B0C = D_801C0B0C; // type:UNK_PTR size:0x4
0x801C0B14 = D_801C0B14; // type:UNK_TYPE1 size:0x1
0x801C0B1C = D_801C0B1C; // type:UNK_TYPE1 size:0x1
0x801C0B20 = D_801C0B20; // type:UNK_TYPE1 size:0x1
0x801C0B90 = D_801C0B90; // type:UNK_TYPE1 size:0x1
0x801C0BA8 = D_801C0BA8; // type:Vec3f size:0xC
0x801C0BB4 = D_801C0BB4; // type:Vec3f size:0xC
0x801C0BC0 = D_801C0BC0; // type:UNK_TYPE1 size:0x1
0x801C0BD0 = D_801C0BD0; // type:UNK_TYPE1 size:0x1
0x801C0BE0 = D_801C0BE0; // type:Vec3f size:0xC
0x801C0BEC = D_801C0BEC; // type:Vec3f size:0xC
0x801C0BF8 = D_801C0BF8; // type:UNK_TYPE1 size:0x1
0x801C0BFC = D_801C0BFC; // type:UNK_TYPE1 size:0x1
0x801C0C00 = D_801C0C00; // type:UNK_TYPE1 size:0x1
0x801C0C0C = D_801C0C0C; // type:UNK_TYPE4 size:0x4
0x801C0C30 = D_801C0C30; // type:UNK_TYPE1 size:0x1
0x801C0C54 = D_801C0C54; // type:struct_80128388_arg1 size:0x54
0x801C0CA8 = D_801C0CA8; // type:UNK_TYPE1 size:0x1
0x801C0CE8 = D_801C0CE8; // type:UNK_TYPE4 size:0x4
0x801C0D24 = D_801C0D24; // type:UNK_TYPE1 size:0x1
0x801C0D60 = D_801C0D60; // type:UNK_TYPE1 size:0x1
0x801C0D6C = D_801C0D6C; // type:UNK_TYPE1 size:0x1
0x801C0D78 = D_801C0D78; // type:UNK_TYPE1 size:0x1
0x801C0D94 = D_801C0D94; // type:UNK_TYPE4 size:0x4
0x801C0D98 = D_801C0D98; // type:UNK_TYPE4 size:0x4
0x801C0D9C = D_801C0D9C; // type:UNK_TYPE4 size:0x4
0x801C0DA0 = D_801C0DA0; // type:UNK_TYPE4 size:0x4
0x801C0DA8 = D_801C0DA8; // type:UNK_TYPE1 size:0x1
0x801C0DD8 = D_801C0DD8; // type:UNK_TYPE1 size:0x1
0x801C0DE4 = D_801C0DE4; // type:UNK_TYPE1 size:0x1
0x801C0DF0 = D_801C0DF0; // type:UNK_TYPE4 size:0x4
0x801C0E04 = D_801C0E04; // type:UNK_TYPE1 size:0x1
0x801C0E2C = D_801C0E2C; // type:UNK_TYPE4 size:0x4
0x801C0E40 = D_801C0E40; // type:UNK_TYPE4 size:0x4
0x801C0E7C = D_801C0E7C; // type:UNK_TYPE1 size:0x1
0x801C0E94 = D_801C0E94; // type:UNK_TYPE1 size:0x1
0x801C0EA0 = D_801C0EA0; // type:UNK_TYPE1 size:0x1
0x801C0EAC = D_801C0EAC; // type:UNK_TYPE1 size:0x1
0x801C0EB8 = D_801C0EB8; // type:UNK_TYPE1 size:0x1
0x801C0EC0 = sIsQuakeInitialized; // type:UNK_TYPE2 size:0x2
0x801C0EC4 = sQuakeRequestCount; // type:s16 size:0x2
0x801C0EC8 = sQuakeCallbacks; // type:quake_callback_func size:0x1c
0x801C0EE4 = D_801C0EE4; // type:s16 size:0x2
0x801C0EE8 = D_801C0EE8; // type:s16 size:0x2
0x801C0EEC = D_801C0EEC; // type:s16 size:0x2
0x801C0EF0 = sSetupDL; // type:Gfx size:0xdb0
0x801C1CA0 = sFillSetupDL; // type:Gfx size:0x60
0x801C1D00 = gEmptyDL; // type:Gfx size:0x8
0x801C1D10 = D_801C1D10; // type:Vec3f size:0xc
0x801C1D1C = roomDrawFuncs; // type:room_draw_func size:0x10
0x801C1D30 = gBitFlags; // type:u32 size:0x80
0x801C1DB0 = gEquipMasks; // type:u16 size:0x8
0x801C1DB8 = gEquipNegMasks; // type:u16 size:0x8
0x801C1DC0 = gUpgradeMasks; // type:u32 size:0x20
0x801C1DE0 = gUpgradeNegMasks; // type:UNK_TYPE1 size:0x1
0x801C1E00 = gEquipShifts; // type:u8 size:0x4
0x801C1E04 = gUpgradeShifts; // type:u8 size:0x8
0x801C1E0C = gUpgradeCapacities; // type:UNK_TYPE1 size:0x40
0x801C1E4C = gGsFlagsMask; // type:UNK_TYPE2 size:0x2
0x801C1E5C = gGsFlagsShift; // type:UNK_TYPE2 size:0x2
0x801C1E6C = gItemIcons; // type:UNK_PTR size:0x20C
0x801C2078 = gItemSlots; // type:u8 size:0x50
0x801C20C8 = gItemPrices; // type:UNK_TYPE1 size:0x1
0x801C212C = gSceneIdsPerRegion; // type:SceneIdList size:0x252
0x801C2380 = sSceneIdsPerTingleMap; // type:u16 size:0x90
0x801C2410 = gPlayerFormItemRestrictions; // type:UNK_TYPE1 size:0x1
0x801C2650 = tatlMessageFiles; // type:RomFile size:0x10
0x801C2660 = sceneTextureFiles; // type:RomFile size:0x48
0x801C26A8 = sceneHeaderFuncTable; // type:scene_header_func size:0x7c
0x801C2730 = gPlayerFormObjectIndices; // type:s16 size:0xA
0x801C273C = gObjectTableSize; // type:ObjectId size:0x4
0x801C2740 = gObjectTable; // type:RomFile size:0x1418
0x801C3B60 = sSceneDrawDefaultDl; // type:Gfx size:0x58
0x801C3BB8 = gSceneProcSceneDrawFuncs; // type:SceneDrawConfigFunc size:0x20
0x801C3BD8 = gSceneProcDrawFuncs; // type:scene_proc_draw_func size:0x18
0x801C3BF0 = D_801C3BF0; // type:Gfx size:0x20
0x801C3C10 = D_801C3C10; // type:Gfx size:0x20
0x801C3C30 = D_801C3C30; // type:Gfx size:0x20
0x801C3C50 = D_801C3C50; // type:Gfx* size:0xc
0x801C3C60 = D_801C3C60; // type:Gfx size:0x10
0x801C3C70 = D_801C3C70; // type:Gfx size:0x10
0x801C3C80 = D_801C3C80; // type:Gfx* size:0x8
0x801C3C88 = D_801C3C88; // type:Gfx size:0x10
0x801C3CA0 = gSceneTable; // type:SceneTableEntry size:0x710
0x801C43B0 = D_801C43B0; // type:UNK_TYPE1 size:0x1
0x801C43B4 = D_801C43B4; // type:UNK_TYPE1 size:0x1
0x801C43B8 = D_801C43B8; // type:UNK_TYPE1 size:0x1
0x801C43BC = D_801C43BC; // type:UNK_PTR size:0x4
0x801C43C8 = D_801C43C8; // type:UNK_TYPE1 size:0x1
0x801C43CC = D_801C43CC; // type:UNK_TYPE1 size:0x1
0x801C43D0 = D_801C43D0; // type:UNK_TYPE1 size:0x1
0x801C43D4 = D_801C43D4; // type:UNK_TYPE1 size:0x1
0x801C43D8 = D_801C43D8; // type:UNK_TYPE1 size:0x1
0x801C43DC = D_801C43DC; // type:UNK_TYPE1 size:0x1
0x801C43E0 = D_801C43E0; // type:UNK_TYPE1 size:0x1
0x801C43E8 = D_801C43E8; // type:UNK_TYPE1 size:0x1
0x801C43EC = D_801C43EC; // type:UNK_TYPE1 size:0x1
0x801C43F0 = D_801C43F0; // type:UNK_TYPE1 size:0x1
0x801C43F4 = D_801C43F4; // type:UNK_TYPE1 size:0x1
0x801C43F8 = D_801C43F8; // type:UNK_TYPE1 size:0x1
0x801C4400 = D_801C4400; // type:UNK_TYPE1 size:0x1
0x801C4404 = D_801C4404; // type:UNK_TYPE1 size:0x1
0x801C4408 = D_801C4408; // type:UNK_TYPE1 size:0x1
0x801C440C = D_801C440C; // type:UNK_TYPE1 size:0x1
0x801C4410 = D_801C4410; // type:UNK_TYPE1 size:0x1
0x801C4414 = D_801C4414; // type:UNK_TYPE1 size:0x1
0x801C4418 = D_801C4418; // type:UNK_TYPE1 size:0x1
0x801C441C = D_801C441C; // type:UNK_TYPE1 size:0x1
0x801C4420 = D_801C4420; // type:UNK_TYPE1 size:0x1
0x801C4424 = D_801C4424; // type:UNK_TYPE1 size:0x1
0x801C4428 = D_801C4428; // type:UNK_TYPE1 size:0x1
0x801C442C = D_801C442C; // type:UNK_PTR size:0x4
0x801C4458 = D_801C4458; // type:UNK_TYPE1 size:0x1
0x801C445C = D_801C445C; // type:UNK_TYPE1 size:0x1
0x801C4460 = D_801C4460; // type:UNK_TYPE1 size:0x1
0x801C4464 = D_801C4464; // type:UNK_TYPE1 size:0x1
0x801C4468 = D_801C4468; // type:UNK_PTR size:0x4
0x801C4478 = D_801C4478; // type:UNK_TYPE1 size:0x1
0x801C448C = D_801C448C; // type:UNK_TYPE1 size:0x1
0x801C449C = D_801C449C; // type:UNK_TYPE1 size:0x1
0x801C44AC = D_801C44AC; // type:UNK_TYPE1 size:0x1
0x801C44BC = D_801C44BC; // type:UNK_TYPE1 size:0x1
0x801C44CC = D_801C44CC; // type:UNK_TYPE1 size:0x1
0x801C44DC = D_801C44DC; // type:UNK_TYPE1 size:0x1
0x801C44EC = D_801C44EC; // type:UNK_TYPE1 size:0x1
0x801C44FC = D_801C44FC; // type:UNK_TYPE1 size:0x1
0x801C450C = D_801C450C; // type:UNK_TYPE1 size:0x1
0x801C451C = D_801C451C; // type:UNK_TYPE1 size:0x1
0x801C452C = D_801C452C; // type:UNK_TYPE1 size:0x1
0x801C453C = D_801C453C; // type:UNK_TYPE1 size:0x1
0x801C454C = D_801C454C; // type:UNK_TYPE1 size:0x1
0x801C455C = D_801C455C; // type:UNK_TYPE1 size:0x1
0x801C456C = D_801C456C; // type:UNK_TYPE1 size:0x1
0x801C457C = D_801C457C; // type:UNK_PTR size:0x4
0x801C45BC = D_801C45BC; // type:UNK_TYPE1 size:0x1
0x801C45C8 = D_801C45C8; // type:UNK_TYPE1 size:0x1
0x801C45D0 = D_801C45D0; // type:UNK_TYPE1 size:0x1
0x801C45D4 = D_801C45D4; // type:UNK_TYPE1 size:0x1
0x801C45D8 = D_801C45D8; // type:UNK_TYPE1 size:0x1
0x801C45DC = D_801C45DC; // type:UNK_TYPE1 size:0x1
0x801C45E0 = D_801C45E0; // type:UNK_TYPE1 size:0x1
0x801C45E4 = D_801C45E4; // type:UNK_TYPE1 size:0x1
0x801C45E8 = D_801C45E8; // type:UNK_TYPE1 size:0x1
0x801C45EC = D_801C45EC; // type:UNK_TYPE1 size:0x1
0x801C45F0 = D_801C45F0; // type:UNK_TYPE1 size:0x1
0x801C45F4 = D_801C45F4; // type:UNK_TYPE1 size:0x1
0x801C45F8 = D_801C45F8; // type:UNK_TYPE1 size:0x1
0x801C45FC = D_801C45FC; // type:UNK_TYPE1 size:0x1
0x801C4600 = D_801C4600; // type:UNK_TYPE1 size:0x1
0x801C4604 = D_801C4604; // type:UNK_PTR size:0x4
0x801C4640 = D_801C4640; // type:UNK_TYPE1 size:0x1
0x801C4654 = D_801C4654; // type:UNK_TYPE1 size:0x1
0x801C4658 = D_801C4658; // type:UNK_TYPE1 size:0x1
0x801C465C = D_801C465C; // type:UNK_TYPE1 size:0x1
0x801C4660 = D_801C4660; // type:UNK_TYPE1 size:0x1
0x801C4668 = D_801C4668; // type:UNK_TYPE1 size:0x1
0x801C466C = D_801C466C; // type:UNK_TYPE1 size:0x1
0x801C4670 = D_801C4670; // type:UNK_TYPE1 size:0x1
0x801C4678 = D_801C4678; // type:UNK_TYPE1 size:0x1
0x801C467C = D_801C467C; // type:UNK_TYPE1 size:0x1
0x801C4680 = D_801C4680; // type:UNK_TYPE1 size:0x1
0x801C4684 = D_801C4684; // type:UNK_TYPE1 size:0x1
0x801C4690 = D_801C4690; // type:UNK_TYPE1 size:0x1
0x801C46A0 = D_801C46A0; // type:UNK_TYPE1 size:0x1
0x801C46AC = D_801C46AC; // type:UNK_TYPE1 size:0x1
0x801C46B8 = D_801C46B8; // type:UNK_TYPE1 size:0x1
0x801C46C4 = D_801C46C4; // type:UNK_TYPE1 size:0x1
0x801C46CC = D_801C46CC; // type:UNK_TYPE1 size:0x1
0x801C46D0 = D_801C46D0; // type:UNK_TYPE1 size:0x1
0x801C46D4 = D_801C46D4; // type:UNK_TYPE1 size:0x1
0x801C46D8 = D_801C46D8; // type:UNK_TYPE1 size:0x1
0x801C46DC = D_801C46DC; // type:UNK_PTR size:0x4
0x801C46F0 = D_801C46F0; // type:UNK_TYPE1 size:0x1
0x801C46F4 = D_801C46F4; // type:UNK_TYPE1 size:0x1
0x801C46F8 = D_801C46F8; // type:UNK_TYPE1 size:0x1
0x801C46FC = D_801C46FC; // type:UNK_TYPE1 size:0x1
0x801C4708 = D_801C4708; // type:UNK_TYPE1 size:0x1
0x801C4710 = D_801C4710; // type:UNK_TYPE1 size:0x1
0x801C4718 = D_801C4718; // type:UNK_TYPE1 size:0x1
0x801C4720 = D_801C4720; // type:UNK_TYPE1 size:0x1
0x801C4724 = D_801C4724; // type:UNK_TYPE1 size:0x1
0x801C4728 = D_801C4728; // type:UNK_TYPE1 size:0x1
0x801C472C = D_801C472C; // type:UNK_TYPE1 size:0x1
0x801C4730 = D_801C4730; // type:UNK_TYPE1 size:0x1
0x801C4734 = D_801C4734; // type:UNK_TYPE1 size:0x1
0x801C4738 = D_801C4738; // type:UNK_TYPE1 size:0x1
0x801C473C = D_801C473C; // type:UNK_PTR size:0x4
0x801C4758 = D_801C4758; // type:UNK_TYPE1 size:0x1
0x801C475C = D_801C475C; // type:UNK_TYPE1 size:0x1
0x801C4760 = D_801C4760; // type:UNK_TYPE1 size:0x1
0x801C4768 = D_801C4768; // type:UNK_TYPE1 size:0x1
0x801C476C = D_801C476C; // type:UNK_TYPE1 size:0x1
0x801C4770 = D_801C4770; // type:UNK_TYPE1 size:0x1
0x801C4774 = D_801C4774; // type:UNK_TYPE1 size:0x1
0x801C4778 = D_801C4778; // type:UNK_TYPE1 size:0x1
0x801C4780 = D_801C4780; // type:UNK_TYPE1 size:0x1
0x801C4784 = D_801C4784; // type:UNK_TYPE1 size:0x1
0x801C4788 = D_801C4788; // type:UNK_TYPE1 size:0x1
0x801C4790 = D_801C4790; // type:UNK_TYPE1 size:0x1
0x801C4794 = D_801C4794; // type:UNK_TYPE1 size:0x1
0x801C4798 = D_801C4798; // type:UNK_TYPE1 size:0x1
0x801C479C = D_801C479C; // type:UNK_TYPE1 size:0x1
0x801C47A0 = D_801C47A0; // type:UNK_TYPE1 size:0x1
0x801C47A4 = D_801C47A4; // type:UNK_TYPE1 size:0x1
0x801C47A8 = D_801C47A8; // type:UNK_TYPE1 size:0x1
0x801C47AC = D_801C47AC; // type:UNK_PTR size:0x4
0x801C47C8 = D_801C47C8; // type:UNK_TYPE1 size:0x1
0x801C47CC = D_801C47CC; // type:UNK_TYPE1 size:0x1
0x801C47D0 = D_801C47D0; // type:UNK_TYPE1 size:0x1
0x801C47D4 = D_801C47D4; // type:UNK_TYPE1 size:0x1
0x801C47D8 = D_801C47D8; // type:UNK_TYPE1 size:0x1
0x801C47DC = D_801C47DC; // type:UNK_TYPE1 size:0x1
0x801C47E0 = D_801C47E0; // type:UNK_TYPE1 size:0x1
0x801C47E4 = D_801C47E4; // type:UNK_TYPE1 size:0x1
0x801C47E8 = D_801C47E8; // type:UNK_TYPE1 size:0x1
0x801C47EC = D_801C47EC; // type:UNK_TYPE1 size:0x1
0x801C47F0 = D_801C47F0; // type:UNK_TYPE1 size:0x1
0x801C47F4 = D_801C47F4; // type:UNK_TYPE1 size:0x1
0x801C47F8 = D_801C47F8; // type:UNK_TYPE1 size:0x1
0x801C47FC = D_801C47FC; // type:UNK_TYPE1 size:0x1
0x801C4800 = D_801C4800; // type:UNK_TYPE1 size:0x1
0x801C4804 = D_801C4804; // type:UNK_TYPE1 size:0x1
0x801C4808 = D_801C4808; // type:UNK_PTR size:0x4
0x801C4848 = D_801C4848; // type:UNK_TYPE1 size:0x1
0x801C484C = D_801C484C; // type:UNK_TYPE1 size:0x1
0x801C4850 = D_801C4850; // type:UNK_TYPE1 size:0x1
0x801C4854 = D_801C4854; // type:UNK_TYPE1 size:0x1
0x801C4858 = D_801C4858; // type:UNK_TYPE1 size:0x1
0x801C4860 = D_801C4860; // type:UNK_TYPE1 size:0x1
0x801C4868 = D_801C4868; // type:UNK_TYPE1 size:0x1
0x801C486C = D_801C486C; // type:UNK_TYPE1 size:0x1
0x801C4870 = D_801C4870; // type:UNK_TYPE1 size:0x1
0x801C4874 = D_801C4874; // type:UNK_TYPE1 size:0x1
0x801C4878 = D_801C4878; // type:UNK_TYPE1 size:0x1
0x801C487C = D_801C487C; // type:UNK_TYPE1 size:0x1
0x801C4880 = D_801C4880; // type:UNK_TYPE1 size:0x1
0x801C4884 = D_801C4884; // type:UNK_TYPE1 size:0x1
0x801C4888 = D_801C4888; // type:UNK_TYPE1 size:0x1
0x801C488C = D_801C488C; // type:UNK_PTR size:0x4
0x801C48B4 = D_801C48B4; // type:UNK_TYPE1 size:0x1
0x801C48B8 = D_801C48B8; // type:UNK_TYPE1 size:0x1
0x801C48BC = D_801C48BC; // type:UNK_TYPE1 size:0x1
0x801C48C0 = D_801C48C0; // type:UNK_TYPE1 size:0x1
0x801C48C4 = D_801C48C4; // type:UNK_TYPE1 size:0x1
0x801C48C8 = D_801C48C8; // type:UNK_TYPE1 size:0x1
0x801C48CC = D_801C48CC; // type:UNK_TYPE1 size:0x1
0x801C48D0 = D_801C48D0; // type:UNK_TYPE1 size:0x1
0x801C48DC = D_801C48DC; // type:UNK_TYPE1 size:0x1
0x801C48E0 = D_801C48E0; // type:UNK_TYPE1 size:0x1
0x801C48E4 = D_801C48E4; // type:UNK_TYPE1 size:0x1
0x801C48E8 = D_801C48E8; // type:UNK_TYPE1 size:0x1
0x801C48EC = D_801C48EC; // type:UNK_TYPE1 size:0x1
0x801C48F0 = D_801C48F0; // type:UNK_TYPE1 size:0x1
0x801C48F4 = D_801C48F4; // type:UNK_TYPE1 size:0x1
0x801C48F8 = D_801C48F8; // type:UNK_TYPE1 size:0x1
0x801C48FC = D_801C48FC; // type:UNK_TYPE1 size:0x1
0x801C4900 = D_801C4900; // type:UNK_TYPE1 size:0x1
0x801C4904 = D_801C4904; // type:UNK_TYPE1 size:0x1
0x801C4908 = D_801C4908; // type:UNK_TYPE1 size:0x1
0x801C490C = D_801C490C; // type:UNK_TYPE1 size:0x1
0x801C4910 = D_801C4910; // type:UNK_PTR size:0x4
0x801C493C = D_801C493C; // type:UNK_TYPE1 size:0x1
0x801C4940 = D_801C4940; // type:UNK_TYPE1 size:0x1
0x801C4944 = D_801C4944; // type:UNK_TYPE1 size:0x1
0x801C496C = D_801C496C; // type:UNK_TYPE1 size:0x1
0x801C4994 = D_801C4994; // type:UNK_TYPE1 size:0x1
0x801C49AC = D_801C49AC; // type:UNK_TYPE1 size:0x1
0x801C49C4 = D_801C49C4; // type:UNK_TYPE1 size:0x1
0x801C49DC = D_801C49DC; // type:UNK_TYPE1 size:0x1
0x801C49F4 = D_801C49F4; // type:UNK_TYPE1 size:0x1
0x801C4A0C = D_801C4A0C; // type:UNK_TYPE1 size:0x1
0x801C4A24 = D_801C4A24; // type:UNK_TYPE1 size:0x1
0x801C4A3C = D_801C4A3C; // type:UNK_TYPE1 size:0x1
0x801C4A54 = D_801C4A54; // type:UNK_TYPE1 size:0x1
0x801C4A6C = D_801C4A6C; // type:UNK_TYPE1 size:0x1
0x801C4A84 = D_801C4A84; // type:UNK_TYPE1 size:0x1
0x801C4A9C = D_801C4A9C; // type:UNK_TYPE1 size:0x1
0x801C4AB4 = D_801C4AB4; // type:UNK_TYPE1 size:0x1
0x801C4AB8 = D_801C4AB8; // type:UNK_PTR size:0x4
0x801C4AF4 = D_801C4AF4; // type:UNK_TYPE1 size:0x1
0x801C4AF8 = D_801C4AF8; // type:UNK_TYPE1 size:0x1
0x801C4AFC = D_801C4AFC; // type:UNK_TYPE1 size:0x1
0x801C4B00 = D_801C4B00; // type:UNK_TYPE1 size:0x1
0x801C4B04 = D_801C4B04; // type:UNK_TYPE1 size:0x1
0x801C4B08 = D_801C4B08; // type:UNK_TYPE1 size:0x1
0x801C4B0C = D_801C4B0C; // type:UNK_TYPE1 size:0x1
0x801C4B14 = D_801C4B14; // type:UNK_TYPE1 size:0x1
0x801C4B1C = D_801C4B1C; // type:UNK_TYPE1 size:0x1
0x801C4B24 = D_801C4B24; // type:UNK_TYPE1 size:0x1
0x801C4B2C = D_801C4B2C; // type:UNK_TYPE1 size:0x1
0x801C4B34 = D_801C4B34; // type:UNK_PTR size:0x4
0x801C4B44 = D_801C4B44; // type:UNK_TYPE1 size:0x1
0x801C4B4C = D_801C4B4C; // type:UNK_TYPE1 size:0x1
0x801C4B50 = D_801C4B50; // type:UNK_TYPE1 size:0x1
0x801C4B54 = D_801C4B54; // type:UNK_TYPE1 size:0x1
0x801C4B58 = D_801C4B58; // type:UNK_TYPE1 size:0x1
0x801C4B5C = D_801C4B5C; // type:UNK_TYPE1 size:0x1
0x801C4B60 = D_801C4B60; // type:UNK_TYPE1 size:0x1
0x801C4B64 = D_801C4B64; // type:UNK_TYPE1 size:0x1
0x801C4B68 = D_801C4B68; // type:UNK_TYPE1 size:0x1
0x801C4B6C = D_801C4B6C; // type:UNK_PTR size:0x4
0x801C4B90 = D_801C4B90; // type:UNK_TYPE1 size:0x1
0x801C4B94 = D_801C4B94; // type:UNK_TYPE1 size:0x1
0x801C4B98 = D_801C4B98; // type:UNK_TYPE1 size:0x1
0x801C4BA0 = D_801C4BA0; // type:UNK_TYPE1 size:0x1
0x801C4BBC = D_801C4BBC; // type:UNK_TYPE1 size:0x1
0x801C4BC0 = D_801C4BC0; // type:UNK_TYPE1 size:0x1
0x801C4BC4 = D_801C4BC4; // type:UNK_TYPE1 size:0x1
0x801C4BC8 = D_801C4BC8; // type:UNK_TYPE1 size:0x1
0x801C4BCC = D_801C4BCC; // type:UNK_TYPE1 size:0x1
0x801C4BD0 = D_801C4BD0; // type:UNK_TYPE1 size:0x1
0x801C4BD4 = D_801C4BD4; // type:UNK_TYPE1 size:0x1
0x801C4BD8 = D_801C4BD8; // type:UNK_TYPE1 size:0x1
0x801C4BDC = D_801C4BDC; // type:UNK_TYPE1 size:0x1
0x801C4BE0 = D_801C4BE0; // type:UNK_TYPE1 size:0x1
0x801C4BE4 = D_801C4BE4; // type:UNK_TYPE1 size:0x1
0x801C4BE8 = D_801C4BE8; // type:UNK_PTR size:0x4
0x801C4C18 = D_801C4C18; // type:UNK_TYPE1 size:0x1
0x801C4C1C = D_801C4C1C; // type:UNK_TYPE1 size:0x1
0x801C4C20 = D_801C4C20; // type:UNK_TYPE1 size:0x1
0x801C4C24 = D_801C4C24; // type:UNK_TYPE1 size:0x1
0x801C4C28 = D_801C4C28; // type:UNK_TYPE1 size:0x1
0x801C4C2C = D_801C4C2C; // type:UNK_PTR size:0x4
0x801C4C40 = D_801C4C40; // type:UNK_TYPE1 size:0x1
0x801C4C4C = D_801C4C4C; // type:UNK_TYPE1 size:0x1
0x801C4C54 = D_801C4C54; // type:UNK_TYPE1 size:0x1
0x801C4C5C = D_801C4C5C; // type:UNK_TYPE1 size:0x1
0x801C4C64 = D_801C4C64; // type:UNK_TYPE1 size:0x1
0x801C4C6C = D_801C4C6C; // type:UNK_TYPE1 size:0x1
0x801C4C74 = D_801C4C74; // type:UNK_TYPE1 size:0x1
0x801C4C7C = D_801C4C7C; // type:UNK_TYPE1 size:0x1
0x801C4C84 = D_801C4C84; // type:UNK_TYPE1 size:0x1
0x801C4C8C = D_801C4C8C; // type:UNK_TYPE1 size:0x1
0x801C4C94 = D_801C4C94; // type:UNK_TYPE1 size:0x1
0x801C4C9C = D_801C4C9C; // type:UNK_TYPE1 size:0x1
0x801C4CA4 = D_801C4CA4; // type:UNK_TYPE1 size:0x1
0x801C4CAC = D_801C4CAC; // type:UNK_TYPE1 size:0x1
0x801C4CB4 = D_801C4CB4; // type:UNK_PTR size:0x4
0x801C4CEC = D_801C4CEC; // type:UNK_TYPE1 size:0x1
0x801C4CF4 = D_801C4CF4; // type:UNK_TYPE1 size:0x1
0x801C4CFC = D_801C4CFC; // type:UNK_TYPE1 size:0x1
0x801C4D04 = D_801C4D04; // type:UNK_TYPE1 size:0x1
0x801C4D0C = D_801C4D0C; // type:UNK_TYPE1 size:0x1
0x801C4D14 = D_801C4D14; // type:UNK_TYPE1 size:0x1
0x801C4D1C = D_801C4D1C; // type:UNK_TYPE1 size:0x1
0x801C4D24 = D_801C4D24; // type:UNK_TYPE1 size:0x1
0x801C4D2C = D_801C4D2C; // type:UNK_TYPE1 size:0x1
0x801C4D34 = D_801C4D34; // type:UNK_TYPE1 size:0x1
0x801C4D3C = D_801C4D3C; // type:UNK_PTR size:0x4
0x801C4D64 = D_801C4D64; // type:UNK_TYPE1 size:0x1
0x801C4D68 = D_801C4D68; // type:UNK_TYPE1 size:0x1
0x801C4D6C = D_801C4D6C; // type:UNK_TYPE1 size:0x1
0x801C4D70 = D_801C4D70; // type:UNK_TYPE1 size:0x1
0x801C4D74 = D_801C4D74; // type:UNK_TYPE1 size:0x1
0x801C4D78 = D_801C4D78; // type:UNK_TYPE1 size:0x1
0x801C4D7C = D_801C4D7C; // type:UNK_TYPE1 size:0x1
0x801C4D80 = D_801C4D80; // type:UNK_TYPE1 size:0x1
0x801C4D84 = D_801C4D84; // type:UNK_TYPE1 size:0x1
0x801C4D88 = D_801C4D88; // type:UNK_PTR size:0x4
0x801C4DA4 = D_801C4DA4; // type:UNK_TYPE1 size:0x1
0x801C4DA8 = D_801C4DA8; // type:UNK_TYPE1 size:0x1
0x801C4DAC = D_801C4DAC; // type:UNK_TYPE1 size:0x1
0x801C4DB0 = D_801C4DB0; // type:UNK_TYPE1 size:0x1
0x801C4DB4 = D_801C4DB4; // type:UNK_TYPE1 size:0x1
0x801C4DBC = D_801C4DBC; // type:UNK_TYPE1 size:0x1
0x801C4DC0 = D_801C4DC0; // type:UNK_TYPE1 size:0x1
0x801C4DC4 = D_801C4DC4; // type:UNK_TYPE1 size:0x1
0x801C4DC8 = D_801C4DC8; // type:UNK_PTR size:0x4
0x801C4DD8 = D_801C4DD8; // type:UNK_TYPE1 size:0x1
0x801C4DDC = D_801C4DDC; // type:UNK_TYPE1 size:0x1
0x801C4DE0 = D_801C4DE0; // type:UNK_TYPE1 size:0x1
0x801C4DE4 = D_801C4DE4; // type:UNK_TYPE1 size:0x1
0x801C4DE8 = D_801C4DE8; // type:UNK_TYPE1 size:0x1
0x801C4DEC = D_801C4DEC; // type:UNK_TYPE1 size:0x1
0x801C4DF8 = D_801C4DF8; // type:UNK_TYPE1 size:0x1
0x801C4DFC = D_801C4DFC; // type:UNK_TYPE1 size:0x1
0x801C4E00 = D_801C4E00; // type:UNK_TYPE1 size:0x1
0x801C4E08 = D_801C4E08; // type:UNK_TYPE1 size:0x1
0x801C4E10 = D_801C4E10; // type:UNK_TYPE1 size:0x1
0x801C4E14 = D_801C4E14; // type:UNK_TYPE1 size:0x1
0x801C4E1C = D_801C4E1C; // type:UNK_TYPE1 size:0x1
0x801C4E24 = D_801C4E24; // type:UNK_TYPE1 size:0x1
0x801C4E28 = D_801C4E28; // type:UNK_TYPE1 size:0x1
0x801C4E2C = D_801C4E2C; // type:UNK_TYPE1 size:0x1
0x801C4E30 = D_801C4E30; // type:UNK_TYPE1 size:0x1
0x801C4E34 = D_801C4E34; // type:UNK_TYPE1 size:0x1
0x801C4E38 = D_801C4E38; // type:UNK_PTR size:0x4
0x801C4E50 = D_801C4E50; // type:UNK_TYPE1 size:0x1
0x801C4E54 = D_801C4E54; // type:UNK_TYPE1 size:0x1
0x801C4E58 = D_801C4E58; // type:UNK_TYPE1 size:0x1
0x801C4E5C = D_801C4E5C; // type:UNK_TYPE1 size:0x1
0x801C4E60 = D_801C4E60; // type:UNK_TYPE1 size:0x1
0x801C4E64 = D_801C4E64; // type:UNK_TYPE1 size:0x1
0x801C4E68 = D_801C4E68; // type:UNK_TYPE1 size:0x1
0x801C4E6C = D_801C4E6C; // type:UNK_TYPE1 size:0x1
0x801C4E70 = D_801C4E70; // type:UNK_TYPE1 size:0x1
0x801C4E74 = D_801C4E74; // type:UNK_TYPE1 size:0x1
0x801C4E78 = D_801C4E78; // type:UNK_TYPE1 size:0x1
0x801C4E7C = D_801C4E7C; // type:UNK_TYPE1 size:0x1
0x801C4E80 = D_801C4E80; // type:UNK_TYPE1 size:0x1
0x801C4E84 = D_801C4E84; // type:UNK_PTR size:0x4
0x801C4EB0 = D_801C4EB0; // type:UNK_TYPE1 size:0x1
0x801C4EBC = D_801C4EBC; // type:UNK_TYPE1 size:0x1
0x801C4EC8 = D_801C4EC8; // type:UNK_TYPE1 size:0x1
0x801C4ED4 = D_801C4ED4; // type:UNK_TYPE1 size:0x1
0x801C4EE0 = D_801C4EE0; // type:UNK_TYPE1 size:0x1
0x801C4EEC = D_801C4EEC; // type:UNK_PTR size:0x4
0x801C4F00 = D_801C4F00; // type:UNK_TYPE1 size:0x1
0x801C4F04 = D_801C4F04; // type:UNK_TYPE1 size:0x1
0x801C4F08 = D_801C4F08; // type:UNK_TYPE1 size:0x1
0x801C4F10 = D_801C4F10; // type:UNK_TYPE1 size:0x1
0x801C4F18 = D_801C4F18; // type:UNK_TYPE1 size:0x1
0x801C4F1C = D_801C4F1C; // type:UNK_TYPE1 size:0x1
0x801C4F20 = D_801C4F20; // type:UNK_TYPE1 size:0x1
0x801C4F24 = D_801C4F24; // type:UNK_TYPE1 size:0x1
0x801C4F28 = D_801C4F28; // type:UNK_PTR size:0x4
0x801C4F3C = D_801C4F3C; // type:UNK_TYPE1 size:0x1
0x801C4F40 = D_801C4F40; // type:UNK_TYPE1 size:0x1
0x801C4F44 = D_801C4F44; // type:UNK_TYPE1 size:0x1
0x801C4F48 = D_801C4F48; // type:UNK_TYPE1 size:0x1
0x801C4F54 = D_801C4F54; // type:UNK_TYPE1 size:0x1
0x801C4F58 = D_801C4F58; // type:UNK_TYPE1 size:0x1
0x801C4F5C = D_801C4F5C; // type:UNK_TYPE1 size:0x1
0x801C4F60 = D_801C4F60; // type:UNK_TYPE1 size:0x1
0x801C4F64 = D_801C4F64; // type:UNK_PTR size:0x4
0x801C4F74 = D_801C4F74; // type:UNK_TYPE1 size:0x1
0x801C4F78 = D_801C4F78; // type:UNK_TYPE1 size:0x1
0x801C4F7C = D_801C4F7C; // type:UNK_TYPE1 size:0x1
0x801C4F84 = D_801C4F84; // type:UNK_TYPE1 size:0x1
0x801C4F88 = D_801C4F88; // type:UNK_TYPE1 size:0x1
0x801C4F8C = D_801C4F8C; // type:UNK_TYPE1 size:0x1
0x801C4F90 = D_801C4F90; // type:UNK_TYPE1 size:0x1
0x801C4F94 = D_801C4F94; // type:UNK_TYPE1 size:0x1
0x801C4F98 = D_801C4F98; // type:UNK_TYPE1 size:0x1
0x801C4F9C = D_801C4F9C; // type:UNK_TYPE1 size:0x1
0x801C4FA0 = D_801C4FA0; // type:UNK_PTR size:0x4
0x801C4FBC = D_801C4FBC; // type:UNK_TYPE1 size:0x1
0x801C4FC0 = D_801C4FC0; // type:UNK_TYPE1 size:0x1
0x801C4FC4 = D_801C4FC4; // type:UNK_TYPE1 size:0x1
0x801C4FC8 = D_801C4FC8; // type:UNK_TYPE1 size:0x1
0x801C4FCC = D_801C4FCC; // type:UNK_TYPE1 size:0x1
0x801C4FD0 = D_801C4FD0; // type:UNK_PTR size:0x4
0x801C4FE4 = D_801C4FE4; // type:UNK_TYPE1 size:0x1
0x801C4FE8 = D_801C4FE8; // type:UNK_TYPE1 size:0x1
0x801C4FEC = D_801C4FEC; // type:UNK_TYPE1 size:0x1
0x801C4FF4 = D_801C4FF4; // type:UNK_TYPE1 size:0x1
0x801C4FF8 = D_801C4FF8; // type:UNK_TYPE1 size:0x1
0x801C4FFC = D_801C4FFC; // type:UNK_TYPE1 size:0x1
0x801C5000 = D_801C5000; // type:UNK_TYPE1 size:0x1
0x801C5004 = D_801C5004; // type:UNK_TYPE1 size:0x1
0x801C5008 = D_801C5008; // type:UNK_TYPE1 size:0x1
0x801C500C = D_801C500C; // type:UNK_TYPE1 size:0x1
0x801C5010 = D_801C5010; // type:UNK_TYPE1 size:0x1
0x801C5014 = D_801C5014; // type:UNK_TYPE1 size:0x1
0x801C5018 = D_801C5018; // type:UNK_TYPE1 size:0x1
0x801C501C = D_801C501C; // type:UNK_TYPE1 size:0x1
0x801C5020 = D_801C5020; // type:UNK_PTR size:0x4
0x801C5044 = D_801C5044; // type:UNK_TYPE1 size:0x1
0x801C5048 = D_801C5048; // type:UNK_TYPE1 size:0x1
0x801C504C = D_801C504C; // type:UNK_TYPE1 size:0x1
0x801C5050 = D_801C5050; // type:UNK_TYPE1 size:0x1
0x801C505C = D_801C505C; // type:UNK_TYPE1 size:0x1
0x801C5060 = D_801C5060; // type:UNK_TYPE1 size:0x1
0x801C5064 = D_801C5064; // type:UNK_TYPE1 size:0x1
0x801C5068 = D_801C5068; // type:UNK_TYPE1 size:0x1
0x801C5074 = D_801C5074; // type:UNK_TYPE1 size:0x1
0x801C5078 = D_801C5078; // type:UNK_TYPE1 size:0x1
0x801C507C = D_801C507C; // type:UNK_TYPE1 size:0x1
0x801C5080 = D_801C5080; // type:UNK_TYPE1 size:0x1
0x801C508C = D_801C508C; // type:UNK_TYPE1 size:0x1
0x801C5090 = D_801C5090; // type:UNK_TYPE1 size:0x1
0x801C5094 = D_801C5094; // type:UNK_TYPE1 size:0x1
0x801C509C = D_801C509C; // type:UNK_TYPE1 size:0x1
0x801C50A0 = D_801C50A0; // type:UNK_TYPE1 size:0x1
0x801C50A4 = D_801C50A4; // type:UNK_TYPE1 size:0x1
0x801C50A8 = D_801C50A8; // type:UNK_TYPE1 size:0x1
0x801C50AC = D_801C50AC; // type:UNK_TYPE1 size:0x1
0x801C50B0 = D_801C50B0; // type:UNK_TYPE1 size:0x1
0x801C50B4 = D_801C50B4; // type:UNK_TYPE1 size:0x1
0x801C50C0 = D_801C50C0; // type:UNK_TYPE1 size:0x1
0x801C50C4 = D_801C50C4; // type:UNK_TYPE1 size:0x1
0x801C50C8 = D_801C50C8; // type:UNK_TYPE1 size:0x1
0x801C50CC = D_801C50CC; // type:UNK_TYPE1 size:0x1
0x801C50D0 = D_801C50D0; // type:UNK_PTR size:0x4
0x801C50E0 = D_801C50E0; // type:UNK_TYPE1 size:0x1
0x801C50E4 = D_801C50E4; // type:UNK_TYPE1 size:0x1
0x801C50E8 = D_801C50E8; // type:UNK_TYPE1 size:0x1
0x801C50F0 = D_801C50F0; // type:UNK_TYPE1 size:0x1
0x801C50F8 = D_801C50F8; // type:UNK_TYPE1 size:0x1
0x801C50FC = D_801C50FC; // type:UNK_TYPE1 size:0x1
0x801C5100 = D_801C5100; // type:UNK_TYPE1 size:0x1
0x801C5104 = D_801C5104; // type:UNK_TYPE1 size:0x1
0x801C5108 = D_801C5108; // type:UNK_TYPE1 size:0x1
0x801C510C = D_801C510C; // type:UNK_TYPE1 size:0x1
0x801C5110 = D_801C5110; // type:UNK_TYPE1 size:0x1
0x801C5114 = D_801C5114; // type:UNK_TYPE1 size:0x1
0x801C5118 = D_801C5118; // type:UNK_PTR size:0x4
0x801C513C = D_801C513C; // type:UNK_TYPE1 size:0x1
0x801C5144 = D_801C5144; // type:UNK_TYPE1 size:0x1
0x801C514C = D_801C514C; // type:UNK_TYPE1 size:0x1
0x801C5154 = D_801C5154; // type:UNK_TYPE1 size:0x1
0x801C515C = D_801C515C; // type:UNK_TYPE1 size:0x1
0x801C5164 = D_801C5164; // type:UNK_TYPE1 size:0x1
0x801C516C = D_801C516C; // type:UNK_TYPE1 size:0x1
0x801C5174 = D_801C5174; // type:UNK_PTR size:0x4
0x801C5184 = D_801C5184; // type:UNK_TYPE1 size:0x1
0x801C5188 = D_801C5188; // type:UNK_TYPE1 size:0x1
0x801C518C = D_801C518C; // type:UNK_TYPE1 size:0x1
0x801C5190 = D_801C5190; // type:UNK_TYPE1 size:0x1
0x801C519C = D_801C519C; // type:UNK_TYPE1 size:0x1
0x801C51A0 = D_801C51A0; // type:UNK_TYPE1 size:0x1
0x801C51A4 = D_801C51A4; // type:UNK_TYPE1 size:0x1
0x801C51A8 = D_801C51A8; // type:UNK_TYPE1 size:0x1
0x801C51B4 = D_801C51B4; // type:UNK_TYPE1 size:0x1
0x801C51B8 = D_801C51B8; // type:UNK_TYPE1 size:0x1
0x801C51BC = D_801C51BC; // type:UNK_TYPE1 size:0x1
0x801C51C4 = D_801C51C4; // type:UNK_TYPE1 size:0x1
0x801C51C8 = D_801C51C8; // type:UNK_TYPE1 size:0x1
0x801C51CC = D_801C51CC; // type:UNK_TYPE1 size:0x1
0x801C51D4 = D_801C51D4; // type:UNK_TYPE1 size:0x1
0x801C51D8 = D_801C51D8; // type:UNK_TYPE1 size:0x1
0x801C51DC = D_801C51DC; // type:UNK_TYPE1 size:0x1
0x801C51E0 = D_801C51E0; // type:UNK_TYPE1 size:0x1
0x801C51E4 = D_801C51E4; // type:UNK_TYPE1 size:0x1
0x801C51E8 = D_801C51E8; // type:UNK_PTR size:0x4
0x801C5200 = D_801C5200; // type:UNK_TYPE1 size:0x1
0x801C5204 = D_801C5204; // type:UNK_TYPE1 size:0x1
0x801C5208 = D_801C5208; // type:UNK_TYPE1 size:0x1
0x801C520C = D_801C520C; // type:UNK_TYPE1 size:0x1
0x801C5210 = D_801C5210; // type:UNK_TYPE1 size:0x1
0x801C5214 = D_801C5214; // type:UNK_TYPE1 size:0x1
0x801C5218 = D_801C5218; // type:UNK_TYPE1 size:0x1
0x801C521C = D_801C521C; // type:UNK_TYPE1 size:0x1
0x801C5220 = D_801C5220; // type:UNK_TYPE1 size:0x1
0x801C5224 = D_801C5224; // type:UNK_PTR size:0x4
0x801C5240 = D_801C5240; // type:UNK_TYPE1 size:0x1
0x801C5244 = D_801C5244; // type:UNK_TYPE1 size:0x1
0x801C5248 = D_801C5248; // type:UNK_TYPE1 size:0x1
0x801C5258 = D_801C5258; // type:UNK_TYPE1 size:0x1
0x801C5268 = D_801C5268; // type:UNK_TYPE1 size:0x1
0x801C5278 = D_801C5278; // type:UNK_TYPE1 size:0x1
0x801C5284 = D_801C5284; // type:UNK_TYPE1 size:0x1
0x801C5288 = D_801C5288; // type:UNK_TYPE1 size:0x1
0x801C528C = D_801C528C; // type:UNK_TYPE1 size:0x1
0x801C5290 = D_801C5290; // type:UNK_TYPE1 size:0x1
0x801C5294 = D_801C5294; // type:UNK_TYPE1 size:0x1
0x801C5298 = D_801C5298; // type:UNK_TYPE1 size:0x1
0x801C529C = D_801C529C; // type:UNK_TYPE1 size:0x1
0x801C52A4 = D_801C52A4; // type:UNK_TYPE1 size:0x1
0x801C52D0 = D_801C52D0; // type:UNK_TYPE1 size:0x1
0x801C52D4 = D_801C52D4; // type:UNK_TYPE1 size:0x1
0x801C52D8 = D_801C52D8; // type:UNK_TYPE1 size:0x1
0x801C52DC = D_801C52DC; // type:UNK_TYPE1 size:0x1
0x801C52E0 = D_801C52E0; // type:UNK_TYPE1 size:0x1
0x801C52E4 = D_801C52E4; // type:UNK_TYPE1 size:0x1
0x801C52E8 = D_801C52E8; // type:UNK_TYPE1 size:0x1
0x801C52EC = D_801C52EC; // type:UNK_PTR size:0x4
0x801C5304 = D_801C5304; // type:UNK_TYPE1 size:0x1
0x801C530C = D_801C530C; // type:UNK_TYPE1 size:0x1
0x801C5314 = D_801C5314; // type:UNK_TYPE1 size:0x1
0x801C531C = D_801C531C; // type:UNK_TYPE1 size:0x1
0x801C5328 = D_801C5328; // type:UNK_TYPE1 size:0x1
0x801C5334 = D_801C5334; // type:UNK_TYPE1 size:0x1
0x801C5338 = D_801C5338; // type:UNK_TYPE1 size:0x1
0x801C533C = D_801C533C; // type:UNK_TYPE1 size:0x1
0x801C5340 = D_801C5340; // type:UNK_TYPE1 size:0x1
0x801C5344 = D_801C5344; // type:UNK_TYPE1 size:0x1
0x801C5348 = D_801C5348; // type:UNK_TYPE1 size:0x1
0x801C534C = D_801C534C; // type:UNK_TYPE1 size:0x1
0x801C5350 = D_801C5350; // type:UNK_TYPE1 size:0x1
0x801C5354 = D_801C5354; // type:UNK_TYPE1 size:0x1
0x801C5358 = D_801C5358; // type:UNK_TYPE1 size:0x1
0x801C535C = D_801C535C; // type:UNK_TYPE1 size:0x1
0x801C5360 = D_801C5360; // type:UNK_TYPE1 size:0x1
0x801C5364 = D_801C5364; // type:UNK_PTR size:0x4
0x801C5398 = D_801C5398; // type:UNK_TYPE1 size:0x1
0x801C53A0 = D_801C53A0; // type:UNK_TYPE1 size:0x1
0x801C53A4 = D_801C53A4; // type:UNK_TYPE1 size:0x1
0x801C53A8 = D_801C53A8; // type:UNK_TYPE1 size:0x1
0x801C53AC = D_801C53AC; // type:UNK_TYPE1 size:0x1
0x801C53B0 = D_801C53B0; // type:UNK_TYPE1 size:0x1
0x801C53B4 = D_801C53B4; // type:UNK_TYPE1 size:0x1
0x801C53B8 = D_801C53B8; // type:UNK_TYPE1 size:0x1
0x801C53BC = D_801C53BC; // type:UNK_TYPE1 size:0x1
0x801C53C0 = D_801C53C0; // type:UNK_TYPE1 size:0x1
0x801C53C4 = D_801C53C4; // type:UNK_PTR size:0x4
0x801C53EC = D_801C53EC; // type:UNK_TYPE1 size:0x1
0x801C53F4 = D_801C53F4; // type:UNK_TYPE1 size:0x1
0x801C53F8 = D_801C53F8; // type:UNK_TYPE1 size:0x1
0x801C53FC = D_801C53FC; // type:UNK_TYPE1 size:0x1
0x801C5400 = D_801C5400; // type:UNK_TYPE1 size:0x1
0x801C5404 = D_801C5404; // type:UNK_TYPE1 size:0x1
0x801C5408 = D_801C5408; // type:UNK_TYPE1 size:0x1
0x801C540C = D_801C540C; // type:UNK_TYPE1 size:0x1
0x801C5410 = D_801C5410; // type:UNK_PTR size:0x4
0x801C5430 = D_801C5430; // type:UNK_TYPE1 size:0x1
0x801C5440 = D_801C5440; // type:UNK_TYPE1 size:0x1
0x801C5448 = D_801C5448; // type:UNK_TYPE1 size:0x1
0x801C544C = D_801C544C; // type:UNK_TYPE1 size:0x1
0x801C5450 = D_801C5450; // type:UNK_TYPE1 size:0x1
0x801C5454 = D_801C5454; // type:UNK_TYPE1 size:0x1
0x801C5458 = D_801C5458; // type:UNK_TYPE1 size:0x1
0x801C545C = D_801C545C; // type:UNK_TYPE1 size:0x1
0x801C5460 = D_801C5460; // type:UNK_TYPE1 size:0x1
0x801C5464 = D_801C5464; // type:UNK_TYPE1 size:0x1
0x801C5468 = D_801C5468; // type:UNK_TYPE1 size:0x1
0x801C546C = D_801C546C; // type:UNK_PTR size:0x4
0x801C5498 = D_801C5498; // type:UNK_TYPE1 size:0x1
0x801C549C = D_801C549C; // type:UNK_TYPE1 size:0x1
0x801C54A0 = D_801C54A0; // type:UNK_TYPE1 size:0x1
0x801C54A4 = D_801C54A4; // type:UNK_TYPE1 size:0x1
0x801C54B0 = D_801C54B0; // type:UNK_TYPE1 size:0x1
0x801C54B4 = D_801C54B4; // type:UNK_TYPE1 size:0x1
0x801C54B8 = D_801C54B8; // type:UNK_TYPE1 size:0x1
0x801C54BC = D_801C54BC; // type:UNK_TYPE1 size:0x1
0x801C54C0 = D_801C54C0; // type:UNK_TYPE1 size:0x1
0x801C54C4 = D_801C54C4; // type:UNK_TYPE1 size:0x1
0x801C54C8 = D_801C54C8; // type:UNK_TYPE1 size:0x1
0x801C54CC = D_801C54CC; // type:UNK_TYPE1 size:0x1
0x801C54D0 = D_801C54D0; // type:UNK_TYPE1 size:0x1
0x801C54D4 = D_801C54D4; // type:UNK_TYPE1 size:0x1
0x801C54D8 = D_801C54D8; // type:UNK_TYPE1 size:0x1
0x801C54DC = D_801C54DC; // type:UNK_TYPE1 size:0x1
0x801C54E0 = D_801C54E0; // type:UNK_TYPE1 size:0x1
0x801C54E4 = D_801C54E4; // type:UNK_TYPE1 size:0x1
0x801C54E8 = D_801C54E8; // type:UNK_TYPE1 size:0x1
0x801C54EC = D_801C54EC; // type:UNK_TYPE1 size:0x1
0x801C54F0 = D_801C54F0; // type:UNK_TYPE1 size:0x1
0x801C54F4 = D_801C54F4; // type:UNK_PTR size:0x4
0x801C5538 = D_801C5538; // type:UNK_TYPE1 size:0x1
0x801C5568 = D_801C5568; // type:UNK_TYPE1 size:0x1
0x801C5598 = D_801C5598; // type:UNK_TYPE1 size:0x1
0x801C55C4 = D_801C55C4; // type:UNK_TYPE1 size:0x1
0x801C55F0 = D_801C55F0; // type:UNK_TYPE1 size:0x1
0x801C561C = D_801C561C; // type:UNK_TYPE1 size:0x1
0x801C5648 = D_801C5648; // type:UNK_TYPE1 size:0x1
0x801C5674 = D_801C5674; // type:UNK_TYPE1 size:0x1
0x801C56A0 = D_801C56A0; // type:UNK_TYPE1 size:0x1
0x801C56CC = D_801C56CC; // type:UNK_TYPE1 size:0x1
0x801C56F8 = D_801C56F8; // type:UNK_PTR size:0x4
0x801C5720 = sSceneEntranceTable; // type:SceneEntranceTableEnty size:0x528
0x801C5C50 = D_801C5C50; // type:UNK_PTR size:0x4
0x801C5C9C = D_801C5C9C; // type:UNK_TYPE1 size:0x1
0x801C5CB0 = D_801C5CB0; // type:UNK_PTR size:0x4
0x801C5CD0 = sMtxFClear; // type:MtxF size:0x40
0x801C5D10 = D_801C5D10; // type:UNK_TYPE1 size:0x1
0x801C5D20 = D_801C5D20; // type:UNK_TYPE1 size:0x1
0x801C5D60 = gShadowMaterialDL; // type:UNK_TYPE1 size:0x1
0x801C5D80 = gShadowModelDL; // type:UNK_TYPE1 size:0x1
0x801C5DB0 = gOneVec3f; // type:UNK_TYPE1 size:0x1
0x801C5DD0 = D_801C5DD0; // type:UNK_TYPE1 size:0x1
0x801C5DE0 = D_801C5DE0; // type:UNK_TYPE1 size:0x1
0x801C5DF0 = D_801C5DF0; // type:UNK_TYPE1 size:0x1
0x801C5E00 = D_801C5E00; // type:UNK_TYPE1 size:0x1
0x801C5E30 = D_801C5E30; // type:UNK_TYPE1 size:0x1
0x801C5E48 = D_801C5E48; // type:UNK_TYPE2 size:0x2
0x801C5E88 = D_801C5E88; // type:UNK_TYPE4 size:0x4
0x801C5E9C = D_801C5E9C; // type:UNK_TYPE4 size:0x4
0x801C5EB0 = D_801C5EB0; // type:UNK_TYPE4 size:0x4
0x801C5EC4 = D_801C5EC4; // type:UNK_TYPE2 size:0x2
0x801C5F44 = D_801C5F44; // type:UNK_TYPE4 size:0x4
0x801C5FC0 = D_801C5FC0; // type:u32 size:0x710
0x801C66D0 = D_801C66D0; // type:UNK_TYPE2 size:0x2
0x801C6798 = D_801C6798; // type:UNK_TYPE4 size:0x4
0x801C67B0 = gAmmoItems; // type:UNK_TYPE1 size:0x1
0x801C67C8 = D_801C67C8; // type:s32 size:0x28
0x801C67F0 = D_801C67F0; // type:s32 size:0x28
0x801C6818 = D_801C6818; // type:s32 size:0x28
0x801C6840 = D_801C6840; // type:UNK_TYPE1 size:0x1
0x801C6850 = D_801C6850; // type:UNK_TYPE1 size:0x1
0x801C6870 = D_801C6870; // type:UNK_TYPE1 size:0x1
0x801C6890 = D_801C6890; // type:UNK_TYPE1 size:0x1
0x801C6898 = sSaveDefaultPlayerData; // type:SavePlayerData size:0x28
0x801C68C0 = sSaveDefaultItemEquips; // type:ItemEquips size:0x22
0x801C68E4 = sSaveDefaultInventory; // type:Inventory size:0x88
0x801C696C = sSaveDefaultChecksum; // type:u16 size:0x2
0x801C6970 = sSaveDebugPlayerData; // type:SaveInfo size:0x28
0x801C6998 = sSaveDebugItemEquips; // type:ItemEquips size:0x22
0x801C69BC = sSaveDebugInventory; // type:Inventory size:0x88
0x801C6A44 = sSaveDebugChecksum; // type:u16 size:0x2
0x801C6A48 = D_801C6A48; // type:UNK_TYPE1 size:0x1
0x801C6A50 = D_801C6A50; // type:UNK_TYPE1 size:0x1
0x801C6A58 = D_801C6A58; // type:UNK_TYPE1 size:0x1
0x801C6A70 = D_801C6A70; // type:UNK_TYPE1 size:0x1
0x801C6A74 = D_801C6A74; // type:UNK_TYPE2 size:0x2
0x801C6A78 = D_801C6A78; // type:UNK_TYPE2 size:0x2
0x801C6A7C = D_801C6A7C; // type:UNK_TYPE2 size:0x2
0x801C6A80 = D_801C6A80; // type:UNK_TYPE2 size:0x2
0x801C6A84 = D_801C6A84; // type:UNK_TYPE2 size:0x2
0x801C6A88 = D_801C6A88; // type:UNK_TYPE2 size:0x2
0x801C6A8C = D_801C6A8C; // type:UNK_TYPE2 size:0x2
0x801C6A90 = D_801C6A90; // type:UNK_TYPE2 size:0x2
0x801C6A94 = D_801C6A94; // type:UNK_TYPE2 size:0x2
0x801C6A98 = D_801C6A98; // type:UNK_TYPE1 size:0x1
0x801C6AB8 = D_801C6AB8; // type:UNK_TYPE1 size:0x1
0x801C6B28 = D_801C6B28; // type:UNK_TYPE1 size:0x1
0x801C6B98 = D_801C6B98; // type:UNK_TYPE1 size:0x1
0x801CED40 = D_801CED40; // type:UNK_TYPE1 size:0x1
0x801CFB08 = D_801CFB08; // type:UNK_TYPE1 size:0x1
0x801CFC78 = D_801CFC78; // type:UNK_TYPE2 size:0x2
0x801CFC7A = D_801CFC7A; // type:UNK_TYPE1 size:0x1
0x801CFC7C = D_801CFC7C; // type:UNK_TYPE1 size:0x1
0x801CFC7E = D_801CFC7E; // type:UNK_TYPE1 size:0x1
0x801CFC84 = D_801CFC84; // type:UNK_TYPE1 size:0x1
0x801CFC88 = D_801CFC88; // type:UNK_TYPE1 size:0x1
0x801CFC8C = D_801CFC8C; // type:UNK_TYPE1 size:0x1
0x801CFC8E = D_801CFC8E; // type:UNK_TYPE1 size:0x1
0x801CFC92 = D_801CFC92; // type:UNK_TYPE1 size:0x1
0x801CFC98 = D_801CFC98; // type:UNK_TYPE1 size:0x1
0x801CFCA4 = D_801CFCA4; // type:UNK_TYPE2 size:0x2
0x801CFCAC = D_801CFCAC; // type:UNK_TYPE2 size:0x2
0x801CFCB8 = gOcarinaSongItemMap; // type:UNK_TYPE1 size:0x1
0x801CFCD8 = D_801CFCD8; // type:UNK_TYPE2 size:0x2
0x801CFCE4 = D_801CFCE4; // type:UNK_TYPE2 size:0x2
0x801CFCF0 = D_801CFCF0; // type:UNK_TYPE2 size:0x2
0x801CFCF4 = D_801CFCF4; // type:UNK_TYPE2 size:0x2
0x801CFCF8 = D_801CFCF8; // type:UNK_TYPE2 size:0x2
0x801CFCFC = D_801CFCFC; // type:UNK_TYPE2 size:0x2
0x801CFD00 = D_801CFD00; // type:UNK_TYPE2 size:0x2
0x801CFD04 = D_801CFD04; // type:UNK_TYPE2 size:0x2
0x801CFD08 = D_801CFD08; // type:UNK_TYPE2 size:0x2
0x801CFD0C = D_801CFD0C; // type:UNK_TYPE2 size:0x2
0x801CFD10 = D_801CFD10; // type:UNK_TYPE2 size:0x2
0x801CFD1C = D_801CFD1C; // type:UNK_TYPE2 size:0x2
0x801CFD28 = D_801CFD28; // type:UNK_TYPE2 size:0x2
0x801CFD2C = D_801CFD2C; // type:UNK_TYPE2 size:0x2
0x801CFD30 = D_801CFD30; // type:UNK_TYPE2 size:0x2
0x801CFD34 = D_801CFD34; // type:UNK_TYPE2 size:0x2
0x801CFD38 = D_801CFD38; // type:UNK_TYPE2 size:0x2
0x801CFD3C = D_801CFD3C; // type:UNK_TYPE2 size:0x2
0x801CFD40 = D_801CFD40; // type:UNK_TYPE2 size:0x2
0x801CFD44 = D_801CFD44; // type:UNK_TYPE2 size:0x2
0x801CFD48 = D_801CFD48; // type:UNK_TYPE2 size:0x2
0x801CFD54 = D_801CFD54; // type:UNK_TYPE2 size:0x2
0x801CFD60 = D_801CFD60; // type:UNK_TYPE2 size:0x2
0x801CFD64 = D_801CFD64; // type:UNK_TYPE2 size:0x2
0x801CFD68 = D_801CFD68; // type:UNK_TYPE2 size:0x2
0x801CFD6C = D_801CFD6C; // type:UNK_TYPE2 size:0x2
0x801CFD70 = D_801CFD70; // type:UNK_TYPE2 size:0x2
0x801CFD74 = D_801CFD74; // type:UNK_TYPE2 size:0x2
0x801CFD78 = D_801CFD78; // type:UNK_TYPE2 size:0x2
0x801CFD7C = D_801CFD7C; // type:UNK_TYPE2 size:0x2
0x801CFD80 = D_801CFD80; // type:UNK_TYPE2 size:0x2
0x801CFD84 = D_801CFD84; // type:UNK_TYPE2 size:0x2
0x801CFD88 = D_801CFD88; // type:UNK_TYPE2 size:0x2
0x801CFD8C = D_801CFD8C; // type:UNK_TYPE2 size:0x2
0x801CFD90 = D_801CFD90; // type:UNK_TYPE2 size:0x2
0x801CFD94 = D_801CFD94; // type:UNK_PTR size:0x4
0x801CFD98 = D_801CFD98; // type:UNK_TYPE2 size:0x2
0x801CFD9C = D_801CFD9C; // type:UNK_TYPE2 size:0x2
0x801CFDA0 = D_801CFDA0; // type:UNK_TYPE2 size:0x2
0x801CFDA4 = D_801CFDA4; // type:UNK_TYPE1 size:0x1
0x801CFDC8 = D_801CFDC8; // type:UNK_TYPE1 size:0x1
0x801CFDEC = D_801CFDEC; // type:UNK_TYPE1 size:0x1
0x801CFE04 = D_801CFE04; // type:UNK_TYPE1 size:0x1
0x801CFE1C = D_801CFE1C; // type:UNK_TYPE1 size:0x1
0x801CFE34 = D_801CFE34; // type:UNK_TYPE1 size:0x1
0x801CFE4C = D_801CFE4C; // type:UNK_TYPE1 size:0x1
0x801CFE5C = D_801CFE5C; // type:UNK_TYPE1 size:0x1
0x801CFE68 = D_801CFE68; // type:UNK_TYPE1 size:0x1
0x801CFE74 = D_801CFE74; // type:UNK_TYPE1 size:0x1
0x801CFEA4 = D_801CFEA4; // type:UNK_TYPE1 size:0x1
0x801CFED4 = D_801CFED4; // type:UNK_TYPE1 size:0x1
0x801CFF04 = D_801CFF04; // type:UNK_TYPE1 size:0x1
0x801CFF34 = D_801CFF34; // type:UNK_TYPE1 size:0x1
0x801CFF64 = D_801CFF64; // type:UNK_TYPE1 size:0x1
0x801CFF70 = D_801CFF70; // type:UNK_TYPE1 size:0x1
0x801CFF7C = D_801CFF7C; // type:UNK_TYPE1 size:0x1
0x801CFF88 = D_801CFF88; // type:UNK_TYPE1 size:0x1
0x801CFF94 = D_801CFF94; // type:UNK_TYPE1 size:0x1
0x801D0000 = D_801D0000; // type:UNK_TYPE1 size:0x1
0x801D0001 = D_801D0001; // type:UNK_TYPE1 size:0x1
0x801D001F = D_801D001F; // type:UNK_TYPE1 size:0x1
0x801D0188 = D_801D0188; // type:UNK_TYPE1 size:0x1
0x801D023A = D_801D023A; // type:UNK_TYPE1 size:0x1
0x801D0250 = D_801D0250; // type:UNK_TYPE1 size:0x1
0x801D0268 = D_801D0268; // type:UNK_TYPE2 size:0x2
0x801D027C = D_801D027C; // type:UNK_TYPE1 size:0x1
0x801D0284 = D_801D0284; // type:UNK_TYPE1 size:0x1
0x801D028C = D_801D028C; // type:UNK_TYPE1 size:0x1
0x801D02C0 = D_801D02C0; // type:UNK_TYPE1 size:0x1
0x801D02D8 = D_801D02D8; // type:UNK_TYPE1 size:0x1
0x801D02F8 = D_801D02F8; // type:UNK_TYPE1 size:0x1
0x801D0330 = D_801D0330; // type:UNK_TYPE1 size:0x1
0x801D0334 = D_801D0334; // type:UNK_TYPE1 size:0x1
0x801D0340 = D_801D0340; // type:UNK_TYPE1 size:0x1
0x801D034C = D_801D034C; // type:UNK_TYPE1 size:0x1
0x801D0358 = D_801D0358; // type:UNK_TYPE1 size:0x1
0x801D0364 = D_801D0364; // type:UNK_TYPE1 size:0x1
0x801D0378 = D_801D0378; // type:UNK_TYPE1 size:0x1
0x801D039C = D_801D039C; // type:UNK_TYPE1 size:0x8
0x801D03A4 = D_801D03A4; // type:UNK_TYPE1 size:0x1
0x801D03A8 = D_801D03A8; // type:UNK_TYPE1 size:0x1
0x801D03C8 = D_801D03C8; // type:UNK_TYPE1 size:0x1
0x801D03E8 = D_801D03E8; // type:UNK_TYPE1 size:0x1
0x801D03F0 = D_801D03F0; // type:UNK_TYPE1 size:0x1
0x801D0401 = D_801D0401; // type:UNK_TYPE1 size:0x1
0x801D0408 = D_801D0408; // type:UNK_TYPE1 size:0x1
0x801D0428 = D_801D0428; // type:UNK_TYPE1 size:0x1
0x801D045A = D_801D045A; // type:UNK_TYPE1 size:0x1
0x801D0462 = D_801D0462; // type:UNK_TYPE1 size:0x1
0x801D0468 = D_801D0468; // type:UNK_TYPE1 size:0x1
0x801D0470 = D_801D0470; // type:UNK_TYPE1 size:0x1
0x801D06F0 = D_801D06F0; // type:char size:0x18
0x801D0708 = D_801D0708; // type:char size:1
0x801D0710 = D_801D0710; // type:UNK_TYPE1 size:0x1
0x801D0714 = D_801D0714; // type:char size:0x1
0x801D0724 = D_801D0724; // type:char size:0x1
0x801D0730 = D_801D0730; // type:char size:0x1
0x801D0734 = D_801D0734; // type:char size:0x1
0x801D0740 = D_801D0740; // type:char size:0x1
0x801D0744 = D_801D0744; // type:char size:0x1
0x801D0760 = D_801D0760; // type:char size:0x1
0x801D0764 = D_801D0764; // type:char size:0x1
0x801D0770 = D_801D0770; // type:char size:0x1
0x801D0774 = D_801D0774; // type:char size:0x1
0x801D0780 = D_801D0780; // type:char size:0x1
0x801D0784 = D_801D0784; // type:char size:0x1
0x801D0794 = D_801D0794; // type:char size:0x1
0x801D07A4 = D_801D07A4; // type:char size:0x1
0x801D07B0 = D_801D07B0; // type:char size:0x1
0x801D07B4 = D_801D07B4; // type:char size:0x1
0x801D07C0 = D_801D07C0; // type:char size:0x1
0x801D07C4 = D_801D07C4; // type:UNK_TYPE1 size:0x1
0x801D07DC = D_801D07DC; // type:UNK_TYPE1 size:0x1
0x801D080C = D_801D080C; // type:UNK_TYPE1 size:0x1
0x801D083C = D_801D083C; // type:UNK_TYPE1 size:0x1
0x801D086C = D_801D086C; // type:UNK_TYPE1 size:0x1
0x801D0890 = D_801D0890; // type:UNK_TYPE1 size:0x1
0x801D089C = D_801D089C; // type:UNK_TYPE1 size:0x1
0x801D08CC = D_801D08CC; // type:UNK_TYPE1 size:0x1
0x801D08D8 = D_801D08D8; // type:UNK_TYPE1 size:0x1
0x801D08E4 = D_801D08E4; // type:UNK_TYPE1 size:0x1
0x801D08E8 = D_801D08E8; // type:UNK_TYPE1 size:0x1
0x801D0900 = D_801D0900; // type:UNK_TYPE1 size:0x1
0x801D0B50 = Player_InitVars; // type:ActorInit size:0x20
0x801D0B70 = gKaleidoMgrOverlayTable; // type:KaleidoMgrOverlay size:0x38
0x801D0BA8 = sKaleidoAreaPtr; // type:void* size:0x4
0x801D0BAC = gKaleidoMgrCurOvl; // type:KaleidoMgrOverlay* size:0x4
0x801D0BB0 = D_801D0BB0; // type:UNK_TYPE4 size:0x4
0x801D0C80 = D_801D0C80; // type:UNK_TYPE1 size:0x1
0x801D0CB0 = D_801D0CB0; // type:UNK_TYPE1 size:0x1
0x801D0CD8 = TransitionFade_InitVars; // type:UNK_PTR size:0x4
0x801D0D00 = D_801D0D00; // type:UNK_TYPE1 size:0x1
0x801D0D28 = TransitionCircle_InitVars; // type:UNK_PTR size:0x4
0x801D0D50 = gDbgCamEnabled; // type:UNK_TYPE4 size:0x4
0x801D0D54 = D_801D0D54; // type:UNK_TYPE1 size:0x1
0x801D0D58 = sQuakeIndex; // type:UNK_TYPE2 size:0x2
0x801D0D5C = sIsCameraUnderwater; // type:UNK_TYPE2 size:0x2
0x801D0D60 = D_801D0D60; // type:Input* size:0x4
0x801D0D64 = D_801D0D64; // type:s16 size:0x14
0x801D0D78 = D_801D0D78; // type:u16 size:0x4
0x801D0D80 = D_801D0D80; // type:UNK_TYPE1 size:0x1
0x801D11F4 = D_801D11F4; // type:UNK_TYPE1 size:0x1
0x801D1230 = D_801D1230; // type:UNK_TYPE1 size:0x1
0x801D1234 = D_801D1234; // type:UNK_TYPE1 size:0x1
0x801D1238 = D_801D1238; // type:UNK_TYPE4 size:0x4
0x801D1244 = D_801D1244; // type:UNK_TYPE1 size:0x1
0x801D12C0 = D_801D12C0; // type:UNK_TYPE1 size:0x1
0x801D12D0 = D_801D12D0; // type:UNK_TYPE1 size:0x1
0x801D12D4 = D_801D12D4; // type:UNK_TYPE1 size:0x1
0x801D12D8 = D_801D12D8; // type:UNK_TYPE1 size:0x1
0x801D12DC = D_801D12DC; // type:UNK_TYPE1 size:0x1
0x801D1330 = D_801D1330; // type:UNK_TYPE2 size:0x2
0x801D1342 = D_801D1342; // type:UNK_TYPE1 size:0x1
0x801D1344 = D_801D1344; // type:UNK_TYPE2 size:0x2
0x801D1368 = D_801D1368; // type:UNK_TYPE1 size:0x1
0x801D1374 = D_801D1374; // type:UNK_TYPE2 size:0x2
0x801D1388 = D_801D1388; // type:UNK_TYPE1 size:0x1
0x801D13D8 = D_801D13D8; // type:UNK_TYPE2 size:0x2
0x801D13DC = D_801D13DC; // type:UNK_TYPE2 size:0x2
0x801D13E0 = D_801D13E0; // type:UNK_TYPE2 size:0x2
0x801D13E4 = D_801D13E4; // type:UNK_TYPE2 size:0x2
0x801D13E8 = D_801D13E8; // type:UNK_TYPE4 size:0x4
0x801D13EC = D_801D13EC; // type:UNK_TYPE1 size:0x1
0x801D13F0 = D_801D13F0; // type:UNK_TYPE1 size:0x1
0x801D13F4 = D_801D13F4; // type:UNK_TYPE1 size:0x1
0x801D13F8 = D_801D13F8; // type:UNK_TYPE1 size:0x1
0x801D1420 = D_801D1420; // type:UNK_TYPE1 size:0x1
0x801D142C = D_801D142C; // type:UNK_TYPE2 size:0x2
0x801D1434 = D_801D1434; // type:UNK_TYPE2 size:0x2
0x801D1438 = D_801D1438; // type:UNK_TYPE2 size:0x2
0x801D143C = D_801D143C; // type:UNK_TYPE2 size:0x2
0x801D1440 = D_801D1440; // type:UNK_TYPE2 size:0x2
0x801D1444 = D_801D1444; // type:UNK_TYPE2 size:0x2
0x801D1448 = D_801D1448; // type:UNK_TYPE2 size:0x2
0x801D144C = D_801D144C; // type:UNK_TYPE2 size:0x2
0x801D1450 = D_801D1450; // type:UNK_TYPE2 size:0x2
0x801D1454 = D_801D1454; // type:UNK_TYPE2 size:0x2
0x801D1458 = D_801D1458; // type:UNK_TYPE2 size:0x2
0x801D145C = D_801D145C; // type:UNK_TYPE2 size:0x2
0x801D1460 = D_801D1460; // type:UNK_TYPE2 size:0x2
0x801D1464 = D_801D1464; // type:UNK_TYPE1 size:0x1
0x801D1468 = D_801D1468; // type:UNK_TYPE1 size:0x1
0x801D146C = D_801D146C; // type:UNK_TYPE1 size:0x1
0x801D14DC = D_801D14DC; // type:UNK_TYPE2 size:0x2
0x801D14E0 = D_801D14E0; // type:UNK_TYPE2 size:0x2
0x801D14E4 = D_801D14E4; // type:UNK_TYPE2 size:0x2
0x801D14E8 = D_801D14E8; // type:UNK_TYPE2 size:0x2
0x801D14F0 = D_801D14F0; // type:UNK_TYPE4 size:0x4
0x801D1500 = gFramerateDivisor; // type:UNK_TYPE4 size:0x4
0x801D1504 = gFramerateDivisorF; // type:f32 size:0x4
0x801D1508 = gFramerateDivisorHalf; // type:f32 size:0x4
0x801D150C = gFramerateDivisorThird; // type:f32 size:0x4
0x801D1520 = gScreenWidth; // type:s32 size:0x4
0x801D1524 = gScreenHeight; // type:s32 size:0x4
0x801D1528 = startHeapSize; // type:UNK_TYPE4 size:0x4
0x801D1530 = padmgrContext; // type:PadMgr* size:0x4
0x801D1534 = controllerInputsCaptured; // type:UNK_TYPE4 size:0x4
0x801D1538 = D_801D1538; // type:UNK_TYPE4 size:0x4
0x801D1540 = D_801D1540; // type:UNK_PTR size:0x4
0x801D1570 = D_801D1570; // type:f32 size:0x34
0x801D15B0 = gZeroVec3f; // type:Vec3f size:0xC
0x801D15BC = gZeroVec3s; // type:Vec3s size:0x6
0x801D15D0 = sATan2Tbl; // type:s16 size:0x802
0x801D1DE0 = gIdentityMtx; // type:Mtx size:0x40
0x801D1E20 = gIdentityMtxF; // type:MtxF size:0x40
0x801D1E60 = initialgspUcodeText; // type:UNK_PTR size:0x4
0x801D1E64 = initialgspUcodeData; // type:UNK_PTR size:0x4
0x801D1E70 = D_801D1E70; // type:u8 size:0x1
0x801D1E80 = D_801D1E80; // type:u8 size:0x1
0x801D2E80 = gLowPassFilterData; // type:UNK_TYPE1 size:0x1
0x801D2F80 = gHighPassFilterData; // type:UNK_TYPE1 size:0x1
0x801D3070 = gBandStopFilterData; // type:UNK_TYPE1 size:0x1
0x801D3700 = gBandPassFilterData; // type:UNK_TYPE1 size:0x1
0x801D3D90 = gSawtoothWaveSample; // type:UNK_TYPE1 size:0x1
0x801D3F90 = gTriangleWaveSample; // type:UNK_TYPE1 size:0x1
0x801D4190 = gSineWaveSample; // type:UNK_TYPE1 size:0x1
0x801D4390 = gSquareWaveSample; // type:UNK_TYPE1 size:0x1
0x801D4590 = gWhiteNoiseSample; // type:UNK_TYPE1 size:0x1
0x801D4790 = D_801D4790; // type:UNK_TYPE1 size:0x1
0x801D4990 = gEighthPulseWaveSample; // type:UNK_TYPE1 size:0x1
0x801D4B90 = gQuarterPulseWaveSample; // type:UNK_TYPE1 size:0x1
0x801D4D90 = gWaveSamples; // type:s16* size:0x24
0x801D4DB4 = gBendPitchOneOctaveFrequencies; // type:f32 size:0x400
0x801D51B4 = gBendPitchTwoSemitonesFrequencies; // type:f32 size:0x400
0x801D55B4 = gPitchFrequencies; // type:f32 size:0x200
0x801D57B4 = gDefaultShortNoteVelocityTable; // type:UNK_TYPE1 size:0x1
0x801D57C4 = gDefaultShortNoteGateTimeTable; // type:UNK_TYPE1 size:0x1
0x801D57D4 = gDefaultEnvelope; // type:UNK_TYPE1 size:0x1
0x801D57E4 = gZeroedSampleState; // type:UNK_TYPE4 size:0x4
0x801D5804 = gDefaultSampleState; // type:UNK_TYPE4 size:0x4
0x801D5824 = gHaasEffectDelaySize; // type:u16 size:0x80
0x801D58A4 = D_801D58A4; // type:s32 size:0x4
0x801D58A8 = gInvalidAdpcmCodeBook; // type:s16 size:0x80
0x801D5928 = gHeadsetPanVolume; // type:f32 size:0x200
0x801D5B28 = gStereoPanVolume; // type:f32 size:0x200
0x801D5D28 = gDefaultPanVolume; // type:f32 size:0x200
0x801D5F28 = D_801D5F28; // type:s16 size:0x80
0x801D5FB0 = D_801D5FB0; // type:UNK_TYPE4 size:0x4
0x801D5FB4 = D_801D5FB4; // type:UNK_TYPE4 size:0x4
0x801D5FB8 = D_801D5FB8; // type:UNK_TYPE4 size:0x4
0x801D5FBC = D_801D5FBC; // type:UNK_TYPE4 size:0x4
0x801D5FC0 = D_801D5FC0; // type:UNK_TYPE4 size:0x4
0x801D5FD4 = D_801D5FD4; // type:UNK_TYPE1 size:0x1
0x801D5FE0 = D_801D5FE0; // type:UNK_PTR size:0x4
0x801D5FE4 = D_801D5FE4; // type:UNK_TYPE1 size:0x1
0x801D5FE8 = gAudioCtxInitalized; // type:UNK_TYPE4 size:0x4
0x801D5FEC = D_801D5FEC; // type:UNK_TYPE4 size:0x4
0x801D5FF0 = sWaitingAudioTask; // type:UNK_TYPE4 size:0x4
0x801D5FF4 = sMaxWriteReadDiff; // type:UNK_TYPE4 size:0x4
0x801D5FF8 = sCurCmdRdPos; // type:UNK_TYPE1 size:0x1
0x801D5FFC = sAudioRandom; // type:UNK_TYPE4 size:0x4
0x801D6000 = sAudioOsCount; // type:UNK_PTR size:0x4
0x801D6010 = D_801D6010; // type:UNK_TYPE1 size:0x1
0x801D6014 = D_801D6014; // type:UNK_TYPE1 size:0x1
0x801D6028 = D_801D6028; // type:UNK_TYPE1 size:0x1
0x801D6098 = D_801D6098; // type:UNK_TYPE1 size:0x1
0x801D6188 = D_801D6188; // type:UNK_PTR size:0x4
0x801D618C = D_801D618C; // type:UNK_PTR size:0x4
0x801D6190 = D_801D6190; // type:f32 size:0x4
0x801D6194 = D_801D6194; // type:UNK_TYPE4 size:0x4
0x801D61A0 = sSeqInstructionArgsTable; // type:u8 size:0x60
0x801D6200 = D_801D6200; // type:UNK_TYPE1 size:0x1
0x801D6600 = gIsLargeSfxBank; // type:UNK_TYPE1 size:0x1
0x801D6608 = D_801D6608; // type:UNK_TYPE1 size:0x1
0x801D6610 = gChannelsPerBank; // type:UNK_TYPE1 size:0x1
0x801D662C = gUsedChannelsPerBank; // type:UNK_TYPE1 size:0x1
0x801D6648 = sGiantsMaskFreq; // type:UNK_TYPE1 size:0x1
0x801D664C = sGiantsMaskReverbAdd; // type:UNK_TYPE1 size:0x1
0x801D6650 = sWaterWheelVolume; // type:UNK_TYPE1 size:0x1
0x801D6654 = gSfxVolume; // type:UNK_TYPE4 size:0x4
0x801D6658 = sSfxTimer; // type:UNK_TYPE1 size:0x1
0x801D665C = sSfxTimerLerpRange2; // type:UNK_TYPE1 size:0x1
0x801D6660 = sSfxTimerLerpRange1; // type:s8 size:0x1
0x801D6664 = D_801D6664; // type:f32 size:0x8
0x801D666C = sAudioIncreasingTranspose; // type:UNK_TYPE1 size:0x1
0x801D6680 = sPrevChargeLevel; // type:UNK_TYPE1 size:0x1
0x801D6684 = sChargeLevelsSfxFreq; // type:UNK_TYPE1 size:0x1
0x801D6694 = sCurChargeLevelSfxFreq; // type:UNK_TYPE4 size:0x4
0x801D6698 = sGanonsTowerLevelsVol; // type:u8 size:0x8
0x801D66A0 = sEnterGanonsTowerTimer; // type:UNK_TYPE1 size:0x1
0x801D66A4 = sSfxVolumeDuration; // type:UNK_TYPE2 size:0x2
0x801D66A8 = sSoundMode; // type:UNK_TYPE1 size:0x1
0x801D66AC = sAudioIsWindowOpen; // type:UNK_TYPE1 size:0x1
0x801D66B0 = sAudioCutsceneFlag; // type:UNK_TYPE1 size:0x1
0x801D66B4 = sSpecReverb; // type:UNK_TYPE1 size:0x1
0x801D66B8 = sAudioEnvReverb; // type:UNK_TYPE1 size:0x1
0x801D66BC = sAudioCodeReverb; // type:UNK_TYPE1 size:0x1
0x801D66C0 = sPrevSeqMode; // type:UNK_TYPE1 size:0x1
0x801D66C4 = sBgmEnemyDist; // type:f32 size:0x4
0x801D66C8 = sBgmEnemyVolume; // type:UNK_TYPE1 size:0x1
0x801D66CC = sPrevMainBgmSeqId; // type:UNK_TYPE2 size:0x2
0x801D66D0 = sSeqResumePoint; // type:UNK_TYPE1 size:0x1
0x801D66D4 = sPrevSceneSeqId; // type:UNK_TYPE1 size:0x1
0x801D66D8 = sNumFramesStill; // type:UNK_TYPE4 size:0x4
0x801D66DC = sNumFramesMoving; // type:UNK_TYPE4 size:0x4
0x801D66E0 = sAudioBaseFilter; // type:UNK_TYPE1 size:0x1
0x801D66E4 = sAudioExtraFilter; // type:UNK_TYPE1 size:0x1
0x801D66E8 = sAudioBaseFilter2; // type:UNK_TYPE1 size:0x1
0x801D66EC = sAudioExtraFilter2; // type:UNK_TYPE1 size:0x1
0x801D66F0 = gUnderwaterSfxReverbAdd; // type:UNK_TYPE1 size:0x1
0x801D66F4 = sRiverSoundBgmPos; // type:UNK_TYPE4 size:0x4
0x801D66F8 = sRiverSoundXZDistToPlayer; // type:UNK_TYPE4 size:0x4
0x801D66FC = sObjSoundMainBgmSeqId; // type:UNK_TYPE1 size:0x1
0x801D6700 = sSeqFlags; // type:UNK_TYPE1 size:0x1
0x801D6780 = sSpecReverbs; // type:UNK_TYPE1 size:0x1
0x801D6794 = sAmbienceData; // type:UNK_TYPE1 size:0x1
0x801D6FB4 = sIsOcarinaInputEnabled; // type:UNK_TYPE1 size:0x1
0x801D6FB8 = sOcarinaInstrumentId; // type:UNK_TYPE1 size:0x1
0x801D6FBC = sCurOcarinaPitch; // type:UNK_TYPE1 size:0x1
0x801D6FC0 = sPrevOcarinaPitch; // type:UNK_TYPE1 size:0x1
0x801D6FC4 = sCurOcarinaButtonIndex; // type:UNK_TYPE1 size:0x1
0x801D6FC8 = sMusicStaffPrevPitch; // type:UNK_TYPE1 size:0x1
0x801D6FCC = sCurOcarinaBendFreq; // type:f32 size:0x4
0x801D6FD0 = sDefaultOcarinaVolume; // type:UNK_TYPE1 size:0x1
0x801D6FD4 = sCurOcarinaBendIndex; // type:UNK_TYPE1 size:0x1
0x801D6FD8 = sCurOcarinaVolume; // type:UNK_TYPE1 size:0x1
0x801D6FDC = sCurOcarinaVibrato; // type:UNK_TYPE1 size:0x1
0x801D6FE0 = sPlaybackState; // type:UNK_TYPE1 size:0x1
0x801D6FE4 = sPlaybackStaffStopPos; // type:UNK_TYPE1 size:0x1
0x801D6FE8 = sPlaybackStaffStartPos; // type:UNK_TYPE1 size:0x1
0x801D6FEC = sOcarinaFlags; // type:UNK_TYPE4 size:0x4
0x801D6FF0 = sPlaybackNoteTimer; // type:UNK_TYPE4 size:0x4
0x801D6FF4 = sPlaybackNotePos; // type:UNK_TYPE2 size:0x2
0x801D6FF8 = sPlaybackStaffPos; // type:UNK_TYPE2 size:0x2
0x801D6FFC = sPrevOcarinaWithMusicStaffFlags; // type:UNK_TYPE4 size:0x4
0x801D7000 = sPlaybackPitch; // type:UNK_TYPE1 size:0x1
0x801D7004 = sNotePlaybackVolume; // type:UNK_TYPE1 size:0x1
0x801D7008 = sNotePlaybackVibrato; // type:UNK_TYPE1 size:0x1
0x801D700C = sNotePlaybackBend; // type:UNK_TYPE1 size:0x1
0x801D7010 = sRelativeNotePlaybackBend; // type:f32 size:0x4
0x801D7014 = sRelativeNotePlaybackVolume; // type:f32 size:0x4
0x801D7018 = sOcarinaPlaybackTaskStart; // type:UNK_TYPE4 size:0x4
0x801D701C = sOcarinaWallCounter; // type:UNK_TYPE4 size:0x4
0x801D7020 = sCurOcarinaSongWithoutMusicStaff; // type:u8 size:0x8
0x801D7028 = sOcarinaWithoutMusicStaffPos; // type:UNK_TYPE1 size:0x1
0x801D702C = sOcarinaSongStartingPos; // type:UNK_TYPE1 size:0x1
0x801D7030 = sButtonToPitchMap; // type:UNK_TYPE1 size:0x1
0x801D7038 = sOcarinaMemoryGameAppendPos; // type:UNK_TYPE1 size:0x1
0x801D703C = sOcarinaMemoryGameEndPos; // type:UNK_TYPE1 size:0x1
0x801D7040 = sOcarinaMemoryGameNumNotes; // type:UNK_TYPE1 size:0x1
0x801D7044 = sOcarinaSongNotes; // type:OcarinaNote size:0xF00
0x801D7F44 = sOoTOcarinaSongNotes; // type:OcarinaNote size:0x5A0
0x801D84E4 = sOoTOcarinaSongsNumNotes; // type:UNK_TYPE1 size:0x1
0x801D84F0 = sPlaybackSong; // type:UNK_PTR size:0x4
0x801D84F4 = sFrogsSongNotes; // type:u8 size:0xE
0x801D8504 = gFrogsSongPtr; // type:u8* size:0x4
0x801D8508 = sRecordingState; // type:UNK_TYPE1 size:0x1
0x801D850C = sRecordSongPos; // type:UNK_TYPE1 size:0x1
0x801D8510 = sOcarinaRecordTaskStart; // type:UNK_TYPE4 size:0x4
0x801D8514 = sRecordOcarinaPitch; // type:UNK_TYPE1 size:0x1
0x801D8518 = sRecordOcarinaVolume; // type:UNK_TYPE1 size:0x1
0x801D851C = sRecordOcarinaVibrato; // type:UNK_TYPE1 size:0x1
0x801D8520 = sRecordOcarinaBendIndex; // type:UNK_TYPE1 size:0x1
0x801D8524 = sRecordOcarinaButtonIndex; // type:UNK_TYPE1 size:0x1
0x801D8528 = sPlayedOcarinaSongIndexPlusOne; // type:UNK_TYPE1 size:0x1
0x801D852C = sMusicStaffNumNotesPerTest; // type:UNK_TYPE1 size:0x1
0x801D8530 = D_801D8530; // type:UNK_TYPE1 size:0x1
0x801D8534 = D_801D8534; // type:UNK_TYPE4 size:0x4
0x801D8538 = sOcarinaDropInputTimer; // type:UNK_TYPE1 size:0x1
0x801D853C = sScarecrowsLongSongNotes; // type:OcarinaNote size:0x360
0x801D889C = gScarecrowLongSongPtr; // type:UNK_PTR size:0x4
0x801D88A0 = gScarecrowSpawnSongPtr; // type:UNK_PTR size:0x4
0x801D88A4 = sTerminaWallSongPtr; // type:UNK_PTR size:0x4
0x801D88A8 = sPitchToButtonMap; // type:UNK_TYPE1 size:0x1
0x801D88B8 = sCustomSequenceScript; // type:UNK_TYPE1 size:0x1
0x801D8A48 = gOcarinaSongButtons; // type:UNK_TYPE1 size:0x1
0x801D8B20 = sScarecrowAfterCreditsState; // type:UNK_TYPE1 size:0x1
0x801D8B24 = sScarecrowAfterCreditsIntrumentId; // type:UNK_PTR size:0x4
0x801D8B28 = sScarecrowAfterCreditsTimer; // type:UNK_TYPE2 size:0x2
0x801D8B2C = sRequestCustomSequence; // type:UNK_TYPE1 size:0x1
0x801D8B30 = D_801D8B30; // type:UNK_TYPE1 size:0x1
0x801D8BB0 = sBigBellsVolume; // type:UNK_TYPE1 size:0x1
0x801D8BD0 = sBgmPlayers; // type:UNK_TYPE2 size:0x2
0x801D8BD4 = sSfxOriginalPos; // type:UNK_TYPE4 size:0x4
0x801D8BE0 = D_801D8BE0; // type:UNK_TYPE1 size:0x1
0x801D8E3C = D_801D8E3C; // type:UNK_TYPE1 size:0x1
0x801D8E40 = D_801D8E40; // type:UNK_TYPE4 size:0x4
0x801D8E44 = D_801D8E44; // type:UNK_TYPE2 size:0x2
0x801D8E48 = D_801D8E48; // type:UNK_TYPE1 size:0x1
0x801D8E50 = D_801D8E50; // type:UNK_TYPE1 size:0x1
0x801D8F70 = D_801D8F70; // type:UNK_TYPE1 size:0x1
0x801D9090 = sEnemyBankParams; // type:UNK_TYPE1 size:0x1
0x801D9C10 = sPlayerBankParams; // type:UNK_TYPE1 size:0x1
0x801DA350 = sItemBankParams; // type:UNK_TYPE1 size:0x1
0x801DA510 = sEnvBankParams; // type:UNK_TYPE1 size:0x1
0x801DAC50 = sSystemBankParams; // type:UNK_TYPE1 size:0x1
0x801DADD0 = sOcarinaBankParams; // type:UNK_TYPE1 size:0x1
0x801DAE10 = sVoiceBankParams; // type:UNK_TYPE1 size:0x1
0x801DB450 = gSfxParams; // type:UNK_PTR size:0x4
0x801DB470 = sSfxRequestWriteIndex; // type:UNK_TYPE1 size:0x1
0x801DB474 = sSfxRequestReadIndex; // type:UNK_TYPE1 size:0x1
0x801DB478 = gSfxBanks; // type:UNK_PTR size:0x1c
0x801DB494 = sSfxBankSizes; // type:UNK_TYPE1 size:0x1
0x801DB49C = gSfxChannelLayout; // type:UNK_TYPE1 size:0x1
0x801DB4A0 = sSfxChannelLowVolumeFlag; // type:UNK_TYPE2 size:0x2
0x801DB4A4 = gSfxDefaultPos; // type:UNK_TYPE4 size:0x4
0x801DB4B0 = gSfxDefaultFreqAndVolScale; // type:UNK_TYPE1 size:0x1
0x801DB4B8 = gSfxDefaultReverb; // type:UNK_TYPE1 size:0x1
0x801DB4C0 = D_801DB4C0; // type:UNK_TYPE1 size:0x1
0x801DB4C4 = D_801DB4C4; // type:UNK_TYPE1 size:0x1
0x801DB4C8 = D_801DB4C8; // type:UNK_TYPE1 size:0x1
0x801DB4CC = D_801DB4CC; // type:UNK_TYPE1 size:0x1
0x801DB4D4 = gAudioSpecId; // type:UNK_TYPE1 size:0x1
0x801DB4D8 = D_801DB4D8; // type:UNK_TYPE1 size:0x1
0x801DB4DC = D_801DB4DC; // type:UNK_TYPE4 size:0x4
0x801DB4E0 = D_801DB4E0; // type:UNK_TYPE1 size:0x1
0x801DB528 = D_801DB528; // type:UNK_TYPE1 size:0x1
0x801DB570 = D_801DB570; // type:UNK_TYPE1 size:0x1
0x801DB5B8 = D_801DB5B8; // type:UNK_TYPE1 size:0x1
0x801DB600 = D_801DB600; // type:UNK_TYPE1 size:0x1
0x801DB648 = D_801DB648; // type:UNK_TYPE1 size:0x1
0x801DB690 = D_801DB690; // type:UNK_TYPE1 size:0x1
0x801DB6D8 = D_801DB6D8; // type:UNK_TYPE1 size:0x1
0x801DB720 = D_801DB720; // type:UNK_TYPE1 size:0x1
0x801DB750 = D_801DB750; // type:UNK_TYPE1 size:0x1
0x801DB798 = D_801DB798; // type:UNK_TYPE1 size:0x1
0x801DB870 = D_801DB870; // type:UNK_TYPE1 size:0x1
0x801DB8B8 = D_801DB8B8; // type:UNK_TYPE1 size:0x1
0x801DB900 = D_801DB900; // type:UNK_TYPE1 size:0x1
0x801DB930 = gReverbSettingsTable; // type:UNK_PTR size:0x4
0x801DB958 = gAudioSpecs; // type:AudioSpec size:0x498
0x801DBDF0 = D_801DBDF0; // type:f32 size:0x4
0x801DBDF4 = jtbl_801DBDF4; // type:UNK_PTR size:0x4
0x801DBE68 = D_801DBE68; // type:f32 size:0x4
0x801DBE6C = D_801DBE6C; // type:f32 size:0x4
0x801DBE70 = D_801DBE70; // type:f32 size:0x4
0x801DBE74 = D_801DBE74; // type:f32 size:0x4
0x801DBE78 = D_801DBE78; // type:f32 size:0x4
0x801DBE7C = D_801DBE7C; // type:f32 size:0x4
0x801DBE80 = D_801DBE80; // type:f32 size:0x4
0x801DBE84 = D_801DBE84; // type:f32 size:0x4
0x801DBE88 = D_801DBE88; // type:f32 size:0x4
0x801DBE8C = D_801DBE8C; // type:f32 size:0x4
0x801DBE90 = D_801DBE90; // type:f32 size:0x4
0x801DBE94 = D_801DBE94; // type:f32 size:0x4
0x801DBE98 = D_801DBE98; // type:f32 size:0x4
0x801DBE9C = D_801DBE9C; // type:f32 size:0x4
0x801DBEA0 = D_801DBEA0; // type:f32 size:0x4
0x801DBEA4 = jtbl_801DBEA4; // type:UNK_PTR size:0x4
0x801DBF10 = D_801DBF10; // type:f32 size:0x4
0x801DBF14 = D_801DBF14; // type:f32 size:0x4
0x801DBF18 = D_801DBF18; // type:f32 size:0x4
0x801DBF1C = D_801DBF1C; // type:f32 size:0x4
0x801DBF20 = D_801DBF20; // type:f32 size:0x4
0x801DBF24 = jtbl_801DBF24; // type:UNK_PTR size:0x4
0x801DBF98 = jtbl_801DBF98; // type:UNK_PTR size:0x4
0x801DBFF4 = jtbl_801DBFF4; // type:UNK_PTR size:0x4
0x801DC068 = D_801DC068; // type:f32 size:0x4
0x801DC06C = D_801DC06C; // type:f32 size:0x4
0x801DC070 = D_801DC070; // type:f32 size:0x4
0x801DC074 = D_801DC074; // type:f32 size:0x4
0x801DC080 = D_801DC080; // type:f32 size:0x4
0x801DC084 = D_801DC084; // type:f32 size:0x4
0x801DC088 = jtbl_801DC088; // type:UNK_PTR size:0x4
0x801DC09C = D_801DC09C; // type:f32 size:0x4
0x801DC0A0 = D_801DC0A0; // type:f32 size:0x4
0x801DC0B0 = D_801DC0B0; // type:f32 size:0x4
0x801DC0B4 = D_801DC0B4; // type:f32 size:0x4
0x801DC0C0 = D_801DC0C0; // type:f32 size:0x4
0x801DC0C4 = D_801DC0C4; // type:f32 size:0x4
0x801DC0C8 = D_801DC0C8; // type:f32 size:0x4
0x801DC0CC = D_801DC0CC; // type:f32 size:0x4
0x801DC0D0 = D_801DC0D0; // type:f32 size:0x4
0x801DC0D4 = D_801DC0D4; // type:f32 size:0x4
0x801DC0E0 = jtbl_801DC0E0; // type:UNK_PTR size:0x4
0x801DC100 = D_801DC100; // type:f32 size:0x4
0x801DC104 = D_801DC104; // type:f32 size:0x4
0x801DC108 = D_801DC108; // type:f32 size:0x4
0x801DC10C = D_801DC10C; // type:f32 size:0x4
0x801DC110 = D_801DC110; // type:f32 size:0x4
0x801DC114 = D_801DC114; // type:f32 size:0x4
0x801DC120 = D_801DC120; // type:char size:0x14
0x801DC134 = D_801DC134; // type:char size:0x14
0x801DC148 = D_801DC148; // type:char size:0x14
0x801DC15C = D_801DC15C; // type:char size:0x14
0x801DC170 = D_801DC170; // type:char size:0x14
0x801DC184 = D_801DC184; // type:char size:0x14
0x801DC198 = D_801DC198; // type:char size:0x14
0x801DC1AC = D_801DC1AC; // type:char size:0x14
0x801DC1C0 = D_801DC1C0; // type:char size:0x14
0x801DC1D4 = D_801DC1D4; // type:char size:0x14
0x801DC1E8 = D_801DC1E8; // type:char size:0x14
0x801DC1FC = D_801DC1FC; // type:char size:0x14
0x801DC210 = D_801DC210; // type:char size:0x14
0x801DC224 = D_801DC224; // type:char size:0x14
0x801DC238 = D_801DC238; // type:char size:0x14
0x801DC24C = D_801DC24C; // type:char size:0x14
0x801DC260 = D_801DC260; // type:char size:0x14
0x801DC274 = D_801DC274; // type:char size:0x14
0x801DC288 = D_801DC288; // type:char size:0x14
0x801DC29C = D_801DC29C; // type:char size:0x14
0x801DC2B0 = D_801DC2B0; // type:char size:0x14
0x801DC2C4 = D_801DC2C4; // type:char size:0x14
0x801DC2D8 = D_801DC2D8; // type:char size:0x14
0x801DC2EC = D_801DC2EC; // type:char size:0x14
0x801DC300 = D_801DC300; // type:char size:0x14
0x801DC314 = D_801DC314; // type:char size:0x14
0x801DC328 = D_801DC328; // type:char size:0x14
0x801DC33C = D_801DC33C; // type:char size:0x14
0x801DC350 = D_801DC350; // type:char size:0x14
0x801DC364 = D_801DC364; // type:char size:0x14
0x801DC378 = D_801DC378; // type:char size:0x14
0x801DC38C = D_801DC38C; // type:char size:0x14
0x801DC3A0 = D_801DC3A0; // type:char size:0x14
0x801DC3B4 = D_801DC3B4; // type:char size:0x14
0x801DC3C8 = D_801DC3C8; // type:char size:0x14
0x801DC3DC = D_801DC3DC; // type:char size:0x14
0x801DC3F0 = D_801DC3F0; // type:char size:0x14
0x801DC404 = D_801DC404; // type:char size:0x14
0x801DC418 = D_801DC418; // type:char size:0x14
0x801DC42C = D_801DC42C; // type:char size:0x14
0x801DC440 = D_801DC440; // type:char size:0x14
0x801DC454 = D_801DC454; // type:char size:0x14
0x801DC468 = D_801DC468; // type:char size:0x14
0x801DC47C = D_801DC47C; // type:char size:0x14
0x801DC490 = D_801DC490; // type:char size:0x14
0x801DC4A4 = D_801DC4A4; // type:char size:0x14
0x801DC4B8 = D_801DC4B8; // type:char size:0x14
0x801DC4CC = D_801DC4CC; // type:char size:0x14
0x801DC4E0 = D_801DC4E0; // type:char size:0x14
0x801DC4F4 = D_801DC4F4; // type:char size:0x14
0x801DC508 = D_801DC508; // type:char size:0x14
0x801DC51C = D_801DC51C; // type:char size:0x14
0x801DC530 = D_801DC530; // type:char size:0x14
0x801DC544 = D_801DC544; // type:char size:0x14
0x801DC558 = D_801DC558; // type:char size:0x14
0x801DC56C = D_801DC56C; // type:char size:0x14
0x801DC580 = D_801DC580; // type:char size:0x14
0x801DC594 = D_801DC594; // type:char size:0x14
0x801DC5A8 = D_801DC5A8; // type:char size:0x14
0x801DC5BC = D_801DC5BC; // type:char size:0x14
0x801DC5D0 = D_801DC5D0; // type:char size:0x14
0x801DC5E4 = D_801DC5E4; // type:char size:0x14
0x801DC5F8 = D_801DC5F8; // type:char size:0x14
0x801DC60C = D_801DC60C; // type:char size:0x14
0x801DC620 = D_801DC620; // type:char size:0x14
0x801DC634 = D_801DC634; // type:char size:0x14
0x801DC648 = D_801DC648; // type:char size:0x14
0x801DC65C = D_801DC65C; // type:char size:0x14
0x801DC670 = D_801DC670; // type:char size:0x14
0x801DC684 = D_801DC684; // type:char size:0x14
0x801DC698 = D_801DC698; // type:char size:0x14
0x801DC6AC = D_801DC6AC; // type:char size:0x14
0x801DC6C0 = D_801DC6C0; // type:char size:0x14
0x801DC6D4 = D_801DC6D4; // type:char size:0x14
0x801DC6E8 = D_801DC6E8; // type:char size:0x14
0x801DC6FC = D_801DC6FC; // type:char size:0x14
0x801DC710 = D_801DC710; // type:char size:0x14
0x801DC724 = D_801DC724; // type:char size:0x14
0x801DC738 = D_801DC738; // type:char size:0x14
0x801DC74C = D_801DC74C; // type:char size:0x14
0x801DC760 = D_801DC760; // type:char size:0x14
0x801DC774 = D_801DC774; // type:char size:0x14
0x801DC788 = D_801DC788; // type:char size:0x14
0x801DC79C = D_801DC79C; // type:char size:0x14
0x801DC7B0 = D_801DC7B0; // type:char size:0x14
0x801DC7C4 = D_801DC7C4; // type:char size:0x14
0x801DC7D8 = D_801DC7D8; // type:char size:0x14
0x801DC7EC = D_801DC7EC; // type:char size:0x14
0x801DC800 = D_801DC800; // type:char size:0x14
0x801DC814 = D_801DC814; // type:char size:0x14
0x801DC828 = D_801DC828; // type:char size:0x14
0x801DC83C = D_801DC83C; // type:char size:0x14
0x801DC850 = D_801DC850; // type:char size:0x14
0x801DC864 = D_801DC864; // type:char size:0x14
0x801DC878 = D_801DC878; // type:char size:0x14
0x801DC88C = D_801DC88C; // type:char size:0x14
0x801DC8A0 = D_801DC8A0; // type:char size:0x14
0x801DC8B4 = D_801DC8B4; // type:char size:0x14
0x801DC8C8 = D_801DC8C8; // type:char size:0x14
0x801DC8DC = D_801DC8DC; // type:char size:0x14
0x801DC8F0 = D_801DC8F0; // type:char size:0x10
0x801DC900 = D_801DC900; // type:char size:0x10
0x801DC910 = D_801DC910; // type:char size:0x10
0x801DC920 = D_801DC920; // type:char size:0x10
0x801DC930 = D_801DC930; // type:char size:0x10
0x801DC940 = D_801DC940; // type:char size:0x10
0x801DC950 = D_801DC950; // type:char size:0x10
0x801DC960 = D_801DC960; // type:char size:0x10
0x801DC970 = D_801DC970; // type:char size:0x14
0x801DC984 = D_801DC984; // type:char size:0x14
0x801DC998 = D_801DC998; // type:char size:0x14
0x801DC9AC = D_801DC9AC; // type:char size:0x1
0x801DC9B0 = D_801DC9B0; // type:char size:0x1
0x801DC9B4 = D_801DC9B4; // type:char size:0x1
0x801DC9B8 = D_801DC9B8; // type:UNK_TYPE size:0x18 # padding
0x801DC9D0 = D_801DC9D0; // type:char size:0x7
0x801DC9D8 = D_801DC9D8; // type:char size:0x1f
0x801DC9F8 = D_801DC9F8; // type:char size:0x16
0x801DCA10 = D_801DCA10; // type:char size:0x1
0x801DCA14 = D_801DCA14; // type:f32 size:0x4
0x801DCA18 = D_801DCA18; // type:f32 size:0x4
0x801DCA1C = D_801DCA1C; // type:f32 size:0x4
0x801DCA20 = D_801DCA20; // type:f32 size:0x4
0x801DCA24 = D_801DCA24; // type:f32 size:0x4
0x801DCA28 = D_801DCA28; // type:f32 size:0x4
0x801DCA2C = D_801DCA2C; // type:f32 size:0x4
0x801DCA30 = D_801DCA30; // type:f32 size:0x4
0x801DCA34 = D_801DCA34; // type:f32 size:0x4
0x801DCA38 = D_801DCA38; // type:f32 size:0x4
0x801DCA3C = D_801DCA3C; // type:f32 size:0x4
0x801DCA40 = D_801DCA40; // type:f32 size:0x4
0x801DCA44 = D_801DCA44; // type:f32 size:0x4
0x801DCA48 = D_801DCA48; // type:f32 size:0x4
0x801DCA4C = D_801DCA4C; // type:f32 size:0x4
0x801DCA50 = D_801DCA50; // type:f32 size:0x4
0x801DCA54 = D_801DCA54; // type:f32 size:0x4
0x801DCA58 = jtbl_801DCA58; // type:UNK_PTR size:0x4
0x801DCA6C = D_801DCA6C; // type:f32 size:0x4
0x801DCA70 = D_801DCA70; // type:f32 size:0x4
0x801DCA74 = D_801DCA74; // type:f32 size:0x4
0x801DCA78 = D_801DCA78; // type:f32 size:0x4
0x801DCA7C = D_801DCA7C; // type:f32 size:0x4
0x801DCA80 = D_801DCA80; // type:f32 size:0x4
0x801DCA84 = D_801DCA84; // type:f32 size:0x4
0x801DCA88 = D_801DCA88; // type:f32 size:0x4
0x801DCA8C = D_801DCA8C; // type:f32 size:0x4
0x801DCA90 = D_801DCA90; // type:f32 size:0x4
0x801DCA94 = D_801DCA94; // type:f32 size:0x4
0x801DCA98 = D_801DCA98; // type:f32 size:0x4
0x801DCA9C = D_801DCA9C; // type:f32 size:0x4
0x801DCAA0 = D_801DCAA0; // type:f32 size:0x4
0x801DCAA4 = D_801DCAA4; // type:f32 size:0x4
0x801DCAA8 = D_801DCAA8; // type:f32 size:0x4
0x801DCAAC = D_801DCAAC; // type:f32 size:0x4
0x801DCAB0 = D_801DCAB0; // type:f32 size:0x4
0x801DCAB4 = D_801DCAB4; // type:f32 size:0x4
0x801DCAB8 = D_801DCAB8; // type:f32 size:0x4
0x801DCABC = D_801DCABC; // type:f32 size:0x4
0x801DCAC0 = D_801DCAC0; // type:f32 size:0x4
0x801DCAC4 = D_801DCAC4; // type:f32 size:0x4
0x801DCAC8 = D_801DCAC8; // type:f32 size:0x4
0x801DCACC = D_801DCACC; // type:f32 size:0x4
0x801DCAD0 = D_801DCAD0; // type:f32 size:0x4
0x801DCAD4 = D_801DCAD4; // type:f32 size:0x4
0x801DCAD8 = D_801DCAD8; // type:f32 size:0x4
0x801DCADC = D_801DCADC; // type:f32 size:0x4
0x801DCAE0 = D_801DCAE0; // type:f32 size:0x4
0x801DCAE4 = jtbl_801DCAE4; // type:UNK_PTR size:0x4
0x801DCB68 = D_801DCB68; // type:f32 size:0x4
0x801DCB6C = D_801DCB6C; // type:f32 size:0x4
0x801DCB70 = D_801DCB70; // type:f32 size:0x4
0x801DCB74 = D_801DCB74; // type:f32 size:0x4
0x801DCB78 = D_801DCB78; // type:f32 size:0x4
0x801DCB7C = D_801DCB7C; // type:f32 size:0x4
0x801DCB80 = D_801DCB80; // type:f32 size:0x4
0x801DCB84 = D_801DCB84; // type:f32 size:0x4
0x801DCB88 = D_801DCB88; // type:f32 size:0x4
0x801DCB8C = D_801DCB8C; // type:f32 size:0x4
0x801DCB90 = D_801DCB90; // type:f32 size:0x4
0x801DCB94 = D_801DCB94; // type:f32 size:0x4
0x801DCB98 = D_801DCB98; // type:f32 size:0x4
0x801DCB9C = D_801DCB9C; // type:f32 size:0x4
0x801DCBA0 = D_801DCBA0; // type:f32 size:0x4
0x801DCBA4 = D_801DCBA4; // type:f32 size:0x4
0x801DCBA8 = D_801DCBA8; // type:f32 size:0x4
0x801DCBAC = D_801DCBAC; // type:f32 size:0x4
0x801DCBB0 = D_801DCBB0; // type:char size:0x12
0x801DCBC4 = D_801DCBC4; // type:char size:0x1f
0x801DCBE4 = D_801DCBE4; // type:char size:0x16
0x801DCBFC = D_801DCBFC; // type:char size:0x1
0x801DCC00 = D_801DCC00; // type:char size:0xf
0x801DCC10 = D_801DCC10; // type:char size:0xf
0x801DCC20 = D_801DCC20; // type:char size:0x42
0x801DCC64 = D_801DCC64; // type:char size:0x2d
0x801DCC94 = D_801DCC94; // type:char size:0x23
0x801DCCB8 = D_801DCCB8; // type:char size:0xf
0x801DCCC8 = D_801DCCC8; // type:char size:0x20
0x801DCCE8 = D_801DCCE8; // type:char size:0xf
0x801DCCF8 = D_801DCCF8; // type:char size:0x20
0x801DCD18 = D_801DCD18; // type:char size:0xf
0x801DCD28 = D_801DCD28; // type:f32 size:0x4
0x801DCD2C = D_801DCD2C; // type:f32 size:0x4
0x801DCD30 = D_801DCD30; // type:f32 size:0x4
0x801DCD34 = D_801DCD34; // type:f32 size:0x4
0x801DCD38 = D_801DCD38; // type:f32 size:0x4
0x801DCD3C = D_801DCD3C; // type:f32 size:0x4
0x801DCD40 = D_801DCD40; // type:f32 size:0x4
0x801DCD44 = D_801DCD44; // type:f32 size:0x4
0x801DCD48 = D_801DCD48; // type:f32 size:0x4
0x801DCD4C = D_801DCD4C; // type:f32 size:0x4
0x801DCD50 = D_801DCD50; // type:f32 size:0x4
0x801DCD54 = D_801DCD54; // type:f32 size:0x4
0x801DCD58 = D_801DCD58; // type:f32 size:0x4
0x801DCD5C = D_801DCD5C; // type:f32 size:0x4
0x801DCD60 = D_801DCD60; // type:f32 size:0x4
0x801DCD64 = D_801DCD64; // type:f32 size:0x4
0x801DCD68 = D_801DCD68; // type:f32 size:0x4
0x801DCD6C = D_801DCD6C; // type:f32 size:0x4
0x801DCD70 = D_801DCD70; // type:f32 size:0x4
0x801DCD74 = D_801DCD74; // type:f32 size:0x4
0x801DCD78 = D_801DCD78; // type:f32 size:0x4
0x801DCD7C = D_801DCD7C; // type:f32 size:0x4
0x801DCD80 = D_801DCD80; // type:f32 size:0x4
0x801DCD84 = D_801DCD84; // type:f32 size:0x4
0x801DCD88 = D_801DCD88; // type:f32 size:0x4
0x801DCD8C = D_801DCD8C; // type:f32 size:0x4
0x801DCD90 = D_801DCD90; // type:f32 size:0x4
0x801DCD94 = D_801DCD94; // type:f32 size:0x4
0x801DCD98 = D_801DCD98; // type:f32 size:0x4
0x801DCD9C = D_801DCD9C; // type:f32 size:0x4
0x801DCDA0 = D_801DCDA0; // type:f32 size:0x4
0x801DCDA4 = D_801DCDA4; // type:f32 size:0x4
0x801DCDB0 = D_801DCDB0; // type:f32 size:0x4
0x801DCDB4 = D_801DCDB4; // type:f32 size:0x4
0x801DCDC0 = D_801DCDC0; // type:f32 size:0x4
0x801DCDC4 = D_801DCDC4; // type:f32 size:0x4
0x801DCDC8 = D_801DCDC8; // type:f32 size:0x4
0x801DCDCC = D_801DCDCC; // type:f32 size:0x4
0x801DCDD0 = D_801DCDD0; // type:f32 size:0x4
0x801DCDD4 = D_801DCDD4; // type:f32 size:0x4
0x801DCDD8 = D_801DCDD8; // type:f32 size:0x4
0x801DCDE4 = D_801DCDE4; // type:f32 size:0x4
0x801DCDE8 = D_801DCDE8; // type:f32 size:0x4
0x801DCDEC = D_801DCDEC; // type:f32 size:0x4
0x801DCDF0 = D_801DCDF0; // type:f32 size:0x4
0x801DCDF4 = D_801DCDF4; // type:f32 size:0x4
0x801DCDF8 = D_801DCDF8; // type:f32 size:0x4
0x801DCDFC = D_801DCDFC; // type:f32 size:0x4
0x801DCE00 = D_801DCE00; // type:f32 size:0x4
0x801DCE04 = D_801DCE04; // type:f32 size:0x4
0x801DCE08 = D_801DCE08; // type:f32 size:0x4
0x801DCE0C = D_801DCE0C; // type:f32 size:0x4
0x801DCE10 = D_801DCE10; // type:f32 size:0x4
0x801DCE14 = D_801DCE14; // type:f32 size:0x4
0x801DCE18 = D_801DCE18; // type:f32 size:0x4
0x801DCE1C = D_801DCE1C; // type:f32 size:0x4
0x801DCE20 = D_801DCE20; // type:f32 size:0x4
0x801DCE24 = D_801DCE24; // type:f32 size:0x4
0x801DCE28 = D_801DCE28; // type:f32 size:0x4
0x801DCE2C = D_801DCE2C; // type:f32 size:0x4
0x801DCE30 = D_801DCE30; // type:f32 size:0x4
0x801DCE34 = D_801DCE34; // type:f32 size:0x4
0x801DCE38 = D_801DCE38; // type:f32 size:0x4
0x801DCE3C = D_801DCE3C; // type:f32 size:0x4
0x801DCE40 = D_801DCE40; // type:f32 size:0x4
0x801DCE44 = D_801DCE44; // type:f32 size:0x4
0x801DCE48 = D_801DCE48; // type:f32 size:0x4
0x801DCE4C = D_801DCE4C; // type:f32 size:0x4
0x801DCE50 = D_801DCE50; // type:f32 size:0x4
0x801DCE54 = D_801DCE54; // type:f32 size:0x4
0x801DCE58 = D_801DCE58; // type:f32 size:0x4
0x801DCE5C = D_801DCE5C; // type:f32 size:0x4
0x801DCE60 = D_801DCE60; // type:f32 size:0x4
0x801DCE64 = D_801DCE64; // type:f32 size:0x4
0x801DCE68 = D_801DCE68; // type:f32 size:0x4
0x801DCE6C = D_801DCE6C; // type:f32 size:0x4
0x801DCE70 = D_801DCE70; // type:f32 size:0x4
0x801DCE74 = D_801DCE74; // type:f32 size:0x4
0x801DCE78 = D_801DCE78; // type:f32 size:0x4
0x801DCE7C = D_801DCE7C; // type:f32 size:0x4
0x801DCE80 = D_801DCE80; // type:f32 size:0x4
0x801DCE84 = D_801DCE84; // type:f32 size:0x4
0x801DCE88 = D_801DCE88; // type:f32 size:0x4
0x801DCE8C = D_801DCE8C; // type:f32 size:0x4
0x801DCE90 = D_801DCE90; // type:f32 size:0x4
0x801DCE94 = D_801DCE94; // type:f32 size:0x4
0x801DCE98 = D_801DCE98; // type:f32 size:0x4
0x801DCE9C = D_801DCE9C; // type:f32 size:0x4
0x801DCEA0 = D_801DCEA0; // type:f32 size:0x4
0x801DCEA4 = D_801DCEA4; // type:f32 size:0x4
0x801DCEA8 = D_801DCEA8; // type:f32 size:0x4
0x801DCEAC = D_801DCEAC; // type:f32 size:0x4
0x801DCEB0 = D_801DCEB0; // type:f32 size:0x4
0x801DCEB4 = D_801DCEB4; // type:f32 size:0x4
0x801DCEB8 = D_801DCEB8; // type:f32 size:0x4
0x801DCEBC = D_801DCEBC; // type:f32 size:0x4
0x801DCEC0 = D_801DCEC0; // type:f32 size:0x4
0x801DCEC4 = D_801DCEC4; // type:f32 size:0x4
0x801DCEC8 = D_801DCEC8; // type:f32 size:0x4
0x801DCECC = D_801DCECC; // type:f32 size:0x4
0x801DCED0 = D_801DCED0; // type:f32 size:0x4
0x801DCED4 = D_801DCED4; // type:f32 size:0x4
0x801DCED8 = D_801DCED8; // type:f32 size:0x4
0x801DCEDC = D_801DCEDC; // type:f32 size:0x4
0x801DCEE0 = D_801DCEE0; // type:f32 size:0x4
0x801DCEE4 = D_801DCEE4; // type:f32 size:0x4
0x801DCEE8 = D_801DCEE8; // type:f32 size:0x4
0x801DCEEC = D_801DCEEC; // type:f32 size:0x4
0x801DCEF0 = D_801DCEF0; // type:f32 size:0x4
0x801DCEF4 = D_801DCEF4; // type:f32 size:0x4
0x801DCEF8 = D_801DCEF8; // type:f32 size:0x4
0x801DCEFC = D_801DCEFC; // type:f32 size:0x4
0x801DCF00 = D_801DCF00; // type:f32 size:0x4
0x801DCF04 = D_801DCF04; // type:f32 size:0x4
0x801DCF08 = D_801DCF08; // type:f32 size:0x4
0x801DCF0C = D_801DCF0C; // type:f32 size:0x4
0x801DCF10 = D_801DCF10; // type:f32 size:0x4
0x801DCF14 = D_801DCF14; // type:f32 size:0x4
0x801DCF18 = D_801DCF18; // type:f32 size:0x4
0x801DCF1C = D_801DCF1C; // type:f32 size:0x4
0x801DCF20 = jtbl_801DCF20; // type:UNK_PTR size:0x4
0x801DCF34 = D_801DCF34; // type:f32 size:0x4
0x801DCF38 = D_801DCF38; // type:f32 size:0x4
0x801DCF3C = D_801DCF3C; // type:f32 size:0x4
0x801DCF40 = D_801DCF40; // type:f32 size:0x4
0x801DCF44 = D_801DCF44; // type:f32 size:0x4
0x801DCF48 = D_801DCF48; // type:f32 size:0x4
0x801DCF4C = D_801DCF4C; // type:f32 size:0x4
0x801DCF50 = D_801DCF50; // type:f32 size:0x4
0x801DCF54 = D_801DCF54; // type:f32 size:0x4
0x801DCF58 = D_801DCF58; // type:f32 size:0x4
0x801DCF5C = D_801DCF5C; // type:f32 size:0x4
0x801DCF60 = D_801DCF60; // type:f32 size:0x4
0x801DCF64 = D_801DCF64; // type:f32 size:0x4
0x801DCF68 = D_801DCF68; // type:f32 size:0x4
0x801DCF6C = D_801DCF6C; // type:f32 size:0x4
0x801DCF70 = D_801DCF70; // type:f32 size:0x4
0x801DCF74 = D_801DCF74; // type:f32 size:0x4
0x801DCF78 = D_801DCF78; // type:f32 size:0x4
0x801DCF7C = D_801DCF7C; // type:f32 size:0x4
0x801DCF80 = D_801DCF80; // type:f32 size:0x4
0x801DCF84 = D_801DCF84; // type:f32 size:0x4
0x801DCF8C = D_801DCF8C; // type:f32 size:0x4
0x801DCF90 = D_801DCF90; // type:f32 size:0x4
0x801DCF98 = D_801DCF98; // type:f32 size:0x4
0x801DCF9C = D_801DCF9C; // type:f32 size:0x4
0x801DCFA0 = D_801DCFA0; // type:f32 size:0x4
0x801DCFA4 = D_801DCFA4; // type:f32 size:0x4
0x801DCFA8 = D_801DCFA8; // type:f32 size:0x4
0x801DCFAC = D_801DCFAC; // type:f32 size:0x4
0x801DCFB0 = D_801DCFB0; // type:f32 size:0x4
0x801DCFB8 = D_801DCFB8; // type:f32 size:0x4
0x801DCFBC = D_801DCFBC; // type:f32 size:0x4
0x801DCFC0 = D_801DCFC0; // type:f32 size:0x4
0x801DCFC4 = D_801DCFC4; // type:f32 size:0x4
0x801DCFC8 = D_801DCFC8; // type:f32 size:0x4
0x801DCFCC = D_801DCFCC; // type:f32 size:0x4
0x801DCFD0 = D_801DCFD0; // type:f32 size:0x4
0x801DCFD4 = D_801DCFD4; // type:f32 size:0x4
0x801DCFD8 = jtbl_801DCFD8; // type:UNK_PTR size:0x4
0x801DD00C = D_801DD00C; // type:f32 size:0x4
0x801DD010 = D_801DD010; // type:f32 size:0x4
0x801DD014 = D_801DD014; // type:f32 size:0x4
0x801DD018 = D_801DD018; // type:f32 size:0x4
0x801DD01C = D_801DD01C; // type:f32 size:0x4
0x801DD020 = D_801DD020; // type:f32 size:0x4
0x801DD024 = D_801DD024; // type:f32 size:0x4
0x801DD028 = D_801DD028; // type:f32 size:0x4
0x801DD02C = D_801DD02C; // type:f32 size:0x4
0x801DD030 = D_801DD030; // type:f32 size:0x4
0x801DD034 = D_801DD034; // type:f32 size:0x4
0x801DD038 = D_801DD038; // type:f32 size:0x4
0x801DD03C = D_801DD03C; // type:f32 size:0x4
0x801DD040 = D_801DD040; // type:f32 size:0x4
0x801DD044 = D_801DD044; // type:f32 size:0x4
0x801DD048 = D_801DD048; // type:f32 size:0x4
0x801DD04C = D_801DD04C; // type:f32 size:0x4
0x801DD050 = D_801DD050; // type:f32 size:0x4
0x801DD054 = D_801DD054; // type:f32 size:0x4
0x801DD058 = D_801DD058; // type:f32 size:0x4
0x801DD060 = D_801DD060; // type:f32 size:0x4
0x801DD064 = D_801DD064; // type:f32 size:0x4
0x801DD068 = D_801DD068; // type:f32 size:0x4
0x801DD06C = D_801DD06C; // type:f32 size:0x4
0x801DD070 = D_801DD070; // type:f32 size:0x4
0x801DD074 = D_801DD074; // type:f32 size:0x4
0x801DD078 = D_801DD078; // type:f32 size:0x4
0x801DD07C = D_801DD07C; // type:f32 size:0x4
0x801DD080 = D_801DD080; // type:f32 size:0x4
0x801DD084 = D_801DD084; // type:f32 size:0x4
0x801DD088 = D_801DD088; // type:f32 size:0x4
0x801DD08C = D_801DD08C; // type:f32 size:0x4
0x801DD090 = D_801DD090; // type:f32 size:0x4
0x801DD094 = D_801DD094; // type:f32 size:0x4
0x801DD098 = D_801DD098; // type:f32 size:0x4
0x801DD09C = D_801DD09C; // type:f32 size:0x4
0x801DD0A0 = D_801DD0A0; // type:f32 size:0x4
0x801DD0A4 = D_801DD0A4; // type:f32 size:0x4
0x801DD0A8 = D_801DD0A8; // type:f32 size:0x4
0x801DD0AC = D_801DD0AC; // type:f32 size:0x4
0x801DD0B0 = D_801DD0B0; // type:f32 size:0x4
0x801DD0B4 = D_801DD0B4; // type:f32 size:0x4
0x801DD0B8 = D_801DD0B8; // type:f32 size:0x4
0x801DD0BC = D_801DD0BC; // type:f32 size:0x4
0x801DD0C0 = D_801DD0C0; // type:f32 size:0x4
0x801DD0C4 = D_801DD0C4; // type:f32 size:0x4
0x801DD0C8 = D_801DD0C8; // type:f32 size:0x4
0x801DD0CC = D_801DD0CC; // type:f32 size:0x4
0x801DD0D0 = D_801DD0D0; // type:f32 size:0x4
0x801DD0D4 = D_801DD0D4; // type:f32 size:0x4
0x801DD0D8 = D_801DD0D8; // type:f32 size:0x4
0x801DD0DC = D_801DD0DC; // type:f32 size:0x4
0x801DD0E0 = D_801DD0E0; // type:f32 size:0x4
0x801DD0E4 = D_801DD0E4; // type:f32 size:0x4
0x801DD0E8 = D_801DD0E8; // type:f32 size:0x4
0x801DD0EC = D_801DD0EC; // type:f32 size:0x4
0x801DD0F0 = D_801DD0F0; // type:f32 size:0x4
0x801DD0F4 = D_801DD0F4; // type:f32 size:0x4
0x801DD0F8 = D_801DD0F8; // type:f32 size:0x4
0x801DD0FC = D_801DD0FC; // type:f32 size:0x4
0x801DD100 = D_801DD100; // type:f32 size:0x4
0x801DD104 = D_801DD104; // type:f32 size:0x4
0x801DD108 = D_801DD108; // type:f32 size:0x4
0x801DD10C = D_801DD10C; // type:f32 size:0x4
0x801DD110 = D_801DD110; // type:f32 size:0x4
0x801DD114 = D_801DD114; // type:f32 size:0x4
0x801DD118 = D_801DD118; // type:f32 size:0x4
0x801DD11C = D_801DD11C; // type:f32 size:0x4
0x801DD120 = D_801DD120; // type:f32 size:0x4
0x801DD124 = D_801DD124; // type:f32 size:0x4
0x801DD128 = D_801DD128; // type:f32 size:0x4
0x801DD12C = D_801DD12C; // type:f32 size:0x4
0x801DD130 = D_801DD130; // type:f32 size:0x4
0x801DD134 = D_801DD134; // type:f32 size:0x4
0x801DD138 = D_801DD138; // type:f32 size:0x4
0x801DD13C = D_801DD13C; // type:f32 size:0x4
0x801DD140 = D_801DD140; // type:f32 size:0x4
0x801DD144 = D_801DD144; // type:f32 size:0x4
0x801DD148 = D_801DD148; // type:f32 size:0x4
0x801DD14C = D_801DD14C; // type:f32 size:0x4
0x801DD150 = D_801DD150; // type:f32 size:0x4
0x801DD154 = D_801DD154; // type:f32 size:0x4
0x801DD158 = D_801DD158; // type:f32 size:0x4
0x801DD15C = D_801DD15C; // type:f32 size:0x4
0x801DD160 = D_801DD160; // type:f32 size:0x4
0x801DD164 = D_801DD164; // type:f32 size:0x4
0x801DD168 = D_801DD168; // type:f32 size:0x4
0x801DD16C = D_801DD16C; // type:f32 size:0x4
0x801DD170 = D_801DD170; // type:f32 size:0x4
0x801DD174 = D_801DD174; // type:f32 size:0x4
0x801DD178 = D_801DD178; // type:f32 size:0x4
0x801DD17C = jtbl_801DD17C; // type:UNK_PTR size:0x4
0x801DD1B0 = D_801DD1B0; // type:f32 size:0x4
0x801DD1B4 = D_801DD1B4; // type:f32 size:0x4
0x801DD1B8 = D_801DD1B8; // type:f32 size:0x4
0x801DD1BC = D_801DD1BC; // type:f32 size:0x4
0x801DD1C0 = D_801DD1C0; // type:f32 size:0x4
0x801DD1C4 = D_801DD1C4; // type:f32 size:0x4
0x801DD1C8 = D_801DD1C8; // type:f32 size:0x4
0x801DD1CC = D_801DD1CC; // type:f32 size:0x4
0x801DD1D0 = D_801DD1D0; // type:f32 size:0x4
0x801DD1D4 = D_801DD1D4; // type:f32 size:0x4
0x801DD1D8 = D_801DD1D8; // type:f32 size:0x4
0x801DD1DC = D_801DD1DC; // type:f32 size:0x4
0x801DD1E0 = D_801DD1E0; // type:f32 size:0x4
0x801DD1E4 = D_801DD1E4; // type:f32 size:0x4
0x801DD1E8 = D_801DD1E8; // type:f32 size:0x4
0x801DD1EC = D_801DD1EC; // type:f32 size:0x4
0x801DD1F0 = D_801DD1F0; // type:f32 size:0x4
0x801DD1F4 = D_801DD1F4; // type:f32 size:0x4
0x801DD1F8 = D_801DD1F8; // type:f32 size:0x4
0x801DD1FC = D_801DD1FC; // type:f32 size:0x4
0x801DD200 = D_801DD200; // type:f32 size:0x4
0x801DD204 = D_801DD204; // type:f32 size:0x4
0x801DD208 = D_801DD208; // type:f32 size:0x4
0x801DD20C = D_801DD20C; // type:f32 size:0x4
0x801DD210 = D_801DD210; // type:f32 size:0x4
0x801DD214 = D_801DD214; // type:f32 size:0x4
0x801DD218 = D_801DD218; // type:f32 size:0x4
0x801DD21C = D_801DD21C; // type:f32 size:0x4
0x801DD220 = D_801DD220; // type:f32 size:0x4
0x801DD224 = D_801DD224; // type:f32 size:0x4
0x801DD228 = D_801DD228; // type:f32 size:0x4
0x801DD22C = D_801DD22C; // type:f32 size:0x4
0x801DD230 = D_801DD230; // type:f32 size:0x4
0x801DD234 = D_801DD234; // type:f32 size:0x4
0x801DD238 = D_801DD238; // type:f32 size:0x4
0x801DD23C = D_801DD23C; // type:f32 size:0x4
0x801DD240 = D_801DD240; // type:f32 size:0x4
0x801DD244 = D_801DD244; // type:f32 size:0x4
0x801DD248 = D_801DD248; // type:f32 size:0x4
0x801DD24C = D_801DD24C; // type:f32 size:0x4
0x801DD250 = D_801DD250; // type:f32 size:0x4
0x801DD254 = D_801DD254; // type:f32 size:0x4
0x801DD258 = D_801DD258; // type:f32 size:0x4
0x801DD25C = D_801DD25C; // type:f32 size:0x4
0x801DD260 = D_801DD260; // type:f32 size:0x4
0x801DD264 = D_801DD264; // type:f32 size:0x4
0x801DD268 = D_801DD268; // type:f32 size:0x4
0x801DD26C = D_801DD26C; // type:f32 size:0x4
0x801DD270 = D_801DD270; // type:f32 size:0x4
0x801DD274 = D_801DD274; // type:f32 size:0x4
0x801DD278 = D_801DD278; // type:f32 size:0x4
0x801DD27C = D_801DD27C; // type:f32 size:0x4
0x801DD280 = jtbl_801DD280; // type:UNK_PTR size:0x4
0x801DD2A0 = D_801DD2A0; // type:f32 size:0x4
0x801DD2A4 = D_801DD2A4; // type:f32 size:0x4
0x801DD2A8 = D_801DD2A8; // type:f32 size:0x4
0x801DD2AC = D_801DD2AC; // type:f32 size:0x4
0x801DD2B0 = D_801DD2B0; // type:f32 size:0x4
0x801DD2B4 = D_801DD2B4; // type:f32 size:0x4
0x801DD2B8 = D_801DD2B8; // type:f32 size:0x4
0x801DD2BC = D_801DD2BC; // type:f32 size:0x4
0x801DD2C0 = D_801DD2C0; // type:f32 size:0x4
0x801DD2C4 = D_801DD2C4; // type:f32 size:0x4
0x801DD2C8 = jtbl_801DD2C8; // type:UNK_PTR size:0x4
0x801DD344 = D_801DD344; // type:f32 size:0x4
0x801DD348 = D_801DD348; // type:f32 size:0x4
0x801DD34C = D_801DD34C; // type:f32 size:0x4
0x801DD350 = D_801DD350; // type:f32 size:0x4
0x801DD354 = D_801DD354; // type:f32 size:0x4
0x801DD358 = D_801DD358; // type:f32 size:0x4
0x801DD35C = D_801DD35C; // type:f32 size:0x4
0x801DD360 = D_801DD360; // type:f32 size:0x4
0x801DD364 = D_801DD364; // type:f32 size:0x4
0x801DD368 = D_801DD368; // type:f32 size:0x4
0x801DD36C = D_801DD36C; // type:f32 size:0x4
0x801DD370 = D_801DD370; // type:f32 size:0x4
0x801DD374 = D_801DD374; // type:f32 size:0x4
0x801DD378 = jtbl_801DD378; // type:UNK_PTR size:0x4
0x801DD38C = D_801DD38C; // type:f32 size:0x4
0x801DD390 = D_801DD390; // type:f32 size:0x4
0x801DD394 = D_801DD394; // type:f32 size:0x4
0x801DD398 = D_801DD398; // type:f32 size:0x4
0x801DD39C = D_801DD39C; // type:f32 size:0x4
0x801DD3A0 = D_801DD3A0; // type:f32 size:0x4
0x801DD3A4 = D_801DD3A4; // type:f32 size:0x4
0x801DD3A8 = D_801DD3A8; // type:f32 size:0x4
0x801DD3AC = D_801DD3AC; // type:f32 size:0x4
0x801DD3B0 = D_801DD3B0; // type:f32 size:0x4
0x801DD3B4 = D_801DD3B4; // type:f32 size:0x4
0x801DD3B8 = D_801DD3B8; // type:f32 size:0x4
0x801DD3BC = D_801DD3BC; // type:f32 size:0x4
0x801DD3C0 = D_801DD3C0; // type:f32 size:0x4
0x801DD3C4 = D_801DD3C4; // type:f32 size:0x4
0x801DD3C8 = D_801DD3C8; // type:f32 size:0x4
0x801DD3CC = D_801DD3CC; // type:f32 size:0x4
0x801DD3D0 = D_801DD3D0; // type:f32 size:0x4
0x801DD3D4 = D_801DD3D4; // type:f32 size:0x4
0x801DD3D8 = D_801DD3D8; // type:f32 size:0x4
0x801DD3DC = D_801DD3DC; // type:f32 size:0x4
0x801DD3E0 = D_801DD3E0; // type:f32 size:0x4
0x801DD3E4 = D_801DD3E4; // type:f32 size:0x4
0x801DD3E8 = D_801DD3E8; // type:f32 size:0x4
0x801DD3EC = D_801DD3EC; // type:f32 size:0x4
0x801DD3F0 = D_801DD3F0; // type:f32 size:0x4
0x801DD3F4 = D_801DD3F4; // type:f32 size:0x4
0x801DD3F8 = D_801DD3F8; // type:f32 size:0x4
0x801DD3FC = D_801DD3FC; // type:f32 size:0x4
0x801DD400 = D_801DD400; // type:f32 size:0x4
0x801DD404 = D_801DD404; // type:f32 size:0x4
0x801DD408 = D_801DD408; // type:f32 size:0x4
0x801DD40C = D_801DD40C; // type:f32 size:0x4
0x801DD410 = D_801DD410; // type:f32 size:0x4
0x801DD414 = D_801DD414; // type:f32 size:0x4
0x801DD418 = D_801DD418; // type:f32 size:0x4
0x801DD41C = D_801DD41C; // type:f32 size:0x4
0x801DD420 = D_801DD420; // type:f32 size:0x4
0x801DD424 = D_801DD424; // type:f32 size:0x4
0x801DD428 = jtbl_801DD428; // type:UNK_PTR size:0x4
0x801DD43C = D_801DD43C; // type:f32 size:0x4
0x801DD440 = D_801DD440; // type:f32 size:0x4
0x801DD444 = D_801DD444; // type:f32 size:0x4
0x801DD448 = D_801DD448; // type:f32 size:0x4
0x801DD44C = D_801DD44C; // type:f32 size:0x4
0x801DD450 = D_801DD450; // type:f32 size:0x4
0x801DD454 = D_801DD454; // type:f32 size:0x4
0x801DD458 = D_801DD458; // type:f32 size:0x4
0x801DD45C = D_801DD45C; // type:f32 size:0x4
0x801DD460 = D_801DD460; // type:f32 size:0x4
0x801DD464 = jtbl_801DD464; // type:UNK_PTR size:0x4
0x801DD4C8 = jtbl_801DD4C8; // type:UNK_PTR size:0x4
0x801DD52C = jtbl_801DD52C; // type:UNK_PTR size:0x4
0x801DD5AC = D_801DD5AC; // type:f32 size:0x4
0x801DD5B0 = D_801DD5B0; // type:f32 size:0x4
0x801DD5C0 = D_801DD5C0; // type:f32 size:0x4
0x801DD5C4 = D_801DD5C4; // type:f32 size:0x4
0x801DD5C8 = D_801DD5C8; // type:f32 size:0x4
0x801DD5CC = D_801DD5CC; // type:f32 size:0x4
0x801DD5D0 = D_801DD5D0; // type:f32 size:0x4
0x801DD5D4 = D_801DD5D4; // type:f32 size:0x4
0x801DD5D8 = D_801DD5D8; // type:f32 size:0x4
0x801DD5DC = minCylinderIntersectAmount; // type:f32 size:0x4
0x801DD5E0 = D_801DD5E0; // type:f32 size:0x4
0x801DD5E4 = D_801DD5E4; // type:f32 size:0x4
0x801DD5E8 = D_801DD5E8; // type:f32 size:0x4
0x801DD5EC = D_801DD5EC; // type:f32 size:0x4
0x801DD5F0 = D_801DD5F0; // type:f32 size:0x4
0x801DD5F4 = D_801DD5F4; // type:f32 size:0x4
0x801DD5F8 = D_801DD5F8; // type:f32 size:0x4
0x801DD5FC = D_801DD5FC; // type:f32 size:0x4
0x801DD600 = D_801DD600; // type:char size:0x3
0x801DD604 = D_801DD604; // type:char size:0x3
0x801DD610 = jtbl_801DD610; // type:UNK_PTR size:0x4
0x801DD6B0 = jtbl_801DD6B0; // type:UNK_PTR size:0x4
0x801DD6D0 = jtbl_801DD6D0; // type:UNK_PTR size:0x4
0x801DD6FC = D_801DD6FC; // type:f32 size:0x4
0x801DD700 = jtbl_801DD700; // type:UNK_PTR size:0x4
0x801DD734 = jtbl_801DD734; // type:UNK_PTR size:0x4
0x801DD750 = jtbl_801DD750; // type:UNK_PTR size:0x4
0x801DD770 = D_801DD770; // type:f32 size:0x4
0x801DD774 = D_801DD774; // type:f32 size:0x4
0x801DD780 = D_801DD780; // type:f32 size:0x4
0x801DD790 = jtbl_801DD790; // type:UNK_PTR size:0x4
0x801DD7B0 = D_801DD7B0; // type:f32 size:0x4
0x801DD7C0 = D_801DD7C0; // type:f32 size:0x4
0x801DD7D0 = D_801DD7D0; // type:f32 size:0x4
0x801DD7D4 = D_801DD7D4; // type:f32 size:0x4
0x801DD7E0 = D_801DD7E0; // type:f32 size:0x4
0x801DD7E4 = D_801DD7E4; // type:f32 size:0x4
0x801DD7E8 = D_801DD7E8; // type:f32 size:0x4
0x801DD7EC = D_801DD7EC; // type:f32 size:0x4
0x801DD7F0 = jtbl_801DD7F0; // type:UNK_PTR size:0x4
0x801DD880 = D_801DD880; // type:UNK_TYPE2 size:0x2
0x801DD8E0 = D_801DD8E0; // type:UNK_TYPE1 size:0x1
0x801DD900 = D_801DD900; // type:UNK_TYPE4 size:0x4
0x801DD940 = D_801DD940; // type:f32 size:0x4
0x801DD944 = D_801DD944; // type:f32 size:0x4
0x801DD948 = D_801DD948; // type:f32 size:0x4
0x801DD94C = D_801DD94C; // type:f32 size:0x4
0x801DD950 = D_801DD950; // type:f32 size:0x4
0x801DD954 = D_801DD954; // type:f32 size:0x4
0x801DD958 = D_801DD958; // type:f32 size:0x4
0x801DD95C = D_801DD95C; // type:f32 size:0x4
0x801DD960 = D_801DD960; // type:f32 size:0x4
0x801DD964 = D_801DD964; // type:f32 size:0x4
0x801DD968 = D_801DD968; // type:f32 size:0x4
0x801DD96C = D_801DD96C; // type:f32 size:0x4
0x801DD970 = D_801DD970; // type:f32 size:0x4
0x801DD974 = D_801DD974; // type:f32 size:0x4
0x801DD978 = D_801DD978; // type:f32 size:0x4
0x801DD97C = D_801DD97C; // type:f32 size:0x4
0x801DD980 = D_801DD980; // type:f32 size:0x4
0x801DD984 = D_801DD984; // type:f32 size:0x4
0x801DD988 = D_801DD988; // type:f32 size:0x4
0x801DD98C = D_801DD98C; // type:f32 size:0x4
0x801DD990 = D_801DD990; // type:f32 size:0x4
0x801DD994 = jtbl_801DD994; // type:UNK_PTR size:0x4
0x801DD9B8 = jtbl_801DD9B8; // type:UNK_PTR size:0x4
0x801DD9EC = D_801DD9EC; // type:f32 size:0x4
0x801DD9F0 = D_801DD9F0; // type:f32 size:0x4
0x801DD9F4 = D_801DD9F4; // type:f32 size:0x4
0x801DD9F8 = D_801DD9F8; // type:f32 size:0x4
0x801DD9FC = D_801DD9FC; // type:f32 size:0x4
0x801DDA00 = jtbl_801DDA00; // type:UNK_PTR size:0x4
0x801DDA7C = D_801DDA7C; // type:f32 size:0x4
0x801DDA80 = D_801DDA80; // type:f32 size:0x4
0x801DDA84 = D_801DDA84; // type:f32 size:0x4
0x801DDA90 = D_801DDA90; // type:f32 size:0x4
0x801DDA94 = D_801DDA94; // type:f32 size:0x4
0x801DDA98 = D_801DDA98; // type:f32 size:0x4
0x801DDA9C = D_801DDA9C; // type:f32 size:0x4
0x801DDAA0 = D_801DDAA0; // type:f32 size:0x4
0x801DDAB0 = D_801DDAB0; // type:f32 size:0x4
0x801DDAB4 = D_801DDAB4; // type:f32 size:0x4
0x801DDAB8 = D_801DDAB8; // type:f32 size:0x4
0x801DDAC0 = D_801DDAC0; // type:f32 size:0x4
0x801DDAC4 = D_801DDAC4; // type:f32 size:0x4
0x801DDAC8 = D_801DDAC8; // type:f32 size:0x4
0x801DDACC = D_801DDACC; // type:f32 size:0x4
0x801DDAD0 = D_801DDAD0; // type:f32 size:0x4
0x801DDAD4 = D_801DDAD4; // type:f32 size:0x4
0x801DDAD8 = D_801DDAD8; // type:f32 size:0x4
0x801DDADC = D_801DDADC; // type:f32 size:0x4
0x801DDAE0 = D_801DDAE0; // type:f32 size:0x4
0x801DDAE4 = D_801DDAE4; // type:f32 size:0x4
0x801DDAE8 = D_801DDAE8; // type:f32 size:0x4
0x801DDAEC = D_801DDAEC; // type:f32 size:0x4
0x801DDAF0 = D_801DDAF0; // type:f32 size:0x4
0x801DDAF4 = D_801DDAF4; // type:f32 size:0x4
0x801DDAF8 = D_801DDAF8; // type:f32 size:0x4
0x801DDAFC = D_801DDAFC; // type:f32 size:0x4
0x801DDB00 = jtbl_801DDB00; // type:UNK_PTR size:0x4
0x801DDB58 = jtbl_801DDB58; // type:UNK_PTR size:0x4
0x801DDB78 = jtbl_801DDB78; // type:UNK_PTR size:0x4
0x801DDBA8 = D_801DDBA8; // type:f32 size:0x4
0x801DDBAC = D_801DDBAC; // type:f32 size:0x4
0x801DDBB0 = D_801DDBB0; // type:f32 size:0x4
0x801DDBB4 = D_801DDBB4; // type:f32 size:0x4
0x801DDBB8 = D_801DDBB8; // type:f32 size:0x4
0x801DDBBC = D_801DDBBC; // type:f32 size:0x4
0x801DDBC0 = D_801DDBC0; // type:f32 size:0x4
0x801DDBC4 = D_801DDBC4; // type:f32 size:0x4
0x801DDBC8 = D_801DDBC8; // type:f32 size:0x4
0x801DDBCC = D_801DDBCC; // type:f32 size:0x4
0x801DDBD0 = jtbl_801DDBD0; // type:UNK_PTR size:0x4
0x801DDC00 = jtbl_801DDC00; // type:UNK_PTR size:0x4
0x801DDC4C = jtbl_801DDC4C; // type:UNK_PTR size:0x4
0x801DDCA4 = jtbl_801DDCA4; // type:UNK_PTR size:0x4
0x801DDCF8 = D_801DDCF8; // type:f32 size:0x4
0x801DDCFC = D_801DDCFC; // type:f32 size:0x4
0x801DDD00 = D_801DDD00; // type:f32 size:0x4
0x801DDD04 = D_801DDD04; // type:f32 size:0x4
0x801DDD08 = D_801DDD08; // type:f32 size:0x4
0x801DDD0C = D_801DDD0C; // type:f32 size:0x4
0x801DDD10 = D_801DDD10; // type:f32 size:0x4
0x801DDD14 = D_801DDD14; // type:f32 size:0x4
0x801DDD20 = D_801DDD20; // type:f32 size:0x4
0x801DDD24 = D_801DDD24; // type:f32 size:0x4
0x801DDD28 = D_801DDD28; // type:f32 size:0x4
0x801DDD2C = D_801DDD2C; // type:f32 size:0x4
0x801DDD30 = D_801DDD30; // type:f32 size:0x4
0x801DDD34 = D_801DDD34; // type:f32 size:0x4
0x801DDD38 = D_801DDD38; // type:f32 size:0x4
0x801DDD3C = D_801DDD3C; // type:f32 size:0x4
0x801DDD40 = D_801DDD40; // type:f32 size:0x4
0x801DDD44 = D_801DDD44; // type:f32 size:0x4
0x801DDD48 = D_801DDD48; // type:f32 size:0x4
0x801DDD4C = D_801DDD4C; // type:f32 size:0x4
0x801DDD50 = D_801DDD50; // type:f32 size:0x4
0x801DDD54 = D_801DDD54; // type:f32 size:0x4
0x801DDD58 = D_801DDD58; // type:f32 size:0x4
0x801DDD5C = D_801DDD5C; // type:f32 size:0x4
0x801DDD60 = D_801DDD60; // type:f32 size:0x4
0x801DDD64 = D_801DDD64; // type:f32 size:0x4
0x801DDD68 = D_801DDD68; // type:f32 size:0x4
0x801DDD6C = D_801DDD6C; // type:f32 size:0x4
0x801DDD70 = D_801DDD70; // type:f32 size:0x4
0x801DDD74 = D_801DDD74; // type:f32 size:0x4
0x801DDD78 = D_801DDD78; // type:f32 size:0x4
0x801DDD7C = D_801DDD7C; // type:f32 size:0x4
0x801DDD80 = D_801DDD80; // type:f32 size:0x4
0x801DDD84 = D_801DDD84; // type:f32 size:0x4
0x801DDD88 = D_801DDD88; // type:f32 size:0x4
0x801DDD8C = D_801DDD8C; // type:f32 size:0x4
0x801DDD90 = D_801DDD90; // type:f32 size:0x4
0x801DDD94 = D_801DDD94; // type:f32 size:0x4
0x801DDD98 = D_801DDD98; // type:f32 size:0x4
0x801DDD9C = D_801DDD9C; // type:f32 size:0x4
0x801DDDA0 = D_801DDDA0; // type:f32 size:0x4
0x801DDDA4 = D_801DDDA4; // type:f32 size:0x4
0x801DDDA8 = D_801DDDA8; // type:f32 size:0x4
0x801DDDAC = D_801DDDAC; // type:f32 size:0x4
0x801DDDB0 = D_801DDDB0; // type:f32 size:0x4
0x801DDDB4 = D_801DDDB4; // type:f32 size:0x4
0x801DDDB8 = D_801DDDB8; // type:f32 size:0x4
0x801DDDBC = D_801DDDBC; // type:f32 size:0x4
0x801DDDC0 = D_801DDDC0; // type:f32 size:0x4
0x801DDDC4 = D_801DDDC4; // type:f32 size:0x4
0x801DDDC8 = D_801DDDC8; // type:f32 size:0x4
0x801DDDCC = D_801DDDCC; // type:f32 size:0x4
0x801DDDD0 = D_801DDDD0; // type:f32 size:0x4
0x801DDDD4 = D_801DDDD4; // type:f32 size:0x4
0x801DDDD8 = D_801DDDD8; // type:f32 size:0x4
0x801DDDDC = D_801DDDDC; // type:f32 size:0x4
0x801DDDE0 = D_801DDDE0; // type:f32 size:0x4
0x801DDDE4 = D_801DDDE4; // type:f32 size:0x4
0x801DDDE8 = D_801DDDE8; // type:f32 size:0x4
0x801DDDEC = D_801DDDEC; // type:f32 size:0x4
0x801DDDF0 = D_801DDDF0; // type:f32 size:0x4
0x801DDDF4 = D_801DDDF4; // type:f32 size:0x4
0x801DDDF8 = D_801DDDF8; // type:f32 size:0x4
0x801DDDFC = D_801DDDFC; // type:f32 size:0x4
0x801DDE00 = D_801DDE00; // type:f32 size:0x4
0x801DDE04 = D_801DDE04; // type:f32 size:0x4
0x801DDE10 = jtbl_801DDE10; // type:UNK_PTR size:0x4
0x801DDE90 = D_801DDE90; // type:f32 size:0x4
0x801DDE94 = D_801DDE94; // type:f32 size:0x4
0x801DDE98 = D_801DDE98; // type:f32 size:0x4
0x801DDE9C = D_801DDE9C; // type:f32 size:0x4
0x801DDEA0 = D_801DDEA0; // type:f32 size:0x4
0x801DDEA4 = D_801DDEA4; // type:f32 size:0x4
0x801DDEA8 = D_801DDEA8; // type:f32 size:0x4
0x801DDEAC = D_801DDEAC; // type:f32 size:0x4
0x801DDEB0 = D_801DDEB0; // type:f32 size:0x4
0x801DDEB4 = D_801DDEB4; // type:f32 size:0x4
0x801DDEB8 = D_801DDEB8; // type:f32 size:0x4
0x801DDEBC = D_801DDEBC; // type:f32 size:0x4
0x801DDEC0 = D_801DDEC0; // type:f32 size:0x4
0x801DDEC4 = D_801DDEC4; // type:f32 size:0x4
0x801DDEC8 = D_801DDEC8; // type:f32 size:0x4
0x801DDECC = D_801DDECC; // type:f32 size:0x4
0x801DDED0 = D_801DDED0; // type:f32 size:0x4
0x801DDED4 = D_801DDED4; // type:f32 size:0x4
0x801DDED8 = D_801DDED8; // type:f32 size:0x4
0x801DDEDC = D_801DDEDC; // type:f32 size:0x4
0x801DDEE0 = D_801DDEE0; // type:f32 size:0x4
0x801DDEE4 = D_801DDEE4; // type:f32 size:0x4
0x801DDEE8 = D_801DDEE8; // type:f32 size:0x4
0x801DDEEC = D_801DDEEC; // type:f32 size:0x4
0x801DDEF0 = D_801DDEF0; // type:f32 size:0x4
0x801DDEF4 = D_801DDEF4; // type:f32 size:0x4
0x801DDEF8 = D_801DDEF8; // type:f32 size:0x4
0x801DDEFC = D_801DDEFC; // type:f32 size:0x4
0x801DDF00 = D_801DDF00; // type:f32 size:0x4
0x801DDF04 = D_801DDF04; // type:f32 size:0x4
0x801DDF08 = D_801DDF08; // type:f32 size:0x4
0x801DDF0C = D_801DDF0C; // type:f32 size:0x4
0x801DDF10 = D_801DDF10; // type:f32 size:0x4
0x801DDF14 = D_801DDF14; // type:f32 size:0x4
0x801DDF18 = D_801DDF18; // type:f32 size:0x4
0x801DDF1C = D_801DDF1C; // type:f32 size:0x4
0x801DDF20 = D_801DDF20; // type:f32 size:0x4
0x801DDF24 = D_801DDF24; // type:f32 size:0x4
0x801DDF28 = D_801DDF28; // type:f32 size:0x4
0x801DDF2C = D_801DDF2C; // type:f32 size:0x4
0x801DDF30 = D_801DDF30; // type:f32 size:0x4
0x801DDF34 = D_801DDF34; // type:f32 size:0x4
0x801DDF38 = D_801DDF38; // type:f32 size:0x4
0x801DDF3C = D_801DDF3C; // type:f32 size:0x4
0x801DDF40 = D_801DDF40; // type:f32 size:0x4
0x801DDF44 = D_801DDF44; // type:f32 size:0x4
0x801DDF48 = D_801DDF48; // type:f32 size:0x4
0x801DDF4C = D_801DDF4C; // type:f32 size:0x4
0x801DDF50 = D_801DDF50; // type:f32 size:0x4
0x801DDF54 = D_801DDF54; // type:f32 size:0x4
0x801DDF58 = D_801DDF58; // type:f32 size:0x4
0x801DDF5C = D_801DDF5C; // type:f32 size:0x4
0x801DDF60 = D_801DDF60; // type:f32 size:0x4
0x801DDF64 = D_801DDF64; // type:f32 size:0x4
0x801DDF68 = D_801DDF68; // type:f32 size:0x4
0x801DDF6C = D_801DDF6C; // type:f32 size:0x4
0x801DDF70 = D_801DDF70; // type:f32 size:0x4
0x801DDF74 = D_801DDF74; // type:f32 size:0x4
0x801DDF78 = D_801DDF78; // type:f32 size:0x4
0x801DDF7C = D_801DDF7C; // type:f32 size:0x4
0x801DDF80 = D_801DDF80; // type:f32 size:0x4
0x801DDF84 = D_801DDF84; // type:f32 size:0x4
0x801DDF88 = D_801DDF88; // type:f32 size:0x4
0x801DDF8C = D_801DDF8C; // type:f32 size:0x4
0x801DDF90 = D_801DDF90; // type:f32 size:0x4
0x801DDF94 = D_801DDF94; // type:f32 size:0x4
0x801DDFA0 = D_801DDFA0; // type:char size:0xc
0x801DDFAC = D_801DDFAC; // type:char size:0xc
0x801DDFB8 = D_801DDFB8; // type:char size:0xc
0x801DDFC4 = D_801DDFC4; // type:f32 size:0x4
0x801DDFC8 = D_801DDFC8; // type:f32 size:0x4
0x801DDFCC = D_801DDFCC; // type:f32 size:0x4
0x801DDFD0 = D_801DDFD0; // type:f32 size:0x4
0x801DDFD4 = D_801DDFD4; // type:f32 size:0x4
0x801DDFD8 = D_801DDFD8; // type:f32 size:0x4
0x801DDFDC = D_801DDFDC; // type:f32 size:0x4
0x801DDFE0 = D_801DDFE0; // type:f32 size:0x4
0x801DDFE4 = D_801DDFE4; // type:f32 size:0x4
0x801DDFF0 = jtbl_801DDFF0; // type:UNK_PTR size:0x4
0x801DE020 = D_801DE020; // type:char size:0x10
0x801DE030 = D_801DE030; // type:char size:0xc
0x801DE03C = D_801DE03C; // type:char size:0x10
0x801DE04C = D_801DE04C; // type:char size:0x9
0x801DE058 = D_801DE058; // type:char size:0xc
0x801DE064 = D_801DE064; // type:char size:0x10
0x801DE074 = D_801DE074; // type:char size:0x10
0x801DE084 = D_801DE084; // type:char size:0x10
0x801DE094 = D_801DE094; // type:char size:0xc
0x801DE0A0 = D_801DE0A0; // type:char size:0x7
0x801DE0A8 = D_801DE0A8; // type:char size:0x9
0x801DE0B4 = D_801DE0B4; // type:char size:0xb
0x801DE0C0 = D_801DE0C0; // type:char size:0xc
0x801DE0CC = D_801DE0CC; // type:char size:0xc
0x801DE0D8 = D_801DE0D8; // type:char size:0xc
0x801DE0E4 = D_801DE0E4; // type:char size:0xc
0x801DE0F0 = D_801DE0F0; // type:char size:0xa
0x801DE0FC = D_801DE0FC; // type:char size:0x10
0x801DE10C = D_801DE10C; // type:char size:0xc
0x801DE118 = D_801DE118; // type:char size:0x14
0x801DE12C = D_801DE12C; // type:char size:0xc
0x801DE138 = D_801DE138; // type:char size:0xc
0x801DE144 = D_801DE144; // type:char size:0x10
0x801DE154 = D_801DE154; // type:char size:0x10
0x801DE164 = D_801DE164; // type:char size:0xc
0x801DE170 = D_801DE170; // type:char size:0x10
0x801DE180 = D_801DE180; // type:char size:0xc
0x801DE18C = D_801DE18C; // type:char size:0x10
0x801DE19C = D_801DE19C; // type:char size:0xc
0x801DE1A8 = D_801DE1A8; // type:char size:0x10
0x801DE1B8 = D_801DE1B8; // type:char size:0xc
0x801DE1C4 = D_801DE1C4; // type:char size:0xc
0x801DE1D0 = D_801DE1D0; // type:char size:0x10
0x801DE1E0 = D_801DE1E0; // type:char size:0x10
0x801DE1F0 = D_801DE1F0; // type:char size:0x10
0x801DE200 = D_801DE200; // type:char size:0xa
0x801DE20C = D_801DE20C; // type:char size:0xd
0x801DE21C = D_801DE21C; // type:char size:0x10
0x801DE22C = D_801DE22C; // type:char size:0x8
0x801DE234 = D_801DE234; // type:char size:0x10
0x801DE244 = D_801DE244; // type:char size:0x14
0x801DE258 = D_801DE258; // type:char size:0x10
0x801DE268 = D_801DE268; // type:char size:0x10
0x801DE278 = D_801DE278; // type:char size:0x7
0x801DE280 = D_801DE280; // type:char size:0x10
0x801DE290 = D_801DE290; // type:char size:0xc
0x801DE29C = D_801DE29C; // type:char size:0xc
0x801DE2A8 = D_801DE2A8; // type:char size:0x10
0x801DE2B8 = D_801DE2B8; // type:char size:0xc
0x801DE2C4 = D_801DE2C4; // type:char size:0x10
0x801DE2D4 = D_801DE2D4; // type:char size:0x10
0x801DE2E4 = D_801DE2E4; // type:char size:0x10
0x801DE2F4 = D_801DE2F4; // type:char size:0x10
0x801DE304 = D_801DE304; // type:char size:0x10
0x801DE314 = D_801DE314; // type:char size:0x9
0x801DE320 = D_801DE320; // type:char size:0x8
0x801DE328 = D_801DE328; // type:char size:0x8
0x801DE330 = D_801DE330; // type:char size:0x10
0x801DE340 = D_801DE340; // type:char size:0x10
0x801DE350 = D_801DE350; // type:char size:0x10
0x801DE360 = D_801DE360; // type:char size:0x10
0x801DE370 = D_801DE370; // type:char size:0x14
0x801DE384 = D_801DE384; // type:char size:0x7
0x801DE38C = D_801DE38C; // type:char size:0xa
0x801DE398 = D_801DE398; // type:char size:0xc
0x801DE3A4 = D_801DE3A4; // type:char size:0xc
0x801DE3B0 = D_801DE3B0; // type:char size:0x14
0x801DE3C4 = D_801DE3C4; // type:char size:0x10
0x801DE3D4 = D_801DE3D4; // type:char size:0xc
0x801DE3E0 = D_801DE3E0; // type:char size:0x14
0x801DE3F4 = D_801DE3F4; // type:char size:0xc
0x801DE400 = D_801DE400; // type:char size:0xa
0x801DE40C = D_801DE40C; // type:char size:0xc
0x801DE418 = D_801DE418; // type:char size:0xa
0x801DE424 = D_801DE424; // type:char size:0x10
0x801DE434 = D_801DE434; // type:char size:0x10
0x801DE444 = D_801DE444; // type:char size:0xc
0x801DE450 = D_801DE450; // type:char size:0x7
0x801DE458 = D_801DE458; // type:char size:0x7
0x801DE460 = D_801DE460; // type:char size:0x18
0x801DE478 = D_801DE478; // type:char size:0x14
0x801DE48C = D_801DE48C; // type:char size:0x10
0x801DE49C = D_801DE49C; // type:char size:0x10
0x801DE4AC = D_801DE4AC; // type:char size:0x10
0x801DE4BC = D_801DE4BC; // type:char size:0xa
0x801DE4C8 = D_801DE4C8; // type:char size:0xc
0x801DE4D4 = D_801DE4D4; // type:char size:0xa
0x801DE4E0 = D_801DE4E0; // type:char size:0x10
0x801DE4F0 = D_801DE4F0; // type:char size:0x10
0x801DE500 = D_801DE500; // type:char size:0x10
0x801DE510 = D_801DE510; // type:char size:0x10
0x801DE520 = D_801DE520; // type:char size:0x10
0x801DE530 = D_801DE530; // type:char size:0xc
0x801DE53C = D_801DE53C; // type:char size:0x9
0x801DE548 = D_801DE548; // type:char size:0x10
0x801DE558 = D_801DE558; // type:char size:0x10
0x801DE568 = D_801DE568; // type:char size:0x10
0x801DE578 = D_801DE578; // type:char size:0x8
0x801DE580 = D_801DE580; // type:char size:0xc
0x801DE58C = D_801DE58C; // type:char size:0xc
0x801DE598 = D_801DE598; // type:char size:0x10
0x801DE5A8 = D_801DE5A8; // type:char size:0xc
0x801DE5C0 = D_801DE5C0; // type:f32 size:0x4
0x801DE5D0 = D_801DE5D0; // type:f32 size:0x4
0x801DE5E0 = D_801DE5E0; // type:UNK_TYPE1 size:0x1
0x801DE820 = D_801DE820; // type:f32 size:0x4
0x801DE824 = D_801DE824; // type:f32 size:0x4
0x801DE828 = D_801DE828; // type:f32 size:0x4
0x801DE82C = D_801DE82C; // type:f32 size:0x4
0x801DE830 = D_801DE830; // type:f32 size:0x4
0x801DE834 = D_801DE834; // type:f32 size:0x4
0x801DE838 = D_801DE838; // type:f32 size:0x4
0x801DE83C = D_801DE83C; // type:f32 size:0x4
0x801DE840 = D_801DE840; // type:f32 size:0x4
0x801DE844 = D_801DE844; // type:f32 size:0x4
0x801DE848 = D_801DE848; // type:f32 size:0x4
0x801DE84C = D_801DE84C; // type:f32 size:0x4
0x801DE850 = D_801DE850; // type:f32 size:0x4
0x801DE854 = D_801DE854; // type:f32 size:0x4
0x801DE858 = D_801DE858; // type:f32 size:0x4
0x801DE85C = D_801DE85C; // type:f32 size:0x4
0x801DE860 = D_801DE860; // type:f32 size:0x4
0x801DE864 = D_801DE864; // type:f32 size:0x4
0x801DE868 = D_801DE868; // type:f32 size:0x4
0x801DE86C = jtbl_801DE86C; // type:UNK_PTR size:0x4
0x801DE884 = D_801DE884; // type:f32 size:0x4
0x801DE890 = gCircleTex; // type:UNK_TYPE1 size:0x1
0x801DF090 = D_801DF090; // type:f32 size:0x4
0x801DF094 = D_801DF094; // type:f32 size:0x4
0x801DF0A0 = D_801DF0A0; // type:f32 size:0x4
0x801DF0B0 = D_801DF0B0; // type:char size:0xe
0x801DF0C0 = D_801DF0C0; // type:UNK_TYPE1 size:0x1
0x801DF120 = D_801DF120; // type:f32 size:0x4
0x801DF124 = D_801DF124; // type:f32 size:0x4
0x801DF130 = jtbl_801DF130; // type:UNK_PTR size:0x4
0x801DF148 = D_801DF148; // type:f32 size:0x4
0x801DF150 = jtbl_801DF150; // type:UNK_PTR size:0x4
0x801DF174 = jtbl_801DF174; // type:UNK_PTR size:0x4
0x801DF274 = jtbl_801DF274; // type:UNK_PTR size:0x4
0x801DF34C = jtbl_801DF34C; // type:UNK_PTR size:0x4
0x801DF3AC = D_801DF3AC; // type:f32 size:0x4
0x801DF3B0 = D_801DF3B0; // type:f32 size:0x4
0x801DF3B4 = D_801DF3B4; // type:f32 size:0x4
0x801DF3B8 = D_801DF3B8; // type:f32 size:0x4
0x801DF3BC = D_801DF3BC; // type:f32 size:0x4
0x801DF3C0 = D_801DF3C0; // type:f32 size:0x4
0x801DF3C4 = D_801DF3C4; // type:f32 size:0x4
0x801DF3C8 = D_801DF3C8; // type:f32 size:0x4
0x801DF3CC = jtbl_801DF3CC; // type:UNK_PTR size:0x4
0x801DF508 = jtbl_801DF508; // type:UNK_PTR size:0x4
0x801DF51C = jtbl_801DF51C; // type:UNK_PTR size:0x4
0x801DF5E8 = jtbl_801DF5E8; // type:UNK_PTR size:0x4
0x801DF730 = jtbl_801DF730; // type:UNK_PTR size:0x4
0x801DF7B8 = jtbl_801DF7B8; // type:UNK_PTR size:0x4
0x801DF83C = jtbl_801DF83C; // type:UNK_PTR size:0x4
0x801DF860 = jtbl_801DF860; // type:UNK_PTR size:0x4
0x801DF8E0 = D_801DF8E0; // type:f32 size:0x4
0x801DF8E4 = jtbl_801DF8E4; // type:UNK_PTR size:0x4
0x801DF900 = jtbl_801DF900; // type:UNK_PTR size:0x4
0x801DF920 = jtbl_801DF920; // type:UNK_PTR size:0x4
0x801DF934 = jtbl_801DF934; // type:UNK_PTR size:0x4
0x801DF948 = jtbl_801DF948; // type:UNK_PTR size:0x4
0x801DF95C = jtbl_801DF95C; // type:UNK_PTR size:0x4
0x801DF970 = D_801DF970; // type:f32 size:0x4
0x801DF974 = D_801DF974; // type:f32 size:0x4
0x801DF978 = D_801DF978; // type:f32 size:0x4
0x801DF97C = D_801DF97C; // type:f32 size:0x4
0x801DF980 = D_801DF980; // type:f32 size:0x4
0x801DF984 = D_801DF984; // type:f32 size:0x4
0x801DF988 = D_801DF988; // type:f32 size:0x4
0x801DF98C = D_801DF98C; // type:f32 size:0x4
0x801DF990 = D_801DF990; // type:f32 size:0x4
0x801DF994 = D_801DF994; // type:f32 size:0x4
0x801DF998 = D_801DF998; // type:f32 size:0x4
0x801DF99C = D_801DF99C; // type:f32 size:0x4
0x801DF9A0 = D_801DF9A0; // type:f32 size:0x4
0x801DF9A4 = D_801DF9A4; // type:f32 size:0x4
0x801DF9A8 = D_801DF9A8; // type:f32 size:0x4
0x801DF9AC = D_801DF9AC; // type:f32 size:0x4
0x801DF9B0 = D_801DF9B0; // type:f32 size:0x4
0x801DF9B4 = D_801DF9B4; // type:f32 size:0x4
0x801DF9C0 = D_801DF9C0; // type:char size:0x10
0x801DF9D0 = D_801DF9D0; // type:char size:0x10
0x801DF9E0 = D_801DF9E0; // type:f32 size:0x4
0x801DF9E4 = D_801DF9E4; // type:f32 size:0x4
0x801DF9E8 = D_801DF9E8; // type:f32 size:0x4
0x801DF9EC = D_801DF9EC; // type:f32 size:0x4
0x801DF9F0 = D_801DF9F0; // type:f32 size:0x4
0x801DF9F4 = D_801DF9F4; // type:f32 size:0x4
0x801DF9F8 = D_801DF9F8; // type:f32 size:0x4
0x801DFA00 = D_801DFA00; // type:char size:0xc
0x801DFA0C = D_801DFA0C; // type:char size:0xc
0x801DFA18 = D_801DFA18; // type:char size:0x1
0x801DFA34 = D_801DFA34; // type:char size:0x1
0x801DFA38 = D_801DFA38; // type:char size:0x1
0x801DFA3C = D_801DFA3C; // type:char size:0x1
0x801DFA40 = D_801DFA40; // type:char size:0x1
0x801DFA44 = D_801DFA44; // type:char size:0x1
0x801DFA48 = D_801DFA48; // type:char size:0x1
0x801DFA4C = D_801DFA4C; // type:char size:0x1
0x801DFA50 = D_801DFA50; // type:char size:0x1
0x801DFA54 = D_801DFA54; // type:char size:0x1
0x801DFA58 = D_801DFA58; // type:char size:0x1
0x801DFA5C = D_801DFA5C; // type:char size:0x1
0x801DFA60 = D_801DFA60; // type:char size:0x1
0x801DFA64 = D_801DFA64; // type:char size:0x1
0x801DFA68 = D_801DFA68; // type:char size:0x1
0x801DFA6C = D_801DFA6C; // type:char size:0x1
0x801DFA70 = D_801DFA70; // type:char size:0x1
0x801DFA74 = D_801DFA74; // type:char size:0x1
0x801DFA78 = D_801DFA78; // type:char size:0x1
0x801DFA7C = D_801DFA7C; // type:char size:0x1
0x801DFA80 = D_801DFA80; // type:char size:0x1
0x801DFA84 = D_801DFA84; // type:char size:0x1
0x801DFA88 = D_801DFA88; // type:char size:0x1
0x801DFA8C = D_801DFA8C; // type:char size:0x1
0x801DFA90 = D_801DFA90; // type:char size:0x1
0x801DFA94 = D_801DFA94; // type:char size:0x1
0x801DFA98 = D_801DFA98; // type:char size:0x1
0x801DFA9C = D_801DFA9C; // type:char size:0x1
0x801DFAA0 = D_801DFAA0; // type:char size:0x1
0x801DFAA4 = D_801DFAA4; // type:char size:0x1
0x801DFAA8 = D_801DFAA8; // type:char size:0x1
0x801DFAAC = D_801DFAAC; // type:char size:0x1
0x801DFAB0 = D_801DFAB0; // type:char size:0x1
0x801DFAB4 = D_801DFAB4; // type:char size:0x1
0x801DFAB8 = D_801DFAB8; // type:char size:0x1
0x801DFABC = D_801DFABC; // type:char size:0x1
0x801DFAC0 = D_801DFAC0; // type:char size:0x1
0x801DFAC4 = D_801DFAC4; // type:char size:0x1
0x801DFAC8 = D_801DFAC8; // type:char size:0x1
0x801DFACC = D_801DFACC; // type:char size:0x1
0x801DFAD0 = D_801DFAD0; // type:char size:0x1
0x801DFAD4 = D_801DFAD4; // type:char size:0x1
0x801DFAD8 = D_801DFAD8; // type:char size:0x1
0x801DFADC = D_801DFADC; // type:char size:0x1
0x801DFAE0 = D_801DFAE0; // type:char size:0x1
0x801DFAE4 = D_801DFAE4; // type:char size:0x1
0x801DFAE8 = D_801DFAE8; // type:char size:0x1
0x801DFAEC = D_801DFAEC; // type:char size:0x1
0x801DFAF0 = D_801DFAF0; // type:char size:0x1
0x801DFAF4 = D_801DFAF4; // type:char size:0x1
0x801DFAF8 = D_801DFAF8; // type:char size:0x1
0x801DFAFC = D_801DFAFC; // type:char size:0x1
0x801DFB00 = D_801DFB00; // type:char size:0x1
0x801DFB04 = D_801DFB04; // type:char size:0x1
0x801DFB08 = D_801DFB08; // type:char size:0x1
0x801DFB0C = D_801DFB0C; // type:char size:0x1
0x801DFB10 = D_801DFB10; // type:char size:0x1
0x801DFB14 = D_801DFB14; // type:char size:0x1
0x801DFB18 = D_801DFB18; // type:char size:0x1
0x801DFB1C = D_801DFB1C; // type:char size:0x1
0x801DFB20 = D_801DFB20; // type:char size:0x1
0x801DFB24 = D_801DFB24; // type:char size:0x1
0x801DFB28 = D_801DFB28; // type:char size:0x1
0x801DFB2C = jtbl_801DFB2C; // type:UNK_PTR size:0x4
0x801DFB88 = jtbl_801DFB88; // type:UNK_PTR size:0x4
0x801DFBC0 = jtbl_801DFBC0; // type:UNK_PTR size:0x4
0x801DFC04 = jtbl_801DFC04; // type:UNK_PTR size:0x4
0x801DFC3C = D_801DFC3C; // type:f32 size:0x4
0x801DFC40 = D_801DFC40; // type:f32 size:0x4
0x801DFC44 = D_801DFC44; // type:f32 size:0x4
0x801DFC50 = D_801DFC50; // type:f32 size:0x4
0x801DFC54 = D_801DFC54; // type:f32 size:0x4
0x801DFC58 = D_801DFC58; // type:f32 size:0x4
0x801DFC5C = D_801DFC5C; // type:f32 size:0x4
0x801DFC60 = D_801DFC60; // type:char size:0x7
0x801DFC70 = D_801DFC70; // type:u8 size:0x7
0x801DFC77 = D_801DFC77; // type:UNK_TYPE1 size:0x1
0x801DFC80 = D_801DFC80; // type:char size:0x1c
0x801DFC9C = D_801DFC9C; // type:char size:0x1d
0x801DFCC0 = D_801DFCC0; // type:char size:0xa
0x801DFCCC = D_801DFCCC; // type:char size:0xa
0x801DFCE0 = D_801DFCE0; // type:char size:0x19
0x801DFCFC = D_801DFCFC; // type:char size:0x12
0x801DFD10 = D_801DFD10; // type:char size:0x1a
0x801DFD2C = D_801DFD2C; // type:char size:0x11
0x801DFD40 = D_801DFD40; // type:char size:0xd
0x801DFD50 = D_801DFD50; // type:char size:0xb
0x801DFD5C = D_801DFD5C; // type:char size:0xb
0x801DFD70 = schedThreadName; // type:char size:0x6
0x801DFD78 = audioThreadName; // type:char size:0x6
0x801DFD80 = padmgrThreadName; // type:char size:0x7
0x801DFD88 = graphThreadName; // type:char size:0x6
0x801DFD90 = D_801DFD90; // type:char size:0xc
0x801DFD9C = D_801DFD9C; // type:char size:0xc
0x801DFDA8 = D_801DFDA8; // type:char size:0x2f
0x801DFDE0 = D_801DFDE0; // type:char size:0x1b
0x801DFDFC = D_801DFDFC; // type:char size:0x1a
0x801DFE18 = D_801DFE18; // type:char size:0x2e
0x801DFE48 = D_801DFE48; // type:char size:0x22
0x801DFE6C = D_801DFE6C; // type:char size:0x1e
0x801DFE8C = D_801DFE8C; // type:char size:0x31
0x801DFEC0 = D_801DFEC0; // type:char size:0x1
0x801DFEF0 = D_801DFEF0; // type:char size:0x1b
0x801DFF0C = D_801DFF0C; // type:char size:0x1a
0x801DFF28 = D_801DFF28; // type:char size:0x2e
0x801DFF58 = D_801DFF58; // type:char size:0x22
0x801DFF7C = D_801DFF7C; // type:char size:0x1e
0x801DFF9C = D_801DFF9C; // type:char size:0x1
0x801DFFCC = D_801DFFCC; // type:char size:0x1
0x801DFFE0 = D_801DFFE0; // type:char size:0x1
0x801E0038 = D_801E0038; // type:char size:0x26
0x801E0060 = D_801E0060; // type:char size:0x26
0x801E0088 = D_801E0088; // type:char size:0xc
0x801E0094 = D_801E0094; // type:char size:0x11
0x801E00A8 = D_801E00A8; // type:char size:0x12
0x801E00BC = D_801E00BC; // type:char size:0x2c
0x801E00E8 = D_801E00E8; // type:char size:0x1d
0x801E0108 = jtbl_801E0108; // type:UNK_PTR size:0x4
0x801E0120 = D_801E0120; // type:f32 size:0x4
0x801E0124 = D_801E0124; // type:f32 size:0x4
0x801E0128 = D_801E0128; // type:f32 size:0x4
0x801E012C = D_801E012C; // type:f32 size:0x4
0x801E0130 = Math3D_Normalize_min_length; // type:f32 size:0x4
0x801E0134 = D_801E0134; // type:f32 size:0x4
0x801E0138 = D_801E0138; // type:f32 size:0x4
0x801E013C = D_801E013C; // type:f32 size:0x4
0x801E0140 = D_801E0140; // type:f32 size:0x4
0x801E0144 = Math3D_AngleBetweenVectors_min_length; // type:f32 size:0x4
0x801E0148 = D_801E0148; // type:f32 size:0x4
0x801E014C = D_801E014C; // type:f32 size:0x4
0x801E0150 = Math3D_UnitNormalVector_min_length; // type:f32 size:0x4
0x801E0154 = Math3D_UDistPlaneToPos_min_length; // type:f32 size:0x4
0x801E0158 = D_801E0158; // type:f32 size:0x4
0x801E015C = D_801E015C; // type:f32 size:0x4
0x801E0160 = D_801E0160; // type:f32 size:0x4
0x801E0164 = D_801E0164; // type:f32 size:0x4
0x801E0168 = D_801E0168; // type:f32 size:0x4
0x801E016C = D_801E016C; // type:f32 size:0x4
0x801E0170 = D_801E0170; // type:f32 size:0x4
0x801E0174 = D_801E0174; // type:f32 size:0x4
0x801E0178 = D_801E0178; // type:f32 size:0x4
0x801E017C = D_801E017C; // type:f32 size:0x4
0x801E0180 = D_801E0180; // type:f32 size:0x4
0x801E0184 = D_801E0184; // type:f32 size:0x4
0x801E0188 = D_801E0188; // type:f32 size:0x4
0x801E018C = D_801E018C; // type:f32 size:0x4
0x801E0190 = D_801E0190; // type:f32 size:0x4
0x801E0194 = D_801E0194; // type:f32 size:0x4
0x801E0198 = D_801E0198; // type:f32 size:0x4
0x801E019C = D_801E019C; // type:f32 size:0x4
0x801E01A0 = D_801E01A0; // type:f32 size:0x4
0x801E01A4 = D_801E01A4; // type:f32 size:0x4
0x801E01A8 = D_801E01A8; // type:f32 size:0x4
0x801E01AC = D_801E01AC; // type:f32 size:0x4
0x801E01B0 = D_801E01B0; // type:f32 size:0x4
0x801E01B4 = D_801E01B4; // type:f32 size:0x4
0x801E01B8 = D_801E01B8; // type:f32 size:0x4
0x801E01BC = D_801E01BC; // type:f32 size:0x4
0x801E01C0 = D_801E01C0; // type:f32 size:0x4
0x801E01C4 = D_801E01C4; // type:f32 size:0x4
0x801E01C8 = D_801E01C8; // type:f32 size:0x4
0x801E01CC = D_801E01CC; // type:f32 size:0x4
0x801E01D0 = D_801E01D0; // type:f32 size:0x4
0x801E01D4 = D_801E01D4; // type:f32 size:0x4
0x801E01E0 = D_801E01E0; // type:f32 size:0x4
0x801E01F0 = D_801E01F0; // type:f32 size:0x4
0x801E01F4 = D_801E01F4; // type:f32 size:0x4
0x801E01F8 = D_801E01F8; // type:f32 size:0x4
0x801E0200 = D_801E0200; // type:f32 size:0x4
0x801E0204 = D_801E0204; // type:f32 size:0x4
0x801E0208 = D_801E0208; // type:f32 size:0x4
0x801E020C = D_801E020C; // type:f32 size:0x4
0x801E0210 = D_801E0210; // type:f32 size:0x4
0x801E0214 = D_801E0214; // type:f32 size:0x4
0x801E0218 = D_801E0218; // type:f32 size:0x4
0x801E021C = D_801E021C; // type:f32 size:0x4
0x801E0220 = D_801E0220; // type:f32 size:0x4
0x801E0224 = D_801E0224; // type:f32 size:0x4
0x801E0228 = D_801E0228; // type:f32 size:0x4
0x801E0230 = D_801E0230; // type:char size:0x8
0x801E0238 = D_801E0238; // type:char size:0x2
0x801E023C = D_801E023C; // type:char size:0x2
0x801E0240 = D_801E0240; // type:char size:0x7
0x801E0248 = D_801E0248; // type:char size:0x7
0x801E0250 = D_801E0250; // type:char size:0x8
0x801E0258 = D_801E0258; // type:char size:0x12
0x801E026C = D_801E026C; // type:char size:0xd
0x801E0280 = jtbl_801E0280; // type:UNK_PTR size:0x4
0x801E02A0 = D_801E02A0; // type:f32 size:0x4
0x801E02B0 = D_801E02B0; // type:f32 size:0x4
0x801E02B4 = D_801E02B4; // type:f32 size:0x4
0x801E02B8 = D_801E02B8; // type:f32 size:0x4
0x801E02BC = jtbl_801E02BC; // type:UNK_PTR size:0x4
0x801E02D0 = D_801E02D0; // type:f32 size:0x4
0x801E02D4 = jtbl_801E02D4; // type:UNK_PTR size:0x4
0x801E0300 = D_801E0300; // type:char size:0x9
0x801E030C = D_801E030C; // type:char size:0x1
0x801E0330 = D_801E0330; // type:char size:0x9
0x801E033C = D_801E033C; // type:char size:0x9
0x801E0348 = D_801E0348; // type:char size:0x9
0x801E0354 = D_801E0354; // type:char size:0x7
0x801E035C = jtbl_801E035C; // type:UNK_PTR size:0x4
0x801E0370 = jtbl_801E0370; // type:UNK_PTR size:0x4
0x801E0384 = D_801E0384; // type:f32 size:0x4
0x801E0388 = D_801E0388; // type:f32 size:0x4
0x801E038C = D_801E038C; // type:f32 size:0x4
0x801E0390 = jtbl_801E0390; // type:UNK_PTR size:0x4
0x801E040C = jtbl_801E040C; // type:UNK_PTR size:0x4
0x801E044C = jtbl_801E044C; // type:UNK_PTR size:0x4
0x801E0484 = jtbl_801E0484; // type:UNK_PTR size:0x4
0x801E04E0 = D_801E04E0; // type:f32 size:0x4
0x801E04E4 = D_801E04E4; // type:f32 size:0x4
0x801E04E8 = D_801E04E8; // type:f32 size:0x4
0x801E04EC = D_801E04EC; // type:f32 size:0x4
0x801E04F0 = D_801E04F0; // type:f32 size:0x4
0x801E04F4 = D_801E04F4; // type:f32 size:0x4
0x801E04F8 = D_801E04F8; // type:f32 size:0x4
0x801E04FC = D_801E04FC; // type:f32 size:0x4
0x801E0500 = D_801E0500; // type:f32 size:0x4
0x801E0504 = D_801E0504; // type:f32 size:0x4
0x801E0508 = D_801E0508; // type:f32 size:0x4
0x801E050C = D_801E050C; // type:f32 size:0x4
0x801E0510 = jtbl_801E0510; // type:UNK_PTR size:0x4
0x801E0534 = D_801E0534; // type:f32 size:0x4
0x801E0538 = D_801E0538; // type:f32 size:0x4
0x801E0540 = jtbl_801E0540; // type:UNK_PTR size:0x4
0x801E0578 = jtbl_801E0578; // type:UNK_PTR size:0x4
0x801E05B4 = D_801E05B4; // type:f32 size:0x4
0x801E05B8 = D_801E05B8; // type:f32 size:0x4
0x801E05BC = jtbl_801E05BC; // type:UNK_PTR size:0x4
0x801E05D0 = D_801E05D0; // type:f32 size:0x4
0x801E05D4 = D_801E05D4; // type:f32 size:0x4
0x801E05D8 = jtbl_801E05D8; // type:UNK_PTR size:0x4
0x801E0720 = jtbl_801E0720; // type:UNK_PTR size:0x4
0x801E07C4 = jtbl_801E07C4; // type:UNK_PTR size:0x4
0x801E0948 = jtbl_801E0948; // type:UNK_PTR size:0x4
0x801E0A08 = jtbl_801E0A08; // type:UNK_PTR size:0x4
0x801E0BD0 = gAudioEnvironmentalSfx; // type:UNK_TYPE1 size:0x1
0x801E0BFC = sIsOcarinaSongReserved; // type:UNK_TYPE1 size:0x1
0x801E0C14 = sAudioOcarinaUnusedText0; // type:char size:0x1
0x801E0C38 = sAudioOcarinaUnusedText1; // type:char size:0x1
0x801E0C64 = sAudioOcarinaUnusedText2; // type:char size:0x1
0x801E0C6C = sAudioOcarinaUnusedText3; // type:char size:0x1
0x801E0C74 = sAudioOcarinaUnusedText4; // type:char size:0x1
0x801E0C7C = sAudioOcarinaUnusedText5; // type:char size:0x1
0x801E0CA4 = sAudioOcarinaUnusedText6; // type:char size:0x1
0x801E0CD0 = sAudioOcarinaUnusedText7; // type:char size:0x1
0x801E0CEC = D_801E0CEC; // type:f32 size:0x4
0x801E0CF0 = D_801E0CF0; // type:f32 size:0x4
0x801E0CF4 = D_801E0CF4; // type:f32 size:0x4
0x801E0CF8 = D_801E0CF8; // type:f32 size:0x4
0x801E0CFC = D_801E0CFC; // type:f32 size:0x4
0x801E0D00 = jtbl_801E0D00; // type:UNK_PTR size:0x4
0x801E0D20 = D_801E0D20; // type:f32 size:0x4
0x801E0D24 = D_801E0D24; // type:f32 size:0x4
0x801E0D28 = D_801E0D28; // type:f32 size:0x4
0x801E0D2C = D_801E0D2C; // type:f32 size:0x4
0x801E0D30 = D_801E0D30; // type:f32 size:0x4
0x801E0D34 = D_801E0D34; // type:f32 size:0x4
0x801E0D38 = jtbl_801E0D38; // type:UNK_PTR size:0x4
0x801E0D58 = D_801E0D58; // type:f64 size:0x8
0x801E0D60 = D_801E0D60; // type:f32 size:0x4
0x801E0D64 = D_801E0D64; // type:f32 size:0x4
0x801E0D68 = D_801E0D68; // type:f32 size:0x4
0x801E0D6C = jtbl_801E0D6C; // type:UNK_PTR size:0x4
0x801E0D8C = D_801E0D8C; // type:f32 size:0x4
0x801E0D90 = D_801E0D90; // type:f32 size:0x4
0x801E0D94 = D_801E0D94; // type:f32 size:0x4
0x801E0D98 = D_801E0D98; // type:f32 size:0x4
0x801E0D9C = D_801E0D9C; // type:f32 size:0x4
0x801E0DA0 = jtbl_801E0DA0; // type:UNK_PTR size:0x4
0x801E0DBC = D_801E0DBC; // type:f32 size:0x4
0x801E0DC0 = D_801E0DC0; // type:f32 size:0x4
0x801E0DC4 = D_801E0DC4; // type:f32 size:0x4
0x801E0DC8 = D_801E0DC8; // type:f32 size:0x4
0x801E0DCC = D_801E0DCC; // type:f32 size:0x4
0x801E0DD0 = D_801E0DD0; // type:f32 size:0x4
0x801E0DD4 = D_801E0DD4; // type:f32 size:0x4
0x801E0DD8 = D_801E0DD8; // type:f64 size:0x8
0x801E0DE0 = D_801E0DE0; // type:f64 size:0x8
0x801E0DE8 = D_801E0DE8; // type:f32 size:0x4
0x801E0DEC = D_801E0DEC; // type:f32 size:0x4
0x801E0DF0 = D_801E0DF0; // type:f32 size:0x4
0x801E0DF4 = D_801E0DF4; // type:f32 size:0x4
0x801E0DF8 = D_801E0DF8; // type:f32 size:0x4
0x801E0DFC = D_801E0DFC; // type:f32 size:0x4
0x801E0E00 = D_801E0E00; // type:f32 size:0x4
0x801E0E04 = D_801E0E04; // type:f32 size:0x4
0x801E0E08 = D_801E0E08; // type:f32 size:0x4
0x801E0E0C = D_801E0E0C; // type:f32 size:0x4
0x801E0E10 = D_801E0E10; // type:f32 size:0x4
0x801E0E14 = D_801E0E14; // type:f32 size:0x4
0x801E0E18 = D_801E0E18; // type:f32 size:0x4
0x801E0E1C = D_801E0E1C; // type:f32 size:0x4
0x801E0E20 = D_801E0E20; // type:f32 size:0x4
0x801E0E24 = D_801E0E24; // type:f32 size:0x4
0x801E0E28 = jtbl_801E0E28; // type:UNK_PTR size:0x4
0x801E0EB0 = D_801E0EB0; // type:f64 size:0x8
0x801E0EC0 = D_801E0EC0; // type:char size:0x1
0x801E0ECC = D_801E0ECC; // type:char size:0x1
0x801E0EF0 = D_801E0EF0; // type:char size:0x1
0x801E0F10 = D_801E0F10; // type:char size:0x1
0x801E0F30 = D_801E0F30; // type:char size:0x1
0x801E0F48 = D_801E0F48; // type:char size:0x1
0x801E0F60 = D_801E0F60; // type:char size:0x1
0x801E0FA4 = D_801E0FA4; // type:char size:0x1
0x801E0FEC = jtbl_801E0FEC; // type:UNK_PTR size:0x4
0x801E1028 = jtbl_801E1028; // type:UNK_PTR size:0x4
0x801E1050 = jtbl_801E1050; // type:UNK_PTR size:0x4
0x801E1068 = D_801E1068; // type:f32 size:0x4
0x801E1070 = jtbl_801E1070; // type:UNK_PTR size:0x4
0x801E10B0 = jtbl_801E10B0; // type:UNK_PTR size:0x4
0x801E10C4 = jtbl_801E10C4; // type:UNK_PTR size:0x4
0x801E1100 = gAudioTatumInit; // type:s16 size:0x4
0x801E1104 = gAudioHeapInitSizes; // type:AudioHeapInitSizes size:0xC
0x801E1110 = sGameOverTimer; // type:UNK_TYPE2 size:0x2
0x801E1120 = jtbl_801E1120; // type:UNK_PTR size:0x4
0x801E1180 = gSoundFontTable; // type:UNK_TYPE2 size:0x2
0x801E1420 = gSequenceFontTable; // type:UNK_TYPE1 size:0x1
0x801E1630 = gSequenceTable; // type:UNK_TYPE2 size:0x2
0x801E1E40 = gSampleBankTable; // type:UNK_TYPE1 size:0x1
0x801E1E80 = aspMainDataStart; // type:UNK_TYPE1 size:0x2E0
0x801E2160 = gspF3DZEX2_NoN_PosLight_fifoTextStart; // type:UNK_TYPE1 size:0x1
0x801E3790 = gspF3DZEX2_NoN_PosLight_fifoDataStart; // type:UNK_TYPE1 size:0x1
0x801E3BB0 = gspS2DEX2_fifoDataStart; // type:UNK_TYPE1 size:0x1
0x801E3F40 = njpgdspMainDataStart; // type:UNK_TYPE1 size:0x1
0x801E3FA0 = D_801E3FA0; // type:UNK_TYPE1 size:0x1
0x801E3FB0 = sEffectContext; // type:EffectContext size:0x98E0
0x801ED890 = D_801ED890; // type:UNK_TYPE1 size:0x1
0x801ED894 = D_801ED894; // type:UNK_TYPE1 size:0x1
0x801ED8A0 = sActorFaultClient; // type:UNK_TYPE1 size:0x1
0x801ED8B0 = D_801ED8B0; // type:UNK_TYPE1 size:0x1
0x801ED8B4 = D_801ED8B4; // type:UNK_TYPE1 size:0x1
0x801ED8B8 = D_801ED8B8; // type:UNK_TYPE1 size:0x1
0x801ED8BC = D_801ED8BC; // type:UNK_TYPE1 size:0x1
0x801ED8C0 = D_801ED8C0; // type:UNK_TYPE1 size:0x1
0x801ED8C4 = D_801ED8C4; // type:UNK_TYPE1 size:0x1
0x801ED8C8 = D_801ED8C8; // type:f32 size:0x4
0x801ED8CC = sBgmEnemyDistSq; // type:f32 size:0x4
0x801ED8D0 = D_801ED8D0; // type:f32 size:0x4
0x801ED8D4 = D_801ED8D4; // type:UNK_TYPE1 size:0x1
0x801ED8D8 = D_801ED8D8; // type:UNK_TYPE1 size:0x1
0x801ED8DC = D_801ED8DC; // type:UNK_TYPE1 size:0x1
0x801ED8E0 = D_801ED8E0; // type:Mtx size:0x40
0x801ED920 = D_801ED920; // type:UNK_TYPE1 size:0x1
0x801ED930 = D_801ED930; // type:FaultClient size:0x10
0x801ED940 = D_801ED940; // type:FaultAddrConvClient size:0xc
0x801ED950 = D_801ED950; // type:char size:0x50
0x801ED9A0 = D_801ED9A0; // type:char size:0x50
0x801ED9F0 = D_801ED9F0; // type:Vec3f size:0x24
0x801EDA18 = D_801EDA18; // type:Vec3f size:0x24
0x801EDA40 = D_801EDA40; // type:MtxF size:0x40
0x801EDA80 = D_801EDA80; // type:Vec3f size:0x24
0x801EDAA8 = D_801EDAA8; // type:char size:0x50
0x801EDAF8 = D_801EDAF8; // type:char size:0x50
0x801EDB48 = D_801EDB48; // type:Vec3f size:0x24
0x801EDB70 = D_801EDB70; // type:Vec3f size:0x24
0x801EDB98 = D_801EDB98; // type:Plane size:0x10
0x801EDBA8 = D_801EDBA8; // type:Sphere16 size:0x8
0x801EDBB0 = D_801EDBB0; // type:TriNorm size:0x34
0x801EDBF0 = D_801EDBF0; // type:s16 size:0x2
0x801EDBF4 = D_801EDBF4; // type:f32 size:0x4
0x801EDBF8 = D_801EDBF8; // type:f32 size:0x4
0x801EDC00 = D_801EDC00; // type:CameraCollision size:0x28
0x801EDC28 = sCamPlayState; // type:PlayState* size:0x4
0x801EDC30 = D_801EDC30; // type:SwingAnimation size:0x1A0
0x801EDDD0 = D_801EDDD0; // type:Vec3f size:0xc
0x801EDDE0 = D_801EDDE0; // type:Vec3f size:0xc
0x801EDDF0 = D_801EDDF0; // type:Vec3f size:0xc
0x801EDE00 = D_801EDE00; // type:Vec3f size:0xc
0x801EDE10 = D_801EDE10; // type:Vec3f size:0xc
0x801EDE20 = D_801EDE20; // type:Vec3f size:0xc
0x801EDE30 = D_801EDE30; // type:Vec3f size:0xc
0x801EDE40 = D_801EDE40; // type:UNK_TYPE1 size:0x1
0x801EDE78 = D_801EDE78; // type:UNK_TYPE1 size:0x1
0x801EDEB0 = D_801EDEB0; // type:UNK_TYPE1 size:0x1
0x801EDEBC = D_801EDEBC; // type:UNK_TYPE1 size:0x1
0x801EDEC8 = D_801EDEC8; // type:UNK_TYPE1 size:0x1
0x801EDF00 = D_801EDF00; // type:UNK_TYPE1 size:0x1
0x801EDF38 = D_801EDF38; // type:UNK_TYPE1 size:0x1
0x801EDF48 = D_801EDF48; // type:UNK_TYPE1 size:0x1
0x801EDF58 = D_801EDF58; // type:UNK_TYPE1 size:0x1
0x801EDF90 = D_801EDF90; // type:UNK_TYPE1 size:0x1
0x801EDFC8 = D_801EDFC8; // type:UNK_TYPE1 size:0x1
0x801EDFD4 = D_801EDFD4; // type:UNK_TYPE1 size:0x1
0x801EDFE0 = D_801EDFE0; // type:UNK_TYPE1 size:0x1
0x801EDFF0 = D_801EDFF0; // type:UNK_TYPE1 size:0x1
0x801EE000 = D_801EE000; // type:UNK_TYPE1 size:0x1
0x801EE038 = D_801EE038; // type:UNK_TYPE1 size:0x1
0x801EE070 = D_801EE070; // type:UNK_TYPE1 size:0x1
0x801EE0A4 = D_801EE0A4; // type:UNK_TYPE1 size:0x1
0x801EE0D8 = D_801EE0D8; // type:UNK_TYPE1 size:0x1
0x801EE0E8 = D_801EE0E8; // type:UNK_TYPE1 size:0x1
0x801EE11C = D_801EE11C; // type:UNK_TYPE1 size:0x1
0x801EE150 = D_801EE150; // type:UNK_TYPE1 size:0x1
0x801EE188 = D_801EE188; // type:UNK_TYPE1 size:0x1
0x801EE1C0 = D_801EE1C0; // type:Vec3f size:0xc
0x801EE1D0 = D_801EE1D0; // type:Vec3f size:0xc
0x801EE1E0 = D_801EE1E0; // type:Vec3f size:0xc
0x801EE1F0 = D_801EE1F0; // type:Vec3f size:0xc
0x801EE200 = D_801EE200; // type:EffectSparkInit size:0x4c4
0x801EE6C8 = D_801EE6C8; // type:TriNorm size:0x34
0x801EE700 = D_801EE700; // type:TriNorm size:0x34
0x801EE738 = D_801EE738; // type:EffectSparkInit size:0x4c4
0x801EEC00 = D_801EEC00; // type:EffectSparkInit size:0x4c4
0x801EF0C8 = D_801EF0C8; // type:EffectSparkInit size:0x4c4
0x801EF590 = D_801EF590; // type:UNK_TYPE1 size:0x1
0x801EF5C8 = D_801EF5C8; // type:UNK_TYPE1 size:0x1
0x801EF600 = D_801EF600; // type:TriNorm size:0x34
0x801EF638 = D_801EF638; // type:TriNorm size:0x34
0x801EF670 = gSaveContext; // type:SaveContext size:0x48e8
0x801F3F58 = D_801F3F58; // type:UNK_TYPE1 size:0x1
0x801F3F5A = D_801F3F5A; // type:UNK_TYPE1 size:0x1
0x801F3F60 = gGameInfo; // type:GameInfo* size:0x4
0x801F3F70 = sDebugObjectListHead; // type:UNK_TYPE1 size:0x1
0x801F3F80 = D_801F3F80; // type:UNK_TYPE1 size:0x1
0x801F3F83 = D_801F3F83; // type:UNK_TYPE1 size:0x1
0x801F48C8 = D_801F48C8; // type:UNK_TYPE1 size:0x1
0x801F4D40 = seqId; // type:u16 size:0x2
0x801F4D42 = sCutsceneQuakeIndex; // type:UNK_TYPE2 size:0x2
0x801F4D48 = sCutsceneCameraInfo; // type:UNK_TYPE size:0x80
0x801F4DC8 = D_801F4DC8; // type:u16 size:0x14
0x801F4DDC = D_801F4DDC; // type:UNK_TYPE1 size:0x1
0x801F4DE0 = D_801F4DE0; // type:UNK_TYPE1 size:0x1
0x801F4DE2 = D_801F4DE2; // type:UNK_TYPE2 size:0x2
0x801F4DF0 = actorCutscenes; // type:ActorCutscene* size:0x4
0x801F4DF4 = actorCutsceneCount; // type:s16 size:0x2
0x801F4DF8 = actorCutsceneWaiting; // type:u8 size:0x10
0x801F4E08 = D_801F4E08; // type:UNK_TYPE1 size:0x1
0x801F4E10 = actorCutsceneNextCutscenes; // type:u8 size:0x10
0x801F4E20 = D_801F4E20; // type:UNK_TYPE1 size:0x1
0x801F4E30 = D_801F4E30; // type:UNK_TYPE1 size:0x1
0x801F4E31 = D_801F4E31; // type:UNK_TYPE1 size:0x1
0x801F4E32 = D_801F4E32; // type:UNK_TYPE1 size:0x1
0x801F4E38 = D_801F4E38; // type:UNK_TYPE1 size:0x1
0x801F4E3C = D_801F4E3C; // type:UNK_TYPE1 size:0x1
0x801F4E40 = D_801F4E40; // type:UNK_TYPE1 size:0x1
0x801F4E44 = D_801F4E44; // type:UNK_TYPE1 size:0x1
0x801F4E48 = D_801F4E48; // type:UNK_TYPE1 size:0x1
0x801F4E4C = D_801F4E4C; // type:UNK_TYPE1 size:0x1
0x801F4E4E = D_801F4E4E; // type:UNK_TYPE1 size:0x1
0x801F4E50 = D_801F4E50; // type:UNK_TYPE1 size:0x1
0x801F4E54 = D_801F4E54; // type:UNK_TYPE1 size:0x1
0x801F4E58 = D_801F4E58; // type:UNK_TYPE1 size:0x1
0x801F4E5C = D_801F4E5C; // type:UNK_TYPE1 size:0x1
0x801F4E60 = D_801F4E60; // type:UNK_TYPE1 size:0x1
0x801F4E64 = D_801F4E64; // type:UNK_TYPE1 size:0x1
0x801F4E68 = D_801F4E68; // type:UNK_TYPE1 size:0x1
0x801F4E70 = D_801F4E70; // type:UNK_TYPE1 size:0x1
0x801F4E74 = D_801F4E74; // type:UNK_TYPE1 size:0x1
0x801F4E78 = D_801F4E78; // type:UNK_TYPE1 size:0x1
0x801F4E7A = D_801F4E7A; // type:s16 size:0x2
0x801F4E80 = D_801F4E80; // type:UNK_TYPE1 size:0x1
0x801F4EE0 = D_801F4EE0; // type:UNK_TYPE1 size:0x1
0x801F4EE8 = D_801F4EE8; // type:UNK_TYPE1 size:0x1
0x801F4EF8 = D_801F4EF8; // type:UNK_TYPE1 size:0x1
0x801F4F00 = D_801F4F00; // type:UNK_TYPE1 size:0x1
0x801F4F10 = D_801F4F10; // type:UNK_TYPE1 size:0x1
0x801F4F14 = D_801F4F14; // type:UNK_TYPE1 size:0x1
0x801F4F18 = D_801F4F18; // type:UNK_TYPE1 size:0x1
0x801F4F1C = D_801F4F1C; // type:UNK_TYPE1 size:0x1
0x801F4F20 = D_801F4F20; // type:UNK_TYPE1 size:0x1
0x801F4F24 = D_801F4F24; // type:UNK_TYPE1 size:0x1
0x801F4F28 = D_801F4F28; // type:UNK_TYPE1 size:0x1
0x801F4F2C = D_801F4F2C; // type:UNK_TYPE1 size:0x1
0x801F4F2E = D_801F4F2E; // type:UNK_TYPE1 size:0x1
0x801F4F30 = D_801F4F30; // type:UNK_TYPE1 size:0x1
0x801F4F31 = D_801F4F31; // type:UNK_TYPE1 size:0x1
0x801F4F32 = D_801F4F32; // type:UNK_TYPE1 size:0x1
0x801F4F33 = D_801F4F33; // type:UNK_TYPE1 size:0x1
0x801F4F34 = D_801F4F34; // type:UNK_TYPE1 size:0x1
0x801F4F38 = D_801F4F38; // type:UNK_TYPE1 size:0x1
0x801F4F40 = sBeatingHeartsDDPrim; // type:s32 size:0x6
0x801F4F48 = sBeatingHeartsDDEnv; // type:s32 size:0x6
0x801F4F50 = sHeartsDDPrim; // type:s32 size:0xC
0x801F4F60 = sHeartsDDEnv; // type:s32 size:0xC
0x801F4F66 = D_801F4F66; // type:UNK_TYPE1 size:0x1
0x801F4F68 = D_801F4F68; // type:UNK_TYPE1 size:0x1
0x801F4F6A = D_801F4F6A; // type:UNK_TYPE1 size:0x1
0x801F4F70 = sLightsBuffer; // type:LightsBuffer size:0x188
0x801F5100 = sZeldaArena; // type:Arena size:0x24
0x801F5130 = D_801F5130; // type:UNK_TYPE1 size:0x1
0x801F5270 = D_801F5270; // type:UNK_TYPE1 size:0x1
0x801F528E = D_801F528E; // type:UNK_TYPE1 size:0x1
0x801F53B0 = D_801F53B0; // type:UNK_TYPE1 size:0x1
0x801F56B0 = D_801F56B0; // type:UNK_TYPE1 size:0x1
0x801F5730 = D_801F5730; // type:UNK_TYPE1 size:0x1
0x801F57B4 = D_801F57B4; // type:UNK_TYPE1 size:0x1
0x801F5834 = D_801F5834; // type:UNK_TYPE1 size:0x1
0x801F5840 = gNMIBuffer; // type:s32* size:0x4
0x801F5850 = sPostmanTimerInput; // type:UNK_TYPE1 size:0x1
0x801F58B0 = D_801F58B0; // type:struct_801F58B0 size:0xFC
0x801F59AC = D_801F59AC; // type:UNK_TYPE1 size:0x1
0x801F59B0 = D_801F59B0; // type:Vec3f size:0x18
0x801F59C8 = D_801F59C8; // type:s32 size:0x8
0x801F59D0 = D_801F59D0; // type:struct_801F59D0 size:0x0A
0x801F59DC = D_801F59DC; // type:Vec3f* size:0x4
0x801F59E0 = D_801F59E0; // type:s32 size:0x4
0x801F59E4 = D_801F59E4; // type:s32 size:0x4
0x801F59E8 = D_801F59E8; // type:Vec3f size:0xC
0x801F59F4 = D_801F59F4; // type:s32 size:0x4
0x801F59F8 = D_801F59F8; // type:s32 size:0x4
0x801F5A00 = sQuakeRequest; // type:QuakeRequest size:0x90
0x801F5A90 = sDistortionRequest; // type:DistortionRequest size:0xc
0x801F5AA0 = sMatAnimStep; // type:s32 size:0x4
0x801F5AA4 = sMatAnimFlags; // type:u32 size:0x4
0x801F5AA8 = sMatAnimAlphaRatio; // type:f32 size:0x4
0x801F5AB0 = sAnimQueueFlags; // type:UNK_TYPE1 size:0x1
0x801F5AB4 = sDisableAnimQueueFlags; // type:UNK_TYPE1 size:0x1
0x801F5AC0 = gSkinLimbMatrices; // type:MtxF size:0xF00
0x801F69C0 = D_801F69C0; // type:UNK_TYPE1 size:0x10
0x801F69D0 = gRumbleMgr; // type:RumbleManager size:0x10E
0x801F6AE0 = sSkyboxDrawMatrix; // type:Mtx* size:0x4
0x801F6AF0 = D_801F6AF0; // type:UNK_TYPE1 size:0x1
0x801F6AF2 = D_801F6AF2; // type:UNK_TYPE1 size:0x1
0x801F6B00 = D_801F6B00; // type:UNK_TYPE4 size:0x4
0x801F6B04 = D_801F6B04; // type:UNK_TYPE4 size:0x4
0x801F6B08 = D_801F6B08; // type:UNK_TYPE4 size:0x4
0x801F6B0C = D_801F6B0C; // type:UNK_TYPE1 size:0x1
0x801F6B0E = D_801F6B0E; // type:UNK_TYPE1 size:0x1
0x801F6B10 = D_801F6B10; // type:UNK_TYPE1 size:0x1
0x801F6B12 = D_801F6B12; // type:UNK_TYPE1 size:0x1
0x801F6B14 = D_801F6B14; // type:UNK_TYPE1 size:0x1
0x801F6B16 = D_801F6B16; // type:UNK_TYPE1 size:0x1
0x801F6B18 = D_801F6B18; // type:UNK_TYPE1 size:0x1
0x801F6B1A = D_801F6B1A; // type:UNK_TYPE1 size:0x1
0x801F6B1C = D_801F6B1C; // type:UNK_TYPE1 size:0x1
0x801F6B1E = D_801F6B1E; // type:UNK_TYPE1 size:0x1
0x801F6B20 = D_801F6B20; // type:UNK_TYPE1 size:0x1
0x801F6B22 = D_801F6B22; // type:UNK_TYPE1 size:0x1
0x801F6B30 = sPlayerCallInitFunc; // type:UNK_TYPE1 size:0x1
0x801F6B34 = sPlayerCallDestroyFunc; // type:UNK_TYPE1 size:0x1
0x801F6B38 = sPlayerCallUpdateFunc; // type:UNK_TYPE1 size:0x1
0x801F6B3C = sPlayerCallDrawFunc; // type:UNK_TYPE1 size:0x1
0x801F6B40 = sShrinkWindow; // type:ShrinkWindow size:0x4
0x801F6B44 = sShrinkWindowPtr; // type:ShrinkWindow* size:0x4
0x801F6B50 = D_801F6B50; // type:UNK_TYPE4 size:0x4
0x801F6B58 = D_801F6B58; // type:UNK_TYPE1 size:0x1
0x801F6BF0 = sKaleidoAreaFaultClient; // type:FaultAddrConvClient size:0xC
0x801F6C00 = sKaleidoScopeUpdateFunc; // type:void* size:0x4
0x801F6C04 = sKaleidoScopeDrawFunc; // type:void* size:0x4
0x801F6C10 = sTransitionFillTimer; // type:UNK_TYPE1 size:0x1
0x801F6C18 = D_801F6C18; // type:Input size:0x18
0x801F6C30 = sTransitionTile; // type:TransitionTile size:0xE0
0x801F6D10 = gTransitionTileState; // type:UNK_TYPE4 size:0x4
0x801F6D18 = sVisMono; // type:UNK_TYPE1 size:0x1
0x801F6D30 = gVisMonoColor; // type:Color_RGBA8 size:0x4
0x801F6D38 = D_801F6D38; // type:UNK_TYPE1 size:0x1
0x801F6D4C = D_801F6D4C; // type:UNK_TYPE4 size:0x4
0x801F6D50 = sBombersNotebook; // type:UNK_TYPE1 size:0x1
0x801F6DFC = sBombersNotebookOpen; // type:u8 size:0x1
0x801F6DFD = sMotionBlurStatus; // type:UNK_TYPE1 size:0x1
0x801F6E00 = D_801F6E00; // type:SlowlyTask size:0x1c0
0x801F6FC0 = D_801F6FC0; // type:UNK_TYPE1 size:0x1
0x801F6FC8 = slowlyStackEntry; // type:StackEntry size:0x1c
0x801F6FE8 = slowlyStack; // type:u8 size:0x1000
0x801F7FE8 = D_801F7FE8; // type:UNK_TYPE1 size:0x1
0x801F7FF0 = D_801F7FF0; // type:UNK_TYPE1 size:0x1
0x801F8010 = D_801F8010; // type:struct_801F8010 size:0x10
0x801F8020 = D_801F8020; // type:struct_801F8020 size:0x10
0x801F8030 = sMonoColors; // type:VisMono size:0x18
0x801F8048 = D_801F8048; // type:UNK_TYPE1 size:0x1
0x801F80D0 = sGraphFaultAddrConvClient; // type:FaultAddrConvClient size:0xc
0x801F80E0 = sGraphFaultClient; // type:FaultClient size:0x10
0x801F80F0 = gGfxMasterDL; // type:Gfx* size:0x4
0x801F80F8 = sGraphCfbInfos; // type:UNK_TYPE1 size:0x1
0x801F8150 = sGraphTaskStartTime; // type:u64 size:0x8
0x801F8160 = sSiIntMsgQ; // type:OSMesgQueue size:0x18
0x801F8178 = sSiIntMsgBuf; // type:OSMesg size:0x4
0x801F8180 = gSegments; // type:u32 size:0x40
0x801F81C0 = gSchedContext; // type:SchedContext size:0x338
0x801F84F8 = irqClient; // type:IrqMgrClient size:0x8
0x801F8500 = irqMgrMsgQ; // type:OSMesgQueue size:0x18
0x801F8518 = irqMgrMsgBuf; // type:OSMesg size:0xf0
0x801F8608 = sGraphThread; // type:OSThread size:0x1b0
0x801F87B8 = sGraphStack; // type:u8 size:0x1800
0x801F9FB8 = schedStack; // type:u8 size:0x600
0x801FA5B8 = audioStack; // type:u8 size:0x800
0x801FADB8 = padmgrStack; // type:u8 size:0x500
0x801FB2B8 = sGraphStackInfo; // type:StackEntry size:0x1c
0x801FB2D8 = schedStackEntry; // type:StackEntry size:0x1c
0x801FB2F8 = audioStackEntry; // type:StackEntry size:0x1c
0x801FB318 = padmgrStackEntry; // type:StackEntry size:0x1c
0x801FB338 = audioContext; // type:AudioMgr size:0x2e0
0x801FB620 = D_801FB620; // type:PadMgr size:0x480
0x801FBAA0 = sSchedFaultClient; // type:UNK_TYPE1 size:0x1
0x801FBAB0 = sRSPGFXStartTime; // type:OSTime size:0x8
0x801FBAB8 = sRSPAudioStartTime; // type:OSTime size:0x8
0x801FBAC0 = sRSPOtherStartTime; // type:OSTime size:0x8
0x801FBAC8 = sRDPStartTime; // type:OSTime size:0x8
0x801FBAD0 = gAudioSPDataPtr; // type:u64* size:0x4
0x801FBAD4 = gAudioSPDataSize; // type:u32 size:0x4
0x801FBAE0 = D_801FBAE0; // type:UNK_TYPE1 size:0x1
0x801FBAE8 = D_801FBAE8; // type:UNK_TYPE1 size:0x1
0x801FBAF0 = D_801FBAF0; // type:volatile OSTime size:0x8
0x801FBAF8 = lastRenderFrameDuration; // type:volatile OSTime size:0x8
0x801FBB00 = gRSPAudioTotalTime; // type:UNK_TYPE1 size:0x1
0x801FBB04 = D_801FBB04; // type:UNK_TYPE1 size:0x1
0x801FBB08 = sRSPGFXTotalTime; // type:UNK_TYPE1 size:0x1
0x801FBB0C = D_801FBB0C; // type:UNK_TYPE1 size:0x1
0x801FBB10 = sRSPOtherTotalTime; // type:UNK_TYPE1 size:0x1
0x801FBB14 = D_801FBB14; // type:UNK_TYPE1 size:0x1
0x801FBB20 = gRDPTotalTime; // type:UNK_TYPE1 size:0x1
0x801FBB28 = D_801FBB28; // type:UNK_TYPE1 size:0x1
0x801FBB30 = D_801FBB30; // type:OSViMode size:0x50
0x801FBB80 = gFramebuffers; // type:u32* size:0x8
0x801FBB88 = D_801FBB88; // type:OSViMode* size:0x4
0x801FBB8C = gZBufferPtr; // type:u16* size:0x4
0x801FBB90 = D_801FBB90; // type:UNK_TYPE4 size:0x4
0x801FBB94 = gGfxSPTaskOutputBufferPtr; // type:UNK_TYPE1 size:0x1
0x801FBB98 = gGfxSPTaskOutputBufferSize; // type:UNK_TYPE1 size:0x1
0x801FBB9C = D_801FBB9C; // type:UNK_TYPE1 size:0x1
0x801FBBA0 = D_801FBBA0; // type:UNK_TYPE1 size:0x1
0x801FBBA4 = gZBuffer; // type:u16* size:0x4
0x801FBBA8 = gWorkBuffer; // type:u16** size:0x4
0x801FBBAC = gGfxSPTaskOutputBuffer; // type:u16** size:0x4
0x801FBBB0 = gGfxSPTaskOutputBufferEnd; // type:UNK_TYPE1 size:0x1
0x801FBBB4 = D_801FBBB4; // type:UNK_TYPE1 size:0x1
0x801FBBB8 = D_801FBBB8; // type:UNK_TYPE1 size:0x1
0x801FBBBC = D_801FBBBC; // type:UNK_TYPE1 size:0x1
0x801FBBC0 = D_801FBBC0; // type:UNK_TYPE1 size:0x1
0x801FBBC4 = gGfxSPTaskOutputBuffer2; // type:UNK_TYPE1 size:0x1
0x801FBBC8 = gGfxSPTaskOutputBufferEnd2; // type:UNK_TYPE1 size:0x1
0x801FBBCC = D_801FBBCC; // type:UNK_TYPE2 size:0x2
0x801FBBCE = D_801FBBCE; // type:UNK_TYPE2 size:0x2
0x801FBBD0 = D_801FBBD0; // type:UNK_TYPE1 size:0x1
0x801FBBD2 = D_801FBBD2; // type:UNK_TYPE1 size:0x1
0x801FBBD4 = D_801FBBD4; // type:UNK_TYPE1 size:0x1
0x801FBBE0 = sDmaBuffer; // type:u32 size:0x8
0x801FBBF0 = D_801FBBF0; // type:Vec3f size:0xc
0x801FBC00 = Math3D_ColSphereTri_line; // type:LineSegment size:0x18
0x801FBC18 = Math3D_ColSphereTri_point; // type:Vec3f size:0xc
0x801FBC28 = D_801FBC28; // type:UNK_TYPE1 size:0x1
0x801FBC2C = D_801FBC2C; // type:UNK_TYPE1 size:0x1
0x801FBC30 = D_801FBC30; // type:UNK_TYPE1 size:0x1
0x801FBC38 = D_801FBC38; // type:UNK_TYPE1 size:0x1
0x801FBC3A = D_801FBC3A; // type:UNK_TYPE1 size:0x1
0x801FBC3C = D_801FBC3C; // type:UNK_TYPE1 size:0x1
0x801FBC3E = D_801FBC3E; // type:UNK_TYPE1 size:0x1
0x801FBC40 = D_801FBC40; // type:UNK_TYPE1 size:0x1
0x801FBC42 = D_801FBC42; // type:UNK_TYPE1 size:0x1
0x801FBC44 = D_801FBC44; // type:UNK_TYPE1 size:0x1
0x801FBC46 = D_801FBC46; // type:UNK_TYPE1 size:0x1
0x801FBC48 = D_801FBC48; // type:UNK_TYPE1 size:0x1
0x801FBC58 = D_801FBC58; // type:UNK_TYPE1 size:0x1
0x801FBC68 = Math3D_SurfaceNorm_temp1; // type:Vec3f size:0xc
0x801FBC78 = Math3D_SurfaceNorm_temp2; // type:Vec3f size:0xc
0x801FBC8C = D_801FBC8C; // type:f32 size:0x4
0x801FBC90 = D_801FBC90; // type:f32 size:0x4
0x801FBC98 = D_801FBC98; // type:f32 size:0x4
0x801FBCA4 = D_801FBCA4; // type:f32 size:0x4
0x801FBCAC = D_801FBCAC; // type:f32 size:0x4
0x801FBCB0 = D_801FBCB0; // type:f32 size:0x4
0x801FBCB4 = D_801FBCB4; // type:f32 size:0x4
0x801FBCB8 = D_801FBCB8; // type:f32 size:0x4
0x801FBCBC = D_801FBCBC; // type:f32 size:0x4
0x801FBCC0 = D_801FBCC0; // type:f32 size:0x4
0x801FBCC4 = D_801FBCC4; // type:f32 size:0x4
0x801FBCC8 = D_801FBCC8; // type:f32 size:0x4
0x801FBCCC = D_801FBCCC; // type:f32 size:0x4
0x801FBCD0 = D_801FBCD0; // type:f32 size:0x4
0x801FBCD4 = D_801FBCD4; // type:f32 size:0x4
0x801FBCD8 = D_801FBCD8; // type:f32 size:0x4
0x801FBCDC = D_801FBCDC; // type:f32 size:0x4
0x801FBCE0 = D_801FBCE0; // type:UNK_TYPE1 size:0x1
0x801FBCE4 = D_801FBCE4; // type:UNK_TYPE1 size:0x1
0x801FBCE8 = D_801FBCE8; // type:UNK_TYPE1 size:0x1
0x801FBCF0 = D_801FBCF0; // type:UNK_TYPE1 size:0x1
0x801FBCF4 = D_801FBCF4; // type:UNK_TYPE1 size:0x1
0x801FBCF8 = D_801FBCF8; // type:UNK_TYPE1 size:0x1
0x801FBD00 = D_801FBD00; // type:UNK_TYPE1 size:0x1
0x801FBD04 = D_801FBD04; // type:UNK_TYPE1 size:0x1
0x801FBD08 = D_801FBD08; // type:UNK_TYPE1 size:0x1
0x801FBD10 = D_801FBD10; // type:UNK_TYPE1 size:0x1
0x801FBD20 = D_801FBD20; // type:UNK_TYPE1 size:0x1
0x801FBD24 = D_801FBD24; // type:UNK_TYPE1 size:0x1
0x801FBD28 = D_801FBD28; // type:UNK_TYPE1 size:0x1
0x801FBD30 = D_801FBD30; // type:UNK_TYPE1 size:0x1
0x801FBD34 = D_801FBD34; // type:UNK_TYPE1 size:0x1
0x801FBD38 = D_801FBD38; // type:UNK_TYPE1 size:0x1
0x801FBD40 = D_801FBD40; // type:UNK_TYPE1 size:0x1
0x801FBD44 = D_801FBD44; // type:UNK_TYPE1 size:0x1
0x801FBD48 = D_801FBD48; // type:UNK_TYPE1 size:0x1
0x801FBD50 = D_801FBD50; // type:UNK_TYPE1 size:0x1
0x801FBD54 = D_801FBD54; // type:UNK_TYPE1 size:0x1
0x801FBD58 = D_801FBD58; // type:UNK_TYPE1 size:0x1
0x801FBD60 = Math3D_UnitNormalVector_temp; // type:Vec3f size:0xc
0x801FBD70 = D_801FBD70; // type:UNK_TYPE1 size:0x1
0x801FBD74 = D_801FBD74; // type:UNK_TYPE1 size:0x1
0x801FBD78 = D_801FBD78; // type:UNK_TYPE1 size:0x1
0x801FBD80 = D_801FBD80; // type:Vec3f size:0x18
0x801FBD98 = D_801FBD98; // type:Vec3f size:0xc
0x801FBDA4 = D_801FBDA4; // type:Vec3f size:0xc
0x801FBDB0 = D_801FBDB0; // type:UNK_TYPE1 size:0x1
0x801FBDB4 = D_801FBDB4; // type:UNK_TYPE1 size:0x1
0x801FBDB8 = D_801FBDB8; // type:UNK_TYPE1 size:0x1
0x801FBDC0 = D_801FBDC0; // type:UNK_TYPE1 size:0x1
0x801FBDD8 = D_801FBDD8; // type:UNK_TYPE1 size:0x1
0x801FBDDC = D_801FBDDC; // type:UNK_TYPE1 size:0x1
0x801FBDE0 = D_801FBDE0; // type:UNK_TYPE1 size:0x1
0x801FBDE8 = D_801FBDE8; // type:Vec3f size:0xc
0x801FBE00 = sMatrixStack; // type:MtxF* size:0x4
0x801FBE04 = sCurrentMatrix; // type:MtxF* size:0x4
0x801FBE10 = D_801FBE10; // type:UNK_TYPE1 size:0x1
0x801FBE28 = D_801FBE28; // type:UNK_TYPE1 size:0x1
0x801FBE2C = D_801FBE2C; // type:UNK_TYPE1 size:0x1
0x801FBE30 = D_801FBE30; // type:UNK_TYPE4 size:0x4
0x801FBE38 = sys_flashromStack; // type:u8 size:0x1000
0x801FCE38 = sys_flashromStackEntry; // type:StackEntry size:0x1c
0x801FCE58 = sys_flashromOSThread; // type:OSThread size:0x1b0
0x801FD008 = D_801FD008; // type:s80185D40 size:0x2c
0x801FD034 = D_801FD034; // type:OSMesg size:0x4
0x801FD040 = D_801FD040; // type:s32 size:0x10
0x801FD050 = D_801FD050; // type:OSIoMesg size:0x18
0x801FD068 = __osFlashMessageQ; // type:OSMesgQueue size:0x18
0x801FD080 = __osFlashHandler; // type:OSPiHandle size:0x74
0x801FD0F4 = __osFlashMsgBuf; // type:OSMesg size:0x4
0x801FD0F8 = __osFlashVersion; // type:u32 size:0x4
0x801FD120 = D_801FD120; // type:UNK_TYPE1 size:0x1
0x801FD140 = D_801FD140; // type:UNK_TYPE1 size:0x1
0x801FD158 = D_801FD158; // type:UNK_TYPE1 size:0x1
0x801FD198 = D_801FD198; // type:UNK_TYPE1 size:0x1
0x801FD1E0 = D_801FD1E0; // type:UNK_TYPE1 size:0x1
0x801FD1F0 = sSfxSettings; // type:UNK_TYPE1 size:0x1
0x801FD250 = sSfxSettingsFlags; // type:UNK_TYPE1 size:0x1
0x801FD254 = sTwoSemitonesLoweredFreq; // type:UNK_TYPE1 size:0x1
0x801FD258 = sSfxIncreasedReverb; // type:UNK_TYPE1 size:0x1
0x801FD25C = sSfxSyncedVolume; // type:UNK_TYPE1 size:0x1
0x801FD260 = sSfxSyncedVolumeForMetalEffects; // type:UNK_TYPE1 size:0x1
0x801FD264 = sSfxSyncedFreq; // type:UNK_TYPE1 size:0x1
0x801FD268 = sRiverFreqScaleLerp; // type:UNK_TYPE1 size:0x1
0x801FD278 = sWaterfallFreqScaleLerp; // type:UNK_TYPE1 size:0x1
0x801FD288 = sSfxAdjustedFreq; // type:UNK_TYPE1 size:0x1
0x801FD28C = sSfxCustomReverb; // type:UNK_TYPE1 size:0x1
0x801FD28D = sRiverSoundMainBgmVol; // type:UNK_TYPE1 size:0x1
0x801FD28E = sRiverSoundMainBgmCurrentVol; // type:UNK_TYPE1 size:0x1
0x801FD28F = sRiverSoundMainBgmLower; // type:UNK_TYPE1 size:0x1
0x801FD290 = sRiverSoundMainBgmRestore; // type:UNK_TYPE1 size:0x1
0x801FD291 = sGanonsTowerVol; // type:UNK_TYPE1 size:0x1
0x801FD294 = sSfxVolumeCur; // type:UNK_TYPE1 size:0x1
0x801FD298 = sSfxVolumeTarget; // type:UNK_TYPE1 size:0x1
0x801FD29C = sSfxVolumeRate; // type:UNK_TYPE1 size:0x1
0x801FD2A0 = sRequestedSceneSeqId; // type:UNK_TYPE1 size:0x1
0x801FD2A8 = sSfxChannelState; // type:UNK_TYPE1 size:0x1
0x801FD3A8 = D_801FD3A8; // type:UNK_TYPE1 size:0x1
0x801FD3A9 = D_801FD3A9; // type:UNK_TYPE1 size:0x1
0x801FD3AA = sRiverSoundBgmTimer; // type:UNK_TYPE1 size:0x1
0x801FD3AB = sFanfareState; // type:UNK_TYPE1 size:0x1
0x801FD3AC = sFanfareSeqId; // type:UNK_TYPE1 size:0x1
0x801FD3AE = sMuteOnlySfxAndAmbienceSeq; // type:UNK_TYPE1 size:0x1
0x801FD3AF = sAllPlayersMutedExceptOcaAndSys; // type:UNK_TYPE1 size:0x1
0x801FD3B0 = sAudioPauseState; // type:UNK_TYPE1 size:0x1
0x801FD3B4 = sSpatialSeqIsActive; // type:u8 size:0x4
0x801FD3B8 = sSequenceFilter; // type:UNK_TYPE1 size:0x1
0x801FD3D8 = sIsFinalHoursOrSoaring; // type:UNK_TYPE1 size:0x1
0x801FD3D9 = sObjSoundFanfareSeqId; // type:UNK_TYPE1 size:0x1
0x801FD3DA = sObjSoundFanfareRequested; // type:UNK_TYPE1 size:0x1
0x801FD3E0 = sObjSoundFanfarePos; // type:UNK_TYPE1 size:0x1
0x801FD3EC = sObjSoundPlayerIndex; // type:UNK_TYPE1 size:0x1
0x801FD3F0 = sObjSoundPos; // type:UNK_TYPE1 size:0x1
0x801FD3FC = sObjSoundFlags; // type:UNK_TYPE1 size:0x1
0x801FD400 = sObjSoundMinDist; // type:UNK_TYPE1 size:0x1
0x801FD404 = sObjSoundMaxDist; // type:UNK_TYPE1 size:0x1
0x801FD408 = sObjSoundMaxVol; // type:UNK_TYPE1 size:0x1
0x801FD40C = sObjSoundMinVol; // type:UNK_TYPE1 size:0x1
0x801FD410 = sSpatialSeqNoFilterPos; // type:UNK_TYPE1 size:0x1
0x801FD420 = sSpatialSeqFilterPos; // type:UNK_TYPE1 size:0x1
0x801FD42C = sSpatialSeqMaxDist; // type:UNK_TYPE1 size:0x1
0x801FD430 = sSpatialSeqSeqId; // type:UNK_TYPE1 size:0x1
0x801FD431 = sSpatialSeqFlags; // type:UNK_TYPE1 size:0x1
0x801FD432 = D_801FD432; // type:UNK_TYPE1 size:0x1
0x801FD433 = sSpatialSubBgmFadeTimer; // type:UNK_TYPE1 size:0x1
0x801FD434 = D_801FD434; // type:UNK_TYPE1 size:0x1
0x801FD435 = sSpatialSeqPlayerIndex; // type:UNK_TYPE1 size:0x1
0x801FD436 = sSpatialSeqFadeTimer; // type:UNK_TYPE1 size:0x1
0x801FD438 = sPrevAmbienceSeqId; // type:UNK_TYPE1 size:0x1
0x801FD43A = sPlayingStaff; // type:OcarinaStaff size:0x3
0x801FD43E = sPlaybackStaff; // type:OcarinaStaff size:0x3
0x801FD442 = sRecordingStaff; // type:OcarinaStaff size:0x3
0x801FD448 = sOcarinaUpdateTaskStart; // type:UNK_TYPE1 size:0x1
0x801FD44C = sOcarinaInputStickRel; // type:OcarinaControlStick size:0x2
0x801FD450 = sOcarinaInputButtonCur; // type:UNK_TYPE1 size:0x1
0x801FD454 = sOcarinaInputButtonStart; // type:UNK_TYPE1 size:0x1
0x801FD458 = sOcarinaInputButtonPrev; // type:UNK_TYPE1 size:0x1
0x801FD45C = sOcarinaInputButtonPress; // type:UNK_TYPE1 size:0x1
0x801FD460 = sOcarinaDisableTimer; // type:UNK_TYPE1 size:0x1
0x801FD461 = sOcarinaUnused; // type:UNK_TYPE1 size:0x1
0x801FD462 = sOcarinaHasStartedSong; // type:UNK_TYPE1 size:0x1
0x801FD463 = sFirstOcarinaSongIndex; // type:UNK_TYPE1 size:0x1
0x801FD464 = sLastOcarinaSongIndex; // type:UNK_TYPE1 size:0x1
0x801FD468 = sOcarinaAvailableSongFlags; // type:UNK_TYPE1 size:0x1
0x801FD46C = sOcarinaStaffPlayingPos; // type:UNK_TYPE1 size:0x1
0x801FD470 = sMusicStaffPos; // type:UNK_TYPE1 size:0x1
0x801FD4A0 = sMusicStaffCurHeldLength; // type:UNK_TYPE1 size:0x1
0x801FD4D0 = sMusicStaffExpectedLength; // type:UNK_TYPE1 size:0x1
0x801FD500 = sMusicStaffExpectedPitch; // type:UNK_TYPE1 size:0x1
0x801FD518 = D_801FD518; // type:UNK_TYPE1 size:0x1
0x801FD530 = D_801FD530; // type:u32 size:0x60
0x801FD590 = sScarecrowsLongSongSecondNote; // type:UNK_TYPE1 size:0x1
0x801FD598 = sCustomSequencePc; // type:UNK_TYPE1 size:0x1
0x801FD5A0 = D_801FD5A0; // type:UNK_TYPE1 size:0x1
0x801FD5A4 = D_801FD5A4; // type:UNK_TYPE1 size:0x1
0x801FD5B8 = D_801FD5B8; // type:UNK_TYPE1 size:0x1
0x801FD5C4 = D_801FD5C4; // type:UNK_TYPE1 size:0x1
0x801FD5C8 = D_801FD5C8; // type:UNK_TYPE1 size:0x1
0x801FD5E8 = D_801FD5E8; // type:UNK_TYPE1 size:0x1
0x801FD608 = D_801FD608; // type:UNK_TYPE1 size:0x1
0x801FD610 = D_801FD610; // type:UNK_TYPE1 size:0x1
0x801FD710 = sSfxPlayerBank; // type:UNK_TYPE1 size:0x1
0x801FD8C0 = sSfxItemBank; // type:UNK_TYPE1 size:0x1
0x801FDB00 = sSfxEnvironmentBank; // type:UNK_TYPE1 size:0x1
0x801FE100 = sSfxEnemyBank; // type:UNK_TYPE1 size:0x1
0x801FE4C0 = sSfxSystemBank; // type:UNK_TYPE1 size:0x1
0x801FE640 = sSfxOcarinaBank; // type:UNK_TYPE1 size:0x1
0x801FE6D0 = sSfxVoiceBank; // type:UNK_TYPE1 size:0x1
0x801FE7C0 = sSfxRequests; // type:SfxRequest size:0x14
0x801FFBC0 = sSfxBankListEnd; // type:UNK_TYPE1 size:0x1
0x801FFBC8 = sSfxBankFreeListStart; // type:UNK_TYPE1 size:0x1
0x801FFBD0 = sSfxBankUnused; // type:UNK_TYPE1 size:0x1
0x801FFBD8 = gActiveSfx; // type:UNK_TYPE1 size:0x1
0x801FFC80 = sCurSfxPlayerChannelIndex; // type:UNK_TYPE1 size:0x1
0x801FFC84 = gSfxBankMuted; // type:UNK_TYPE1 size:0x1
0x801FFC90 = sUnusedBankLerp; // type:UNK_TYPE1 size:0x1
0x801FFD00 = D_801FFD00; // type:UNK_TYPE1 size:0x1
0x801FFD34 = D_801FFD34; // type:UNK_TYPE1 size:0x1
0x801FFD40 = D_801FFD40; // type:UNK_TYPE1 size:0x1
0x80200000 = D_80200000; // type:UNK_TYPE1 size:0x1
0x80200002 = D_80200002; // type:UNK_TYPE1 size:0x1
0x80200004 = D_80200004; // type:UNK_TYPE1 size:0x1
0x80200008 = D_80200008; // type:UNK_TYPE1 size:0x1
0x8020001E = D_8020001E; // type:UNK_TYPE1 size:0x1
0x802000C9 = D_802000C9; // type:UNK_TYPE1 size:0x1
0x802000D4 = D_802000D4; // type:UNK_TYPE1 size:0x1
0x80200140 = gActiveSeqs; // type:UNK_TYPE1 size:0x1
0x8020034A = D_8020034A; // type:UNK_TYPE1 size:0x1
0x80200B88 = D_80200B88; // type:UNK_TYPE1 size:0x1
0x80200BBA = D_80200BBA; // type:UNK_TYPE1 size:0x1
0x80200BCC = D_80200BCC; // type:UNK_TYPE1 size:0x1
0x80200BCE = D_80200BCE; // type:UNK_TYPE1 size:0x1
0x80200BD0 = D_80200BD0; // type:UNK_TYPE1 size:0x1
0x80200C70 = gAudioCtx; // type:AudioContext size:0x81F8
0x80208E68 = gAudioCustomUpdateFunction; // type:UNK_TYPE4 size:0x4
0x80208E6C = gAudioCustomSeqFunction; // type:UNK_TYPE4 size:0x4
0x80208E70 = gAudioCustomReverbFunction; // type:UNK_TYPE4 size:0x4
0x80208E74 = gAudioCustomSynthFunction; // type:UNK_TYPE4 size:0x4
0x80208E90 = sJpegBitStreamPtr; // type:UNK_TYPE1 size:0x1
0x80208E94 = sJpegBitStreamByteIdx; // type:UNK_TYPE1 size:0x1
0x80208E98 = sJpegBitStreamBitIdx; // type:UNK_TYPE1 size:0x1
0x80208E99 = sJpegBitStreamDontSkip; // type:UNK_TYPE1 size:0x1
0x80208E9C = sJpegBitStreamCurWord; // type:UNK_TYPE1 size:0x1
0x80208EA0 = gGfxSPTaskYieldBuffer; // type:u8 size:0xC00
0x80209AA0 = gGfxSPTaskStack; // type:u8 size:0x400
0x80209EA0 = gGfxPools; // type:GfxPool size:0x40620
0x8024A4C0 = gAudioHeap; // type:u8 size:0x138000
0x803824C0 = gSystemHeap; // type:u8 size:0x3fdb40
0x80780000 = gPictoPhotoI8; // type:u8 size:0x4600
0x80784600 = D_80784600; // type:u8 size:0x56200
0x807DA800 = gFramebuffer0; // type:u16 size:0x25800
0x80800860 = titleRotation; // type:s16 size:0x2
0x80800868 = D_80800868; // type:UNK_TYPE1 size:0x1
0x80800870 = D_80800870; // type:UNK_TYPE1 size:0x1
0x80800880 = titleUnknownVector3f; // type:Vec3f size:0xc
0x80801C80 = sScenes; // type:UNK_PTR size:0x4
0x80802334 = sLoadingMessages; // type:UNK_PTR size:0x4
0x80802364 = sFormLabel; // type:UNK_PTR size:0x4
0x80802390 = D_80802390; // type:char size:0x1
0x808023AC = D_808023AC; // type:char size:0x1
0x808023C4 = D_808023C4; // type:char size:0x1
0x808023DC = D_808023DC; // type:char size:0x1
0x808023FC = D_808023FC; // type:char size:0x1
0x80802430 = D_80802430; // type:char size:0x1
0x80802450 = D_80802450; // type:char size:0x1
0x80802470 = D_80802470; // type:char size:0x1
0x80802484 = D_80802484; // type:char size:0x1
0x80802490 = D_80802490; // type:char size:0x1
0x808024A0 = D_808024A0; // type:char size:0x1
0x808024B4 = D_808024B4; // type:char size:0x1
0x808024D4 = D_808024D4; // type:char size:0x1
0x808024F0 = D_808024F0; // type:char size:0x1
0x80802508 = D_80802508; // type:char size:0x1
0x80802524 = D_80802524; // type:char size:0x1
0x80802544 = D_80802544; // type:char size:0x1
0x80802564 = D_80802564; // type:char size:0x1
0x80802584 = D_80802584; // type:char size:0x1
0x808025A0 = D_808025A0; // type:char size:0x1
0x808025BC = D_808025BC; // type:char size:0x1
0x808025D8 = D_808025D8; // type:char size:0x1
0x808025EC = D_808025EC; // type:char size:0x1
0x80802604 = D_80802604; // type:char size:0x1
0x8080261C = D_8080261C; // type:char size:0x1
0x8080263C = D_8080263C; // type:char size:0x1
0x80802654 = D_80802654; // type:char size:0x1
0x80802678 = D_80802678; // type:char size:0x1
0x8080269C = D_8080269C; // type:char size:0x1
0x808026A8 = D_808026A8; // type:char size:0x1
0x808026C0 = D_808026C0; // type:char size:0x1
0x808026E0 = D_808026E0; // type:char size:0x1
0x80802704 = D_80802704; // type:char size:0x1
0x8080271C = D_8080271C; // type:char size:0x1
0x8080273C = D_8080273C; // type:char size:0x1
0x80802758 = D_80802758; // type:char size:0x1
0x80802774 = D_80802774; // type:char size:0x1
0x80802790 = D_80802790; // type:char size:0x1
0x808027AC = D_808027AC; // type:char size:0x1
0x808027C8 = D_808027C8; // type:char size:0x1
0x808027E4 = D_808027E4; // type:char size:0x1
0x808027F4 = D_808027F4; // type:char size:0x1
0x80802814 = D_80802814; // type:char size:0x1
0x8080282C = D_8080282C; // type:char size:0x1
0x80802844 = D_80802844; // type:char size:0x1
0x8080286C = D_8080286C; // type:char size:0x1
0x80802890 = D_80802890; // type:char size:0x1
0x808028A8 = D_808028A8; // type:char size:0x1
0x808028C0 = D_808028C0; // type:char size:0x1
0x808028CC = D_808028CC; // type:char size:0x1
0x808028EC = D_808028EC; // type:char size:0x1
0x80802908 = D_80802908; // type:char size:0x1
0x80802938 = D_80802938; // type:char size:0x1
0x80802960 = D_80802960; // type:char size:0x1
0x80802988 = D_80802988; // type:char size:0x1
0x808029B0 = D_808029B0; // type:char size:0x1
0x808029D8 = D_808029D8; // type:char size:0x1
0x80802A00 = D_80802A00; // type:char size:0x1
0x80802A28 = D_80802A28; // type:char size:0x1
0x80802A50 = D_80802A50; // type:char size:0x1
0x80802A78 = D_80802A78; // type:char size:0x1
0x80802AA0 = D_80802AA0; // type:char size:0x1
0x80802AC8 = D_80802AC8; // type:char size:0x1
0x80802AE4 = D_80802AE4; // type:char size:0x1
0x80802B00 = D_80802B00; // type:char size:0x1
0x80802B20 = D_80802B20; // type:char size:0x1
0x80802B38 = D_80802B38; // type:char size:0x1
0x80802B54 = D_80802B54; // type:char size:0x1
0x80802B74 = D_80802B74; // type:char size:0x1
0x80802B90 = D_80802B90; // type:char size:0x1
0x80802BAC = D_80802BAC; // type:char size:0x1
0x80802BC8 = D_80802BC8; // type:char size:0x1
0x80802BF0 = D_80802BF0; // type:char size:0x1
0x80802C20 = D_80802C20; // type:char size:0x1
0x80802C38 = D_80802C38; // type:char size:0x1
0x80802C60 = D_80802C60; // type:char size:0x1
0x80802C78 = D_80802C78; // type:char size:0x1
0x80802C94 = D_80802C94; // type:char size:0x1
0x80802CB4 = D_80802CB4; // type:char size:0x1
0x80802CD4 = D_80802CD4; // type:char size:0x1
0x80802D00 = D_80802D00; // type:char size:0x1
0x80802D18 = D_80802D18; // type:char size:0x1
0x80802D30 = D_80802D30; // type:char size:0x1
0x80802D4C = D_80802D4C; // type:char size:0x1
0x80802D60 = D_80802D60; // type:char size:0x1
0x80802D7C = D_80802D7C; // type:char size:0x1
0x80802D94 = D_80802D94; // type:char size:0x1
0x80802DA4 = D_80802DA4; // type:char size:0x1
0x80802DB8 = D_80802DB8; // type:char size:0x1
0x80802DD4 = D_80802DD4; // type:char size:0x1
0x80802DEC = D_80802DEC; // type:char size:0x1
0x80802E04 = D_80802E04; // type:char size:0x1
0x80802E20 = D_80802E20; // type:char size:0x1
0x80802E40 = D_80802E40; // type:char size:0x1
0x80802E5C = D_80802E5C; // type:char size:0x1
0x80802E7C = D_80802E7C; // type:char size:0x1
0x80802E94 = D_80802E94; // type:char size:0x1
0x80802EB4 = D_80802EB4; // type:char size:0x1
0x80802ED4 = D_80802ED4; // type:char size:0x1
0x80802EFC = D_80802EFC; // type:char size:0x1
0x80802F30 = D_80802F30; // type:char size:0x1
0x80802F54 = D_80802F54; // type:char size:0x1
0x80802F84 = D_80802F84; // type:char size:0x1
0x80802FAC = D_80802FAC; // type:char size:0x1
0x80802FDC = D_80802FDC; // type:char size:0x1
0x80803008 = D_80803008; // type:char size:0x1
0x80803034 = D_80803034; // type:char size:0x1
0x80803060 = D_80803060; // type:char size:0x1
0x80803070 = D_80803070; // type:char size:0x1
0x80803094 = D_80803094; // type:char size:0x1
0x808030BC = D_808030BC; // type:char size:0x1
0x808030E4 = D_808030E4; // type:char size:0x1
0x80803108 = D_80803108; // type:char size:0x1
0x80803130 = D_80803130; // type:char size:0x1
0x80803150 = D_80803150; // type:char size:0x1
0x80803168 = D_80803168; // type:char size:0x1
0x80803190 = D_80803190; // type:char size:0x1
0x808031A8 = D_808031A8; // type:char size:0x1
0x808031C8 = D_808031C8; // type:char size:0x1
0x808031E8 = D_808031E8; // type:char size:0x1
0x80803208 = D_80803208; // type:char size:0x1
0x80803228 = D_80803228; // type:char size:0x1
0x80803248 = D_80803248; // type:char size:0x1
0x80803268 = D_80803268; // type:char size:0x1
0x80803280 = D_80803280; // type:char size:0x1
0x80803298 = D_80803298; // type:char size:0x1
0x808032BC = D_808032BC; // type:char size:0x1
0x808032D0 = D_808032D0; // type:char size:0x1
0x808032E4 = D_808032E4; // type:char size:0x1
0x808032FC = D_808032FC; // type:char size:0x1
0x80803314 = D_80803314; // type:char size:0x1
0x80803328 = D_80803328; // type:char size:0x1
0x8080333C = D_8080333C; // type:char size:0x1
0x80803350 = D_80803350; // type:char size:0x1
0x80803364 = D_80803364; // type:char size:0x1
0x80803378 = D_80803378; // type:char size:0x1
0x8080338C = D_8080338C; // type:char size:0x1
0x808033A0 = D_808033A0; // type:char size:0x1
0x808033B4 = D_808033B4; // type:char size:0x1
0x808033CC = D_808033CC; // type:char size:0x1
0x808033E4 = D_808033E4; // type:char size:0x1
0x808033FC = D_808033FC; // type:char size:0x1
0x80803408 = D_80803408; // type:char size:0x1
0x80803410 = D_80803410; // type:char size:0x1
0x80803424 = D_80803424; // type:char size:0x1
0x80803430 = D_80803430; // type:char size:0x1
0x80803434 = D_80803434; // type:char size:0x1
0x8080343C = D_8080343C; // type:char size:0x1
0x80803458 = D_80803458; // type:char size:0x1
0x8080346C = D_8080346C; // type:char size:0x1
0x80803484 = D_80803484; // type:char size:0x1
0x80803498 = D_80803498; // type:char size:0x1
0x808034AC = D_808034AC; // type:char size:0x1
0x808034C0 = D_808034C0; // type:char size:0x1
0x808034D8 = D_808034D8; // type:char size:0x1
0x808034F0 = D_808034F0; // type:char size:0x1
0x80803510 = D_80803510; // type:char size:0x1
0x80803534 = D_80803534; // type:char size:0x1
0x80803554 = D_80803554; // type:char size:0x1
0x80803584 = D_80803584; // type:char size:0x1
0x80803588 = D_80803588; // type:char size:0x1
0x80803594 = D_80803594; // type:char size:0x1
0x808035AC = D_808035AC; // type:char size:0x1
0x808035BC = D_808035BC; // type:char size:0x1
0x808035D4 = D_808035D4; // type:char size:0x1
0x808035E4 = D_808035E4; // type:char size:0x1
0x808035F4 = D_808035F4; // type:char size:0x1
0x80803608 = D_80803608; // type:char size:0x1
0x80803620 = D_80803620; // type:char size:0x1
0x80803630 = D_80803630; // type:char size:0x1
0x80803640 = D_80803640; // type:char size:0x1
0x80803648 = D_80803648; // type:char size:0x1
0x80803654 = D_80803654; // type:char size:0x1
0x80803668 = D_80803668; // type:char size:0x1
0x80803678 = D_80803678; // type:char size:0x1
0x80803688 = D_80803688; // type:char size:0x1
0x80803694 = D_80803694; // type:char size:0x1
0x808036A0 = D_808036A0; // type:char size:0x1
0x808036AC = D_808036AC; // type:char size:0x1
0x808036B8 = D_808036B8; // type:char size:0x1
0x808036C4 = D_808036C4; // type:char size:0x1
0x808036D0 = D_808036D0; // type:char size:0x1
0x808036DC = D_808036DC; // type:char size:0x1
0x808036E8 = D_808036E8; // type:char size:0x1
0x808036F4 = D_808036F4; // type:char size:0x1
0x80803700 = D_80803700; // type:char size:0x1
0x8080370C = D_8080370C; // type:char size:0x1
0x80803710 = D_80803710; // type:char size:0x1
0x8080371C = D_8080371C; // type:char size:0x1
0x8080372C = D_8080372C; // type:char size:0x1
0x80803738 = D_80803738; // type:char size:0x1
0x80803748 = D_80803748; // type:char size:0x1
0x80803758 = D_80803758; // type:char size:0x1
0x80803768 = D_80803768; // type:char size:0x1
0x80803770 = jtbl_80803770; // type:UNK_PTR size:0x4
0x80803FC0 = openingEntrances; // type:u32 size:0x8
0x80803FC8 = openingCutscenes; // type:u32 size:0x8
0x80813DF0 = D_80813DF0; // type:UNK_TYPE1 size:0x1
0x80813F30 = D_80813F30; // type:UNK_TYPE1 size:0x1
0x80814130 = D_80814130; // type:UNK_TYPE1 size:0x1
0x80814170 = D_80814170; // type:UNK_TYPE1 size:0x1
0x808141B0 = D_808141B0; // type:UNK_TYPE1 size:0x1
0x808141F0 = D_808141F0; // type:UNK_TYPE1 size:0x1
0x80814240 = D_80814240; // type:UNK_TYPE2 size:0x2
0x8081424C = D_8081424C; // type:UNK_TYPE2 size:0x2
0x80814260 = D_80814260; // type:UNK_TYPE2 size:0x2
0x80814264 = D_80814264; // type:UNK_TYPE2 size:0x2
0x8081426C = D_8081426C; // type:UNK_TYPE1 size:0x1
0x80814280 = D_80814280; // type:UNK_TYPE1 size:0x1
0x80814304 = D_80814304; // type:UNK_TYPE2 size:0x2
0x80814384 = D_80814384; // type:UNK_TYPE1 size:0x1
0x80814404 = D_80814404; // type:UNK_TYPE2 size:0x2
0x80814410 = D_80814410; // type:UNK_TYPE2 size:0x2
0x8081441C = D_8081441C; // type:UNK_TYPE2 size:0x2
0x80814428 = D_80814428; // type:UNK_TYPE4 size:0x4
0x80814430 = D_80814430; // type:UNK_TYPE2 size:0x2
0x80814434 = D_80814434; // type:UNK_TYPE2 size:0x2
0x8081444C = D_8081444C; // type:UNK_TYPE1 size:0x1
0x80814464 = D_80814464; // type:UNK_TYPE4 size:0x4
0x8081448C = D_8081448C; // type:UNK_TYPE4 size:0x4
0x808144BC = D_808144BC; // type:UNK_TYPE2 size:0x2
0x808144C0 = D_808144C0; // type:UNK_TYPE2 size:0x2
0x808144C4 = D_808144C4; // type:UNK_TYPE2 size:0x2
0x808144C8 = D_808144C8; // type:UNK_TYPE2 size:0x2
0x808144CC = D_808144CC; // type:UNK_TYPE2 size:0x2
0x808144D0 = D_808144D0; // type:UNK_TYPE2 size:0x2
0x808144D4 = D_808144D4; // type:UNK_TYPE2 size:0x2
0x808144D8 = D_808144D8; // type:UNK_TYPE2 size:0x2
0x808144DC = D_808144DC; // type:UNK_TYPE1 size:0x1
0x808144E8 = D_808144E8; // type:UNK_TYPE1 size:0x1
0x80814510 = D_80814510; // type:Gfx size:0x28
0x80814538 = D_80814538; // type:UNK_TYPE2 size:0x2
0x80814548 = D_80814548; // type:UNK_TYPE2 size:0x2
0x80814550 = fileChooseSkyboxRotation; // type:s16 size:0x2
0x80814554 = D_80814554; // type:UNK_TYPE1 size:0x1
0x8081455C = D_8081455C; // type:UNK_TYPE1 size:0x1
0x80814564 = D_80814564; // type:UNK_TYPE2 size:0x2
0x80814568 = D_80814568; // type:UNK_TYPE size:0xb4
0x8081461C = D_8081461C; // type:s16 size:0x4
0x80814620 = D_80814620; // type:UNK_TYPE2 size:0x2
0x80814628 = D_80814628; // type:UNK_TYPE2 size:0x2
0x80814630 = D_80814630; // type:UNK_TYPE2 size:0x2
0x80814638 = D_80814638; // type:UNK_TYPE1 size:0x1
0x80814644 = D_80814644; // type:UNK_TYPE1 size:0x1
0x8081464C = D_8081464C; // type:UNK_TYPE1 size:0x1
0x80814650 = D_80814650; // type:UNK_TYPE1 size:0x1
0x80814654 = D_80814654; // type:UNK_TYPE1 size:0x1
0x8081465C = D_8081465C; // type:UNK_TYPE4 size:0x4
0x8081466C = D_8081466C; // type:UNK_TYPE1 size:0x1
0x8081467C = D_8081467C; // type:UNK_TYPE1 size:0x1
0x8081468C = D_8081468C; // type:UNK_TYPE4 size:0x4
0x808146B4 = D_808146B4; // type:UNK_TYPE1 size:0x1
0x808146C4 = D_808146C4; // type:UNK_TYPE1 size:0x1
0x808146D8 = D_808146D8; // type:UNK_TYPE1 size:0x1
0x808146EC = D_808146EC; // type:UNK_TYPE2 size:0x2
0x808146F8 = D_808146F8; // type:UNK_TYPE2 size:0x2
0x80814704 = D_80814704; // type:UNK_TYPE4 size:0x4
0x80814720 = D_80814720; // type:UNK_TYPE1 size:0x1
0x80814744 = D_80814744; // type:UNK_TYPE1 size:0x1
0x80814758 = D_80814758; // type:UNK_TYPE4 size:0x4
0x80814764 = D_80814764; // type:UNK_TYPE4 size:0x4
0x80814774 = D_80814774; // type:UNK_TYPE1 size:0x1
0x8081477C = D_8081477C; // type:UNK_TYPE size:0x20
0x8081479C = D_8081479C; // type:UNK_TYPE size:0xc
0x808147A8 = D_808147A8; // type:UNK_TYPE size:0xc
0x808147B4 = D_808147B4; // type:UNK_TYPE4 size:0x4
0x808147C0 = D_808147C0; // type:UNK_TYPE2 size:0x2
0x808147C8 = D_808147C8; // type:UNK_TYPE2 size:0x2
0x808147D0 = D_808147D0; // type:f32 size:0x4
0x808147D4 = D_808147D4; // type:f32 size:0x4
0x808147D8 = D_808147D8; // type:f32 size:0x4
0x808147E0 = D_808147E0; // type:f32 size:0x4
0x808147E4 = D_808147E4; // type:f32 size:0x4
0x808147E8 = D_808147E8; // type:f32 size:0x4
0x808147EC = D_808147EC; // type:f32 size:0x4
0x808147F0 = D_808147F0; // type:f32 size:0x4
0x80814E80 = D_80814E80; // type:UNK_TYPE1 size:0x1
0x80814E90 = D_80814E90; // type:UNK_TYPE1 size:0x1
0x80815FF0 = D_80815FF0; // type:u8 size:0x1
0x80815FF4 = sDayLeftTextures; // type:TexturePtr size:0x10
0x80816004 = sDayRightTextures; // type:TexturePtr size:0x10
0x80816014 = sHoursLeftTextures; // type:TexturePtr size:0xC
0x8082AED0 = sQuestRemainsColorTimerInit; // type:UNK_TYPE1 size:0x1
0x8082AED8 = sQuestHpColorTimerInit; // type:UNK_TYPE1 size:0x1
0x8082AEE0 = sQuestSongPlayedOcarinaButtonsNum; // type:UNK_TYPE2 size:0x2
0x8082AEE4 = sQuestSongPlayedOcarinaButtons; // type:UNK_TYPE1 size:0x1
0x8082AEF0 = sQuestSongPlayedOcarinaButtonsAlpha; // type:UNK_TYPE2 size:0x2
0x8082AF04 = sQuestHpPrimColorTargets; // type:UNK_TYPE2 size:0x2
0x8082AF24 = sQuestRemainsEnvTargets; // type:UNK_TYPE1 size:0x1
0x8082AF6C = sQuestRemainsEnvRed; // type:UNK_TYPE2 size:0x2
0x8082AF78 = sQuestRemainsEnvGreen; // type:UNK_TYPE2 size:0x2
0x8082AF84 = sQuestRemainsEnvBlue; // type:UNK_TYPE2 size:0x2
0x8082AF90 = sQuestRemainsColorTimer; // type:UNK_TYPE2 size:0x2
0x8082AF94 = sQuestRemainsColorTimerIndex; // type:UNK_TYPE2 size:0x2
0x8082AF98 = sQuestHpPrimRed; // type:UNK_TYPE2 size:0x2
0x8082AF9C = sQuestHpPrimGreen; // type:UNK_TYPE2 size:0x2
0x8082AFA0 = sQuestHpPrimBlue; // type:UNK_TYPE2 size:0x2
0x8082AFA4 = sQuestHpPrimAlpha; // type:UNK_TYPE2 size:0x2
0x8082AFA8 = sQuestHpColorTimer; // type:UNK_TYPE2 size:0x2
0x8082AFAC = sQuestHpPrimColorTargetIndex; // type:UNK_TYPE2 size:0x2
0x8082AFB0 = sOcarinaButtonTextures; // type:UNK_TYPE1 size:0x1
0x8082AFC4 = sQuestSongsPrimRed; // type:UNK_TYPE2 size:0x2
0x8082AFDC = sQuestSongsPrimGreen; // type:UNK_TYPE2 size:0x2
0x8082AFF4 = sQuestSongsPrimBlue; // type:s16 size:0x18
0x8082B00C = sQuestUpgradeTextures; // type:void* size:0x18
0x8082B024 = sQuestUpgrades; // type:UNK_TYPE1 size:0x1
0x8082B028 = sQuestSongPlaybackDelayTimer; // type:UNK_TYPE2 size:0x2
0x8082B02C = sCursorPointLinks; // type:s16 size:0xC4
0x8082B0F0 = sCurSection; // type:UNK_TYPE2 size:0x2
0x8082B0F4 = sCurRow; // type:UNK_TYPE2 size:0x2
0x8082B0F8 = sSectionPositions; // type:s16 size:0x230
0x8082B328 = sSlotItems; // type:UNK_TYPE1 size:0x1
0x8082B388 = sRowFirstSections; // type:UNK_TYPE2 size:0x2
0x8082B3AC = sPrevDBtnInput; // type:UNK_TYPE4 size:0x4
0x8082B3B0 = sHeldDBtnTimer; // type:UNK_TYPE4 size:0x4
0x8082B3C0 = sEquipState; // type:UNK_TYPE2 size:0x2
0x8082B3C4 = sEquipMagicArrowSlotHoldTimer; // type:UNK_TYPE2 size:0x2
0x8082B3C8 = sEquipAnimTimer; // type:UNK_TYPE2 size:0x2
0x8082B3CC = gPlayerFormSlotRestrictions; // type:UNK_TYPE1 size:0x1
0x8082B444 = sAmmoRectLeft; // type:UNK_TYPE1 size:0x1
0x8082B454 = sAmmoRectHeight; // type:UNK_TYPE1 size:0x1
0x8082B47C = sPlayerFormItems; // type:UNK_TYPE1 size:0x1
0x8082B484 = sCButtonPosX; // type:UNK_TYPE1 size:0x1
0x8082B48C = sCButtonPosY; // type:UNK_TYPE1 size:0x1
0x8082B494 = sEquipMagicArrowBowSlotHoldTimer; // type:UNK_TYPE2 size:0x2
0x8082B4A0 = sDungeonItemTextures; // type:UNK_TYPE4 size:0x4
0x8082B4AC = sDungeonTitleTextures; // type:UNK_TYPE1 size:0x1
0x8082B4BC = sDungeonMapFloorIconPosY; // type:UNK_TYPE1 size:0x1
0x8082B4C4 = D_8082B4C4; // type:UNK_TYPE1 size:0x1
0x8082B4C8 = sStrayFairyIconTimer; // type:UNK_TYPE2 size:0x2
0x8082B4CC = sStrayFairyIconIndex; // type:UNK_TYPE2 size:0x2
0x8082B4D0 = sStrayFairyIconAlphaScaleTimer; // type:UNK_TYPE2 size:0x2
0x8082B4D4 = sStrayFairyIconAlphaScaleState; // type:UNK_TYPE2 size:0x2
0x8082B4D8 = sStrayFairyIconAlpha; // type:UNK_TYPE2 size:0x2
0x8082B4DC = sStrayFairyIconScale; // type:f32 size:0x4
0x8082B4E0 = sStrayFairyIconTextures; // type:UNK_TYPE1 size:0x1
0x8082B520 = sStrayFairyIconPrimColors; // type:UNK_TYPE1 size:0x1
0x8082B52C = sStrayFairyIconEnvColors; // type:UNK_TYPE1 size:0x1
0x8082B538 = sStrayFairyIconRectS; // type:UNK_TYPE1 size:0x1
0x8082B548 = sCloudTextures; // type:s16 size:0x3C
0x8082B584 = sWorldMapDotPrimColors; // type:UNK_TYPE2 size:0x2
0x8082B590 = sWorldMapDotEnvColors; // type:UNK_TYPE2 size:0x2
0x8082B59C = sWorldMapCursorsRectLeft; // type:UNK_TYPE1 size:0x1
0x8082B5B4 = sWorldMapCursorsRectTop; // type:UNK_TYPE1 size:0x1
0x8082B5CC = sGreatFairySpawnRegions; // type:UNK_TYPE1 size:0x1
0x8082B5E0 = sOwlWarpPauseItems; // type:UNK_TYPE1 size:0x1
0x8082B5F4 = sStickAdjTimer; // type:UNK_TYPE2 size:0x2
0x8082B600 = sMaskEquipState; // type:UNK_TYPE2 size:0x2
0x8082B604 = sMaskEquipMagicArrowSlotHoldTimer; // type:UNK_TYPE2 size:0x2
0x8082B608 = sMaskEquipAnimTimer; // type:UNK_TYPE2 size:0x2
0x8082B60C = gMaskPlayerFormSlotRestrictions; // type:UNK_TYPE1 size:0x1
0x8082B684 = sMasksGivenOnMoonBits; // type:UNK_TYPE2 size:0x2
0x8082B6CC = sMaskPlayerFormItems; // type:UNK_TYPE1 size:0x1
0x8082B6D4 = sMaskCButtonPosX; // type:UNK_TYPE1 size:0x1
0x8082B6DC = sMaskCButtonPosY; // type:UNK_TYPE1 size:0x1
0x8082B6E4 = sMaskEquipMagicArrowBowSlotHoldTimer; // type:UNK_TYPE2 size:0x2
0x8082B6F0 = sPromptAlphaTargets; // type:UNK_TYPE1 size:0x1
0x8082B6F4 = sPromptAlphaTargetIndex; // type:UNK_TYPE2 size:0x2
0x8082B6F8 = sPromptAlphaTimer; // type:UNK_TYPE2 size:0x2
0x8082B700 = D_8082B700; // type:UNK_TYPE1 size:0x1
0x8082B73C = D_8082B73C; // type:UNK_TYPE1 size:0x1
0x8082B778 = D_8082B778; // type:UNK_TYPE1 size:0x1
0x8082B7B4 = D_8082B7B4; // type:UNK_TYPE1 size:0x1
0x8082B7F0 = D_8082B7F0; // type:UNK_TYPE2 size:0x2
0x8082B838 = D_8082B838; // type:UNK_TYPE2 size:0x2
0x8082B880 = sGameOverPrimR; // type:UNK_TYPE2 size:0x2
0x8082B884 = sGameOverPrimG; // type:UNK_TYPE2 size:0x2
0x8082B888 = sGameOverPrimB; // type:UNK_TYPE2 size:0x2
0x8082B88C = sGameOverPrimAlpha; // type:UNK_TYPE2 size:0x2
0x8082B890 = sCursorPrimR; // type:UNK_TYPE2 size:0x2
0x8082B894 = sCursorPrimG; // type:UNK_TYPE2 size:0x2
0x8082B898 = sCursorPrimB; // type:UNK_TYPE2 size:0x2
0x8082B89C = sCursorEnvR; // type:UNK_TYPE2 size:0x2
0x8082B8A0 = sCursorEnvG; // type:UNK_TYPE2 size:0x2
0x8082B8A4 = sCursorEnvB; // type:UNK_TYPE2 size:0x2
0x8082B8A8 = sGameOverEnvR; // type:UNK_TYPE2 size:0x2
0x8082B8AC = sGameOverEnvG; // type:UNK_TYPE2 size:0x2
0x8082B8B0 = sGameOverEnvB; // type:UNK_TYPE2 size:0x2
0x8082B8B4 = sInDungeonScene; // type:UNK_TYPE2 size:0x2
0x8082B8B8 = sPageSwitchEyeDx; // type:UNK_TYPE1 size:0x1
0x8082B8D8 = sPageSwitchEyeDz; // type:UNK_TYPE1 size:0x1
0x8082B8F8 = sPageSwitchNextPageIndex; // type:UNK_TYPE1 size:0x1
0x8082B908 = sPauseMenuVerticalOffset; // type:f32 size:0x4
0x8082B90C = D_8082B90C; // type:f32 size:0x4
0x8082B910 = sPauseCursorLeftMoveOffsetX; // type:f32 size:0x4
0x8082B914 = sPauseCursorRightMoveOffsetX; // type:f32 size:0x4
0x8082B918 = sPauseCursorLeftX; // type:UNK_TYPE2 size:0x2
0x8082B91C = sPauseCursorRightX; // type:UNK_TYPE2 size:0x2
0x8082B920 = D_8082B920; // type:UNK_TYPE2 size:0x2
0x8082B924 = D_8082B924; // type:UNK_TYPE2 size:0x2
0x8082B944 = sGameOverRectPosY; // type:UNK_TYPE2 size:0x2
0x8082B948 = D_8082B948; // type:UNK_TYPE2 size:0x2
0x8082B96C = D_8082B96C; // type:UNK_TYPE2 size:0x2
0x8082B990 = D_8082B990; // type:UNK_TYPE2 size:0x2
0x8082B994 = D_8082B994; // type:UNK_TYPE2 size:0x2
0x8082B998 = D_8082B998; // type:UNK_TYPE1 size:0x1
0x8082B9A8 = D_8082B9A8; // type:UNK_TYPE1 size:0x1
0x8082B9B8 = D_8082B9B8; // type:UNK_TYPE1 size:0x1
0x8082B9C8 = D_8082B9C8; // type:UNK_TYPE2 size:0x2
0x8082B9CC = D_8082B9CC; // type:UNK_TYPE2 size:0x2
0x8082B9D0 = D_8082B9D0; // type:UNK_TYPE1 size:0x1
0x8082B9E0 = D_8082B9E0; // type:UNK_TYPE2 size:0x2
0x8082B9E4 = D_8082B9E4; // type:UNK_TYPE2 size:0x2
0x8082B9E8 = D_8082B9E8; // type:UNK_TYPE1 size:0x1
0x8082B9EC = D_8082B9EC; // type:UNK_TYPE1 size:0x1
0x8082B9F0 = D_8082B9F0; // type:UNK_TYPE1 size:0x1
0x8082B9FC = D_8082B9FC; // type:UNK_TYPE1 size:0x1
0x8082BA00 = D_8082BA00; // type:UNK_TYPE1 size:0x1
0x8082BA48 = D_8082BA48; // type:UNK_TYPE1 size:0x1
0x8082BA54 = D_8082BA54; // type:UNK_TYPE1 size:0x1
0x8082BA58 = D_8082BA58; // type:UNK_TYPE1 size:0x1
0x8082BA5C = D_8082BA5C; // type:UNK_TYPE1 size:0x1
0x8082BA68 = D_8082BA68; // type:UNK_TYPE1 size:0x1
0x8082BA6C = D_8082BA6C; // type:UNK_TYPE1 size:0x1
0x8082BA78 = D_8082BA78; // type:UNK_TYPE1 size:0x1
0x8082BA7C = D_8082BA7C; // type:UNK_TYPE1 size:0x1
0x8082BA80 = D_8082BA80; // type:UNK_TYPE1 size:0x1
0x8082BA8C = D_8082BA8C; // type:UNK_TYPE1 size:0x1
0x8082BA90 = D_8082BA90; // type:UNK_TYPE1 size:0x1
0x8082BAD8 = D_8082BAD8; // type:UNK_TYPE1 size:0x1
0x8082BAE4 = D_8082BAE4; // type:UNK_TYPE1 size:0x1
0x8082BAE8 = D_8082BAE8; // type:UNK_TYPE1 size:0x1
0x8082BAEC = D_8082BAEC; // type:UNK_TYPE1 size:0x1
0x8082BAF8 = D_8082BAF8; // type:UNK_TYPE1 size:0x1
0x8082BAFC = D_8082BAFC; // type:UNK_TYPE1 size:0x1
0x8082BB08 = D_8082BB08; // type:UNK_PTR size:0x4
0x8082BB20 = D_8082BB20; // type:UNK_PTR size:0x4
0x8082BB38 = D_8082BB38; // type:UNK_PTR size:0x4
0x8082BB50 = D_8082BB50; // type:UNK_PTR size:0x4
0x8082BB68 = D_8082BB68; // type:UNK_TYPE2 size:0x2
0x8082BB74 = sQuestVtxRectLeft; // type:UNK_TYPE2 size:0x2
0x8082BBC4 = sQuestVtxRectTop; // type:UNK_TYPE2 size:0x2
0x8082BC14 = sQuestVtxWidths; // type:UNK_TYPE2 size:0x2
0x8082BC64 = sQuestVtxHeights; // type:UNK_TYPE2 size:0x2
0x8082BCB4 = D_8082BCB4; // type:UNK_TYPE1 size:0x1
0x8082BCCC = D_8082BCCC; // type:UNK_TYPE1 size:0x1
0x8082BCDC = D_8082BCDC; // type:UNK_TYPE1 size:0x1
0x8082BD08 = D_8082BD08; // type:UNK_TYPE1 size:0x1
0x8082BD34 = D_8082BD34; // type:UNK_TYPE1 size:0x1
0x8082BD5C = D_8082BD5C; // type:UNK_TYPE1 size:0x1
0x8082BD84 = D_8082BD84; // type:UNK_TYPE1 size:0x1
0x8082BDA8 = D_8082BDA8; // type:UNK_TYPE1 size:0x1
0x8082BDCC = D_8082BDCC; // type:UNK_TYPE1 size:0x1
0x8082BE28 = D_8082BE28; // type:UNK_TYPE1 size:0x1
0x8082BE84 = D_8082BE84; // type:UNK_TYPE2 size:0x2
0x8082BE88 = sCursorPointsToOcarinaModes; // type:UNK_TYPE1 size:0x1
0x8082BE9C = sUnpausedHudVisibility; // type:UNK_TYPE2 size:0x2
0x8082BEA0 = sNextMainState; // type:UNK_TYPE2 size:0x2
0x8082BEA4 = sDelayTimer; // type:UNK_TYPE2 size:0x2
0x8082BEA8 = sGameOverColorTimer; // type:UNK_TYPE2 size:0x2
0x8082BEAC = sStickXRepeatTimer; // type:UNK_TYPE2 size:0x2
0x8082BEB0 = sStickYRepeatTimer; // type:UNK_TYPE2 size:0x2
0x8082BEB4 = sStickXRepeatState; // type:UNK_TYPE2 size:0x2
0x8082BEB8 = sStickYRepeatState; // type:UNK_TYPE2 size:0x2
0x8082BEC0 = D_8082BEC0; // type:char size:0x1
0x8082BEC4 = D_8082BEC4; // type:char size:0x1
0x8082BED0 = D_8082BED0; // type:char size:0x1
0x8082BED4 = D_8082BED4; // type:char size:0x1
0x8082BEDC = D_8082BEDC; // type:char size:0x1
0x8082BEE0 = D_8082BEE0; // type:char size:0x1
0x8082BEE4 = D_8082BEE4; // type:char size:0x1
0x8082BEE8 = D_8082BEE8; // type:char size:0x1
0x8082BEEC = D_8082BEEC; // type:char size:0x1
0x8082BEF0 = D_8082BEF0; // type:char size:0x1
0x8082BEF4 = D_8082BEF4; // type:char size:0x1
0x8082BEF8 = D_8082BEF8; // type:char size:0x1
0x8082BEFC = D_8082BEFC; // type:char size:0x1
0x8082BF00 = D_8082BF00; // type:char size:0x1
0x8082BF04 = D_8082BF04; // type:char size:0x1
0x8082BF08 = D_8082BF08; // type:char size:0x1
0x8082BF0C = D_8082BF0C; // type:char size:0x1
0x8082BF10 = D_8082BF10; // type:char size:0x1
0x8082BF14 = D_8082BF14; // type:char size:0x1
0x8082BF18 = D_8082BF18; // type:char size:0x1
0x8082BF1C = D_8082BF1C; // type:char size:0x1
0x8082BF20 = D_8082BF20; // type:char size:0x1
0x8082BF24 = D_8082BF24; // type:char size:0x1
0x8082BF28 = D_8082BF28; // type:char size:0x1
0x8082BF2C = D_8082BF2C; // type:char size:0x1
0x8082BF30 = D_8082BF30; // type:char size:0x1
0x8082BF38 = D_8082BF38; // type:char size:0x1
0x8082BF3C = D_8082BF3C; // type:char size:0x1
0x8082BF40 = D_8082BF40; // type:char size:0x1
0x8082BF44 = D_8082BF44; // type:char size:0x1
0x8082BF48 = D_8082BF48; // type:char size:0x1
0x8082BF4C = D_8082BF4C; // type:char size:0x1
0x8082BF50 = D_8082BF50; // type:char size:0x1
0x8082BF54 = D_8082BF54; // type:char size:0x1
0x8082BF58 = D_8082BF58; // type:char size:0x1
0x8082BF5C = D_8082BF5C; // type:char size:0x1
0x8082BF64 = D_8082BF64; // type:char size:0x1
0x8082BF68 = D_8082BF68; // type:char size:0x1
0x8082BF70 = D_8082BF70; // type:char size:0x1
0x8082BF74 = D_8082BF74; // type:char size:0x1
0x8082BF84 = D_8082BF84; // type:char size:0x1
0x8082BF88 = D_8082BF88; // type:char size:0x1
0x8082BF8C = D_8082BF8C; // type:char size:0x1
0x8082BF90 = D_8082BF90; // type:char size:0x1
0x8082BF98 = D_8082BF98; // type:char size:0x1
0x8082BF9C = D_8082BF9C; // type:char size:0x1
0x8082BFA4 = D_8082BFA4; // type:char size:0x1
0x8082BFA8 = D_8082BFA8; // type:char size:0x1
0x8082BFB0 = D_8082BFB0; // type:char size:0x1
0x8082BFB4 = D_8082BFB4; // type:char size:0x1
0x8082BFBC = D_8082BFBC; // type:char size:0x1
0x8082BFC0 = D_8082BFC0; // type:char size:0x1
0x8082BFC8 = D_8082BFC8; // type:char size:0x1
0x8082BFCC = D_8082BFCC; // type:char size:0x1
0x8082BFD4 = D_8082BFD4; // type:char size:0x1
0x8082BFD8 = D_8082BFD8; // type:char size:0x1
0x8082BFE0 = D_8082BFE0; // type:char size:0x1
0x8082BFE4 = D_8082BFE4; // type:char size:0x1
0x8082BFE8 = D_8082BFE8; // type:char size:0x1
0x8082BFEC = D_8082BFEC; // type:char size:0x1
0x8082BFF0 = D_8082BFF0; // type:char size:0x1
0x8082BFF4 = D_8082BFF4; // type:char size:0x1
0x8082BFFC = D_8082BFFC; // type:char size:0x1
0x8082C000 = D_8082C000; // type:char size:0x1
0x8082C004 = D_8082C004; // type:char size:0x1
0x8082C008 = D_8082C008; // type:char size:0x1
0x8082C014 = D_8082C014; // type:char size:0x1
0x8082C018 = D_8082C018; // type:char size:0x1
0x8082C020 = D_8082C020; // type:char size:0x1
0x8082C024 = D_8082C024; // type:char size:0x1
0x8082C02C = D_8082C02C; // type:char size:0x1
0x8082C030 = D_8082C030; // type:char size:0x1
0x8082C034 = D_8082C034; // type:char size:0x1
0x8082C038 = D_8082C038; // type:char size:0x1
0x8082C03C = D_8082C03C; // type:char size:0x1
0x8082C040 = D_8082C040; // type:char size:0x1
0x8082C044 = D_8082C044; // type:char size:0x1
0x8082C048 = D_8082C048; // type:char size:0x1
0x8082C04C = D_8082C04C; // type:char size:0x1
0x8082C050 = D_8082C050; // type:char size:0x1
0x8082C054 = D_8082C054; // type:char size:0x1
0x8082C058 = D_8082C058; // type:char size:0x1
0x8082C05C = D_8082C05C; // type:char size:0x1
0x8082C060 = D_8082C060; // type:char size:0x1
0x8082C068 = D_8082C068; // type:char size:0x1
0x8082C06C = D_8082C06C; // type:char size:0x1
0x8082C074 = D_8082C074; // type:char size:0x1
0x8082C078 = D_8082C078; // type:char size:0x1
0x8082C084 = D_8082C084; // type:char size:0x1
0x8082C088 = D_8082C088; // type:char size:0x1
0x8082C090 = D_8082C090; // type:char size:0x1
0x8082C094 = D_8082C094; // type:char size:0x1
0x8082C0A0 = D_8082C0A0; // type:f32 size:0x4
0x8082C0A4 = D_8082C0A4; // type:f32 size:0x4
0x8082C0A8 = D_8082C0A8; // type:f32 size:0x4
0x8082C0AC = D_8082C0AC; // type:f32 size:0x4
0x8082C0B0 = D_8082C0B0; // type:f32 size:0x4
0x8082C0B4 = D_8082C0B4; // type:f32 size:0x4
0x8082C0B8 = D_8082C0B8; // type:f32 size:0x4
0x8082C0BC = D_8082C0BC; // type:f32 size:0x4
0x8082C0C0 = D_8082C0C0; // type:f32 size:0x4
0x8082C0C4 = D_8082C0C4; // type:f32 size:0x4
0x8082C0C8 = D_8082C0C8; // type:f32 size:0x4
0x8082C0CC = D_8082C0CC; // type:f32 size:0x4
0x8082C0D0 = D_8082C0D0; // type:f32 size:0x4
0x8082C0D4 = D_8082C0D4; // type:f32 size:0x4
0x8082C0D8 = D_8082C0D8; // type:f32 size:0x4
0x8082C0DC = D_8082C0DC; // type:f32 size:0x4
0x8082C0E0 = D_8082C0E0; // type:f32 size:0x4
0x8082C0E4 = jtbl_8082C0E4; // type:UNK_PTR size:0x4
0x8082C148 = jtbl_8082C148; // type:UNK_PTR size:0x4
0x8082C18C = jtbl_8082C18C; // type:UNK_PTR size:0x4
0x8082DA50 = D_8082DA50; // type:UNK_TYPE1 size:0x1
0x8082DA52 = D_8082DA52; // type:UNK_TYPE1 size:0x1
0x8082DA54 = D_8082DA54; // type:UNK_TYPE1 size:0x1
0x8082DA56 = D_8082DA56; // type:UNK_TYPE1 size:0x1
0x8082DA58 = sUnpausedButtonStatus; // type:UNK_TYPE1 size:0x1
0x8082DA60 = D_8082DA60; // type:f32 size:0x4
0x8082DA64 = D_8082DA64; // type:f32 size:0x4
0x8082DA68 = D_8082DA68; // type:f32 size:0x4
0x8082DA6C = D_8082DA6C; // type:f32 size:0x4
0x8082DA70 = D_8082DA70; // type:f32 size:0x4
0x8082DA74 = D_8082DA74; // type:f32 size:0x4
0x8082DA78 = D_8082DA78; // type:f32 size:0x4
0x8082DA7C = D_8082DA7C; // type:f32 size:0x4
0x8082DA80 = D_8082DA80; // type:UNK_TYPE1 size:0x1
0x8082DA82 = D_8082DA82; // type:UNK_TYPE1 size:0x1
0x8082DA84 = D_8082DA84; // type:UNK_TYPE1 size:0x1
0x8082DA86 = D_8082DA86; // type:UNK_TYPE1 size:0x1
0x8085B9F0 = D_8085B9F0; // type:UNK_TYPE1 size:0x1
0x8085BA08 = D_8085BA08; // type:UNK_TYPE1 size:0x1
0x8085BA20 = D_8085BA20; // type:UNK_TYPE1 size:0x1
0x8085BA38 = D_8085BA38; // type:UNK_TYPE1 size:0x1
0x8085BE84 = D_8085BE84; // type:UNK_TYPE1 size:0x1
0x8085BE9C = D_8085BE9C; // type:UNK_TYPE1 size:0x1
0x8085BEB4 = D_8085BEB4; // type:UNK_TYPE1 size:0x1
0x8085BECC = D_8085BECC; // type:UNK_TYPE1 size:0x1
0x8085BEE4 = D_8085BEE4; // type:UNK_TYPE1 size:0x1
0x8085BEFC = D_8085BEFC; // type:UNK_TYPE1 size:0x1
0x8085BF14 = D_8085BF14; // type:UNK_TYPE1 size:0x1
0x8085BF44 = D_8085BF44; // type:UNK_TYPE1 size:0x1
0x8085BF5C = D_8085BF5C; // type:UNK_TYPE1 size:0x1
0x8085BF74 = D_8085BF74; // type:UNK_TYPE1 size:0x1
0x8085BF8C = D_8085BF8C; // type:UNK_TYPE1 size:0x1
0x8085BFA4 = D_8085BFA4; // type:UNK_TYPE1 size:0x1
0x8085BFBC = D_8085BFBC; // type:UNK_TYPE1 size:0x1
0x8085BFD4 = D_8085BFD4; // type:UNK_TYPE1 size:0x1
0x8085BFEC = D_8085BFEC; // type:UNK_TYPE1 size:0x1
0x8085C004 = D_8085C004; // type:UNK_TYPE1 size:0x1
0x8085C01C = D_8085C01C; // type:UNK_TYPE1 size:0x1
0x8085C034 = D_8085C034; // type:UNK_TYPE1 size:0x1
0x8085C04C = D_8085C04C; // type:UNK_TYPE1 size:0x1
0x8085C064 = D_8085C064; // type:UNK_TYPE1 size:0x1
0x8085C07C = D_8085C07C; // type:UNK_TYPE1 size:0x1
0x8085C094 = D_8085C094; // type:UNK_TYPE1 size:0x1
0x8085C0C4 = D_8085C0C4; // type:UNK_TYPE1 size:0x1
0x8085C0DC = D_8085C0DC; // type:UNK_TYPE1 size:0x1
0x8085C0F4 = D_8085C0F4; // type:UNK_TYPE1 size:0x1
0x8085C10C = D_8085C10C; // type:UNK_TYPE1 size:0x1
0x8085C124 = D_8085C124; // type:UNK_TYPE1 size:0x1
0x8085C13C = D_8085C13C; // type:UNK_TYPE1 size:0x1
0x8085C154 = D_8085C154; // type:UNK_TYPE1 size:0x1
0x8085C16C = D_8085C16C; // type:UNK_TYPE1 size:0x1
0x8085C184 = D_8085C184; // type:UNK_TYPE1 size:0x1
0x8085C19C = D_8085C19C; // type:UNK_TYPE1 size:0x1
0x8085C1B4 = D_8085C1B4; // type:UNK_TYPE1 size:0x1
0x8085C1CC = D_8085C1CC; // type:UNK_TYPE1 size:0x1
0x8085C1E4 = D_8085C1E4; // type:UNK_TYPE1 size:0x1
0x8085C1FC = D_8085C1FC; // type:UNK_TYPE1 size:0x1
0x8085C214 = D_8085C214; // type:UNK_TYPE1 size:0x1
0x8085C22C = D_8085C22C; // type:UNK_TYPE1 size:0x1
0x8085C244 = D_8085C244; // type:UNK_TYPE1 size:0x1
0x8085C25C = D_8085C25C; // type:UNK_TYPE1 size:0x1
0x8085C274 = D_8085C274; // type:UNK_TYPE1 size:0x1
0x8085C28C = D_8085C28C; // type:UNK_TYPE1 size:0x1
0x8085C2A4 = D_8085C2A4; // type:UNK_TYPE4 size:0x4
0x8085C2A8 = D_8085C2A8; // type:UNK_TYPE4 size:0x4
0x8085C2AC = D_8085C2AC; // type:UNK_TYPE4 size:0x4
0x8085C2EC = D_8085C2EC; // type:UNK_TYPE1 size:0x1
0x8085C318 = D_8085C318; // type:UNK_TYPE1 size:0x1
0x8085C344 = D_8085C344; // type:UNK_TYPE1 size:0x1
0x8085C394 = D_8085C394; // type:UNK_TYPE1 size:0x1
0x8085C3E4 = D_8085C3E4; // type:f32 size:0x4
0x8085C3E8 = D_8085C3E8; // type:f32 size:0x4
0x8085C3EC = D_8085C3EC; // type:UNK_TYPE2 size:0x2
0x8085C3F4 = D_8085C3F4; // type:UNK_TYPE1 size:0x1
0x8085C84C = D_8085C84C; // type:UNK_TYPE4 size:0x4
0x8085C850 = D_8085C850; // type:UNK_TYPE4 size:0x4
0x8085C8C4 = D_8085C8C4; // type:UNK_TYPE1 size:0x1
0x8085C8C8 = D_8085C8C8; // type:UNK_TYPE1 size:0x1
0x8085C8CC = D_8085C8CC; // type:UNK_TYPE1 size:0x1
0x8085C8D0 = D_8085C8D0; // type:UNK_TYPE1 size:0x1
0x8085C8D4 = D_8085C8D4; // type:UNK_TYPE1 size:0x1
0x8085C8E8 = D_8085C8E8; // type:UNK_TYPE1 size:0x1
0x8085C900 = D_8085C900; // type:UNK_TYPE1 size:0x1
0x8085C90C = D_8085C90C; // type:UNK_TYPE1 size:0x1
0x8085C91C = D_8085C91C; // type:UNK_TYPE1 size:0x1
0x8085C924 = D_8085C924; // type:UNK_TYPE1 size:0x1
0x8085C928 = D_8085C928; // type:UNK_TYPE1 size:0x1
0x8085C938 = D_8085C938; // type:UNK_TYPE1 size:0x1
0x8085C96C = D_8085C96C; // type:UNK_TYPE1 size:0x1
0x8085C98C = D_8085C98C; // type:UNK_TYPE1 size:0x1
0x8085C99C = D_8085C99C; // type:UNK_TYPE1 size:0x1
0x8085C9F0 = D_8085C9F0; // type:UNK_PTR size:0x4
0x8085CB3C = D_8085CB3C; // type:UNK_PTR size:0x4
0x8085CC88 = D_8085CC88; // type:UNK_TYPE1 size:0x1
0x8085CD00 = D_8085CD00; // type:UNK_TYPE1 size:0x1
0x8085CD24 = D_8085CD24; // type:UNK_TYPE1 size:0x1
0x8085CD30 = D_8085CD30; // type:UNK_TYPE1 size:0x1
0x8085CE30 = D_8085CE30; // type:UNK_TYPE1 size:0x1
0x8085CE60 = D_8085CE60; // type:UNK_TYPE1 size:0x1
0x8085CF50 = D_8085CF50; // type:UNK_TYPE1 size:0x1
0x8085CF58 = D_8085CF58; // type:UNK_TYPE1 size:0x1
0x8085CF60 = D_8085CF60; // type:UNK_TYPE1 size:0x1
0x8085CF68 = D_8085CF68; // type:UNK_TYPE1 size:0x1
0x8085CF70 = D_8085CF70; // type:UNK_TYPE1 size:0x1
0x8085CF78 = D_8085CF78; // type:UNK_TYPE1 size:0x1
0x8085CF80 = D_8085CF80; // type:UNK_TYPE1 size:0x1
0x8085CF84 = D_8085CF84; // type:UNK_TYPE1 size:0x1
0x8085CF88 = D_8085CF88; // type:UNK_TYPE1 size:0x1
0x8085CFA8 = D_8085CFA8; // type:UNK_TYPE2 size:0x2
0x8085CFAE = D_8085CFAE; // type:UNK_TYPE1 size:0x1
0x8085CFB8 = D_8085CFB8; // type:UNK_TYPE1 size:0x1
0x8085CFBC = D_8085CFBC; // type:UNK_TYPE1 size:0x1
0x8085CFC4 = D_8085CFC4; // type:UNK_TYPE1 size:0x1
0x8085CFCC = D_8085CFCC; // type:UNK_TYPE1 size:0x1
0x8085CFD4 = D_8085CFD4; // type:UNK_TYPE1 size:0x1
0x8085CFDC = D_8085CFDC; // type:UNK_TYPE1 size:0x1
0x8085CFE4 = D_8085CFE4; // type:UNK_TYPE1 size:0x1
0x8085CFEC = D_8085CFEC; // type:UNK_TYPE1 size:0x1
0x8085CFF8 = D_8085CFF8; // type:UNK_TYPE1 size:0x1
0x8085D004 = D_8085D004; // type:UNK_TYPE1 size:0x1
0x8085D00C = D_8085D00C; // type:UNK_TYPE1 size:0x1
0x8085D018 = D_8085D018; // type:UNK_TYPE1 size:0x1
0x8085D01C = D_8085D01C; // type:UNK_TYPE1 size:0x1
0x8085D028 = D_8085D028; // type:UNK_TYPE1 size:0x1
0x8085D034 = D_8085D034; // type:UNK_TYPE1 size:0x1
0x8085D044 = D_8085D044; // type:UNK_TYPE1 size:0x1
0x8085D048 = D_8085D048; // type:UNK_TYPE1 size:0x1
0x8085D050 = D_8085D050; // type:UNK_TYPE1 size:0x1
0x8085D054 = D_8085D054; // type:UNK_PTR size:0x4
0x8085D090 = D_8085D090; // type:UNK_TYPE1 size:0x1
0x8085D094 = D_8085D094; // type:UNK_TYPE1 size:0x1
0x8085D097 = D_8085D097; // type:UNK_TYPE1 size:0x1
0x8085D09C = D_8085D09C; // type:UNK_TYPE4 size:0x4
0x8085D0D4 = D_8085D0D4; // type:UNK_TYPE1 size:0x1
0x8085D0E4 = D_8085D0E4; // type:UNK_TYPE1 size:0x1
0x8085D0F4 = D_8085D0F4; // type:UNK_TYPE4 size:0x4
0x8085D0F8 = D_8085D0F8; // type:UNK_TYPE1 size:0x1
0x8085D100 = D_8085D100; // type:UNK_TYPE1 size:0x1
0x8085D10C = D_8085D10C; // type:f32 size:0x4
0x8085D114 = D_8085D114; // type:f32 size:0x4
0x8085D118 = D_8085D118; // type:UNK_TYPE1 size:0x1
0x8085D124 = D_8085D124; // type:UNK_TYPE1 size:0x1
0x8085D130 = D_8085D130; // type:UNK_TYPE1 size:0x1
0x8085D134 = D_8085D134; // type:f32 size:0x4
0x8085D13C = D_8085D13C; // type:UNK_TYPE1 size:0x1
0x8085D148 = D_8085D148; // type:UNK_TYPE1 size:0x1
0x8085D154 = D_8085D154; // type:UNK_TYPE1 size:0x1
0x8085D160 = D_8085D160; // type:UNK_TYPE1 size:0x1
0x8085D174 = D_8085D174; // type:UNK_TYPE1 size:0x1
0x8085D17C = D_8085D17C; // type:UNK_TYPE1 size:0x1
0x8085D190 = D_8085D190; // type:UNK_TYPE1 size:0x1
0x8085D1A4 = D_8085D1A4; // type:UNK_TYPE1 size:0x1
0x8085D1F8 = D_8085D1F8; // type:UNK_TYPE1 size:0x1
0x8085D200 = D_8085D200; // type:UNK_TYPE4 size:0x4
0x8085D218 = D_8085D218; // type:UNK_TYPE1 size:0x1
0x8085D224 = D_8085D224; // type:UNK_TYPE1 size:0x1
0x8085D23C = D_8085D23C; // type:UNK_TYPE1 size:0x1
0x8085D252 = D_8085D252; // type:UNK_TYPE1 size:0x1
0x8085D25C = D_8085D25C; // type:UNK_TYPE1 size:0x1
0x8085D264 = D_8085D264; // type:UNK_TYPE1 size:0x1
0x8085D26C = D_8085D26C; // type:UNK_TYPE1 size:0x1
0x8085D270 = D_8085D270; // type:UNK_TYPE1 size:0x1
0x8085D27C = D_8085D27C; // type:f32 size:0x4
0x8085D284 = D_8085D284; // type:f32 size:0x4
0x8085D288 = D_8085D288; // type:UNK_TYPE1 size:0x1
0x8085D28C = D_8085D28C; // type:f32 size:0x4
0x8085D294 = D_8085D294; // type:UNK_TYPE1 size:0x1
0x8085D2A4 = D_8085D2A4; // type:UNK_TYPE1 size:0x1
0x8085D2B0 = D_8085D2B0; // type:UNK_TYPE1 size:0x1
0x8085D2B4 = D_8085D2B4; // type:UNK_TYPE1 size:0x1
0x8085D2C0 = D_8085D2C0; // type:ActorInitVar size:0x4
0x8085D2C4 = D_8085D2C4; // type:UNK_TYPE4 size:0x4
0x8085D2CC = D_8085D2CC; // type:UNK_PTR size:0x4
0x8085D30C = D_8085D30C; // type:EffectBlureInit2 size:0x24
0x8085D330 = D_8085D330; // type:EffectTireMarkInit size:0x8
0x8085D338 = D_8085D338; // type:UNK_TYPE4 size:0x4
0x8085D33C = D_8085D33C; // type:UNK_TYPE4 size:0x4
0x8085D340 = D_8085D340; // type:UNK_TYPE1 size:0x1
0x8085D34C = D_8085D34C; // type:UNK_TYPE1 size:0x1
0x8085D354 = D_8085D354; // type:UNK_TYPE1 size:0x1
0x8085D358 = D_8085D358; // type:UNK_TYPE1 size:0x1
0x8085D35C = D_8085D35C; // type:f32 size:0x4
0x8085D360 = D_8085D360; // type:f32 size:0x4
0x8085D364 = D_8085D364; // type:UNK_TYPE1 size:0x1
0x8085D370 = D_8085D370; // type:UNK_TYPE1 size:0x1
0x8085D37C = D_8085D37C; // type:UNK_TYPE1 size:0x1
0x8085D380 = D_8085D380; // type:UNK_TYPE1 size:0x1
0x8085D384 = D_8085D384; // type:UNK_TYPE1 size:0x1
0x8085D3E0 = D_8085D3E0; // type:UNK_TYPE1 size:0x1
0x8085D3F4 = D_8085D3F4; // type:UNK_TYPE1 size:0x1
0x8085D3F8 = D_8085D3F8; // type:UNK_TYPE1 size:0x1
0x8085D3FC = D_8085D3FC; // type:UNK_TYPE4 size:0x4
0x8085D404 = D_8085D404; // type:UNK_TYPE1 size:0x1
0x8085D410 = D_8085D410; // type:UNK_TYPE1 size:0x1
0x8085D41C = D_8085D41C; // type:UNK_TYPE1 size:0x1
0x8085D428 = D_8085D428; // type:UNK_TYPE1 size:0x1
0x8085D450 = D_8085D450; // type:UNK_TYPE1 size:0x1
0x8085D478 = D_8085D478; // type:UNK_TYPE1 size:0x1
0x8085D488 = D_8085D488; // type:UNK_TYPE1 size:0x1
0x8085D4B0 = D_8085D4B0; // type:UNK_TYPE1 size:0x1
0x8085D4E0 = D_8085D4E0; // type:UNK_TYPE1 size:0x1
0x8085D510 = D_8085D510; // type:UNK_TYPE1 size:0x1
0x8085D520 = D_8085D520; // type:UNK_TYPE1 size:0x1
0x8085D530 = D_8085D530; // type:UNK_TYPE1 size:0x1
0x8085D540 = D_8085D540; // type:UNK_TYPE1 size:0x1
0x8085D550 = D_8085D550; // type:UNK_PTR size:0x4
0x8085D55C = D_8085D55C; // type:UNK_PTR size:0x4
0x8085D568 = D_8085D568; // type:UNK_PTR size:0x4
0x8085D574 = D_8085D574; // type:UNK_TYPE4 size:0x4
0x8085D580 = D_8085D580; // type:UNK_TYPE1 size:0x1
0x8085D584 = D_8085D584; // type:UNK_TYPE1 size:0x1
0x8085D588 = D_8085D588; // type:UNK_TYPE1 size:0x1
0x8085D5A0 = D_8085D5A0; // type:UNK_TYPE1 size:0x1
0x8085D5B8 = D_8085D5B8; // type:UNK_TYPE1 size:0x1
0x8085D5D0 = D_8085D5D0; // type:UNK_TYPE1 size:0x1
0x8085D5DC = D_8085D5DC; // type:UNK_TYPE1 size:0x1
0x8085D5E0 = D_8085D5E0; // type:UNK_TYPE1 size:0x1
0x8085D5E4 = D_8085D5E4; // type:UNK_TYPE1 size:0x1
0x8085D5F0 = D_8085D5F0; // type:UNK_TYPE1 size:0x1
0x8085D5FA = D_8085D5FA; // type:UNK_TYPE1 size:0x1
0x8085D604 = D_8085D604; // type:UNK_TYPE1 size:0x1
0x8085D60C = D_8085D60C; // type:UNK_TYPE1 size:0x1
0x8085D61C = D_8085D61C; // type:UNK_TYPE1 size:0x1
0x8085D62C = D_8085D62C; // type:f32 size:0x4
0x8085D630 = D_8085D630; // type:f32 size:0x4
0x8085D634 = D_8085D634; // type:f32 size:0x4
0x8085D638 = D_8085D638; // type:f32 size:0x4
0x8085D640 = D_8085D640; // type:f32 size:0x4
0x8085D644 = D_8085D644; // type:UNK_TYPE1 size:0x1
0x8085D64C = D_8085D64C; // type:f32 size:0x4
0x8085D650 = D_8085D650; // type:UNK_TYPE1 size:0x1
0x8085D658 = D_8085D658; // type:UNK_TYPE1 size:0x1
0x8085D660 = D_8085D660; // type:UNK_TYPE1 size:0x1
0x8085D66C = D_8085D66C; // type:UNK_TYPE4 size:0x4
0x8085D674 = D_8085D674; // type:UNK_TYPE4 size:0x4
0x8085D67C = D_8085D67C; // type:UNK_TYPE1 size:0x1
0x8085D680 = D_8085D680; // type:UNK_TYPE1 size:0x1
0x8085D6A4 = D_8085D6A4; // type:UNK_TYPE1 size:0x1
0x8085D6D0 = D_8085D6D0; // type:UNK_PTR size:0x4
0x8085D6DC = D_8085D6DC; // type:UNK_TYPE1 size:0x1
0x8085D6E0 = D_8085D6E0; // type:UNK_TYPE4 size:0x4
0x8085D6E8 = D_8085D6E8; // type:UNK_TYPE1 size:0x1
0x8085D708 = D_8085D708; // type:UNK_TYPE1 size:0x1
0x8085D714 = D_8085D714; // type:UNK_TYPE1 size:0x1
0x8085D73C = D_8085D73C; // type:UNK_TYPE1 size:0x1
0x8085D74C = D_8085D74C; // type:UNK_TYPE1 size:0x1
0x8085D75C = D_8085D75C; // type:UNK_TYPE1 size:0x1
0x8085D764 = D_8085D764; // type:UNK_TYPE1 size:0x1
0x8085D76D = D_8085D76D; // type:UNK_TYPE1 size:0x1
0x8085D770 = D_8085D770; // type:UNK_TYPE1 size:0x1
0x8085D77C = D_8085D77C; // type:UNK_TYPE1 size:0x1
0x8085D788 = D_8085D788; // type:UNK_TYPE1 size:0x1
0x8085D78C = D_8085D78C; // type:UNK_TYPE1 size:0x1
0x8085D797 = D_8085D797; // type:UNK_TYPE1 size:0x1
0x8085D798 = D_8085D798; // type:UNK_TYPE2 size:0x2
0x8085D7EC = D_8085D7EC; // type:UNK_TYPE1 size:0x1
0x8085D7F8 = D_8085D7F8; // type:UNK_TYPE1 size:0x1
0x8085D800 = D_8085D800; // type:f32 size:0x4
0x8085D804 = D_8085D804; // type:UNK_TYPE1 size:0x1
0x8085D80C = D_8085D80C; // type:UNK_TYPE1 size:0x1
0x8085D838 = D_8085D838; // type:UNK_TYPE1 size:0x1
0x8085D840 = D_8085D840; // type:UNK_TYPE1 size:0x1
0x8085D844 = D_8085D844; // type:UNK_TYPE1 size:0x1
0x8085D848 = D_8085D848; // type:UNK_TYPE1 size:0x1
0x8085D8F0 = D_8085D8F0; // type:UNK_TYPE1 size:0x1
0x8085D904 = D_8085D904; // type:UNK_TYPE1 size:0x1
0x8085D908 = D_8085D908; // type:UNK_TYPE1 size:0x1
0x8085D910 = D_8085D910; // type:UNK_TYPE1 size:0x1
0x8085D918 = D_8085D918; // type:UNK_TYPE1 size:0x1
0x8085D91C = D_8085D91C; // type:f32 size:0x4
0x8085D924 = D_8085D924; // type:UNK_TYPE1 size:0x1
0x8085D928 = D_8085D928; // type:f32 size:0x4
0x8085D930 = D_8085D930; // type:UNK_TYPE1 size:0x1
0x8085D934 = D_8085D934; // type:UNK_TYPE1 size:0x1
0x8085D938 = D_8085D938; // type:UNK_TYPE4 size:0x4
0x8085D93C = D_8085D93C; // type:UNK_TYPE4 size:0x4
0x8085D940 = D_8085D940; // type:f32 size:0x4
0x8085D948 = D_8085D948; // type:f32 size:0x4
0x8085D94C = D_8085D94C; // type:f32 size:0x4
0x8085D954 = D_8085D954; // type:f32 size:0x4
0x8085D958 = D_8085D958; // type:UNK_TYPE1 size:0x1
0x8085D960 = D_8085D960; // type:UNK_TYPE1 size:0x1
0x8085D96C = D_8085D96C; // type:UNK_TYPE1 size:0x1
0x8085D978 = D_8085D978; // type:UNK_TYPE1 size:0x1
0x8085D984 = D_8085D984; // type:UNK_TYPE1 size:0x1
0x8085D990 = D_8085D990; // type:UNK_TYPE1 size:0x1
0x8085D9E0 = D_8085D9E0; // type:UNK_TYPE1 size:0x1
0x8085D9F0 = D_8085D9F0; // type:UNK_TYPE1 size:0x1
0x8085D9FC = D_8085D9FC; // type:UNK_TYPE1 size:0x1
0x8085DA00 = D_8085DA00; // type:UNK_TYPE1 size:0x1
0x8085DA08 = D_8085DA08; // type:UNK_TYPE1 size:0x1
0x8085DA0C = D_8085DA0C; // type:UNK_TYPE1 size:0x1
0x8085DA14 = D_8085DA14; // type:UNK_TYPE1 size:0x1
0x8085DA1C = D_8085DA1C; // type:UNK_TYPE1 size:0x1
0x8085DA28 = D_8085DA28; // type:UNK_TYPE1 size:0x1
0x8085DA2C = D_8085DA2C; // type:UNK_TYPE1 size:0x1
0x8085DA38 = D_8085DA38; // type:UNK_TYPE1 size:0x1
0x8085DA48 = D_8085DA48; // type:UNK_TYPE1 size:0x1
0x8085DA50 = D_8085DA50; // type:UNK_TYPE1 size:0x1
0x8085DA70 = D_8085DA70; // type:UNK_TYPE1 size:0x1
0x8085DA78 = D_8085DA78; // type:UNK_TYPE1 size:0x1
0x8085DA7C = D_8085DA7C; // type:UNK_TYPE1 size:0x1
0x8085DA80 = D_8085DA80; // type:UNK_TYPE1 size:0x1
0x8085DA84 = D_8085DA84; // type:UNK_TYPE1 size:0x1
0x8085DA88 = D_8085DA88; // type:UNK_TYPE1 size:0x1
0x8085DA8C = D_8085DA8C; // type:UNK_TYPE1 size:0x1
0x8085DA90 = D_8085DA90; // type:UNK_TYPE1 size:0x1
0x8085DA94 = D_8085DA94; // type:UNK_TYPE1 size:0x1
0x8085DEF4 = D_8085DEF4; // type:UNK_TYPE1 size:0x1
0x8085E354 = D_8085E354; // type:UNK_TYPE1 size:0x1
0x8085E368 = D_8085E368; // type:UNK_TYPE2 size:0x2
0x8085E3A4 = D_8085E3A4; // type:UNK_TYPE1 size:0x1
0x8085E3A8 = D_8085E3A8; // type:UNK_TYPE1 size:0x1
0x8085E3B0 = D_8085E3B0; // type:f32 size:0x4
0x8085E3B4 = D_8085E3B4; // type:f32 size:0x4
0x8085E3B8 = D_8085E3B8; // type:f32 size:0x4
0x8085E3BC = D_8085E3BC; // type:f32 size:0x4
0x8085E3C0 = D_8085E3C0; // type:f32 size:0x4
0x8085E3C4 = D_8085E3C4; // type:f32 size:0x4
0x8085E3C8 = D_8085E3C8; // type:f32 size:0x4
0x8085E3CC = D_8085E3CC; // type:f32 size:0x4
0x8085E3D0 = D_8085E3D0; // type:f32 size:0x4
0x8085E3D4 = D_8085E3D4; // type:f32 size:0x4
0x8085E3D8 = D_8085E3D8; // type:f32 size:0x4
0x8085E3DC = D_8085E3DC; // type:f32 size:0x4
0x8085E3E0 = D_8085E3E0; // type:f32 size:0x4
0x8085E3E4 = D_8085E3E4; // type:f32 size:0x4
0x8085E3E8 = D_8085E3E8; // type:f32 size:0x4
0x8085E3EC = D_8085E3EC; // type:f32 size:0x4
0x8085E3F0 = D_8085E3F0; // type:f32 size:0x4
0x8085E3F4 = D_8085E3F4; // type:f32 size:0x4
0x8085E3F8 = D_8085E3F8; // type:f32 size:0x4
0x8085E3FC = D_8085E3FC; // type:f32 size:0x4
0x8085E400 = D_8085E400; // type:f32 size:0x4
0x8085E404 = D_8085E404; // type:f32 size:0x4
0x8085E408 = D_8085E408; // type:f32 size:0x4
0x8085E40C = D_8085E40C; // type:f32 size:0x4
0x8085E410 = D_8085E410; // type:f32 size:0x4
0x8085E414 = D_8085E414; // type:f32 size:0x4
0x8085E418 = D_8085E418; // type:f32 size:0x4
0x8085E41C = D_8085E41C; // type:f32 size:0x4
0x8085E420 = D_8085E420; // type:f32 size:0x4
0x8085E424 = D_8085E424; // type:f32 size:0x4
0x8085E428 = D_8085E428; // type:f32 size:0x4
0x8085E42C = D_8085E42C; // type:f32 size:0x4
0x8085E430 = D_8085E430; // type:f32 size:0x4
0x8085E434 = D_8085E434; // type:f32 size:0x4
0x8085E438 = D_8085E438; // type:f32 size:0x4
0x8085E43C = D_8085E43C; // type:f32 size:0x4
0x8085E440 = D_8085E440; // type:f32 size:0x4
0x8085E444 = D_8085E444; // type:f32 size:0x4
0x8085E448 = D_8085E448; // type:f32 size:0x4
0x8085E44C = D_8085E44C; // type:f32 size:0x4
0x8085E450 = D_8085E450; // type:f32 size:0x4
0x8085E454 = D_8085E454; // type:f32 size:0x4
0x8085E458 = D_8085E458; // type:f32 size:0x4
0x8085E45C = D_8085E45C; // type:f32 size:0x4
0x8085E460 = D_8085E460; // type:f32 size:0x4
0x8085E464 = D_8085E464; // type:f32 size:0x4
0x8085E468 = D_8085E468; // type:f32 size:0x4
0x8085E46C = D_8085E46C; // type:f32 size:0x4
0x8085E470 = D_8085E470; // type:f32 size:0x4
0x8085E474 = D_8085E474; // type:f32 size:0x4
0x8085E478 = D_8085E478; // type:f32 size:0x4
0x8085E47C = D_8085E47C; // type:f32 size:0x4
0x8085E480 = D_8085E480; // type:f32 size:0x4
0x8085E484 = D_8085E484; // type:f32 size:0x4
0x8085E488 = D_8085E488; // type:f32 size:0x4
0x8085E48C = D_8085E48C; // type:f32 size:0x4
0x8085E490 = D_8085E490; // type:f32 size:0x4
0x8085E494 = D_8085E494; // type:f32 size:0x4
0x8085E498 = D_8085E498; // type:f32 size:0x4
0x8085E49C = D_8085E49C; // type:f32 size:0x4
0x8085E4A0 = D_8085E4A0; // type:f32 size:0x4
0x8085E4A4 = D_8085E4A4; // type:f32 size:0x4
0x8085E4A8 = D_8085E4A8; // type:f32 size:0x4
0x8085E4AC = D_8085E4AC; // type:f32 size:0x4
0x8085E4B0 = D_8085E4B0; // type:f32 size:0x4
0x8085E4B4 = D_8085E4B4; // type:f32 size:0x4
0x8085E4B8 = D_8085E4B8; // type:f32 size:0x4
0x8085E4BC = D_8085E4BC; // type:f32 size:0x4
0x8085E4C0 = D_8085E4C0; // type:f32 size:0x4
0x8085E4C4 = D_8085E4C4; // type:f32 size:0x4
0x8085E4C8 = D_8085E4C8; // type:f32 size:0x4
0x8085E4CC = D_8085E4CC; // type:f32 size:0x4
0x8085E4D0 = D_8085E4D0; // type:f32 size:0x4
0x8085E4D4 = D_8085E4D4; // type:f32 size:0x4
0x8085E4D8 = D_8085E4D8; // type:f32 size:0x4
0x8085E4DC = D_8085E4DC; // type:f32 size:0x4
0x8085E4E0 = D_8085E4E0; // type:f32 size:0x4
0x8085E4E4 = D_8085E4E4; // type:f32 size:0x4
0x8085E4E8 = D_8085E4E8; // type:f32 size:0x4
0x8085E4EC = D_8085E4EC; // type:f32 size:0x4
0x8085E4F0 = D_8085E4F0; // type:f32 size:0x4
0x8085E4F4 = D_8085E4F4; // type:f32 size:0x4
0x8085E4F8 = D_8085E4F8; // type:f32 size:0x4
0x8085E4FC = D_8085E4FC; // type:f32 size:0x4
0x8085E500 = D_8085E500; // type:f32 size:0x4
0x8085E504 = D_8085E504; // type:f32 size:0x4
0x8085E508 = D_8085E508; // type:f32 size:0x4
0x8085E50C = D_8085E50C; // type:f32 size:0x4
0x8085E510 = D_8085E510; // type:f32 size:0x4
0x8085E514 = D_8085E514; // type:f32 size:0x4
0x8085E518 = D_8085E518; // type:f32 size:0x4
0x8085E51C = D_8085E51C; // type:f32 size:0x4
0x8085E520 = D_8085E520; // type:f32 size:0x4
0x8085E524 = D_8085E524; // type:f32 size:0x4
0x8085E528 = D_8085E528; // type:f32 size:0x4
0x8085E52C = D_8085E52C; // type:f32 size:0x4
0x8085E530 = D_8085E530; // type:f32 size:0x4
0x8085E534 = D_8085E534; // type:f32 size:0x4
0x8085E538 = D_8085E538; // type:f32 size:0x4
0x8085E53C = D_8085E53C; // type:f32 size:0x4
0x8085E540 = D_8085E540; // type:f32 size:0x4
0x8085E544 = D_8085E544; // type:f32 size:0x4
0x8085E548 = D_8085E548; // type:f32 size:0x4
0x8085E54C = D_8085E54C; // type:f32 size:0x4
0x8085E550 = D_8085E550; // type:f32 size:0x4
0x8085E554 = D_8085E554; // type:f32 size:0x4
0x8085E558 = D_8085E558; // type:f32 size:0x4
0x8085E55C = D_8085E55C; // type:f32 size:0x4
0x8085E560 = D_8085E560; // type:f32 size:0x4
0x8085E564 = D_8085E564; // type:f32 size:0x4
0x8085E568 = D_8085E568; // type:f32 size:0x4
0x8085E56C = D_8085E56C; // type:f32 size:0x4
0x8085E570 = D_8085E570; // type:f32 size:0x4
0x8085E574 = D_8085E574; // type:f32 size:0x4
0x8085E578 = D_8085E578; // type:f32 size:0x4
0x8085E57C = D_8085E57C; // type:f32 size:0x4
0x8085E580 = D_8085E580; // type:f32 size:0x4
0x8085E584 = D_8085E584; // type:f32 size:0x4
0x8085E588 = D_8085E588; // type:f32 size:0x4
0x8085E58C = D_8085E58C; // type:f32 size:0x4
0x8085E590 = D_8085E590; // type:f32 size:0x4
0x8085E594 = D_8085E594; // type:f32 size:0x4
0x8085E598 = D_8085E598; // type:f32 size:0x4
0x8085E59C = D_8085E59C; // type:f32 size:0x4
0x8085E5A0 = D_8085E5A0; // type:f32 size:0x4
0x8085E5A4 = D_8085E5A4; // type:f32 size:0x4
0x8085E5A8 = D_8085E5A8; // type:f32 size:0x4
0x8085E5AC = D_8085E5AC; // type:f32 size:0x4
0x8085E5B0 = D_8085E5B0; // type:f32 size:0x4
0x8085E5B4 = D_8085E5B4; // type:f32 size:0x4
0x8085E5B8 = D_8085E5B8; // type:f32 size:0x4
0x8085E5BC = D_8085E5BC; // type:f32 size:0x4
0x8085E5C0 = D_8085E5C0; // type:f32 size:0x4
0x8085E5C4 = D_8085E5C4; // type:f32 size:0x4
0x8085E5C8 = D_8085E5C8; // type:f32 size:0x4
0x8085E5CC = D_8085E5CC; // type:f32 size:0x4
0x8085E5D0 = D_8085E5D0; // type:f32 size:0x4
0x8085E5D4 = D_8085E5D4; // type:f32 size:0x4
0x8085E5D8 = D_8085E5D8; // type:f32 size:0x4
0x8085E5DC = D_8085E5DC; // type:f32 size:0x4
0x8085E5E0 = D_8085E5E0; // type:f32 size:0x4
0x8085E5E4 = D_8085E5E4; // type:f32 size:0x4
0x8085E5E8 = D_8085E5E8; // type:f32 size:0x4
0x8085E5EC = D_8085E5EC; // type:f32 size:0x4
0x8085E5F0 = D_8085E5F0; // type:f32 size:0x4
0x8085E5F4 = D_8085E5F4; // type:f32 size:0x4
0x8085E5F8 = D_8085E5F8; // type:f32 size:0x4
0x8085E5FC = D_8085E5FC; // type:f32 size:0x4
0x8085E600 = D_8085E600; // type:f32 size:0x4
0x8085E604 = D_8085E604; // type:f32 size:0x4
0x8085E608 = D_8085E608; // type:f32 size:0x4
0x8085E60C = D_8085E60C; // type:f32 size:0x4
0x8085E610 = D_8085E610; // type:f32 size:0x4
0x8085E614 = D_8085E614; // type:f32 size:0x4
0x8085E618 = D_8085E618; // type:f32 size:0x4
0x8085E61C = D_8085E61C; // type:f32 size:0x4
0x8085E620 = D_8085E620; // type:f32 size:0x4
0x8085E624 = D_8085E624; // type:f32 size:0x4
0x8085E628 = D_8085E628; // type:f32 size:0x4
0x8085E62C = D_8085E62C; // type:f32 size:0x4
0x8085E630 = D_8085E630; // type:f32 size:0x4
0x8085E634 = D_8085E634; // type:f32 size:0x4
0x8085E638 = D_8085E638; // type:f32 size:0x4
0x8085E63C = D_8085E63C; // type:f32 size:0x4
0x8085E640 = D_8085E640; // type:f32 size:0x4
0x8085E644 = D_8085E644; // type:f32 size:0x4
0x8085E648 = D_8085E648; // type:f32 size:0x4
0x8085E64C = D_8085E64C; // type:f32 size:0x4
0x8085E650 = D_8085E650; // type:f32 size:0x4
0x8085E654 = D_8085E654; // type:f32 size:0x4
0x8085E658 = D_8085E658; // type:f32 size:0x4
0x8085E65C = D_8085E65C; // type:f32 size:0x4
0x8085E660 = D_8085E660; // type:f32 size:0x4
0x8085E664 = D_8085E664; // type:f32 size:0x4
0x8085E668 = D_8085E668; // type:f32 size:0x4
0x8085E66C = D_8085E66C; // type:f32 size:0x4
0x8085E670 = D_8085E670; // type:f32 size:0x4
0x8085E674 = D_8085E674; // type:f32 size:0x4
0x8085E678 = D_8085E678; // type:f32 size:0x4
0x8085E67C = D_8085E67C; // type:f32 size:0x4
0x8085E680 = D_8085E680; // type:f32 size:0x4
0x8085E684 = D_8085E684; // type:f32 size:0x4
0x8085E688 = D_8085E688; // type:f32 size:0x4
0x8085E68C = D_8085E68C; // type:f32 size:0x4
0x8085E690 = D_8085E690; // type:f32 size:0x4
0x8085E694 = D_8085E694; // type:f32 size:0x4
0x8085E698 = D_8085E698; // type:f32 size:0x4
0x8085E69C = D_8085E69C; // type:f32 size:0x4
0x8085E6A0 = D_8085E6A0; // type:f32 size:0x4
0x8085E6A4 = D_8085E6A4; // type:f32 size:0x4
0x8085E6A8 = D_8085E6A8; // type:f32 size:0x4
0x8085E6AC = D_8085E6AC; // type:f32 size:0x4
0x8085E6B0 = D_8085E6B0; // type:f32 size:0x4
0x8085E6B4 = D_8085E6B4; // type:f32 size:0x4
0x8085E6B8 = D_8085E6B8; // type:f32 size:0x4
0x8085E6BC = D_8085E6BC; // type:f32 size:0x4
0x8085E6C0 = D_8085E6C0; // type:f32 size:0x4
0x8085E6C4 = D_8085E6C4; // type:f32 size:0x4
0x8085E6C8 = D_8085E6C8; // type:f32 size:0x4
0x8085E6CC = D_8085E6CC; // type:f32 size:0x4
0x8085E6D0 = D_8085E6D0; // type:f32 size:0x4
0x8085E6D4 = D_8085E6D4; // type:f32 size:0x4
0x8085E6D8 = D_8085E6D8; // type:f32 size:0x4
0x8085E6DC = D_8085E6DC; // type:f32 size:0x4
0x8085E6E0 = D_8085E6E0; // type:f32 size:0x4
0x8085E6E4 = D_8085E6E4; // type:f32 size:0x4
0x8085E6E8 = D_8085E6E8; // type:f32 size:0x4
0x8085E6EC = D_8085E6EC; // type:f32 size:0x4
0x8085E6F0 = D_8085E6F0; // type:f32 size:0x4
0x8085E6F4 = D_8085E6F4; // type:f32 size:0x4
0x80862AF0 = D_80862AF0; // type:UNK_TYPE1 size:0x1
0x80862AF4 = D_80862AF4; // type:f32 size:0x4
0x80862AF8 = D_80862AF8; // type:f32 size:0x4
0x80862AFC = D_80862AFC; // type:f32 size:0x4
0x80862B00 = D_80862B00; // type:UNK_TYPE1 size:0x1
0x80862B02 = D_80862B02; // type:UNK_TYPE1 size:0x1
0x80862B04 = D_80862B04; // type:UNK_TYPE1 size:0x1
0x80862B08 = D_80862B08; // type:UNK_TYPE1 size:0x1
0x80862B0C = D_80862B0C; // type:UNK_TYPE1 size:0x1
0x80862B10 = D_80862B10; // type:UNK_TYPE1 size:0x1
0x80862B14 = D_80862B14; // type:UNK_TYPE1 size:0x1
0x80862B16 = D_80862B16; // type:UNK_TYPE1 size:0x1
0x80862B18 = D_80862B18; // type:f32 size:0x4
0x80862B1C = D_80862B1C; // type:UNK_TYPE1 size:0x1
0x80862B20 = D_80862B20; // type:UNK_TYPE1 size:0x1
0x80862B24 = D_80862B24; // type:UNK_TYPE1 size:0x1
0x80862B28 = D_80862B28; // type:UNK_TYPE1 size:0x1
0x80862B2C = D_80862B2C; // type:UNK_TYPE1 size:0x1
0x80862B30 = D_80862B30; // type:UNK_TYPE1 size:0x1
0x80862B3C = D_80862B3C; // type:f32 size:0x4
0x80862B40 = D_80862B40; // type:UNK_TYPE1 size:0x1
0x80862B44 = D_80862B44; // type:UNK_TYPE1 size:0x1
0x80862B48 = D_80862B48; // type:UNK_TYPE1 size:0x1
0x80862B4C = D_80862B4C; // type:UNK_TYPE1 size:0x1
0x80862B50 = D_80862B50; // type:UNK_TYPE1 size:0x1
0x80862B6C = D_80862B6C; // type:UNK_TYPE1 size:0x1
0x808637B0 = En_Test_InitVars; // type:ActorInit size:0x20
0x808637D0 = D_808637D0; // type:f32 size:0x4
0x808637D4 = D_808637D4; // type:f32 size:0x4
0x808637D8 = D_808637D8; // type:f32 size:0x4
0x808637DC = D_808637DC; // type:f32 size:0x4
0x808637E0 = D_808637E0; // type:f32 size:0x4
0x808637E4 = D_808637E4; // type:f32 size:0x4
0x808637E8 = D_808637E8; // type:f32 size:0x4
0x80864A30 = En_GirlA_InitVars; // type:UNK_TYPE1 size:0x1
0x80864A50 = D_80864A50; // type:UNK_TYPE1 size:0x1
0x80864FB0 = jtbl_80864FB0; // type:UNK_PTR size:0x4
0x808658E0 = En_Part_InitVars; // type:UNK_TYPE1 size:0x1
0x80865900 = D_80865900; // type:UNK_TYPE4 size:0x4
0x8086590C = D_8086590C; // type:UNK_TYPE1 size:0x1
0x80865920 = D_80865920; // type:f32 size:0x4
0x80865924 = D_80865924; // type:f32 size:0x4
0x80865928 = D_80865928; // type:f32 size:0x4
0x808666B0 = En_Light_InitVars; // type:UNK_TYPE1 size:0x1
0x808666D0 = D_808666D0; // type:UNK_TYPE1 size:0x1
0x808666D6 = D_808666D6; // type:UNK_TYPE1 size:0x1
0x808666D7 = D_808666D7; // type:UNK_TYPE1 size:0x1
0x80866750 = D_80866750; // type:f32 size:0x4
0x80866754 = D_80866754; // type:f32 size:0x4
0x80866758 = D_80866758; // type:f32 size:0x4
0x8086675C = D_8086675C; // type:f32 size:0x4
0x80866760 = D_80866760; // type:f32 size:0x4
0x80866764 = D_80866764; // type:f32 size:0x4
0x808675D0 = D_808675D0; // type:UNK_TYPE1 size:0x1
0x808675E4 = D_808675E4; // type:UNK_TYPE1 size:0x1
0x80867634 = D_80867634; // type:UNK_TYPE1 size:0x1
0x80867640 = D_80867640; // type:UNK_TYPE1 size:0x1
0x8086764C = D_8086764C; // type:UNK_TYPE1 size:0x1
0x80867658 = D_80867658; // type:UNK_TYPE1 size:0x1
0x80867684 = D_80867684; // type:UNK_TYPE1 size:0x1
0x80867688 = D_80867688; // type:UNK_TYPE1 size:0x1
0x80867690 = D_80867690; // type:UNK_TYPE1 size:0x1
0x80867698 = D_80867698; // type:UNK_TYPE1 size:0x1
0x808676A0 = D_808676A0; // type:UNK_TYPE1 size:0x1
0x808676B8 = D_808676B8; // type:UNK_TYPE1 size:0x1
0x808676D0 = D_808676D0; // type:UNK_TYPE1 size:0x1
0x808676D4 = D_808676D4; // type:UNK_TYPE1 size:0x1
0x808676D8 = D_808676D8; // type:UNK_TYPE1 size:0x1
0x808676E4 = D_808676E4; // type:UNK_TYPE1 size:0x1
0x808676EC = D_808676EC; // type:UNK_TYPE1 size:0x1
0x808676F0 = D_808676F0; // type:UNK_TYPE1 size:0x1
0x80867704 = D_80867704; // type:UNK_TYPE1 size:0x1
0x80867708 = D_80867708; // type:UNK_TYPE1 size:0x1
0x8086770C = D_8086770C; // type:UNK_TYPE1 size:0x1
0x80867710 = D_80867710; // type:UNK_TYPE1 size:0x1
0x80867714 = D_80867714; // type:UNK_TYPE1 size:0x1
0x8086771C = D_8086771C; // type:UNK_TYPE1 size:0x1
0x80867734 = D_80867734; // type:UNK_TYPE1 size:0x1
0x8086773C = D_8086773C; // type:UNK_TYPE1 size:0x1
0x80867744 = D_80867744; // type:UNK_TYPE1 size:0x1
0x8086775C = D_8086775C; // type:UNK_TYPE1 size:0x1
0x80867778 = D_80867778; // type:UNK_TYPE1 size:0x1
0x8086777C = D_8086777C; // type:UNK_TYPE1 size:0x1
0x80867780 = D_80867780; // type:UNK_TYPE1 size:0x1
0x80867784 = D_80867784; // type:UNK_TYPE1 size:0x1
0x8086778C = D_8086778C; // type:UNK_PTR size:0x4
0x8086780C = En_Door_InitVars; // type:UNK_TYPE1 size:0x1
0x8086782C = sObjInfo; // type:UNK_TYPE2 size:0x126
0x80867954 = sInitChain; // type:UNK_TYPE1 size:0x1
0x80867964 = sAnimations; // type:AnimationHeader size:0x28
0x8086798C = sAnimOpenFrames; // type:u8 size:0x10
0x80867998 = sAnimCloseFrames; // type:u8 size:0x10
0x808679A4 = D_808679A4; // type:UNK_TYPE1 size:0x1
0x80867A20 = D_80867A20; // type:f32 size:0x4
0x80867BC0 = D_80867BC0; // type:UNK_TYPE1 size:0x1
0x80869B30 = En_Box_InitVars; // type:UNK_TYPE1 size:0x1
0x80869B50 = D_80869B50; // type:UNK_TYPE1 size:0x1
0x80869B54 = D_80869B54; // type:UNK_TYPE4 size:0x4
0x80869B68 = D_80869B68; // type:UNK_TYPE1 size:0x1
0x80869B7C = D_80869B7C; // type:UNK_TYPE4 size:0x4
0x80869B88 = D_80869B88; // type:UNK_TYPE4 size:0x4
0x80869BA0 = D_80869BA0; // type:f32 size:0x4
0x80869BA4 = D_80869BA4; // type:f32 size:0x4
0x80869BA8 = D_80869BA8; // type:f32 size:0x4
0x80869BAC = D_80869BAC; // type:f32 size:0x4
0x80869BB0 = D_80869BB0; // type:f32 size:0x4
0x80869BB4 = D_80869BB4; // type:f32 size:0x4
0x80869BB8 = D_80869BB8; // type:f32 size:0x4
0x80869BBC = D_80869BBC; // type:f32 size:0x4
0x80869BC0 = D_80869BC0; // type:f32 size:0x4
0x80869BC4 = D_80869BC4; // type:f32 size:0x4
0x80869BC8 = D_80869BC8; // type:f32 size:0x4
0x80869BCC = D_80869BCC; // type:f32 size:0x4
0x80869BD0 = D_80869BD0; // type:f32 size:0x4
0x8086D940 = En_Pametfrog_InitVars; // type:UNK_TYPE1 size:0x1
0x8086D960 = D_8086D960; // type:UNK_TYPE1 size:0x1
0x8086D980 = D_8086D980; // type:UNK_TYPE1 size:0x1
0x8086D9C8 = D_8086D9C8; // type:UNK_TYPE1 size:0x1
0x8086D9D8 = D_8086D9D8; // type:UNK_TYPE1 size:0x1
0x8086D9E0 = D_8086D9E0; // type:UNK_TYPE1 size:0x1
0x8086DA04 = D_8086DA04; // type:UNK_TYPE1 size:0x1
0x8086DA10 = D_8086DA10; // type:UNK_TYPE1 size:0x1
0x8086DA14 = D_8086DA14; // type:UNK_TYPE1 size:0x1
0x8086DA18 = D_8086DA18; // type:UNK_TYPE1 size:0x1
0x8086DA28 = D_8086DA28; // type:UNK_TYPE1 size:0x1
0x8086DA40 = D_8086DA40; // type:f32 size:0x4
0x8086DA44 = D_8086DA44; // type:f32 size:0x4
0x8086DA48 = D_8086DA48; // type:f32 size:0x4
0x8086DA4C = D_8086DA4C; // type:f32 size:0x4
0x8086DA50 = D_8086DA50; // type:f32 size:0x4
0x8086DA54 = D_8086DA54; // type:f32 size:0x4
0x8086DA58 = D_8086DA58; // type:f32 size:0x4
0x8086DA5C = D_8086DA5C; // type:f32 size:0x4
0x8086DA60 = D_8086DA60; // type:f32 size:0x4
0x8086DA64 = D_8086DA64; // type:f32 size:0x4
0x8086DA68 = D_8086DA68; // type:f32 size:0x4
0x8086DA6C = D_8086DA6C; // type:f32 size:0x4
0x8086DA70 = D_8086DA70; // type:f32 size:0x4
0x8086DA74 = D_8086DA74; // type:f32 size:0x4
0x8086DA78 = D_8086DA78; // type:f32 size:0x4
0x8086DA7C = D_8086DA7C; // type:f32 size:0x4
0x8086DA80 = D_8086DA80; // type:f32 size:0x4
0x8086DA84 = D_8086DA84; // type:f32 size:0x4
0x8086DA88 = D_8086DA88; // type:f32 size:0x4
0x8086DA8C = D_8086DA8C; // type:f32 size:0x4
0x8086DA90 = D_8086DA90; // type:f32 size:0x4
0x8086DA94 = D_8086DA94; // type:f32 size:0x4
0x8086DA98 = D_8086DA98; // type:f32 size:0x4
0x8086DA9C = D_8086DA9C; // type:f32 size:0x4
0x80870870 = D_80870870; // type:UNK_TYPE1 size:0x1
0x80870880 = En_Okuta_InitVars; // type:UNK_TYPE1 size:0x1
0x808708A0 = D_808708A0; // type:UNK_TYPE1 size:0x1
0x808708CC = D_808708CC; // type:UNK_TYPE1 size:0x1
0x808708EC = D_808708EC; // type:UNK_TYPE2 size:0x2
0x808708EE = D_808708EE; // type:UNK_TYPE2 size:0x2
0x808708F8 = D_808708F8; // type:UNK_TYPE1 size:0x1
0x80870900 = D_80870900; // type:UNK_TYPE1 size:0x1
0x80870920 = D_80870920; // type:UNK_TYPE1 size:0x1
0x80870928 = D_80870928; // type:UNK_TYPE1 size:0x1
0x8087092C = D_8087092C; // type:UNK_TYPE1 size:0x1
0x80870930 = D_80870930; // type:UNK_TYPE1 size:0x1
0x8087093C = D_8087093C; // type:UNK_TYPE1 size:0x1
0x80870940 = D_80870940; // type:UNK_TYPE1 size:0x1
0x80870944 = D_80870944; // type:UNK_TYPE1 size:0x1
0x80870954 = D_80870954; // type:UNK_TYPE1 size:0x1
0x80870978 = D_80870978; // type:UNK_TYPE1 size:0x1
0x80870980 = D_80870980; // type:f32 size:0x4
0x80870984 = D_80870984; // type:f32 size:0x4
0x80870988 = D_80870988; // type:f32 size:0x4
0x8087098C = D_8087098C; // type:f32 size:0x4
0x80870990 = D_80870990; // type:f32 size:0x4
0x80870994 = D_80870994; // type:f32 size:0x4
0x80870998 = D_80870998; // type:f32 size:0x4
0x8087099C = D_8087099C; // type:f32 size:0x4
0x808709A0 = D_808709A0; // type:f32 size:0x4
0x808709A4 = D_808709A4; // type:f32 size:0x4
0x808709A8 = D_808709A8; // type:f32 size:0x4
0x808709AC = D_808709AC; // type:f32 size:0x4
0x808709B0 = D_808709B0; // type:f32 size:0x4
0x808709B4 = D_808709B4; // type:f32 size:0x4
0x808709B8 = D_808709B8; // type:f32 size:0x4
0x808709BC = D_808709BC; // type:f32 size:0x4
0x808709C0 = D_808709C0; // type:f32 size:0x4
0x808709C4 = D_808709C4; // type:f32 size:0x4
0x808709C8 = D_808709C8; // type:f32 size:0x4
0x808709CC = D_808709CC; // type:f32 size:0x4
0x808709D0 = D_808709D0; // type:f32 size:0x4
0x808709D4 = D_808709D4; // type:f32 size:0x4
0x808709D8 = D_808709D8; // type:f32 size:0x4
0x808709DC = D_808709DC; // type:f32 size:0x4
0x808709E0 = D_808709E0; // type:f32 size:0x4
0x808709E4 = D_808709E4; // type:f32 size:0x4
0x808709E8 = D_808709E8; // type:f32 size:0x4
0x808709EC = D_808709EC; // type:f32 size:0x4
0x808709F0 = D_808709F0; // type:f32 size:0x4
0x808709F4 = D_808709F4; // type:f32 size:0x4
0x808709F8 = D_808709F8; // type:f32 size:0x4
0x808709FC = D_808709FC; // type:f32 size:0x4
0x80870A00 = D_80870A00; // type:f32 size:0x4
0x80870A04 = D_80870A04; // type:f32 size:0x4
0x80870A08 = D_80870A08; // type:f32 size:0x4
0x80870A0C = D_80870A0C; // type:f32 size:0x4
0x80870A10 = D_80870A10; // type:f32 size:0x4
0x80870A14 = D_80870A14; // type:f32 size:0x4
0x80870A18 = D_80870A18; // type:f32 size:0x4
0x80870A1C = D_80870A1C; // type:f32 size:0x4
0x80870A20 = D_80870A20; // type:f32 size:0x4
0x80870A24 = D_80870A24; // type:f32 size:0x4
0x80870A28 = D_80870A28; // type:f32 size:0x4
0x80872DA0 = En_Bom_InitVars; // type:ActorInit size:0x20
0x80872DC0 = enBomScales; // type:f32 size:0x8
0x80872DC8 = D_80872DC8; // type:ColliderCylinderInit size:0x2c
0x80872DF4 = D_80872DF4; // type:ColliderJntSphElementInit size:0x24
0x80872E18 = D_80872E18; // type:ColliderJntSphInit size:0x10
0x80872E28 = D_80872E28; // type:UNK_TYPE1 size:0x1
0x80872E4C = D_80872E4C; // type:UNK_TYPE1 size:0x1
0x80872E5C = D_80872E5C; // type:ActorInitVar size:0xc
0x80872E68 = D_80872E68; // type:UNK_TYPE1 size:0x1
0x80872E80 = D_80872E80; // type:UNK_TYPE4 size:0x4
0x80872E8C = D_80872E8C; // type:UNK_TYPE1 size:0x1
0x80872E90 = D_80872E90; // type:UNK_TYPE4 size:0x4
0x80872E94 = D_80872E94; // type:UNK_TYPE4 size:0x4
0x80872E98 = D_80872E98; // type:UNK_TYPE1 size:0x1
0x80872E9C = D_80872E9C; // type:UNK_TYPE1 size:0x1
0x80872EA0 = D_80872EA0; // type:UNK_TYPE4 size:0x4
0x80872EAC = D_80872EAC; // type:UNK_TYPE4 size:0x4
0x80872EB8 = D_80872EB8; // type:UNK_TYPE4 size:0x4
0x80872EC4 = D_80872EC4; // type:UNK_TYPE4 size:0x4
0x80872ED0 = D_80872ED0; // type:UNK_TYPE4 size:0x4
0x80872ED4 = D_80872ED4; // type:UNK_TYPE2 size:0x2
0x80872EE0 = D_80872EE0; // type:UNK_TYPE1 size:0x1
0x80872EEC = D_80872EEC; // type:Vec3f size:0xc
0x80872EF8 = D_80872EF8; // type:Vec3f size:0xc
0x80872F04 = D_80872F04; // type:Vec3f size:0xc
0x80872F10 = D_80872F10; // type:UNK_TYPE1 size:0x1
0x80872F50 = D_80872F50; // type:UNK_TYPE1 size:0x1
0x80872F90 = D_80872F90; // type:UNK_TYPE1 size:0x1
0x80872F98 = D_80872F98; // type:UNK_TYPE1 size:0x1
0x80873020 = D_80873020; // type:UNK_TYPE1 size:0x1
0x80873040 = D_80873040; // type:UNK_TYPE1 size:0x1
0x80873060 = D_80873060; // type:UNK_TYPE1 size:0x1
0x80873260 = D_80873260; // type:UNK_TYPE1 size:0x1
0x80873660 = D_80873660; // type:UNK_TYPE1 size:0x1
0x80873850 = D_80873850; // type:UNK_TYPE1 size:0x1
0x80873A30 = D_80873A30; // type:UNK_TYPE1 size:0x1
0x80873C10 = D_80873C10; // type:UNK_TYPE1 size:0x1
0x80873CA0 = D_80873CA0; // type:Gfx size:0x158
0x80873DF8 = D_80873DF8; // type:UNK_TYPE1 size:0x1
0x80873FF8 = D_80873FF8; // type:UNK_TYPE1 size:0x1
0x808741F8 = D_808741F8; // type:UNK_TYPE1 size:0x1
0x808742F8 = D_808742F8; // type:Gfx size:0xc8
0x808743C0 = D_808743C0; // type:f32 size:0x4
0x808743C4 = D_808743C4; // type:f32 size:0x4
0x808743C8 = D_808743C8; // type:f32 size:0x4
0x808743CC = D_808743CC; // type:f32 size:0x4
0x808743D0 = D_808743D0; // type:f32 size:0x4
0x808743D4 = D_808743D4; // type:f32 size:0x4
0x808743D8 = D_808743D8; // type:f32 size:0x4
0x808743DC = D_808743DC; // type:f32 size:0x4
0x808743E0 = D_808743E0; // type:f32 size:0x4
0x808743E4 = D_808743E4; // type:f32 size:0x4
0x808743E8 = D_808743E8; // type:f32 size:0x4
0x808743EC = D_808743EC; // type:f32 size:0x4
0x808743F0 = D_808743F0; // type:f32 size:0x4
0x80874650 = sPowderKegFuseSegments; // type:PowderKegFuseSegment size:0x1c0
0x80874668 = D_80874668; // type:UNK_TYPE1 size:0x1
0x8087466A = D_8087466A; // type:UNK_TYPE1 size:0x1
0x8087466C = D_8087466C; // type:UNK_TYPE1 size:0x1
0x80876340 = En_Wallmas_InitVars; // type:UNK_TYPE1 size:0x1
0x80876360 = D_80876360; // type:UNK_TYPE1 size:0x1
0x8087638C = D_8087638C; // type:UNK_TYPE1 size:0x1
0x808763AC = D_808763AC; // type:UNK_TYPE1 size:0x1
0x808763B4 = D_808763B4; // type:UNK_TYPE1 size:0x1
0x808763C0 = D_808763C0; // type:UNK_TYPE1 size:0x1
0x808763D4 = D_808763D4; // type:s8 size:0x25
0x808763F0 = D_808763F0; // type:f32 size:0x4
0x808763F4 = D_808763F4; // type:f32 size:0x4
0x808763F8 = D_808763F8; // type:f32 size:0x4
0x808763FC = D_808763FC; // type:f32 size:0x4
0x80876400 = D_80876400; // type:f32 size:0x4
0x80876404 = D_80876404; // type:f32 size:0x4
0x80876408 = D_80876408; // type:f32 size:0x4
0x8087640C = D_8087640C; // type:f32 size:0x4
0x80876410 = D_80876410; // type:f32 size:0x4
0x80876414 = D_80876414; // type:f32 size:0x4
0x80876418 = D_80876418; // type:f32 size:0x4
0x8087641C = D_8087641C; // type:f32 size:0x4
0x808790B0 = En_Dodongo_InitVars; // type:UNK_TYPE1 size:0x1
0x808790D0 = D_808790D0; // type:UNK_TYPE1 size:0x1
0x80879238 = D_80879238; // type:UNK_TYPE1 size:0x1
0x80879248 = D_80879248; // type:UNK_TYPE1 size:0x1
0x80879258 = D_80879258; // type:UNK_TYPE1 size:0x1
0x808792C4 = D_808792C4; // type:UNK_TYPE1 size:0x1
0x808792D4 = D_808792D4; // type:UNK_TYPE1 size:0x1
0x808792F4 = D_808792F4; // type:UNK_TYPE1 size:0x1
0x808792FC = D_808792FC; // type:UNK_TYPE1 size:0x1
0x80879308 = D_80879308; // type:EffectBlureInit2 size:0x24
0x8087932C = D_8087932C; // type:UNK_TYPE1 size:0x1
0x80879330 = D_80879330; // type:UNK_TYPE1 size:0x1
0x80879334 = D_80879334; // type:UNK_TYPE1 size:0x1
0x80879338 = D_80879338; // type:UNK_TYPE1 size:0x1
0x8087933C = D_8087933C; // type:f32 size:0x4
0x80879344 = D_80879344; // type:f32 size:0x4
0x80879348 = D_80879348; // type:f32 size:0x4
0x8087934C = D_8087934C; // type:f32 size:0x4
0x80879350 = D_80879350; // type:f32 size:0x4
0x80879354 = D_80879354; // type:UNK_TYPE1 size:0x1
0x80879358 = D_80879358; // type:f32 size:0x4
0x80879360 = D_80879360; // type:UNK_TYPE1 size:0x1
0x8087936C = D_8087936C; // type:UNK_TYPE1 size:0x1
0x80879370 = D_80879370; // type:UNK_TYPE1 size:0x1
0x8087937C = D_8087937C; // type:UNK_TYPE1 size:0x1
0x80879388 = D_80879388; // type:UNK_TYPE1 size:0x1
0x8087938E = D_8087938E; // type:UNK_TYPE1 size:0x1
0x8087938F = D_8087938F; // type:UNK_TYPE1 size:0x1
0x80879394 = D_80879394; // type:UNK_TYPE1 size:0x1
0x80879395 = D_80879395; // type:UNK_TYPE1 size:0x1
0x808793A6 = D_808793A6; // type:UNK_TYPE1 size:0x1
0x808793B0 = D_808793B0; // type:f32 size:0x4
0x808793B4 = D_808793B4; // type:f32 size:0x4
0x808793B8 = D_808793B8; // type:f32 size:0x4
0x808793BC = D_808793BC; // type:f32 size:0x4
0x808793C0 = D_808793C0; // type:f32 size:0x4
0x808793C4 = D_808793C4; // type:f32 size:0x4
0x808793C8 = D_808793C8; // type:f32 size:0x4
0x808793CC = D_808793CC; // type:f32 size:0x4
0x808793D0 = D_808793D0; // type:f32 size:0x4
0x808793D4 = D_808793D4; // type:f32 size:0x4
0x808793D8 = D_808793D8; // type:f32 size:0x4
0x808793DC = D_808793DC; // type:f32 size:0x4
0x808793E0 = D_808793E0; // type:f32 size:0x4
0x808793E4 = D_808793E4; // type:f32 size:0x4
0x808793E8 = D_808793E8; // type:f32 size:0x4
0x808793EC = D_808793EC; // type:f32 size:0x4
0x808793F0 = D_808793F0; // type:f32 size:0x4
0x808793F4 = D_808793F4; // type:f32 size:0x4
0x808793F8 = D_808793F8; // type:f32 size:0x4
0x8087B450 = En_Firefly_InitVars; // type:ActorInit size:0x20
0x8087B470 = enFireflyCollisionInit; // type:ColliderSphereInit size:0x2c
0x8087B498 = D_8087B498; // type:UNK_TYPE1 size:0x1
0x8087B49C = D_8087B49C; // type:UNK_TYPE1 size:0x1
0x8087B4A4 = enFireflyDamageTable; // type:DamageTable size:0x20
0x8087B4C4 = enFireflyInitVars; // type:ActorInitVar size:0x10
0x8087B4D4 = D_8087B4D4; // type:UNK_TYPE1 size:0x1
0x8087B4D8 = D_8087B4D8; // type:UNK_TYPE1 size:0x1
0x8087B4DC = D_8087B4DC; // type:UNK_TYPE1 size:0x1
0x8087B4E0 = D_8087B4E0; // type:UNK_TYPE1 size:0x1
0x8087B4E4 = D_8087B4E4; // type:UNK_TYPE1 size:0x1
0x8087B4F0 = D_8087B4F0; // type:UNK_TYPE1 size:0x1
0x8087B500 = D_8087B500; // type:f32 size:0x4
0x8087B504 = D_8087B504; // type:f32 size:0x4
0x8087B508 = D_8087B508; // type:f32 size:0x4
0x8087B50C = D_8087B50C; // type:f32 size:0x4
0x8087B510 = D_8087B510; // type:f32 size:0x4
0x8087B514 = D_8087B514; // type:f32 size:0x4
0x8087B518 = D_8087B518; // type:f32 size:0x4
0x8087B51C = D_8087B51C; // type:f32 size:0x4
0x8087B520 = D_8087B520; // type:f32 size:0x4
0x8087B524 = D_8087B524; // type:f32 size:0x4
0x8087B528 = D_8087B528; // type:f32 size:0x4
0x8087B52C = D_8087B52C; // type:f32 size:0x4
0x8087B530 = D_8087B530; // type:f32 size:0x4
0x8087B534 = D_8087B534; // type:f32 size:0x4
0x8087B538 = D_8087B538; // type:f32 size:0x4
0x80888EC0 = D_80888EC0; // type:UNK_TYPE1 size:0x1
0x80888EE4 = D_80888EE4; // type:UNK_TYPE1 size:0x1
0x80888F08 = sAnimationHeaders; // type:AnimationHeader* size:0x14
0x80888F1C = D_80888F1C; // type:UNK_TYPE1 size:0x1
0x80888F34 = D_80888F34; // type:UNK_TYPE4 size:0x4
0x80888F40 = sSkeletonHeaders; // type:UNK_TYPE1 size:0x1
0x80888F54 = En_Horse_InitVars; // type:UNK_TYPE1 size:0x1
0x80888F74 = sCylinderInit1; // type:UNK_TYPE1 size:0x1
0x80888FA0 = sCylinderInit2; // type:UNK_TYPE1 size:0x1
0x80888FCC = D_80888FCC; // type:UNK_TYPE1 size:0x1
0x80888FF0 = sJntSphInit; // type:UNK_TYPE1 size:0x10
0x80889000 = sColChkInfoInit; // type:UNK_TYPE1 size:0x1
0x80889008 = D_80889008; // type:UNK_TYPE1 size:0x1
0x80889010 = sInitChain; // type:UNK_TYPE1 size:0x1
0x80889018 = D_80889018; // type:UNK_TYPE1 size:0x1
0x80889030 = D_80889030; // type:UNK_TYPE1 size:0x1
0x80889048 = D_80889048; // type:UNK_TYPE1 size:0x1
0x80889052 = D_80889052; // type:UNK_TYPE1 size:0x1
0x80889054 = D_80889054; // type:UNK_TYPE1 size:0x1
0x8088905C = D_8088905C; // type:UNK_TYPE1 size:0x1
0x80889074 = D_80889074; // type:UNK_TYPE1 size:0x1
0x8088908C = D_8088908C; // type:UNK_TYPE4 size:0x4
0x808890B4 = D_808890B4; // type:UNK_TYPE1 size:0x1
0x808890E8 = D_808890E8; // type:UNK_TYPE1 size:0x1
0x808890F0 = D_808890F0; // type:UNK_TYPE1 size:0x1
0x8088911C = D_8088911C; // type:UNK_TYPE1 size:0x1
0x80889148 = D_80889148; // type:UNK_TYPE4 size:0x4
0x80889154 = D_80889154; // type:UNK_TYPE4 size:0x4
0x80889160 = sActionFuncs; // type:UNK_PTR size:0x4
0x808891C8 = D_808891C8; // type:UNK_TYPE4 size:0x4
0x808891D4 = D_808891D4; // type:UNK_TYPE4 size:0x4
0x808891E0 = D_808891E0; // type:UNK_TYPE4 size:0x4
0x808891EC = D_808891EC; // type:UNK_TYPE4 size:0x4
0x808891F8 = D_808891F8; // type:UNK_TYPE4 size:0x4
0x80889204 = D_80889204; // type:UNK_TYPE1 size:0x1
0x80889210 = D_80889210; // type:UNK_TYPE1 size:0x1
0x80889214 = D_80889214; // type:UNK_TYPE4 size:0x4
0x80889220 = D_80889220; // type:f32 size:0x4
0x80889224 = D_80889224; // type:f32 size:0x4
0x80889228 = D_80889228; // type:f32 size:0x4
0x8088922C = D_8088922C; // type:f32 size:0x4
0x80889230 = D_80889230; // type:f32 size:0x4
0x80889234 = D_80889234; // type:f32 size:0x4
0x80889238 = D_80889238; // type:f32 size:0x4
0x8088923C = D_8088923C; // type:f32 size:0x4
0x80889240 = D_80889240; // type:f32 size:0x4
0x80889244 = D_80889244; // type:f32 size:0x4
0x80889248 = D_80889248; // type:f32 size:0x4
0x8088924C = D_8088924C; // type:f32 size:0x4
0x80889250 = D_80889250; // type:f32 size:0x4
0x80889254 = D_80889254; // type:f32 size:0x4
0x80889258 = D_80889258; // type:f32 size:0x4
0x8088925C = D_8088925C; // type:f32 size:0x4
0x80889260 = D_80889260; // type:f32 size:0x4
0x80889264 = D_80889264; // type:f32 size:0x4
0x80889268 = D_80889268; // type:f32 size:0x4
0x8088926C = D_8088926C; // type:f32 size:0x4
0x80889270 = D_80889270; // type:f32 size:0x4
0x80889274 = D_80889274; // type:f32 size:0x4
0x80889278 = D_80889278; // type:f32 size:0x4
0x8088927C = D_8088927C; // type:f32 size:0x4
0x80889280 = D_80889280; // type:f32 size:0x4
0x80889284 = D_80889284; // type:f32 size:0x4
0x80889288 = D_80889288; // type:f32 size:0x4
0x8088928C = D_8088928C; // type:f32 size:0x4
0x80889290 = D_80889290; // type:f32 size:0x4
0x80889294 = D_80889294; // type:f32 size:0x4
0x80889298 = D_80889298; // type:f32 size:0x4
0x8088929C = D_8088929C; // type:f32 size:0x4
0x808892A0 = D_808892A0; // type:f32 size:0x4
0x808892A4 = D_808892A4; // type:f32 size:0x4
0x808892A8 = D_808892A8; // type:f32 size:0x4
0x808892AC = D_808892AC; // type:f32 size:0x4
0x808892B0 = D_808892B0; // type:f32 size:0x4
0x808892B4 = D_808892B4; // type:f32 size:0x4
0x808892B8 = D_808892B8; // type:f32 size:0x4
0x808892BC = D_808892BC; // type:f32 size:0x4
0x808892C0 = D_808892C0; // type:f32 size:0x4
0x808892C4 = D_808892C4; // type:f32 size:0x4
0x808892C8 = D_808892C8; // type:f32 size:0x4
0x808892CC = D_808892CC; // type:f32 size:0x4
0x808892D0 = D_808892D0; // type:f32 size:0x4
0x808892D4 = D_808892D4; // type:f32 size:0x4
0x808892D8 = D_808892D8; // type:f32 size:0x4
0x808892DC = D_808892DC; // type:f32 size:0x4
0x808892E0 = D_808892E0; // type:f32 size:0x4
0x808892E4 = D_808892E4; // type:f32 size:0x4
0x808892E8 = D_808892E8; // type:f32 size:0x4
0x808892EC = D_808892EC; // type:f32 size:0x4
0x808892F0 = D_808892F0; // type:f32 size:0x4
0x808892F4 = D_808892F4; // type:f32 size:0x4
0x808892F8 = D_808892F8; // type:f32 size:0x4
0x808892FC = D_808892FC; // type:f32 size:0x4
0x80889300 = D_80889300; // type:f32 size:0x4
0x80889304 = D_80889304; // type:f32 size:0x4
0x80889308 = D_80889308; // type:f32 size:0x4
0x8088930C = D_8088930C; // type:f32 size:0x4
0x80889310 = D_80889310; // type:f32 size:0x4
0x80889314 = D_80889314; // type:f32 size:0x4
0x80889318 = D_80889318; // type:f32 size:0x4
0x8088931C = D_8088931C; // type:f32 size:0x4
0x80889320 = D_80889320; // type:f32 size:0x4
0x80889324 = D_80889324; // type:f32 size:0x4
0x80889328 = D_80889328; // type:f32 size:0x4
0x8088932C = D_8088932C; // type:f32 size:0x4
0x80889330 = D_80889330; // type:f32 size:0x4
0x80889334 = D_80889334; // type:f32 size:0x4
0x80889338 = D_80889338; // type:f32 size:0x4
0x8088933C = D_8088933C; // type:f32 size:0x4
0x80889340 = D_80889340; // type:f32 size:0x4
0x80889344 = D_80889344; // type:f32 size:0x4
0x80889348 = D_80889348; // type:f32 size:0x4
0x8088934C = D_8088934C; // type:f32 size:0x4
0x80889350 = D_80889350; // type:f32 size:0x4
0x80889354 = D_80889354; // type:f32 size:0x4
0x80889358 = D_80889358; // type:f32 size:0x4
0x8088935C = D_8088935C; // type:f32 size:0x4
0x80889360 = D_80889360; // type:f32 size:0x4
0x80889364 = D_80889364; // type:f32 size:0x4
0x80889368 = D_80889368; // type:f32 size:0x4
0x8088936C = D_8088936C; // type:f32 size:0x4
0x80889370 = D_80889370; // type:f32 size:0x4
0x80889374 = D_80889374; // type:f32 size:0x4
0x80889378 = D_80889378; // type:f32 size:0x4
0x8088937C = D_8088937C; // type:f32 size:0x4
0x80889380 = D_80889380; // type:f32 size:0x4
0x80889384 = D_80889384; // type:f32 size:0x4
0x80889388 = D_80889388; // type:f32 size:0x4
0x8088938C = D_8088938C; // type:f32 size:0x4
0x80889390 = D_80889390; // type:f32 size:0x4
0x80889394 = D_80889394; // type:f32 size:0x4
0x80889398 = D_80889398; // type:f32 size:0x4
0x8088939C = D_8088939C; // type:f32 size:0x4
0x808893A0 = D_808893A0; // type:f32 size:0x4
0x808893A4 = D_808893A4; // type:f32 size:0x4
0x808893A8 = D_808893A8; // type:f32 size:0x4
0x808893AC = D_808893AC; // type:f32 size:0x4
0x808893B0 = D_808893B0; // type:f32 size:0x4
0x808893B4 = D_808893B4; // type:f32 size:0x4
0x808893B8 = D_808893B8; // type:f32 size:0x4
0x808893BC = D_808893BC; // type:f32 size:0x4
0x808893C0 = D_808893C0; // type:f32 size:0x4
0x808893C4 = D_808893C4; // type:f32 size:0x4
0x808893C8 = D_808893C8; // type:f32 size:0x4
0x808893CC = D_808893CC; // type:f32 size:0x4
0x808893D0 = D_808893D0; // type:f32 size:0x4
0x808893D4 = D_808893D4; // type:f32 size:0x4
0x808893D8 = D_808893D8; // type:f32 size:0x4
0x808893DC = D_808893DC; // type:f32 size:0x4
0x808893E0 = D_808893E0; // type:f32 size:0x4
0x808893E4 = D_808893E4; // type:f32 size:0x4
0x808893E8 = D_808893E8; // type:f32 size:0x4
0x808893EC = D_808893EC; // type:f32 size:0x4
0x8088C1C0 = En_Arrow_InitVars; // type:UNK_TYPE1 size:0x1
0x8088C1E0 = D_8088C1E0; // type:UNK_TYPE1 size:0x1
0x8088C230 = D_8088C230; // type:UNK_TYPE1 size:0x1
0x8088C234 = D_8088C234; // type:EffectBlureInit2 size:0x24
0x8088C258 = D_8088C258; // type:EffectBlureInit2 size:0x24
0x8088C27C = D_8088C27C; // type:EffectBlureInit2 size:0x24
0x8088C2A0 = D_8088C2A0; // type:EffectBlureInit2 size:0x24
0x8088C2C4 = D_8088C2C4; // type:UNK_TYPE4 size:0x4
0x8088C2CC = D_8088C2CC; // type:UNK_TYPE1 size:0x1
0x8088C2D8 = D_8088C2D8; // type:UNK_TYPE1 size:0x1
0x8088C2E4 = D_8088C2E4; // type:UNK_TYPE1 size:0x1
0x8088C2E8 = D_8088C2E8; // type:UNK_TYPE1 size:0x1
0x8088C2EC = D_8088C2EC; // type:UNK_TYPE1 size:0x1
0x8088C340 = D_8088C340; // type:UNK_TYPE1 size:0x1
0x8088C3A0 = jtbl_8088C3A0; // type:UNK_PTR size:0x4
0x8088C3C0 = D_8088C3C0; // type:f32 size:0x4
0x8088C3C4 = D_8088C3C4; // type:f32 size:0x4
0x8088C3C8 = D_8088C3C8; // type:f32 size:0x4
0x8088C3CC = D_8088C3CC; // type:f32 size:0x4
0x808909C0 = En_Elf_InitVars; // type:UNK_TYPE1 size:0x1
0x808909E0 = D_808909E0; // type:UNK_TYPE1 size:0x1
0x808909E4 = D_808909E4; // type:UNK_TYPE4 size:0x4
0x80890A14 = D_80890A14; // type:UNK_TYPE1 size:0x1
0x80890A44 = D_80890A44; // type:UNK_TYPE1 size:0x1
0x80890A6C = D_80890A6C; // type:UNK_TYPE1 size:0x1
0x80890A78 = D_80890A78; // type:UNK_TYPE1 size:0x1
0x80890A84 = D_80890A84; // type:UNK_TYPE1 size:0x1
0x80890A90 = jtbl_80890A90; // type:UNK_PTR size:0x4
0x80890ABC = D_80890ABC; // type:f32 size:0x4
0x80890AC0 = D_80890AC0; // type:f32 size:0x4
0x80890AC4 = D_80890AC4; // type:f32 size:0x4
0x80890AC8 = D_80890AC8; // type:f32 size:0x4
0x80890ACC = D_80890ACC; // type:f32 size:0x4
0x80890AD0 = D_80890AD0; // type:f32 size:0x4
0x80890AD4 = D_80890AD4; // type:f32 size:0x4
0x80890AD8 = D_80890AD8; // type:f32 size:0x4
0x80890ADC = jtbl_80890ADC; // type:UNK_PTR size:0x4
0x80890B08 = D_80890B08; // type:f32 size:0x4
0x80890B0C = D_80890B0C; // type:f32 size:0x4
0x80890B10 = D_80890B10; // type:f32 size:0x4
0x80890B14 = D_80890B14; // type:f32 size:0x4
0x80890B18 = D_80890B18; // type:f32 size:0x4
0x80890B1C = D_80890B1C; // type:f32 size:0x4
0x80890B20 = D_80890B20; // type:f32 size:0x4
0x80890B24 = D_80890B24; // type:f32 size:0x4
0x80890B28 = D_80890B28; // type:f32 size:0x4
0x80890B2C = D_80890B2C; // type:f32 size:0x4
0x80890B30 = D_80890B30; // type:f32 size:0x4
0x80890B34 = D_80890B34; // type:f32 size:0x4
0x80890B38 = D_80890B38; // type:f32 size:0x4
0x80890B3C = D_80890B3C; // type:f32 size:0x4
0x80890B40 = D_80890B40; // type:f32 size:0x4
0x80890B44 = D_80890B44; // type:f32 size:0x4
0x80890B48 = D_80890B48; // type:f32 size:0x4
0x80890B4C = D_80890B4C; // type:f32 size:0x4
0x80890B50 = D_80890B50; // type:f32 size:0x4
0x80890B54 = D_80890B54; // type:f32 size:0x4
0x80890B58 = D_80890B58; // type:f32 size:0x4
0x80890B5C = D_80890B5C; // type:f32 size:0x4
0x80890B60 = D_80890B60; // type:f32 size:0x4
0x80890B64 = D_80890B64; // type:f32 size:0x4
0x80890B68 = D_80890B68; // type:f32 size:0x4
0x80890B6C = D_80890B6C; // type:f32 size:0x4
0x80890B70 = D_80890B70; // type:f32 size:0x4
0x80890B74 = D_80890B74; // type:f32 size:0x4
0x80890B78 = D_80890B78; // type:f32 size:0x4
0x80890B7C = D_80890B7C; // type:f32 size:0x4
0x80890B80 = D_80890B80; // type:f32 size:0x4
0x80890B84 = jtbl_80890B84; // type:UNK_PTR size:0x4
0x80890B9C = jtbl_80890B9C; // type:UNK_PTR size:0x4
0x80890BB8 = D_80890BB8; // type:f32 size:0x4
0x80890BBC = D_80890BBC; // type:f32 size:0x4
0x80890BC0 = D_80890BC0; // type:f32 size:0x4
0x80890BC4 = D_80890BC4; // type:f32 size:0x4
0x80893460 = D_80893460; // type:UNK_TYPE2 size:0x2
0x80893464 = En_Niw_InitVars; // type:UNK_TYPE1 size:0x1
0x80893484 = D_80893484; // type:UNK_TYPE1 size:0x1
0x8089348C = D_8089348C; // type:UNK_TYPE1 size:0x1
0x80893490 = D_80893490; // type:UNK_TYPE1 size:0x1
0x80893498 = D_80893498; // type:UNK_TYPE1 size:0x1
0x808934C4 = D_808934C4; // type:UNK_TYPE4 size:0x4
0x808934D0 = D_808934D0; // type:UNK_TYPE1 size:0x1
0x808934DC = D_808934DC; // type:UNK_TYPE4 size:0x4
0x808934E8 = D_808934E8; // type:UNK_TYPE4 size:0x4
0x80893500 = D_80893500; // type:f32 size:0x4
0x80893504 = D_80893504; // type:f32 size:0x4
0x80893508 = D_80893508; // type:f32 size:0x4
0x8089350C = D_8089350C; // type:f32 size:0x4
0x80893510 = jtbl_80893510; // type:UNK_PTR size:0x4
0x80893528 = D_80893528; // type:f32 size:0x4
0x8089352C = D_8089352C; // type:f32 size:0x4
0x80893530 = D_80893530; // type:f32 size:0x4
0x80893534 = D_80893534; // type:f32 size:0x4
0x80893538 = D_80893538; // type:f32 size:0x4
0x8089353C = D_8089353C; // type:f32 size:0x4
0x80893540 = D_80893540; // type:f32 size:0x4
0x80893544 = D_80893544; // type:f32 size:0x4
0x80893548 = D_80893548; // type:f32 size:0x4
0x8089354C = D_8089354C; // type:f32 size:0x4
0x80893550 = D_80893550; // type:f32 size:0x4
0x80893554 = D_80893554; // type:f32 size:0x4
0x80893558 = D_80893558; // type:f32 size:0x4
0x8089355C = D_8089355C; // type:f32 size:0x4
0x80893560 = D_80893560; // type:f32 size:0x4
0x80893564 = D_80893564; // type:f32 size:0x4
0x80893568 = D_80893568; // type:f32 size:0x4
0x8089356C = D_8089356C; // type:f32 size:0x4
0x80893570 = D_80893570; // type:f32 size:0x4
0x80893574 = D_80893574; // type:f32 size:0x4
0x80893578 = D_80893578; // type:f32 size:0x4
0x8089357C = D_8089357C; // type:f32 size:0x4
0x80893580 = D_80893580; // type:f32 size:0x4
0x80893584 = D_80893584; // type:f32 size:0x4
0x80893588 = D_80893588; // type:f32 size:0x4
0x80896AB0 = En_Tite_InitVars; // type:UNK_TYPE1 size:0x1
0x80896AD0 = D_80896AD0; // type:UNK_TYPE1 size:0x1
0x80896AFC = D_80896AFC; // type:UNK_TYPE1 size:0x1
0x80896B1C = D_80896B1C; // type:UNK_TYPE1 size:0x1
0x80896B24 = D_80896B24; // type:UNK_PTR size:0x4
0x80896B3C = D_80896B3C; // type:UNK_TYPE1 size:0x1
0x80896B40 = D_80896B40; // type:UNK_TYPE1 size:0x1
0x80896B44 = D_80896B44; // type:UNK_TYPE1 size:0x1
0x80896B50 = D_80896B50; // type:UNK_TYPE1 size:0x1
0x80896B60 = D_80896B60; // type:UNK_TYPE4 size:0x4
0x80896B64 = D_80896B64; // type:UNK_TYPE1 size:0x1
0x80896B70 = D_80896B70; // type:UNK_TYPE1 size:0x1
0x80896B8C = D_80896B8C; // type:UNK_TYPE1 size:0x1
0x80896BA4 = D_80896BA4; // type:UNK_TYPE1 size:0x1
0x80896BB0 = D_80896BB0; // type:f32 size:0x4
0x80896BB4 = D_80896BB4; // type:f32 size:0x4
0x80896BB8 = D_80896BB8; // type:f32 size:0x4
0x80896BBC = D_80896BBC; // type:f32 size:0x4
0x80896BC0 = D_80896BC0; // type:f32 size:0x4
0x80896BC4 = D_80896BC4; // type:f32 size:0x4
0x80896BC8 = D_80896BC8; // type:f32 size:0x4
0x80896BCC = D_80896BCC; // type:f32 size:0x4
0x80896BD0 = D_80896BD0; // type:f32 size:0x4
0x80899410 = En_Peehat_InitVars; // type:UNK_TYPE1 size:0x1
0x80899430 = D_80899430; // type:UNK_TYPE1 size:0x1
0x8089945C = D_8089945C; // type:UNK_TYPE1 size:0x1
0x80899488 = D_80899488; // type:UNK_TYPE1 size:0x1
0x80899500 = D_80899500; // type:UNK_TYPE1 size:0x1
0x80899510 = D_80899510; // type:UNK_TYPE1 size:0x1
0x80899530 = D_80899530; // type:UNK_TYPE1 size:0x1
0x8089953C = D_8089953C; // type:UNK_TYPE1 size:0x1
0x80899548 = D_80899548; // type:UNK_TYPE1 size:0x1
0x80899558 = D_80899558; // type:UNK_TYPE1 size:0x1
0x8089955C = D_8089955C; // type:f32 size:0x4
0x80899564 = D_80899564; // type:f32 size:0x4
0x8089956C = D_8089956C; // type:f32 size:0x4
0x80899570 = D_80899570; // type:UNK_TYPE1 size:0x1
0x808995A0 = D_808995A0; // type:UNK_TYPE1 size:0x1
0x808995A3 = D_808995A3; // type:UNK_TYPE1 size:0x1
0x808995A4 = D_808995A4; // type:UNK_TYPE1 size:0x1
0x808995C0 = D_808995C0; // type:f32 size:0x4
0x808995C4 = D_808995C4; // type:f32 size:0x4
0x808995C8 = D_808995C8; // type:f32 size:0x4
0x808995CC = D_808995CC; // type:f32 size:0x4
0x808995D0 = D_808995D0; // type:f32 size:0x4
0x808995D4 = D_808995D4; // type:f32 size:0x4
0x808995D8 = D_808995D8; // type:f32 size:0x4
0x808995DC = D_808995DC; // type:f32 size:0x4
0x808995E0 = D_808995E0; // type:f32 size:0x4
0x808995E4 = D_808995E4; // type:f32 size:0x4
0x808995E8 = D_808995E8; // type:f32 size:0x4
0x808995EC = D_808995EC; // type:f32 size:0x4
0x808995F0 = D_808995F0; // type:f32 size:0x4
0x808995F4 = D_808995F4; // type:f32 size:0x4
0x808995F8 = D_808995F8; // type:f32 size:0x4
0x808995FC = D_808995FC; // type:f32 size:0x4
0x80899600 = D_80899600; // type:f32 size:0x4
0x80899604 = D_80899604; // type:f32 size:0x4
0x80899608 = D_80899608; // type:f32 size:0x4
0x8089960C = D_8089960C; // type:f32 size:0x4
0x80899610 = D_80899610; // type:f32 size:0x4
0x80899614 = D_80899614; // type:f32 size:0x4
0x80899618 = D_80899618; // type:f32 size:0x4
0x8089961C = D_8089961C; // type:f32 size:0x4
0x80899620 = D_80899620; // type:f32 size:0x4
0x80899624 = D_80899624; // type:f32 size:0x4
0x80899628 = D_80899628; // type:f32 size:0x4
0x8089962C = D_8089962C; // type:f32 size:0x4
0x80899630 = D_80899630; // type:f32 size:0x4
0x80899634 = D_80899634; // type:f32 size:0x4
0x80899638 = D_80899638; // type:f32 size:0x4
0x8089963C = D_8089963C; // type:f32 size:0x4
0x80899640 = D_80899640; // type:f32 size:0x4
0x80899644 = D_80899644; // type:f32 size:0x4
0x80899648 = D_80899648; // type:f32 size:0x4
0x8089964C = D_8089964C; // type:f32 size:0x4
0x80899650 = D_80899650; // type:f32 size:0x4
0x80899654 = D_80899654; // type:f32 size:0x4
0x8089A530 = En_Holl_InitVars; // type:UNK_TYPE1 size:0x1
0x8089A550 = gEnHollCentralPlaneVtx; // type:UNK_TYPE1 size:0x1
0x8089A590 = gEnHollCentralPlaneDL; // type:UNK_TYPE1 size:0x1
0x8089A5B8 = sInstancePlayingSound; // type:UNK_TYPE4 size:0x4
0x8089A5BC = sActionFuncs; // type:UNK_PTR size:0x4
0x8089A5D0 = sInitChain; // type:UNK_TYPE1 size:0x1
0x8089A5DC = sActivationPlaneDistance; // type:f32 size:0x4
0x8089A5E0 = sLoadingPlaneDistance; // type:f32 size:0x4
0x8089A5E4 = sTranslucencyPlaneDistance; // type:f32 size:0x4
0x8089A5E8 = sTransparencyPlaneDistance; // type:f32 size:0x4
0x8089A5F0 = D_8089A5F0; // type:f32 size:0x4
0x8089A5F4 = D_8089A5F4; // type:f32 size:0x4
0x8089E150 = En_Dinofos_InitVars; // type:UNK_TYPE1 size:0x1
0x8089E170 = D_8089E170; // type:UNK_TYPE1 size:0x1
0x8089E2B4 = D_8089E2B4; // type:UNK_TYPE1 size:0x1
0x8089E2C4 = D_8089E2C4; // type:UNK_TYPE1 size:0x1
0x8089E314 = D_8089E314; // type:UNK_TYPE1 size:0x1
0x8089E334 = D_8089E334; // type:UNK_TYPE1 size:0x1
0x8089E33C = D_8089E33C; // type:UNK_TYPE4 size:0x4
0x8089E34C = D_8089E34C; // type:UNK_TYPE2 size:0x2
0x8089E350 = D_8089E350; // type:UNK_TYPE4 size:0x4
0x8089E354 = D_8089E354; // type:UNK_TYPE1 size:0x1
0x8089E364 = D_8089E364; // type:UNK_TYPE4 size:0x4
0x8089E368 = D_8089E368; // type:EffectBlureInit2 size:0x24
0x8089E38C = D_8089E38C; // type:UNK_TYPE1 size:0x1
0x8089E398 = D_8089E398; // type:UNK_TYPE1 size:0x1
0x8089E3A4 = D_8089E3A4; // type:UNK_TYPE1 size:0x1
0x8089E3B0 = D_8089E3B0; // type:UNK_TYPE1 size:0x1
0x8089E3B4 = D_8089E3B4; // type:UNK_TYPE1 size:0x1
0x8089E3B6 = D_8089E3B6; // type:UNK_TYPE1 size:0x1
0x8089E3B7 = D_8089E3B7; // type:UNK_TYPE1 size:0x1
0x8089E3BE = D_8089E3BE; // type:UNK_TYPE1 size:0x1
0x8089E3C0 = D_8089E3C0; // type:UNK_TYPE1 size:0x1
0x8089E3D0 = D_8089E3D0; // type:f32 size:0x4
0x8089E3D4 = D_8089E3D4; // type:f32 size:0x4
0x8089E3D8 = D_8089E3D8; // type:f32 size:0x4
0x8089E3DC = D_8089E3DC; // type:f32 size:0x4
0x8089E3E0 = D_8089E3E0; // type:f32 size:0x4
0x8089E3E4 = D_8089E3E4; // type:f32 size:0x4
0x8089E3E8 = D_8089E3E8; // type:f32 size:0x4
0x8089E3EC = D_8089E3EC; // type:f32 size:0x4
0x8089E3F0 = D_8089E3F0; // type:f32 size:0x4
0x8089E3F4 = D_8089E3F4; // type:f32 size:0x4
0x8089E3F8 = D_8089E3F8; // type:f32 size:0x4
0x8089E3FC = D_8089E3FC; // type:f32 size:0x4
0x8089E400 = D_8089E400; // type:f32 size:0x4
0x8089E404 = D_8089E404; // type:f32 size:0x4
0x8089E408 = D_8089E408; // type:f32 size:0x4
0x8089E40C = D_8089E40C; // type:f32 size:0x4
0x8089E410 = D_8089E410; // type:f32 size:0x4
0x8089E414 = D_8089E414; // type:f32 size:0x4
0x8089E418 = D_8089E418; // type:f32 size:0x4
0x8089E41C = D_8089E41C; // type:f32 size:0x4
0x8089E420 = D_8089E420; // type:f32 size:0x4
0x8089E424 = D_8089E424; // type:f32 size:0x4
0x8089E428 = D_8089E428; // type:f32 size:0x4
0x8089E42C = D_8089E42C; // type:f32 size:0x4
0x8089E430 = D_8089E430; // type:f32 size:0x4
0x8089E434 = D_8089E434; // type:f32 size:0x4
0x8089E438 = D_8089E438; // type:f32 size:0x4
0x8089E43C = D_8089E43C; // type:f32 size:0x4
0x8089E440 = D_8089E440; // type:f32 size:0x4
0x8089E444 = D_8089E444; // type:f32 size:0x4
0x8089E448 = D_8089E448; // type:f32 size:0x4
0x8089E44C = D_8089E44C; // type:f32 size:0x4
0x8089E450 = D_8089E450; // type:f32 size:0x4
0x8089E454 = D_8089E454; // type:f32 size:0x4
0x8089E458 = D_8089E458; // type:f32 size:0x4
0x8089ED10 = En_Hata_InitVars; // type:UNK_TYPE1 size:0x1
0x8089ED30 = D_8089ED30; // type:f32 size:0x4
0x8089ED34 = D_8089ED34; // type:f32 size:0x4
0x8089ED38 = D_8089ED38; // type:f32 size:0x4
0x8089EDD0 = En_Zl1_InitVars; // type:ActorInit size:0x20
0x8089F3E0 = D_8089F3E0; // type:UNK_TYPE1 size:0x1
0x8089F3E4 = D_8089F3E4; // type:UNK_TYPE1 size:0x1
0x8089F3E8 = En_Viewer_InitVars; // type:UNK_TYPE1 size:0x1
0x8089F410 = D_8089F410; // type:f32 size:0x4
0x8089F4D0 = D_8089F4D0; // type:UNK_TYPE1 size:0x1
0x808A06E0 = En_Bubble_InitVars; // type:UNK_TYPE1 size:0x1
0x808A0700 = D_808A0700; // type:UNK_TYPE1 size:0x1
0x808A0748 = D_808A0748; // type:UNK_TYPE1 size:0x1
0x808A0758 = D_808A0758; // type:UNK_TYPE1 size:0x1
0x808A0764 = D_808A0764; // type:UNK_TYPE4 size:0x4
0x808A0770 = D_808A0770; // type:UNK_TYPE1 size:0x1
0x808A0774 = D_808A0774; // type:UNK_TYPE1 size:0x1
0x808A0780 = D_808A0780; // type:f32 size:0x4
0x808A0784 = D_808A0784; // type:f32 size:0x4
0x808A0788 = D_808A0788; // type:f32 size:0x4
0x808A078C = D_808A078C; // type:f32 size:0x4
0x808A0790 = D_808A0790; // type:f32 size:0x4
0x808A0794 = D_808A0794; // type:f32 size:0x4
0x808A0798 = D_808A0798; // type:f32 size:0x4
0x808A079C = D_808A079C; // type:f32 size:0x4
0x808A07A0 = D_808A07A0; // type:f32 size:0x4
0x808A07A4 = D_808A07A4; // type:f32 size:0x4
0x808A07A8 = D_808A07A8; // type:f32 size:0x4
0x808A07AC = D_808A07AC; // type:f32 size:0x4
0x808A07B0 = D_808A07B0; // type:f32 size:0x4
0x808A2160 = Door_Shutter_InitVars; // type:UNK_TYPE1 size:0x1
0x808A2180 = D_808A2180; // type:UNK_TYPE1 size:0x1
0x808A21B0 = D_808A21B0; // type:UNK_PTR size:0x4
0x808A2240 = D_808A2240; // type:UNK_TYPE1 size:0x1
0x808A2248 = D_808A2248; // type:UNK_TYPE1 size:0x1
0x808A2258 = D_808A2258; // type:UNK_TYPE2 size:0x2
0x808A22A0 = D_808A22A0; // type:UNK_TYPE2 size:0x2
0x808A22C4 = D_808A22C4; // type:UNK_TYPE1 size:0x1
0x808A22D0 = D_808A22D0; // type:UNK_TYPE1 size:0x1
0x808A22DC = D_808A22DC; // type:UNK_TYPE1 size:0x1
0x808A22F0 = D_808A22F0; // type:f32 size:0x4
0x808A22F4 = D_808A22F4; // type:f32 size:0x4
0x808A22F8 = D_808A22F8; // type:f32 size:0x4
0x808A22FC = D_808A22FC; // type:f32 size:0x4
0x808A2300 = D_808A2300; // type:f32 size:0x4
0x808A2304 = D_808A2304; // type:f32 size:0x4
0x808A2FF0 = En_Boom_InitVars; // type:UNK_TYPE1 size:0x1
0x808A3010 = sQuadInit; // type:UNK_TYPE1 size:0x1
0x808A3060 = sInitChain; // type:UNK_TYPE1 size:0x1
0x808A3068 = D_808A3068; // type:Color_RGBA8 size:0x4
0x808A306C = D_808A306C; // type:Color_RGBA8 size:0x4
0x808A3070 = D_808A3070; // type:Color_RGBA8 size:0x4
0x808A3074 = D_808A3074; // type:Color_RGBA8 size:0x4
0x808A3078 = D_808A3078; // type:UNK_TYPE4 size:0x4
0x808A30B0 = D_808A30B0; // type:f32 size:0x4
0x808A30B4 = D_808A30B4; // type:f32 size:0x4
0x808A30B8 = D_808A30B8; // type:f32 size:0x4
0x808A30BC = D_808A30BC; // type:f32 size:0x4
0x808A35B0 = En_Torch2_InitVars; // type:UNK_TYPE1 size:0x1
0x808A35D0 = D_808A35D0; // type:UNK_TYPE1 size:0x1
0x808A35FC = D_808A35FC; // type:UNK_TYPE1 size:0x1
0x808A3600 = D_808A3600; // type:UNK_TYPE1 size:0x1
0x808A4D20 = En_Minifrog_InitVars; // type:UNK_TYPE1 size:0x1
0x808A4D40 = D_808A4D40; // type:UNK_TYPE1 size:0x1
0x808A4D6C = D_808A4D6C; // type:UNK_TYPE1 size:0x1
0x808A4D74 = D_808A4D74; // type:UNK_PTR size:0x4
0x808A4D7C = D_808A4D7C; // type:UNK_TYPE1 size:0x1
0x808A4D88 = D_808A4D88; // type:UNK_TYPE4 size:0x4
0x808A4D8C = D_808A4D8C; // type:UNK_TYPE1 size:0x1
0x808A4D90 = D_808A4D90; // type:UNK_TYPE1 size:0x1
0x808A4D94 = D_808A4D94; // type:UNK_TYPE1 size:0x1
0x808A4D98 = D_808A4D98; // type:UNK_TYPE1 size:0x1
0x808A4DB0 = D_808A4DB0; // type:f32 size:0x4
0x808A4DB4 = jtbl_808A4DB4; // type:UNK_PTR size:0x4
0x808A4DD0 = D_808A4DD0; // type:f32 size:0x4
0x808A4DD4 = D_808A4DD4; // type:f32 size:0x4
0x808A4DD8 = jtbl_808A4DD8; // type:UNK_PTR size:0x4
0x808A7590 = En_St_InitVars; // type:UNK_TYPE1 size:0x1
0x808A75B0 = D_808A75B0; // type:UNK_TYPE1 size:0x1
0x808A75DC = D_808A75DC; // type:UNK_PTR size:0x4
0x808A7608 = D_808A7608; // type:UNK_TYPE1 size:0x1
0x808A7634 = D_808A7634; // type:UNK_PTR size:0x4
0x808A7660 = D_808A7660; // type:UNK_TYPE1 size:0x1
0x808A766C = D_808A766C; // type:UNK_TYPE1 size:0x1
0x808A768C = D_808A768C; // type:UNK_PTR size:0x4
0x808A770C = D_808A770C; // type:UNK_TYPE1 size:0x1
0x808A7710 = D_808A7710; // type:UNK_TYPE1 size:0x1
0x808A7714 = D_808A7714; // type:UNK_TYPE1 size:0x1
0x808A7718 = D_808A7718; // type:UNK_TYPE1 size:0x1
0x808A7720 = D_808A7720; // type:f32 size:0x4
0x808A7724 = D_808A7724; // type:f32 size:0x4
0x808A7728 = D_808A7728; // type:f32 size:0x4
0x808A772C = D_808A772C; // type:f32 size:0x4
0x808A7730 = D_808A7730; // type:f32 size:0x4
0x808A7734 = D_808A7734; // type:f32 size:0x4
0x808A7738 = D_808A7738; // type:f32 size:0x4
0x808A773C = D_808A773C; // type:f32 size:0x4
0x808A7740 = D_808A7740; // type:f32 size:0x4
0x808A7744 = D_808A7744; // type:f32 size:0x4
0x808A7748 = D_808A7748; // type:f32 size:0x4
0x808A7DA0 = Obj_Wturn_InitVars; // type:UNK_TYPE1 size:0x1
0x808A7DC0 = D_808A7DC0; // type:UNK_TYPE1 size:0x1
0x808A8040 = En_River_Sound_InitVars; // type:UNK_TYPE1 size:0x1
0x808A8060 = D_808A8060; // type:UNK_TYPE1 size:0x1
0x808AC010 = En_Ossan_InitVars; // type:UNK_TYPE1 size:0x1
0x808AC030 = sAnimationsCuriosityShopMan; // type:UNK_TYPE1 size:0x1
0x808AC100 = sAnimationsPartTimer; // type:UNK_TYPE1 size:0x1
0x808AC1C0 = sObjectIds; // type:UNK_TYPE1 size:0x1
0x808AC1C4 = sAnimations; // type:UNK_TYPE1 size:0x1
0x808AC1CC = sShops; // type:UNK_TYPE1 size:0x1
0x808AC254 = sWelcomeHumanTextIds; // type:UNK_TYPE2 size:0x2
0x808AC258 = sTalkOptionTextIds; // type:UNK_TYPE2 size:0x2
0x808AC25C = sWelcomeGoronFirstTimeTextIds; // type:UNK_TYPE2 size:0x2
0x808AC260 = sWelcomeZoraFirstTimeTextIds; // type:UNK_TYPE2 size:0x2
0x808AC264 = sWelcomeDekuFirstTimeTextIds; // type:UNK_TYPE2 size:0x2
0x808AC268 = sWelcomeGoronTextIds; // type:UNK_TYPE2 size:0x2
0x808AC26C = sWelcomeZoraTextIds; // type:UNK_TYPE2 size:0x2
0x808AC270 = sWelcomeDekuTextIds; // type:UNK_TYPE2 size:0x2
0x808AC274 = sNeedEmptyBottleTextIds; // type:UNK_TYPE1 size:0x1
0x808AC278 = sNeedRupeesTextIds; // type:UNK_TYPE1 size:0x1
0x808AC27C = sNoRoomTextIds; // type:UNK_TYPE1 size:0x1
0x808AC280 = sBuySuccessTextIds; // type:UNK_TYPE1 size:0x1
0x808AC284 = sCannotGetNowTextIds; // type:UNK_TYPE1 size:0x1
0x808AC288 = sInitChain; // type:UNK_TYPE1 size:0x1
0x808AC28C = sSelectedItemPosition; // type:UNK_TYPE4 size:0x4
0x808AC2A4 = sInitFuncs; // type:UNK_TYPE1 size:0x1
0x808AC2AC = sPartTimerFocusOffset; // type:UNK_TYPE1 size:0x1
0x808AC2B8 = sCuriosityShopManEyeTextures; // type:UNK_TYPE1 size:0x1
0x808AC2C4 = sPartTimerEyeTextures; // type:UNK_TYPE1 size:0x1
0x808AC2D0 = filename1; // type:char size:0x1
0x808AC2E0 = filename2; // type:char size:0x1
0x808AC2F0 = filename3; // type:char size:0x1
0x808AC300 = jtbl_D_808AC300; // type:UNK_PTR size:0x4
0x808AC32C = jtbl_D_808AC32C; // type:UNK_PTR size:0x4
0x808AC34C = D_808AC34C; // type:f32 size:0x4
0x808AC350 = D_808AC350; // type:f32 size:0x4
0x808AC354 = D_808AC354; // type:f32 size:0x4
0x808AC358 = D_808AC358; // type:f32 size:0x4
0x808AC35C = D_808AC35C; // type:f32 size:0x4
0x808AC360 = D_808AC360; // type:f32 size:0x4
0x808AC364 = D_808AC364; // type:f32 size:0x4
0x808AC368 = jtbl_808AC368; // type:UNK_PTR size:0x4
0x808AE5E0 = En_Famos_InitVars; // type:UNK_TYPE1 size:0x1
0x808AE600 = D_808AE600; // type:UNK_TYPE1 size:0x1
0x808AE62C = D_808AE62C; // type:UNK_TYPE1 size:0x1
0x808AE658 = D_808AE658; // type:UNK_TYPE1 size:0x1
0x808AE6A0 = D_808AE6A0; // type:UNK_TYPE1 size:0x1
0x808AE6B0 = D_808AE6B0; // type:UNK_TYPE4 size:0x4
0x808AE6B8 = D_808AE6B8; // type:UNK_TYPE1 size:0x1
0x808AE6C0 = D_808AE6C0; // type:UNK_TYPE4 size:0x4
0x808AE6D0 = D_808AE6D0; // type:f32 size:0x4
0x808AE6D4 = D_808AE6D4; // type:f32 size:0x4
0x808AE6D8 = D_808AE6D8; // type:f32 size:0x4
0x808AE6DC = D_808AE6DC; // type:f32 size:0x4
0x808AE6E0 = D_808AE6E0; // type:f32 size:0x4
0x808AFB00 = En_Bombf_InitVars; // type:UNK_TYPE1 size:0x1
0x808AFB20 = D_808AFB20; // type:UNK_TYPE1 size:0x1
0x808AFB4C = D_808AFB4C; // type:UNK_TYPE1 size:0x1
0x808AFB70 = D_808AFB70; // type:UNK_TYPE1 size:0x1
0x808AFB80 = D_808AFB80; // type:UNK_TYPE4 size:0x4
0x808AFB8C = D_808AFB8C; // type:UNK_TYPE4 size:0x4
0x808AFB98 = D_808AFB98; // type:UNK_TYPE4 size:0x4
0x808AFBA4 = D_808AFBA4; // type:UNK_TYPE4 size:0x4
0x808AFBB0 = D_808AFBB0; // type:UNK_TYPE4 size:0x4
0x808AFBC0 = D_808AFBC0; // type:f32 size:0x4
0x808AFBC4 = D_808AFBC4; // type:f32 size:0x4
0x808AFBC8 = D_808AFBC8; // type:f32 size:0x4
0x808AFBCC = D_808AFBCC; // type:f32 size:0x4
0x808AFBD0 = D_808AFBD0; // type:f32 size:0x4
0x808AFBD4 = D_808AFBD4; // type:f32 size:0x4
0x808AFBD8 = D_808AFBD8; // type:f32 size:0x4
0x808B1050 = En_Am_InitVars; // type:UNK_TYPE1 size:0x1
0x808B1070 = D_808B1070; // type:UNK_TYPE1 size:0x1
0x808B109C = D_808B109C; // type:UNK_TYPE1 size:0x1
0x808B10C8 = D_808B10C8; // type:UNK_TYPE1 size:0x1
0x808B10E8 = D_808B10E8; // type:UNK_TYPE1 size:0x1
0x808B10F0 = D_808B10F0; // type:UNK_TYPE1 size:0x1
0x808B1100 = D_808B1100; // type:UNK_TYPE1 size:0x1
0x808B110C = D_808B110C; // type:UNK_TYPE1 size:0x1
0x808B1118 = D_808B1118; // type:UNK_TYPE1 size:0x1
0x808B111C = D_808B111C; // type:UNK_TYPE1 size:0x1
0x808B1120 = D_808B1120; // type:UNK_TYPE1 size:0x1
0x808B1124 = D_808B1124; // type:UNK_TYPE1 size:0x1
0x808B1128 = D_808B1128; // type:UNK_TYPE1 size:0x1
0x808B1164 = D_808B1164; // type:UNK_TYPE1 size:0x1
0x808B117C = D_808B117C; // type:UNK_TYPE1 size:0x1
0x808B11B0 = D_808B11B0; // type:f32 size:0x4
0x808B11B4 = D_808B11B4; // type:f32 size:0x4
0x808B11B8 = D_808B11B8; // type:f32 size:0x4
0x808B4D40 = En_Dekubaba_InitVars; // type:ActorInit size:0x20
0x808B4D60 = sJntSphElementsInit; // type:ColliderJntSphElementInit size:0xFC
0x808B4E5C = sJntSphInit; // type:ColliderJntSphInit size:0x10
0x808B4E6C = sColChkInfoInit; // type:CollisionCheckInfoInit size:0x4
0x808B4E74 = sDamageTable; // type:DamageTable size:0x20
0x808B4E94 = sInitChain; // type:InitChainEntry size:0x4
0x808B4E98 = sDustPrimColor; // type:Color_RGBA8 size:0x4
0x808B4E9C = sDustEnvColor; // type:Color_RGBA8 size:0x4
0x808B4EA0 = sStemDLists; // type:Gfx* size:0xC
0x808B4EB0 = D_808B4EB0; // type:f32 size:0x4
0x808B4EB4 = D_808B4EB4; // type:f32 size:0x4
0x808B4EB8 = D_808B4EB8; // type:f32 size:0x4
0x808B4EBC = D_808B4EBC; // type:f32 size:0x4
0x808B4EC0 = D_808B4EC0; // type:f32 size:0x4
0x808B4EC4 = D_808B4EC4; // type:f32 size:0x4
0x808B4EC8 = D_808B4EC8; // type:f32 size:0x4
0x808B4ECC = D_808B4ECC; // type:f32 size:0x4
0x808B4ED0 = D_808B4ED0; // type:f32 size:0x4
0x808B4ED4 = D_808B4ED4; // type:f32 size:0x4
0x808B4ED8 = D_808B4ED8; // type:f32 size:0x4
0x808B4EDC = D_808B4EDC; // type:f32 size:0x4
0x808B4EE0 = D_808B4EE0; // type:f32 size:0x4
0x808B4EE4 = D_808B4EE4; // type:f32 size:0x4
0x808B4EE8 = D_808B4EE8; // type:f32 size:0x4
0x808B4EEC = D_808B4EEC; // type:f32 size:0x4
0x808B4EF0 = D_808B4EF0; // type:f32 size:0x4
0x808B4EF4 = D_808B4EF4; // type:f32 size:0x4
0x808B4EF8 = D_808B4EF8; // type:f32 size:0x4
0x808B4EFC = D_808B4EFC; // type:f32 size:0x4
0x808B4F00 = D_808B4F00; // type:f32 size:0x4
0x808B4F04 = D_808B4F04; // type:f32 size:0x4
0x808B4F08 = D_808B4F08; // type:f32 size:0x4
0x808B4F0C = D_808B4F0C; // type:f32 size:0x4
0x808B4F10 = D_808B4F10; // type:f32 size:0x4
0x808B5340 = En_M_Fire1_InitVars; // type:UNK_TYPE1 size:0x1
0x808B5360 = D_808B5360; // type:UNK_TYPE1 size:0x1
0x808B7100 = En_M_Thunder_InitVars; // type:UNK_TYPE1 size:0x1
0x808B7120 = D_808B7120; // type:UNK_TYPE1 size:0x1
0x808B714C = D_808B714C; // type:UNK_TYPE1 size:0x1
0x808B7150 = D_808B7150; // type:UNK_TYPE1 size:0x1
0x808B7154 = D_808B7154; // type:UNK_TYPE1 size:0x1
0x808B715C = D_808B715C; // type:UNK_TYPE1 size:0x1
0x808B7180 = D_808B7180; // type:f32 size:0x4
0x808B7184 = D_808B7184; // type:f32 size:0x4
0x808B7188 = D_808B7188; // type:f32 size:0x4
0x808B718C = D_808B718C; // type:f32 size:0x4
0x808B7190 = D_808B7190; // type:f32 size:0x4
0x808B7194 = D_808B7194; // type:f32 size:0x4
0x808B7198 = D_808B7198; // type:f32 size:0x4
0x808B719C = D_808B719C; // type:f32 size:0x4
0x808B71A0 = D_808B71A0; // type:f32 size:0x4
0x808B71A4 = D_808B71A4; // type:f32 size:0x4
0x808B71A8 = D_808B71A8; // type:f32 size:0x4
0x808B71AC = D_808B71AC; // type:f32 size:0x4
0x808B71B0 = D_808B71B0; // type:f32 size:0x4
0x808B71B4 = D_808B71B4; // type:f32 size:0x4
0x808B71B8 = D_808B71B8; // type:f32 size:0x4
0x808B71BC = D_808B71BC; // type:f32 size:0x4
0x808B71C0 = D_808B71C0; // type:f32 size:0x4
0x808B71C4 = D_808B71C4; // type:f32 size:0x4
0x808B71C8 = D_808B71C8; // type:f32 size:0x4
0x808B71CC = D_808B71CC; // type:f32 size:0x4
0x808B71D0 = D_808B71D0; // type:f32 size:0x4
0x808B71D4 = D_808B71D4; // type:f32 size:0x4
0x808B71D8 = D_808B71D8; // type:f32 size:0x4
0x808B8120 = Bg_Breakwall_InitVars; // type:UNK_TYPE1 size:0x1
0x808B8140 = D_808B8140; // type:UNK_TYPE1 size:0x1
0x808B82E0 = D_808B82E0; // type:UNK_TYPE1 size:0x1
0x808B82F0 = D_808B82F0; // type:UNK_TYPE1 size:0x1
0x808B8300 = D_808B8300; // type:UNK_TYPE1 size:0x1
0x808B8310 = D_808B8310; // type:UNK_TYPE1 size:0x1
0x808B8320 = D_808B8320; // type:UNK_TYPE1 size:0x1
0x808B8330 = D_808B8330; // type:UNK_TYPE1 size:0x1
0x808B8340 = D_808B8340; // type:UNK_TYPE1 size:0x1
0x808B8350 = D_808B8350; // type:f32 size:0x4
0x808B8354 = D_808B8354; // type:f32 size:0x4
0x808B8358 = D_808B8358; // type:f32 size:0x4
0x808BBB20 = Door_Warp1_InitVars; // type:UNK_TYPE1 size:0x1
0x808BBB40 = D_808BBB40; // type:UNK_TYPE1 size:0x1
0x808BBB50 = D_808BBB50; // type:UNK_TYPE4 size:0x4
0x808BBB5C = D_808BBB5C; // type:Vec3f size:0xC
0x808BBB68 = D_808BBB68; // type:Vec3f size:0xC
0x808BBB80 = jtbl_808BBB80; // type:UNK_PTR size:0x4
0x808BBB98 = jtbl_808BBB98; // type:UNK_PTR size:0x4
0x808BBBB4 = D_808BBBB4; // type:f32 size:0x4
0x808BBBB8 = D_808BBBB8; // type:f32 size:0x4
0x808BBBBC = D_808BBBBC; // type:f32 size:0x4
0x808BBBC0 = D_808BBBC0; // type:f32 size:0x4
0x808BBBC4 = D_808BBBC4; // type:f32 size:0x4
0x808BBBC8 = D_808BBBC8; // type:f32 size:0x4
0x808BBBCC = D_808BBBCC; // type:f32 size:0x4
0x808BBBD0 = D_808BBBD0; // type:f32 size:0x4
0x808BBBD4 = D_808BBBD4; // type:f32 size:0x4
0x808BBBD8 = D_808BBBD8; // type:f32 size:0x4
0x808BBBDC = D_808BBBDC; // type:f32 size:0x4
0x808BBBE0 = D_808BBBE0; // type:f32 size:0x4
0x808BBBE4 = D_808BBBE4; // type:f32 size:0x4
0x808BBBE8 = D_808BBBE8; // type:f32 size:0x4
0x808BBBEC = D_808BBBEC; // type:f32 size:0x4
0x808BBBF0 = D_808BBBF0; // type:f32 size:0x4
0x808BBBF4 = D_808BBBF4; // type:f32 size:0x4
0x808BBBF8 = jtbl_808BBBF8; // type:UNK_PTR size:0x4
0x808BBC0C = D_808BBC0C; // type:f32 size:0x4
0x808BBC10 = D_808BBC10; // type:f32 size:0x4
0x808BBC14 = D_808BBC14; // type:f32 size:0x4
0x808BBC18 = D_808BBC18; // type:f32 size:0x4
0x808BBC1C = D_808BBC1C; // type:f32 size:0x4
0x808BBC20 = D_808BBC20; // type:f32 size:0x4
0x808BBC24 = D_808BBC24; // type:f32 size:0x4
0x808BBC28 = D_808BBC28; // type:f32 size:0x4
0x808BBC2C = D_808BBC2C; // type:f32 size:0x4
0x808BBC30 = jtbl_808BBC30; // type:UNK_PTR size:0x4
0x808BBC4C = D_808BBC4C; // type:f32 size:0x4
0x808BC000 = D_808BC000; // type:UNK_TYPE1 size:0x1
0x808BC004 = D_808BC004; // type:UNK_TYPE1 size:0x1
0x808BCCA0 = Obj_Syokudai_InitVars; // type:UNK_TYPE1 size:0x1
0x808BCCC0 = sStandColliderInit; // type:UNK_TYPE1 size:0x1
0x808BCCEC = sFlameColliderInit; // type:UNK_TYPE1 size:0x1
0x808BCD18 = sInitChain; // type:UNK_TYPE1 size:0x1
0x808BCD28 = sColTypes; // type:UNK_TYPE1 size:0x1
0x808BCD2C = sDLists; // type:UNK_TYPE1 size:0x1
0x808BCD40 = D_808BCD40; // type:f32 size:0x4
0x808BCD44 = D_808BCD44; // type:f32 size:0x4
0x808BCDE0 = sNumLitTorchesInGroup; // type:UNK_TYPE1 size:0x1
0x808BD160 = Item_B_Heart_InitVars; // type:UNK_TYPE1 size:0x1
0x808BD180 = D_808BD180; // type:UNK_TYPE1 size:0x1
0x808BD190 = D_808BD190; // type:f32 size:0x4
0x808BEF10 = En_Dekunuts_InitVars; // type:UNK_TYPE1 size:0x1
0x808BEF30 = D_808BEF30; // type:UNK_TYPE1 size:0x1
0x808BEF5C = D_808BEF5C; // type:UNK_TYPE1 size:0x1
0x808BEF64 = D_808BEF64; // type:UNK_TYPE1 size:0x1
0x808BEF84 = D_808BEF84; // type:UNK_TYPE1 size:0x1
0x808BEF90 = D_808BEF90; // type:UNK_TYPE1 size:0x1
0x808BEF94 = D_808BEF94; // type:UNK_TYPE1 size:0x1
0x808BEF98 = D_808BEF98; // type:UNK_TYPE1 size:0x1
0x808BEF9A = D_808BEF9A; // type:UNK_TYPE1 size:0x1
0x808BEFA4 = D_808BEFA4; // type:UNK_TYPE1 size:0x1
0x808BEFE0 = D_808BEFE0; // type:f32 size:0x4
0x808BEFE4 = D_808BEFE4; // type:f32 size:0x4
0x808BEFE8 = D_808BEFE8; // type:f32 size:0x4
0x808BEFEC = D_808BEFEC; // type:f32 size:0x4
0x808BEFF0 = D_808BEFF0; // type:f32 size:0x4
0x808BEFF4 = D_808BEFF4; // type:f32 size:0x4
0x808BEFF8 = D_808BEFF8; // type:f32 size:0x4
0x808BEFFC = D_808BEFFC; // type:f32 size:0x4
0x808BF000 = D_808BF000; // type:f32 size:0x4
0x808BF004 = D_808BF004; // type:f32 size:0x4
0x808BF008 = D_808BF008; // type:f32 size:0x4
0x808BF00C = D_808BF00C; // type:f32 size:0x4
0x808BF010 = D_808BF010; // type:f32 size:0x4
0x808BF014 = D_808BF014; // type:f32 size:0x4
0x808BF018 = D_808BF018; // type:f32 size:0x4
0x808C0D10 = En_Bbfall_InitVars; // type:UNK_TYPE1 size:0x1
0x808C0D30 = D_808C0D30; // type:UNK_TYPE1 size:0x1
0x808C0D9C = D_808C0D9C; // type:UNK_TYPE1 size:0x1
0x808C0DAC = D_808C0DAC; // type:UNK_TYPE1 size:0x1
0x808C0DCC = D_808C0DCC; // type:UNK_TYPE1 size:0x1
0x808C0DD4 = D_808C0DD4; // type:UNK_TYPE1 size:0x1
0x808C0DDC = D_808C0DDC; // type:UNK_TYPE1 size:0x1
0x808C0DEA = D_808C0DEA; // type:UNK_TYPE1 size:0x1
0x808C0DEB = D_808C0DEB; // type:UNK_TYPE1 size:0x1
0x808C0DEC = D_808C0DEC; // type:UNK_TYPE1 size:0x1
0x808C0E00 = D_808C0E00; // type:f32 size:0x4
0x808C0E04 = D_808C0E04; // type:f32 size:0x4
0x808C0E08 = D_808C0E08; // type:f32 size:0x4
0x808C0E0C = D_808C0E0C; // type:f32 size:0x4
0x808C0E10 = D_808C0E10; // type:f32 size:0x4
0x808C0E14 = D_808C0E14; // type:f32 size:0x4
0x808C0E18 = D_808C0E18; // type:f32 size:0x4
0x808C0E1C = D_808C0E1C; // type:f32 size:0x4
0x808C0E20 = D_808C0E20; // type:f32 size:0x4
0x808C0E24 = D_808C0E24; // type:f32 size:0x4
0x808C0E28 = D_808C0E28; // type:f32 size:0x4
0x808C0E2C = D_808C0E2C; // type:f32 size:0x4
0x808C0E30 = D_808C0E30; // type:f32 size:0x4
0x808C0E34 = D_808C0E34; // type:f32 size:0x4
0x808C0E38 = D_808C0E38; // type:f32 size:0x4
0x808C0E3C = D_808C0E3C; // type:f32 size:0x4
0x808C0E40 = D_808C0E40; // type:f32 size:0x4
0x808C1BA0 = Arms_Hook_InitVars; // type:UNK_TYPE1 size:0x1
0x808C1BC0 = D_808C1BC0; // type:UNK_TYPE1 size:0x1
0x808C1C10 = D_808C1C10; // type:UNK_TYPE1 size:0x1
0x808C1C1C = D_808C1C1C; // type:UNK_TYPE1 size:0x1
0x808C1C28 = D_808C1C28; // type:UNK_TYPE1 size:0x1
0x808C1C34 = D_808C1C34; // type:UNK_TYPE1 size:0x1
0x808C1C40 = D_808C1C40; // type:UNK_TYPE1 size:0x1
0x808C1C4C = D_808C1C4C; // type:UNK_TYPE1 size:0x1
0x808C1C60 = D_808C1C60; // type:f32 size:0x4
0x808C1C64 = D_808C1C64; // type:f32 size:0x4
0x808C1C68 = D_808C1C68; // type:f32 size:0x4
0x808C3780 = En_Bb_InitVars; // type:UNK_TYPE1 size:0x1
0x808C37A0 = D_808C37A0; // type:UNK_TYPE1 size:0x1
0x808C37CC = D_808C37CC; // type:UNK_TYPE1 size:0x1
0x808C37EC = D_808C37EC; // type:UNK_TYPE1 size:0x1
0x808C37F4 = D_808C37F4; // type:UNK_TYPE1 size:0x1
0x808C37FC = D_808C37FC; // type:UNK_TYPE1 size:0x1
0x808C380A = D_808C380A; // type:UNK_TYPE1 size:0x1
0x808C380B = D_808C380B; // type:UNK_TYPE1 size:0x1
0x808C380C = D_808C380C; // type:UNK_TYPE1 size:0x1
0x808C3820 = D_808C3820; // type:f32 size:0x4
0x808C3824 = D_808C3824; // type:f32 size:0x4
0x808C3828 = D_808C3828; // type:f32 size:0x4
0x808C382C = D_808C382C; // type:f32 size:0x4
0x808C3830 = D_808C3830; // type:f32 size:0x4
0x808C3834 = D_808C3834; // type:f32 size:0x4
0x808C3838 = D_808C3838; // type:f32 size:0x4
0x808C383C = D_808C383C; // type:f32 size:0x4
0x808C3840 = D_808C3840; // type:f32 size:0x4
0x808C3844 = D_808C3844; // type:f32 size:0x4
0x808C3848 = D_808C3848; // type:f32 size:0x4
0x808C384C = D_808C384C; // type:f32 size:0x4
0x808C3850 = D_808C3850; // type:f32 size:0x4
0x808C3854 = D_808C3854; // type:f32 size:0x4
0x808C3858 = D_808C3858; // type:f32 size:0x4
0x808C385C = D_808C385C; // type:f32 size:0x4
0x808C3860 = D_808C3860; // type:f32 size:0x4
0x808C3BA0 = Bg_Keikoku_Spr_InitVars; // type:UNK_TYPE1 size:0x1
0x808C3BC0 = D_808C3BC0; // type:UNK_TYPE1 size:0x1
0x808C4CE0 = En_Wood02_InitVars; // type:UNK_TYPE1 size:0x1
0x808C4D00 = D_808C4D00; // type:UNK_TYPE1 size:0x1
0x808C4D2C = D_808C4D2C; // type:UNK_TYPE1 size:0x1
0x808C4D44 = D_808C4D44; // type:UNK_TYPE1 size:0x1
0x808C4D4E = D_808C4D4E; // type:UNK_TYPE2 size:0x2
0x808C4D50 = D_808C4D50; // type:UNK_TYPE1 size:0x1
0x808C4D54 = D_808C4D54; // type:UNK_TYPE1 size:0x1
0x808C4D70 = D_808C4D70; // type:UNK_TYPE1 size:0x1
0x808C4DA0 = jtbl_808C4DA0; // type:UNK_PTR size:0x4
0x808C4E0C = D_808C4E0C; // type:f32 size:0x4
0x808C4E10 = D_808C4E10; // type:f32 size:0x4
0x808C4E14 = D_808C4E14; // type:f32 size:0x4
0x808C4E18 = D_808C4E18; // type:UNK_TYPE1 size:0x1
0x808C4F70 = D_808C4F70; // type:f32 size:0x4
0x808C4F74 = D_808C4F74; // type:UNK_TYPE1 size:0x1
0x808C98C0 = En_Death_InitVars; // type:UNK_TYPE1 size:0x1
0x808C98E0 = D_808C98E0; // type:UNK_TYPE1 size:0x1
0x808C990C = D_808C990C; // type:UNK_TYPE1 size:0x1
0x808C9938 = D_808C9938; // type:UNK_TYPE1 size:0x1
0x808C99B0 = D_808C99B0; // type:UNK_TYPE1 size:0x1
0x808C99C0 = D_808C99C0; // type:UNK_TYPE1 size:0x1
0x808C9A10 = D_808C9A10; // type:UNK_TYPE1 size:0x1
0x808C9A30 = D_808C9A30; // type:UNK_TYPE1 size:0x1
0x808C9A3C = D_808C9A3C; // type:EffectBlureInit2 size:0x24
0x808C9A60 = D_808C9A60; // type:UNK_TYPE1 size:0x1
0x808C9A70 = D_808C9A70; // type:UNK_TYPE1 size:0x1
0x808C9A7C = D_808C9A7C; // type:UNK_TYPE1 size:0x1
0x808C9A88 = D_808C9A88; // type:UNK_TYPE1 size:0x1
0x808C9A8C = D_808C9A8C; // type:UNK_TYPE1 size:0x1
0x808C9A90 = D_808C9A90; // type:UNK_TYPE2 size:0x2
0x808C9ABC = D_808C9ABC; // type:UNK_TYPE1 size:0x1
0x808C9AC0 = D_808C9AC0; // type:f32 size:0x4
0x808C9AC8 = D_808C9AC8; // type:UNK_TYPE1 size:0x1
0x808C9ACC = D_808C9ACC; // type:UNK_TYPE1 size:0x1
0x808C9AD0 = D_808C9AD0; // type:UNK_TYPE4 size:0x4
0x808C9AF4 = D_808C9AF4; // type:UNK_TYPE1 size:0x1
0x808C9B00 = D_808C9B00; // type:UNK_TYPE1 size:0x1
0x808C9B0C = D_808C9B0C; // type:UNK_TYPE1 size:0x1
0x808C9B48 = D_808C9B48; // type:UNK_TYPE1 size:0x1
0x808C9B60 = D_808C9B60; // type:f32 size:0x4
0x808C9B64 = D_808C9B64; // type:f32 size:0x4
0x808C9B68 = D_808C9B68; // type:f32 size:0x4
0x808C9B6C = D_808C9B6C; // type:f32 size:0x4
0x808C9B70 = D_808C9B70; // type:f32 size:0x4
0x808C9B74 = D_808C9B74; // type:f32 size:0x4
0x808C9B78 = D_808C9B78; // type:f32 size:0x4
0x808C9B7C = D_808C9B7C; // type:f32 size:0x4
0x808C9B80 = D_808C9B80; // type:f32 size:0x4
0x808C9B84 = D_808C9B84; // type:f32 size:0x4
0x808C9B88 = D_808C9B88; // type:f32 size:0x4
0x808C9B8C = D_808C9B8C; // type:f32 size:0x4
0x808C9B90 = D_808C9B90; // type:f32 size:0x4
0x808C9B94 = D_808C9B94; // type:f32 size:0x4
0x808C9B98 = D_808C9B98; // type:f32 size:0x4
0x808C9B9C = D_808C9B9C; // type:f32 size:0x4
0x808C9BA0 = D_808C9BA0; // type:f32 size:0x4
0x808C9BA4 = D_808C9BA4; // type:f32 size:0x4
0x808C9BA8 = D_808C9BA8; // type:f32 size:0x4
0x808C9BAC = D_808C9BAC; // type:f32 size:0x4
0x808C9BB0 = D_808C9BB0; // type:f32 size:0x4
0x808C9BB4 = D_808C9BB4; // type:f32 size:0x4
0x808C9BB8 = D_808C9BB8; // type:f32 size:0x4
0x808C9BBC = D_808C9BBC; // type:f32 size:0x4
0x808C9BC0 = D_808C9BC0; // type:f32 size:0x4
0x808C9BC4 = D_808C9BC4; // type:f32 size:0x4
0x808C9BC8 = D_808C9BC8; // type:f32 size:0x4
0x808C9BCC = D_808C9BCC; // type:f32 size:0x4
0x808C9BD0 = D_808C9BD0; // type:f32 size:0x4
0x808C9BD4 = D_808C9BD4; // type:f32 size:0x4
0x808C9BD8 = D_808C9BD8; // type:f32 size:0x4
0x808C9BDC = D_808C9BDC; // type:f32 size:0x4
0x808C9BE0 = D_808C9BE0; // type:f32 size:0x4
0x808C9BE4 = D_808C9BE4; // type:f32 size:0x4
0x808C9BE8 = D_808C9BE8; // type:f32 size:0x4
0x808C9BEC = D_808C9BEC; // type:f32 size:0x4
0x808C9BF0 = D_808C9BF0; // type:f32 size:0x4
0x808C9BF4 = D_808C9BF4; // type:f32 size:0x4
0x808C9BF8 = D_808C9BF8; // type:f32 size:0x4
0x808C9BFC = D_808C9BFC; // type:f32 size:0x4
0x808C9C00 = D_808C9C00; // type:f32 size:0x4
0x808C9C04 = D_808C9C04; // type:f32 size:0x4
0x808C9C08 = D_808C9C08; // type:f32 size:0x4
0x808CBF30 = En_Minideath_InitVars; // type:UNK_TYPE1 size:0x1
0x808CBF50 = D_808CBF50; // type:UNK_TYPE1 size:0x1
0x808CBFBC = D_808CBFBC; // type:UNK_TYPE1 size:0x1
0x808CBFCC = D_808CBFCC; // type:UNK_TYPE1 size:0x1
0x808CBFEC = D_808CBFEC; // type:UNK_TYPE1 size:0x1
0x808CBFF4 = D_808CBFF4; // type:UNK_TYPE1 size:0x1
0x808CC000 = D_808CC000; // type:f32 size:0x4
0x808CC004 = D_808CC004; // type:f32 size:0x4
0x808CC250 = D_808CC250; // type:UNK_TYPE1 size:0x1
0x808CC254 = D_808CC254; // type:UNK_TYPE1 size:0x1
0x808CC258 = D_808CC258; // type:UNK_TYPE1 size:0x1
0x808CC25C = D_808CC25C; // type:UNK_TYPE1 size:0x1
0x808CD4A0 = En_Vm_InitVars; // type:UNK_TYPE1 size:0x1
0x808CD4C0 = D_808CD4C0; // type:UNK_TYPE1 size:0x1
0x808CD508 = D_808CD508; // type:UNK_TYPE1 size:0x1
0x808CD518 = D_808CD518; // type:UNK_TYPE1 size:0x1
0x808CD554 = D_808CD554; // type:UNK_TYPE1 size:0x1
0x808CD564 = D_808CD564; // type:UNK_TYPE1 size:0x1
0x808CD584 = D_808CD584; // type:UNK_TYPE1 size:0x1
0x808CD58C = D_808CD58C; // type:UNK_TYPE4 size:0x4
0x808CD5AC = D_808CD5AC; // type:UNK_TYPE1 size:0x1
0x808CD5B8 = D_808CD5B8; // type:UNK_TYPE4 size:0x4
0x808CD5BC = D_808CD5BC; // type:UNK_TYPE1 size:0x1
0x808CD5C0 = D_808CD5C0; // type:UNK_TYPE1 size:0x1
0x808CD5D0 = D_808CD5D0; // type:f32 size:0x4
0x808CD5D4 = D_808CD5D4; // type:f32 size:0x4
0x808CD5D8 = D_808CD5D8; // type:f32 size:0x4
0x808CD5DC = D_808CD5DC; // type:f32 size:0x4
0x808CD5E0 = D_808CD5E0; // type:f32 size:0x4
0x808CD5E4 = D_808CD5E4; // type:f32 size:0x4
0x808CD5E8 = D_808CD5E8; // type:f32 size:0x4
0x808CE290 = Demo_Effect_InitVars; // type:UNK_TYPE1 size:0x1
0x808CE2B0 = D_808CE2B0; // type:UNK_TYPE4 size:0x4
0x808CE2C0 = sEffectTypeObjects; // type:s16 size:0x12
0x808CE2D4 = sAlphaTypes; // type:u8 size:0x15
0x808CE2F0 = jtbl_808CE2F0; // type:UNK_PTR size:0x4
0x808CE314 = D_808CE314; // type:f32 size:0x4
0x808CE318 = D_808CE318; // type:f32 size:0x4
0x808CE31C = D_808CE31C; // type:f32 size:0x4
0x808CE320 = D_808CE320; // type:f32 size:0x4
0x808CE324 = D_808CE324; // type:f32 size:0x4
0x808CE328 = D_808CE328; // type:f32 size:0x4
0x808CE32C = D_808CE32C; // type:f32 size:0x4
0x808CE330 = D_808CE330; // type:f32 size:0x4
0x808CE334 = D_808CE334; // type:f32 size:0x4
0x808D03C0 = D_808D03C0; // type:UNK_TYPE1 size:0x1
0x808D03C4 = D_808D03C4; // type:UNK_TYPE2 size:0x2
0x808D03C8 = Demo_Kankyo_InitVars; // type:UNK_TYPE1 size:0x1
0x808D03E8 = D_808D03E8; // type:UNK_TYPE2 size:0x2
0x808D03EA = D_808D03EA; // type:UNK_TYPE2 size:0x2
0x808D03F0 = D_808D03F0; // type:f32 size:0x4
0x808D03F4 = D_808D03F4; // type:f32 size:0x4
0x808D03F8 = D_808D03F8; // type:f32 size:0x4
0x808D03FC = D_808D03FC; // type:f32 size:0x4
0x808D0400 = D_808D0400; // type:f32 size:0x4
0x808D0404 = D_808D0404; // type:f32 size:0x4
0x808D0408 = D_808D0408; // type:f32 size:0x4
0x808D040C = D_808D040C; // type:f32 size:0x4
0x808D0410 = D_808D0410; // type:f32 size:0x4
0x808D0414 = D_808D0414; // type:f32 size:0x4
0x808D0418 = D_808D0418; // type:f32 size:0x4
0x808D041C = D_808D041C; // type:f32 size:0x4
0x808D0420 = D_808D0420; // type:f32 size:0x4
0x808D0424 = D_808D0424; // type:f32 size:0x4
0x808D0428 = D_808D0428; // type:f32 size:0x4
0x808D042C = D_808D042C; // type:f32 size:0x4
0x808D0430 = D_808D0430; // type:f32 size:0x4
0x808D0434 = D_808D0434; // type:f32 size:0x4
0x808D0438 = D_808D0438; // type:f32 size:0x4
0x808D043C = D_808D043C; // type:f32 size:0x4
0x808D0440 = D_808D0440; // type:f32 size:0x4
0x808D0444 = D_808D0444; // type:f32 size:0x4
0x808D0448 = D_808D0448; // type:f32 size:0x4
0x808D044C = D_808D044C; // type:f32 size:0x4
0x808D0450 = D_808D0450; // type:f32 size:0x4
0x808D0454 = D_808D0454; // type:f32 size:0x4
0x808D0458 = D_808D0458; // type:f32 size:0x4
0x808D045C = D_808D045C; // type:f32 size:0x4
0x808D0460 = D_808D0460; // type:f32 size:0x4
0x808D0464 = D_808D0464; // type:f32 size:0x4
0x808D0468 = D_808D0468; // type:f32 size:0x4
0x808D046C = D_808D046C; // type:f32 size:0x4
0x808D0470 = D_808D0470; // type:f32 size:0x4
0x808D0474 = D_808D0474; // type:f32 size:0x4
0x808D0478 = D_808D0478; // type:f32 size:0x4
0x808D047C = D_808D047C; // type:f32 size:0x4
0x808D0480 = D_808D0480; // type:f32 size:0x4
0x808D0484 = D_808D0484; // type:f32 size:0x4
0x808D0488 = D_808D0488; // type:f32 size:0x4
0x808D048C = D_808D048C; // type:f32 size:0x4
0x808D0490 = D_808D0490; // type:f32 size:0x4
0x808D0494 = D_808D0494; // type:f32 size:0x4
0x808D0498 = D_808D0498; // type:f32 size:0x4
0x808D3880 = En_Floormas_InitVars; // type:UNK_TYPE1 size:0x1
0x808D38A0 = D_808D38A0; // type:UNK_TYPE1 size:0x1
0x808D38CC = D_808D38CC; // type:UNK_TYPE1 size:0x1
0x808D38D4 = D_808D38D4; // type:UNK_TYPE1 size:0x1
0x808D38F4 = D_808D38F4; // type:UNK_TYPE1 size:0x1
0x808D3900 = D_808D3900; // type:UNK_TYPE4 size:0x4
0x808D393C = D_808D393C; // type:UNK_TYPE1 size:0x1
0x808D393E = D_808D393E; // type:UNK_TYPE1 size:0x1
0x808D394E = D_808D394E; // type:UNK_TYPE1 size:0x1
0x808D394F = D_808D394F; // type:UNK_TYPE1 size:0x1
0x808D3958 = D_808D3958; // type:UNK_TYPE1 size:0x1
0x808D3960 = D_808D3960; // type:f32 size:0x4
0x808D3964 = D_808D3964; // type:f32 size:0x4
0x808D3968 = D_808D3968; // type:f32 size:0x4
0x808D396C = D_808D396C; // type:f32 size:0x4
0x808D3970 = D_808D3970; // type:f32 size:0x4
0x808D3974 = D_808D3974; // type:f32 size:0x4
0x808D3978 = D_808D3978; // type:f32 size:0x4
0x808D397C = D_808D397C; // type:f32 size:0x4
0x808D3980 = D_808D3980; // type:f32 size:0x4
0x808D3984 = D_808D3984; // type:f32 size:0x4
0x808D3988 = D_808D3988; // type:f32 size:0x4
0x808D398C = D_808D398C; // type:f32 size:0x4
0x808D3990 = D_808D3990; // type:f32 size:0x4
0x808D3994 = D_808D3994; // type:f32 size:0x4
0x808D3998 = D_808D3998; // type:f32 size:0x4
0x808D399C = D_808D399C; // type:f32 size:0x4
0x808D39A0 = D_808D39A0; // type:f32 size:0x4
0x808D39A4 = D_808D39A4; // type:f32 size:0x4
0x808D39A8 = D_808D39A8; // type:f32 size:0x4
0x808D39AC = D_808D39AC; // type:f32 size:0x4
0x808D39B0 = D_808D39B0; // type:f32 size:0x4
0x808D39B4 = D_808D39B4; // type:f32 size:0x4
0x808D39B8 = D_808D39B8; // type:f32 size:0x4
0x808D39BC = D_808D39BC; // type:f32 size:0x4
0x808D39C0 = D_808D39C0; // type:f32 size:0x4
0x808D39C4 = D_808D39C4; // type:f32 size:0x4
0x808D39C8 = D_808D39C8; // type:f32 size:0x4
0x808D39CC = D_808D39CC; // type:f32 size:0x4
0x808D39D0 = D_808D39D0; // type:f32 size:0x4
0x808D39D4 = D_808D39D4; // type:f32 size:0x4
0x808D39D8 = D_808D39D8; // type:f32 size:0x4
0x808D39DC = D_808D39DC; // type:f32 size:0x4
0x808D39E0 = D_808D39E0; // type:f32 size:0x4
0x808D70C0 = En_Rd_InitVars; // type:UNK_TYPE1 size:0x1
0x808D70E0 = D_808D70E0; // type:UNK_TYPE1 size:0x1
0x808D710C = D_808D710C; // type:UNK_TYPE1 size:0x1
0x808D712C = D_808D712C; // type:UNK_TYPE1 size:0x1
0x808D7138 = D_808D7138; // type:UNK_TYPE1 size:0x1
0x808D7150 = D_808D7150; // type:f32 size:0x4
0x808D7154 = D_808D7154; // type:f32 size:0x4
0x808D7158 = D_808D7158; // type:f32 size:0x4
0x808D715C = D_808D715C; // type:f32 size:0x4
0x808D7160 = D_808D7160; // type:f32 size:0x4
0x808D7164 = jtbl_808D7164; // type:UNK_PTR size:0x4
0x808D7178 = jtbl_808D7178; // type:UNK_PTR size:0x4
0x808D718C = D_808D718C; // type:f32 size:0x4
0x808D7190 = D_808D7190; // type:f32 size:0x4
0x808D7194 = D_808D7194; // type:f32 size:0x4
0x808D7198 = D_808D7198; // type:f32 size:0x4
0x808D719C = jtbl_808D719C; // type:UNK_PTR size:0x4
0x808D71D8 = D_808D71D8; // type:f32 size:0x4
0x808D7810 = Bg_F40_Flift_InitVars; // type:UNK_TYPE1 size:0x1
0x808D7830 = D_808D7830; // type:UNK_TYPE1 size:0x1
0x808D7840 = D_808D7840; // type:f32 size:0x4
0x808D7844 = D_808D7844; // type:f32 size:0x4
0x808D7848 = D_808D7848; // type:f32 size:0x4
0x808D784C = D_808D784C; // type:f32 size:0x4
0x808D7850 = D_808D7850; // type:f32 size:0x4
0x808D8760 = Obj_Mure_InitVars; // type:UNK_TYPE1 size:0x1
0x808DB9C0 = En_Sw_InitVars; // type:UNK_TYPE1 size:0x1
0x808DB9E0 = D_808DB9E0; // type:UNK_TYPE1 size:0x1
0x808DBA0C = D_808DBA0C; // type:UNK_PTR size:0x4
0x808DBA18 = D_808DBA18; // type:UNK_TYPE1 size:0x1
0x808DBA38 = D_808DBA38; // type:UNK_PTR size:0x4
0x808DBA44 = D_808DBA44; // type:UNK_TYPE1 size:0x1
0x808DBA64 = D_808DBA64; // type:UNK_PTR size:0x4
0x808DBAA4 = D_808DBAA4; // type:UNK_TYPE1 size:0x1
0x808DBAA8 = D_808DBAA8; // type:UNK_TYPE1 size:0x1
0x808DBAAC = D_808DBAAC; // type:UNK_TYPE1 size:0x1
0x808DBAC0 = D_808DBAC0; // type:f32 size:0x4
0x808DBAC4 = D_808DBAC4; // type:f32 size:0x4
0x808DBAC8 = D_808DBAC8; // type:f32 size:0x4
0x808DBACC = D_808DBACC; // type:f32 size:0x4
0x808DBAD0 = D_808DBAD0; // type:f32 size:0x4
0x808DBAD4 = D_808DBAD4; // type:f32 size:0x4
0x808DBAD8 = D_808DBAD8; // type:f32 size:0x4
0x808DBADC = D_808DBADC; // type:f32 size:0x4
0x808DBAE0 = D_808DBAE0; // type:f32 size:0x4
0x808DBAE4 = D_808DBAE4; // type:f32 size:0x4
0x808DBAE8 = D_808DBAE8; // type:f32 size:0x4
0x808DBAEC = D_808DBAEC; // type:f32 size:0x4
0x808DBAF0 = D_808DBAF0; // type:f32 size:0x4
0x808DBAF4 = D_808DBAF4; // type:f32 size:0x4
0x808DBAF8 = D_808DBAF8; // type:f32 size:0x4
0x808DBAFC = D_808DBAFC; // type:f32 size:0x4
0x808DBB00 = D_808DBB00; // type:f32 size:0x4
0x808DBB04 = D_808DBB04; // type:f32 size:0x4
0x808DBB08 = D_808DBB08; // type:f32 size:0x4
0x808DBB0C = D_808DBB0C; // type:f32 size:0x4
0x808DBB10 = D_808DBB10; // type:f32 size:0x4
0x808DBB14 = jtbl_808DBB14; // type:UNK_PTR size:0x4
0x808DE320 = Object_Kankyo_InitVars; // type:UNK_TYPE1 size:0x1
0x808DE340 = D_808DE340; // type:UNK_TYPE2 size:0x2
0x808DE350 = jtbl_808DE350; // type:UNK_PTR size:0x4
0x808DE364 = D_808DE364; // type:f32 size:0x4
0x808DE368 = D_808DE368; // type:f32 size:0x4
0x808DE36C = D_808DE36C; // type:f32 size:0x4
0x808DE370 = D_808DE370; // type:f32 size:0x4
0x808DE374 = D_808DE374; // type:f32 size:0x4
0x808DE378 = D_808DE378; // type:f32 size:0x4
0x808DE37C = D_808DE37C; // type:f32 size:0x4
0x808DE380 = D_808DE380; // type:f32 size:0x4
0x808DE384 = D_808DE384; // type:f32 size:0x4
0x808DE388 = D_808DE388; // type:f32 size:0x4
0x808DE38C = D_808DE38C; // type:f32 size:0x4
0x808DE390 = D_808DE390; // type:f32 size:0x4
0x808DE394 = D_808DE394; // type:f32 size:0x4
0x808DE398 = D_808DE398; // type:f32 size:0x4
0x808DE39C = D_808DE39C; // type:f32 size:0x4
0x808DE3A0 = D_808DE3A0; // type:f32 size:0x4
0x808DE3A4 = D_808DE3A4; // type:f32 size:0x4
0x808DE3A8 = jtbl_808DE3A8; // type:UNK_PTR size:0x4
0x808DE3BC = D_808DE3BC; // type:f32 size:0x4
0x808DE3C0 = D_808DE3C0; // type:f32 size:0x4
0x808DE3C4 = D_808DE3C4; // type:f32 size:0x4
0x808DE3C8 = D_808DE3C8; // type:f32 size:0x4
0x808DE3CC = D_808DE3CC; // type:f32 size:0x4
0x808DE3D0 = D_808DE3D0; // type:f32 size:0x4
0x808DE3D4 = D_808DE3D4; // type:f32 size:0x4
0x808DE3D8 = D_808DE3D8; // type:f32 size:0x4
0x808DE3DC = D_808DE3DC; // type:f32 size:0x4
0x808DE3E0 = D_808DE3E0; // type:f32 size:0x4
0x808DE3E4 = D_808DE3E4; // type:f32 size:0x4
0x808DE5B0 = D_808DE5B0; // type:UNK_TYPE1 size:0x1
0x808DFEA0 = En_Horse_Link_Child_InitVars; // type:UNK_TYPE1 size:0x1
0x808DFEC0 = D_808DFEC0; // type:UNK_TYPE4 size:0x4
0x808DFEC8 = D_808DFEC8; // type:UNK_TYPE4 size:0x4
0x808DFED4 = D_808DFED4; // type:UNK_TYPE1 size:0x1
0x808DFEF8 = D_808DFEF8; // type:UNK_TYPE1 size:0x1
0x808DFF08 = D_808DFF08; // type:UNK_TYPE1 size:0x1
0x808DFF10 = D_808DFF10; // type:UNK_TYPE1 size:0x1
0x808DFF18 = D_808DFF18; // type:UNK_TYPE1 size:0x1
0x808DFF2C = D_808DFF2C; // type:UNK_TYPE1 size:0x1
0x808DFF30 = D_808DFF30; // type:UNK_PTR size:0x4
0x808DFF48 = D_808DFF48; // type:UNK_TYPE1 size:0x1
0x808DFF54 = D_808DFF54; // type:UNK_TYPE1 size:0x1
0x808DFF60 = D_808DFF60; // type:f32 size:0x4
0x808DFF64 = D_808DFF64; // type:f32 size:0x4
0x808DFF68 = D_808DFF68; // type:f32 size:0x4
0x808DFF6C = D_808DFF6C; // type:f32 size:0x4
0x808E0740 = Door_Ana_InitVars; // type:UNK_TYPE1 size:0x1
0x808E0760 = D_808E0760; // type:UNK_TYPE1 size:0x1
0x808E078C = D_808E078C; // type:UNK_TYPE1 size:0x1
0x808E07B0 = D_808E07B0; // type:f32 size:0x4
0x808E0DD0 = En_Encount1_InitVars; // type:UNK_TYPE1 size:0x1
0x808E0DF0 = D_808E0DF0; // type:UNK_TYPE1 size:0x1
0x808E0DF8 = D_808E0DF8; // type:UNK_TYPE1 size:0x1
0x808E1490 = D_808E1490; // type:UNK_TYPE1 size:0x1
0x808E14B0 = Demo_Tre_Lgt_InitVars; // type:UNK_TYPE1 size:0x1
0x808E14D0 = sBoxLightAnimations; // type:UNK_TYPE4 size:0x8
0x808E14D8 = sActionFuncs; // type:UNK_TYPE4 size:0x8
0x808E1ED0 = En_Encount2_InitVars; // type:UNK_TYPE1 size:0x1
0x808E1EF0 = D_808E1EF0; // type:UNK_TYPE1 size:0x1
0x808E1F14 = D_808E1F14; // type:UNK_TYPE1 size:0x1
0x808E1F24 = D_808E1F24; // type:UNK_TYPE1 size:0x1
0x808E1F50 = D_808E1F50; // type:f32 size:0x4
0x808E1F54 = D_808E1F54; // type:f32 size:0x4
0x808E1F58 = D_808E1F58; // type:f32 size:0x4
0x808E2020 = En_Fire_Rock_InitVars; // type:UNK_TYPE1 size:0x1
0x808E2540 = Bg_Ctower_Rot_InitVars; // type:UNK_TYPE1 size:0x1
0x808E2560 = D_808E2560; // type:UNK_TYPE1 size:0x1
0x808E2564 = D_808E2564; // type:UNK_TYPE1 size:0x1
0x808E2570 = D_808E2570; // type:f32 size:0x4
0x808E2574 = D_808E2574; // type:f32 size:0x4
0x808E2578 = D_808E2578; // type:f32 size:0x4
0x808E3BD0 = Mir_Ray_InitVars; // type:UNK_TYPE1 size:0x1
0x808E3BF0 = D_808E3BF0; // type:UNK_TYPE1 size:0x1
0x808E3BF4 = D_808E3BF4; // type:UNK_TYPE1 size:0x1
0x808E3C44 = D_808E3C44; // type:UNK_TYPE1 size:0x1
0x808E3C68 = D_808E3C68; // type:UNK_TYPE1 size:0x1
0x808E3C78 = D_808E3C78; // type:UNK_TYPE1 size:0x1
0x808E3C96 = D_808E3C96; // type:UNK_TYPE1 size:0x1
0x808E3C97 = D_808E3C97; // type:UNK_TYPE1 size:0x1
0x808E3DB8 = D_808E3DB8; // type:UNK_TYPE1 size:0x1
0x808E3DD0 = D_808E3DD0; // type:char size:0x1
0x808E3DE0 = D_808E3DE0; // type:f32 size:0x4
0x808E3DE4 = D_808E3DE4; // type:f32 size:0x4
0x808E3DE8 = D_808E3DE8; // type:f32 size:0x4
0x808E3DEC = D_808E3DEC; // type:f32 size:0x4
0x808E3DF0 = D_808E3DF0; // type:f32 size:0x4
0x808E3DF4 = D_808E3DF4; // type:f32 size:0x4
0x808E3DF8 = D_808E3DF8; // type:f32 size:0x4
0x808E3DFC = D_808E3DFC; // type:f32 size:0x4
0x808E4DF0 = En_Sb_InitVars; // type:UNK_TYPE1 size:0x1
0x808E4E10 = D_808E4E10; // type:UNK_TYPE1 size:0x1
0x808E4E3C = D_808E4E3C; // type:UNK_TYPE1 size:0x1
0x808E4E5C = D_808E4E5C; // type:UNK_TYPE1 size:0x1
0x808E4E68 = D_808E4E68; // type:UNK_TYPE4 size:0x4
0x808E4EA0 = D_808E4EA0; // type:f32 size:0x4
0x808E4EA4 = D_808E4EA4; // type:f32 size:0x4
0x808E4EA8 = D_808E4EA8; // type:f32 size:0x4
0x808E4EAC = D_808E4EAC; // type:f32 size:0x4
0x808E4EB0 = D_808E4EB0; // type:f32 size:0x4
0x808E4EB4 = D_808E4EB4; // type:f32 size:0x4
0x808ED640 = D_808ED640; // type:UNK_TYPE2 size:0x2
0x808ED642 = D_808ED642; // type:UNK_TYPE2 size:0x2
0x808ED644 = D_808ED644; // type:UNK_TYPE2 size:0x2
0x808ED650 = D_808ED650; // type:UNK_TYPE2 size:0x2
0x808ED652 = D_808ED652; // type:UNK_TYPE2 size:0x2
0x808ED654 = D_808ED654; // type:UNK_TYPE2 size:0x2
0x808ED660 = D_808ED660; // type:UNK_TYPE2 size:0x2
0x808ED740 = D_808ED740; // type:UNK_TYPE1 size:0x1
0x808EDF60 = D_808EDF60; // type:UNK_TYPE1 size:0x1
0x808EE060 = D_808EE060; // type:UNK_TYPE1 size:0x1
0x808EF4A0 = D_808EF4A0; // type:UNK_TYPE2 size:0x2
0x808EF4A2 = D_808EF4A2; // type:UNK_TYPE2 size:0x2
0x808EF4A4 = D_808EF4A4; // type:UNK_TYPE2 size:0x2
0x808EF4AE = D_808EF4AE; // type:UNK_TYPE1 size:0x1
0x808EF4AF = D_808EF4AF; // type:UNK_TYPE1 size:0x1
0x808EF4B0 = D_808EF4B0; // type:UNK_TYPE2 size:0x2
0x808EF4B2 = D_808EF4B2; // type:UNK_TYPE2 size:0x2
0x808EF4B4 = D_808EF4B4; // type:UNK_TYPE2 size:0x2
0x808EF4BE = D_808EF4BE; // type:UNK_TYPE1 size:0x1
0x808EF4BF = D_808EF4BF; // type:UNK_TYPE1 size:0x1
0x808EF4C0 = D_808EF4C0; // type:UNK_TYPE2 size:0x2
0x808EF4E0 = D_808EF4E0; // type:UNK_TYPE2 size:0x2
0x808EF4EE = D_808EF4EE; // type:UNK_TYPE1 size:0x1
0x808EF4EF = D_808EF4EF; // type:UNK_TYPE1 size:0x1
0x808EF4FE = D_808EF4FE; // type:UNK_TYPE1 size:0x1
0x808EF4FF = D_808EF4FF; // type:UNK_TYPE1 size:0x1
0x808EF500 = D_808EF500; // type:UNK_TYPE2 size:0x2
0x808EFE90 = D_808EFE90; // type:UNK_TYPE1 size:0x1
0x808EFEB0 = D_808EFEB0; // type:UNK_TYPE2 size:0x2
0x808EFEB2 = D_808EFEB2; // type:UNK_TYPE2 size:0x2
0x808EFEB4 = D_808EFEB4; // type:UNK_TYPE2 size:0x2
0x808EFEC0 = D_808EFEC0; // type:UNK_TYPE1 size:0x1
0x808F0280 = En_Bigslime_InitVars; // type:UNK_TYPE1 size:0x1
0x808F02A0 = D_808F02A0; // type:UNK_TYPE1 size:0x1
0x808F02CC = D_808F02CC; // type:UNK_TYPE1 size:0x1
0x808F02D4 = D_808F02D4; // type:UNK_TYPE1 size:0x1
0x808F02F4 = D_808F02F4; // type:UNK_TYPE4 size:0x4
0x808F02F8 = D_808F02F8; // type:UNK_TYPE4 size:0x4
0x808F0328 = D_808F0328; // type:UNK_TYPE1 size:0x1
0x808F032C = D_808F032C; // type:UNK_TYPE1 size:0x1
0x808F0338 = D_808F0338; // type:UNK_TYPE1 size:0x1
0x808F0344 = D_808F0344; // type:UNK_TYPE1 size:0x1
0x808F0358 = D_808F0358; // type:UNK_TYPE4 size:0x4
0x808F035C = D_808F035C; // type:UNK_TYPE4 size:0x4
0x808F0394 = D_808F0394; // type:UNK_TYPE1 size:0x1
0x808F03A0 = D_808F03A0; // type:UNK_TYPE1 size:0x1
0x808F03A4 = D_808F03A4; // type:UNK_TYPE1 size:0x1
0x808F03A8 = D_808F03A8; // type:UNK_TYPE1 size:0x1
0x808F03B4 = D_808F03B4; // type:UNK_TYPE4 size:0x4
0x808F03B8 = D_808F03B8; // type:UNK_TYPE4 size:0x4
0x808F0498 = D_808F0498; // type:UNK_TYPE1 size:0x1
0x808F04A0 = D_808F04A0; // type:UNK_TYPE1 size:0x1
0x808F04A1 = D_808F04A1; // type:UNK_TYPE1 size:0x1
0x808F04B0 = D_808F04B0; // type:UNK_TYPE1 size:0x1
0x808F04BC = D_808F04BC; // type:UNK_TYPE1 size:0x1
0x808F04C0 = D_808F04C0; // type:UNK_TYPE1 size:0x1
0x808F04D0 = D_808F04D0; // type:f32 size:0x4
0x808F04D4 = D_808F04D4; // type:f32 size:0x4
0x808F04D8 = D_808F04D8; // type:f32 size:0x4
0x808F04DC = D_808F04DC; // type:f32 size:0x4
0x808F04E0 = D_808F04E0; // type:f32 size:0x4
0x808F04E4 = D_808F04E4; // type:f32 size:0x4
0x808F04E8 = D_808F04E8; // type:f32 size:0x4
0x808F04EC = D_808F04EC; // type:UNK_TYPE4 size:0x4 # float but gnu assembler doesn't convert it properly
0x808F04F0 = D_808F04F0; // type:UNK_TYPE4 size:0x4 # float but gnu assembler doesn't convert it properly
0x808F04F4 = D_808F04F4; // type:f32 size:0x4
0x808F04F8 = D_808F04F8; // type:f32 size:0x4
0x808F04FC = D_808F04FC; // type:f32 size:0x4
0x808F0500 = D_808F0500; // type:f32 size:0x4
0x808F0504 = D_808F0504; // type:f32 size:0x4
0x808F0508 = D_808F0508; // type:f32 size:0x4
0x808F050C = D_808F050C; // type:f32 size:0x4
0x808F0510 = D_808F0510; // type:f32 size:0x4
0x808F0514 = D_808F0514; // type:f32 size:0x4
0x808F0518 = D_808F0518; // type:f32 size:0x4
0x808F051C = D_808F051C; // type:f32 size:0x4
0x808F0520 = D_808F0520; // type:f32 size:0x4
0x808F0524 = D_808F0524; // type:f32 size:0x4
0x808F0528 = D_808F0528; // type:f32 size:0x4
0x808F052C = D_808F052C; // type:f32 size:0x4
0x808F0530 = D_808F0530; // type:f32 size:0x4
0x808F0534 = D_808F0534; // type:f32 size:0x4
0x808F0538 = D_808F0538; // type:f32 size:0x4
0x808F053C = D_808F053C; // type:f32 size:0x4
0x808F0540 = D_808F0540; // type:f32 size:0x4
0x808F0544 = D_808F0544; // type:f32 size:0x4
0x808F0548 = D_808F0548; // type:f32 size:0x4
0x808F054C = D_808F054C; // type:f32 size:0x4
0x808F0550 = D_808F0550; // type:f32 size:0x4
0x808F0554 = D_808F0554; // type:f32 size:0x4
0x808F0558 = D_808F0558; // type:f32 size:0x4
0x808F055C = D_808F055C; // type:f32 size:0x4
0x808F0560 = D_808F0560; // type:f32 size:0x4
0x808F0564 = D_808F0564; // type:f32 size:0x4
0x808F0568 = D_808F0568; // type:f32 size:0x4
0x808F056C = D_808F056C; // type:f32 size:0x4
0x808F0570 = D_808F0570; // type:f32 size:0x4
0x808F0574 = D_808F0574; // type:f32 size:0x4
0x808F0578 = D_808F0578; // type:f32 size:0x4
0x808F057C = D_808F057C; // type:f32 size:0x4
0x808F0580 = D_808F0580; // type:f32 size:0x4
0x808F0584 = D_808F0584; // type:f32 size:0x4
0x808F0588 = D_808F0588; // type:f32 size:0x4
0x808F058C = D_808F058C; // type:f32 size:0x4
0x808F0590 = D_808F0590; // type:f32 size:0x4
0x808F0594 = D_808F0594; // type:f32 size:0x4
0x808F0598 = D_808F0598; // type:f32 size:0x4
0x808F059C = D_808F059C; // type:f32 size:0x4
0x808F05A0 = D_808F05A0; // type:f32 size:0x4
0x808F05A4 = D_808F05A4; // type:f32 size:0x4
0x808F05A8 = D_808F05A8; // type:f32 size:0x4
0x808F05AC = D_808F05AC; // type:f32 size:0x4
0x808F05B0 = D_808F05B0; // type:f32 size:0x4
0x808F05B4 = D_808F05B4; // type:f32 size:0x4
0x808F05B8 = D_808F05B8; // type:f32 size:0x4
0x808F05BC = D_808F05BC; // type:f32 size:0x4
0x808F05C0 = D_808F05C0; // type:f32 size:0x4
0x808F05C4 = D_808F05C4; // type:f32 size:0x4
0x808F05C8 = D_808F05C8; // type:f32 size:0x4
0x808F05CC = D_808F05CC; // type:f32 size:0x4
0x808F05D0 = D_808F05D0; // type:f32 size:0x4
0x808F05D4 = D_808F05D4; // type:f32 size:0x4
0x808F05D8 = D_808F05D8; // type:f32 size:0x4
0x808F05DC = D_808F05DC; // type:f32 size:0x4
0x808F05E0 = D_808F05E0; // type:f32 size:0x4
0x808F05E4 = D_808F05E4; // type:f32 size:0x4
0x808F05E8 = D_808F05E8; // type:f32 size:0x4
0x808F05EC = D_808F05EC; // type:f32 size:0x4
0x808F05F0 = D_808F05F0; // type:f32 size:0x4
0x808F05F4 = D_808F05F4; // type:f32 size:0x4
0x808F05F8 = D_808F05F8; // type:f32 size:0x4
0x808F05FC = D_808F05FC; // type:f32 size:0x4
0x808F0600 = D_808F0600; // type:f32 size:0x4
0x808F0604 = D_808F0604; // type:f32 size:0x4
0x808F0608 = D_808F0608; // type:f32 size:0x4
0x808F060C = D_808F060C; // type:f32 size:0x4
0x808F0610 = D_808F0610; // type:f32 size:0x4
0x808F0614 = D_808F0614; // type:f32 size:0x4
0x808F0618 = D_808F0618; // type:f32 size:0x4
0x808F061C = D_808F061C; // type:f32 size:0x4
0x808F0620 = D_808F0620; // type:f32 size:0x4
0x808F0624 = D_808F0624; // type:f32 size:0x4
0x808F0628 = D_808F0628; // type:f32 size:0x4
0x808F062C = D_808F062C; // type:f32 size:0x4
0x808F0630 = D_808F0630; // type:f32 size:0x4
0x808F0634 = D_808F0634; // type:f32 size:0x4
0x808F0638 = D_808F0638; // type:f32 size:0x4
0x808F063C = D_808F063C; // type:f32 size:0x4
0x808F0640 = D_808F0640; // type:f32 size:0x4
0x808F0644 = D_808F0644; // type:f32 size:0x4
0x808F0648 = D_808F0648; // type:f32 size:0x4
0x808F064C = D_808F064C; // type:f32 size:0x4
0x808F0650 = D_808F0650; // type:f32 size:0x4
0x808F0654 = D_808F0654; // type:f32 size:0x4
0x808F0658 = D_808F0658; // type:f32 size:0x4
0x808F065C = D_808F065C; // type:f32 size:0x4
0x808F0660 = D_808F0660; // type:f32 size:0x4
0x808F0664 = D_808F0664; // type:f32 size:0x4
0x808F0668 = D_808F0668; // type:f32 size:0x4
0x808F066C = D_808F066C; // type:f32 size:0x4
0x808F0670 = D_808F0670; // type:f32 size:0x4
0x808F2D80 = En_Karebaba_InitVars; // type:UNK_TYPE1 size:0x1
0x808F2DA0 = D_808F2DA0; // type:UNK_TYPE1 size:0x1
0x808F2DCC = D_808F2DCC; // type:UNK_TYPE1 size:0x1
0x808F2DEC = D_808F2DEC; // type:UNK_TYPE2 size:0x2
0x808F2DF8 = D_808F2DF8; // type:UNK_TYPE1 size:0x1
0x808F2E00 = D_808F2E00; // type:UNK_TYPE1 size:0x1
0x808F2E20 = D_808F2E20; // type:UNK_TYPE1 size:0x1
0x808F2E28 = sFogColor; // type:Color_RGBA8 size:0x4
0x808F2E2C = sStemDLists; // type:Gfx* size:0xC
0x808F2E40 = D_808F2E40; // type:f32 size:0x4
0x808F2E44 = D_808F2E44; // type:f32 size:0x4
0x808F2E48 = D_808F2E48; // type:f32 size:0x4
0x808F2E4C = D_808F2E4C; // type:f32 size:0x4
0x808F2E50 = D_808F2E50; // type:f32 size:0x4
0x808F2E54 = D_808F2E54; // type:f32 size:0x4
0x808F2E58 = D_808F2E58; // type:f32 size:0x4
0x808F2E5C = D_808F2E5C; // type:f32 size:0x4
0x808F2E60 = D_808F2E60; // type:f32 size:0x4
0x808F2E64 = D_808F2E64; // type:f32 size:0x4
0x808F2E68 = D_808F2E68; // type:f32 size:0x4
0x808F2E6C = D_808F2E6C; // type:f32 size:0x4
0x808F2E70 = D_808F2E70; // type:f32 size:0x4
0x808F2E74 = D_808F2E74; // type:f32 size:0x4
0x808F6A40 = En_In_InitVars; // type:UNK_TYPE1 size:0x1
0x808F6A60 = D_808F6A60; // type:UNK_TYPE1 size:0x1
0x808F6A8C = D_808F6A8C; // type:UNK_TYPE1 size:0x1
0x808F6AB0 = D_808F6AB0; // type:UNK_TYPE1 size:0x1
0x808F6AC0 = D_808F6AC0; // type:UNK_TYPE1 size:0x1
0x808F6ACC = D_808F6ACC; // type:UNK_TYPE1 size:0x1
0x808F6AEC = D_808F6AEC; // type:UNK_TYPE1 size:0x1
0x808F6C0C = D_808F6C0C; // type:UNK_TYPE1 size:0x1
0x808F6C2C = D_808F6C2C; // type:UNK_TYPE4 size:0x4
0x808F6C4C = D_808F6C4C; // type:UNK_TYPE1 size:0x1
0x808F6C54 = D_808F6C54; // type:UNK_TYPE4 size:0x4
0x808F6CA4 = D_808F6CA4; // type:UNK_TYPE4 size:0x4
0x808F6CB4 = D_808F6CB4; // type:UNK_TYPE4 size:0x4
0x808F6CC0 = D_808F6CC0; // type:UNK_TYPE4 size:0x4
0x808F6CD0 = D_808F6CD0; // type:f32 size:0x4
0x808F6CD4 = jtbl_808F6CD4; // type:UNK_PTR size:0x4
0x808F6CF4 = jtbl_808F6CF4; // type:UNK_PTR size:0x4
0x808F6D14 = jtbl_808F6D14; // type:UNK_PTR size:0x4
0x808F6D38 = jtbl_808F6D38; // type:UNK_PTR size:0x4
0x808F6D58 = jtbl_808F6D58; // type:UNK_PTR size:0x4
0x808F6D84 = jtbl_808F6D84; // type:UNK_PTR size:0x4
0x808F6DAC = jtbl_808F6DAC; // type:UNK_PTR size:0x4
0x808F6E04 = jtbl_808F6E04; // type:UNK_PTR size:0x4
0x808F6E68 = jtbl_808F6E68; // type:UNK_PTR size:0x4
0x808F6E88 = jtbl_808F6E88; // type:UNK_PTR size:0x4
0x808F6EA4 = jtbl_808F6EA4; // type:UNK_PTR size:0x4
0x808F6EF4 = D_808F6EF4; // type:f32 size:0x4
0x808F6EF8 = D_808F6EF8; // type:f32 size:0x4
0x808F6EFC = D_808F6EFC; // type:f32 size:0x4
0x808F6F00 = D_808F6F00; // type:f32 size:0x4
0x808F88C0 = En_Bom_Chu_InitVars; // type:UNK_TYPE1 size:0x1
0x808F88E0 = D_808F88E0; // type:UNK_TYPE1 size:0x1
0x808F8908 = D_808F8908; // type:UNK_TYPE2 size:0x2
0x808F8914 = D_808F8914; // type:EffectBlureInit2 size:0x24
0x808F8938 = D_808F8938; // type:UNK_TYPE1 size:0x1
0x808F8944 = D_808F8944; // type:UNK_TYPE1 size:0x1
0x808F8950 = D_808F8950; // type:UNK_TYPE1 size:0x1
0x808F8960 = D_808F8960; // type:f32 size:0x4
0x808F8964 = D_808F8964; // type:f32 size:0x4
0x808F8968 = D_808F8968; // type:f32 size:0x4
0x808F896C = D_808F896C; // type:f32 size:0x4
0x808F8970 = D_808F8970; // type:f32 size:0x4
0x808F9B00 = En_Horse_Game_Check_InitVars; // type:UNK_TYPE1 size:0x1
0x808F9B20 = D_808F9B20; // type:UNK_TYPE1 size:0x1
0x808F9B28 = D_808F9B28; // type:UNK_TYPE1 size:0x1
0x808F9B30 = D_808F9B30; // type:UNK_TYPE1 size:0x1
0x808F9B50 = D_808F9B50; // type:UNK_TYPE1 size:0x1
0x808F9B68 = D_808F9B68; // type:UNK_TYPE1 size:0x1
0x808F9B94 = D_808F9B94; // type:UNK_TYPE4 size:0x4
0x808F9BA0 = D_808F9BA0; // type:UNK_TYPE4 size:0x4
0x808F9BAC = D_808F9BAC; // type:UNK_TYPE4 size:0x4
0x808F9BBC = D_808F9BBC; // type:UNK_TYPE4 size:0x4
0x808F9BCC = D_808F9BCC; // type:UNK_TYPE4 size:0x4
0x808F9BDC = D_808F9BDC; // type:UNK_TYPE1 size:0x1
0x808F9BE4 = D_808F9BE4; // type:UNK_TYPE1 size:0x1
0x808F9C0C = D_808F9C0C; // type:UNK_TYPE1 size:0x1
0x808F9C34 = D_808F9C34; // type:UNK_TYPE1 size:0x1
0x808F9C5C = D_808F9C5C; // type:UNK_TYPE1 size:0x1
0x808F9C90 = D_808F9C90; // type:char size:0x1c
0x808F9CAC = D_808F9CAC; // type:char size:0x1c
0x808F9CC8 = D_808F9CC8; // type:f32 size:0x4
0x808F9CCC = D_808F9CCC; // type:f32 size:0x4
0x808FC130 = En_Rr_InitVars; // type:UNK_TYPE1 size:0x1
0x808FC150 = D_808FC150; // type:UNK_TYPE1 size:0x1
0x808FC17C = D_808FC17C; // type:UNK_TYPE1 size:0x1
0x808FC1A8 = D_808FC1A8; // type:UNK_TYPE1 size:0x1
0x808FC1C8 = D_808FC1C8; // type:UNK_TYPE1 size:0x1
0x808FC1D0 = D_808FC1D0; // type:UNK_TYPE1 size:0x1
0x808FC1E4 = D_808FC1E4; // type:f32 size:0x4
0x808FC1F8 = D_808FC1F8; // type:f32 size:0x4
0x808FC210 = D_808FC210; // type:f32 size:0x4
0x808FC214 = D_808FC214; // type:f32 size:0x4
0x808FC218 = D_808FC218; // type:f32 size:0x4
0x808FC21C = D_808FC21C; // type:f32 size:0x4
0x808FC220 = D_808FC220; // type:f32 size:0x4
0x808FC224 = D_808FC224; // type:f32 size:0x4
0x808FC228 = D_808FC228; // type:f32 size:0x4
0x808FC22C = D_808FC22C; // type:f32 size:0x4
0x808FC230 = D_808FC230; // type:f32 size:0x4
0x808FC234 = D_808FC234; // type:f32 size:0x4
0x808FC238 = D_808FC238; // type:f32 size:0x4
0x808FC23C = D_808FC23C; // type:f32 size:0x4
0x808FC240 = D_808FC240; // type:f32 size:0x4
0x808FC244 = D_808FC244; // type:f32 size:0x4
0x808FC248 = D_808FC248; // type:f32 size:0x4
0x808FC24C = D_808FC24C; // type:f32 size:0x4
0x808FC250 = D_808FC250; // type:f32 size:0x4
0x808FC254 = D_808FC254; // type:f32 size:0x4
0x808FC258 = D_808FC258; // type:f32 size:0x4
0x808FC25C = D_808FC25C; // type:f32 size:0x4
0x808FC260 = jtbl_808FC260; // type:UNK_PTR size:0x4
0x808FC274 = D_808FC274; // type:f32 size:0x4
0x808FC278 = D_808FC278; // type:f32 size:0x4
0x808FC27C = D_808FC27C; // type:f32 size:0x4
0x808FC280 = D_808FC280; // type:f32 size:0x4
0x808FC284 = D_808FC284; // type:f32 size:0x4
0x808FC288 = D_808FC288; // type:f32 size:0x4
0x808FC28C = D_808FC28C; // type:f32 size:0x4
0x808FC290 = D_808FC290; // type:f32 size:0x4
0x808FC294 = D_808FC294; // type:f32 size:0x4
0x808FC298 = D_808FC298; // type:f32 size:0x4
0x808FC29C = D_808FC29C; // type:f32 size:0x4
0x808FC2A0 = D_808FC2A0; // type:f32 size:0x4
0x808FC2A4 = D_808FC2A4; // type:f32 size:0x4
0x808FC2A8 = D_808FC2A8; // type:f32 size:0x4
0x808FC2AC = D_808FC2AC; // type:f32 size:0x4
0x808FC670 = En_Fr_InitVars; // type:UNK_TYPE1 size:0x1
0x8090CCB0 = En_Fishing_InitVars; // type:UNK_TYPE1 size:0x1
0x8090CCD0 = D_8090CCD0; // type:f32 size:0x4
0x8090CCD4 = D_8090CCD4; // type:u8 size:0x1
0x8090CCD8 = D_8090CCD8; // type:f32 size:0x4
0x8090CCDC = D_8090CCDC; // type:Vec3f size:0xC
0x8090CCE8 = D_8090CCE8; // type:f32 size:0x4
0x8090CCEC = sSinkingLureLocation; // type:u8 size:0x1
0x8090CCF0 = D_8090CCF0; // type:f32 size:0x4
0x8090CCF4 = D_8090CCF4; // type:UNK_TYPE1 size:0x1
0x8090CCF8 = D_8090CCF8; // type:UNK_TYPE2 size:0x2
0x8090CCFC = D_8090CCFC; // type:UNK_TYPE1 size:0x1
0x8090CD00 = D_8090CD00; // type:UNK_TYPE4 size:0x4
0x8090CD04 = D_8090CD04; // type:UNK_TYPE2 size:0x2
0x8090CD08 = D_8090CD08; // type:UNK_TYPE1 size:0x1
0x8090CD0C = D_8090CD0C; // type:UNK_TYPE1 size:0x1
0x8090CD10 = D_8090CD10; // type:UNK_TYPE1 size:0x1
0x8090CD14 = D_8090CD14; // type:UNK_TYPE2 size:0x2
0x8090CD18 = sFishMouthOffset; // type:Vec3f size:0xC
0x8090CD24 = D_8090CD24; // type:UNK_TYPE1 size:0x1
0x8090CD28 = D_8090CD28; // type:f32 size:0x4
0x8090CD2C = D_8090CD2C; // type:f32 size:0x4
0x8090CD30 = D_8090CD30; // type:f32 size:0x4
0x8090CD34 = D_8090CD34; // type:f32 size:0x4
0x8090CD38 = D_8090CD38; // type:f32 size:0x4
0x8090CD3C = D_8090CD3C; // type:f32 size:0x4
0x8090CD40 = D_8090CD40; // type:f32 size:0x4
0x8090CD44 = D_8090CD44; // type:s16 size:0x2
0x8090CD48 = D_8090CD48; // type:s16 size:0x2
0x8090CD4C = D_8090CD4C; // type:UNK_TYPE1 size:0x1
0x8090CD50 = D_8090CD50; // type:UNK_TYPE1 size:0x1
0x8090CD54 = D_8090CD54; // type:UNK_TYPE1 size:0x1
0x8090CD58 = D_8090CD58; // type:UNK_TYPE1 size:0x1
0x8090CD80 = D_8090CD80; // type:UNK_TYPE1 size:0x1
0x8090CD88 = D_8090CD88; // type:UNK_TYPE1 size:0x1
0x8090CD8C = D_8090CD8C; // type:UNK_TYPE1 size:0x1
0x8090CF08 = D_8090CF08; // type:UNK_TYPE1 size:0x1
0x8090CF18 = D_8090CF18; // type:UNK_TYPE1 size:0x1
0x8090CF1C = sZeroVec; // type:Vec3f size:0xC
0x8090CF28 = D_8090CF28; // type:Vec3f size:0xC
0x8090CF34 = D_8090CF34; // type:UNK_TYPE4 size:0x4
0x8090CF40 = D_8090CF40; // type:UNK_TYPE4 size:0x4
0x8090CF4C = D_8090CF4C; // type:UNK_TYPE4 size:0x4
0x8090CF58 = D_8090CF58; // type:UNK_TYPE1 size:0x1
0x8090D3C0 = D_8090D3C0; // type:UNK_TYPE1 size:0x1
0x8090D4D0 = D_8090D4D0; // type:UNK_TYPE1 size:0x1
0x8090D4D8 = D_8090D4D8; // type:UNK_TYPE4 size:0x4
0x8090D4E4 = D_8090D4E4; // type:UNK_TYPE4 size:0x4
0x8090D4F0 = D_8090D4F0; // type:UNK_TYPE4 size:0x4
0x8090D4FC = D_8090D4FC; // type:UNK_TYPE4 size:0x4
0x8090D508 = D_8090D508; // type:UNK_TYPE1 size:0x1
0x8090D558 = D_8090D558; // type:UNK_TYPE1 size:0x1
0x8090D5B0 = D_8090D5B0; // type:UNK_TYPE4 size:0x4
0x8090D608 = sRodTipOffset; // type:Vec3f size:0xC
0x8090D614 = D_8090D614; // type:Vec3f size:0xC
0x8090D620 = D_8090D620; // type:Vec3f size:0xC
0x8090D62C = D_8090D62C; // type:UNK_TYPE1 size:0x1
0x8090D638 = D_8090D638; // type:UNK_TYPE1 size:0x1
0x8090D644 = D_8090D644; // type:s16 size:0xA
0x8090D650 = sStreamSoundPos; // type:Vec3f size:0xC
0x8090D65C = sSinkingLureLocationPos; // type:Vec3s size:0x18
0x8090D674 = D_8090D674; // type:UNK_TYPE1 size:0x1
0x8090D680 = D_8090D680; // type:f32 size:0x4
0x8090D684 = D_8090D684; // type:f32 size:0x4
0x8090D688 = D_8090D688; // type:f32 size:0x4
0x8090D68C = D_8090D68C; // type:f32 size:0x4
0x8090D690 = D_8090D690; // type:f32 size:0x4
0x8090D694 = D_8090D694; // type:f32 size:0x4
0x8090D698 = D_8090D698; // type:f32 size:0x4
0x8090D69C = D_8090D69C; // type:f32 size:0x4
0x8090D6A0 = D_8090D6A0; // type:f32 size:0x4
0x8090D6A4 = D_8090D6A4; // type:f32 size:0x4
0x8090D6A8 = D_8090D6A8; // type:f32 size:0x4
0x8090D6AC = D_8090D6AC; // type:f32 size:0x4
0x8090D6B0 = D_8090D6B0; // type:f32 size:0x4
0x8090D6B4 = D_8090D6B4; // type:f32 size:0x4
0x8090D6B8 = D_8090D6B8; // type:f32 size:0x4
0x8090D6BC = D_8090D6BC; // type:f32 size:0x4
0x8090D6C0 = D_8090D6C0; // type:f32 size:0x4
0x8090D6C4 = D_8090D6C4; // type:f32 size:0x4
0x8090D6C8 = D_8090D6C8; // type:f32 size:0x4
0x8090D6CC = D_8090D6CC; // type:f32 size:0x4
0x8090D6D0 = D_8090D6D0; // type:f32 size:0x4
0x8090D6D4 = D_8090D6D4; // type:f32 size:0x4
0x8090D6D8 = D_8090D6D8; // type:f32 size:0x4
0x8090D6DC = D_8090D6DC; // type:f32 size:0x4
0x8090D6E0 = D_8090D6E0; // type:f32 size:0x4
0x8090D6E4 = D_8090D6E4; // type:f32 size:0x4
0x8090D6E8 = D_8090D6E8; // type:f32 size:0x4
0x8090D6EC = D_8090D6EC; // type:f32 size:0x4
0x8090D6F0 = D_8090D6F0; // type:f32 size:0x4
0x8090D6F4 = D_8090D6F4; // type:f32 size:0x4
0x8090D6F8 = D_8090D6F8; // type:f32 size:0x4
0x8090D6FC = D_8090D6FC; // type:f32 size:0x4
0x8090D700 = D_8090D700; // type:f32 size:0x4
0x8090D704 = D_8090D704; // type:f32 size:0x4
0x8090D708 = D_8090D708; // type:f32 size:0x4
0x8090D70C = D_8090D70C; // type:f32 size:0x4
0x8090D710 = D_8090D710; // type:f32 size:0x4
0x8090D714 = D_8090D714; // type:f32 size:0x4
0x8090D718 = D_8090D718; // type:f32 size:0x4
0x8090D71C = D_8090D71C; // type:f32 size:0x4
0x8090D720 = D_8090D720; // type:f32 size:0x4
0x8090D724 = D_8090D724; // type:f32 size:0x4
0x8090D728 = D_8090D728; // type:f32 size:0x4
0x8090D72C = D_8090D72C; // type:f32 size:0x4
0x8090D730 = D_8090D730; // type:f32 size:0x4
0x8090D734 = D_8090D734; // type:f32 size:0x4
0x8090D738 = D_8090D738; // type:f32 size:0x4
0x8090D73C = D_8090D73C; // type:f32 size:0x4
0x8090D740 = D_8090D740; // type:f32 size:0x4
0x8090D744 = D_8090D744; // type:f32 size:0x4
0x8090D748 = D_8090D748; // type:f32 size:0x4
0x8090D74C = D_8090D74C; // type:f32 size:0x4
0x8090D750 = D_8090D750; // type:f32 size:0x4
0x8090D754 = D_8090D754; // type:f32 size:0x4
0x8090D758 = D_8090D758; // type:f32 size:0x4
0x8090D75C = D_8090D75C; // type:f32 size:0x4
0x8090D760 = D_8090D760; // type:f32 size:0x4
0x8090D764 = D_8090D764; // type:f32 size:0x4
0x8090D768 = D_8090D768; // type:f32 size:0x4
0x8090D76C = D_8090D76C; // type:f32 size:0x4
0x8090D770 = D_8090D770; // type:f32 size:0x4
0x8090D774 = D_8090D774; // type:f32 size:0x4
0x8090D778 = D_8090D778; // type:f32 size:0x4
0x8090D77C = D_8090D77C; // type:f32 size:0x4
0x8090D780 = D_8090D780; // type:f32 size:0x4
0x8090D784 = D_8090D784; // type:f32 size:0x4
0x8090D788 = D_8090D788; // type:f32 size:0x4
0x8090D78C = D_8090D78C; // type:f32 size:0x4
0x8090D790 = D_8090D790; // type:f32 size:0x4
0x8090D794 = D_8090D794; // type:f32 size:0x4
0x8090D798 = D_8090D798; // type:f32 size:0x4
0x8090D79C = D_8090D79C; // type:f32 size:0x4
0x8090D7A0 = D_8090D7A0; // type:f32 size:0x4
0x8090D7A4 = D_8090D7A4; // type:f32 size:0x4
0x8090D7A8 = D_8090D7A8; // type:f32 size:0x4
0x8090D7AC = D_8090D7AC; // type:f32 size:0x4
0x8090D7B0 = D_8090D7B0; // type:f32 size:0x4
0x8090D7B4 = D_8090D7B4; // type:f32 size:0x4
0x8090D7B8 = D_8090D7B8; // type:f32 size:0x4
0x8090D7BC = D_8090D7BC; // type:f32 size:0x4
0x8090D7C0 = D_8090D7C0; // type:f32 size:0x4
0x8090D7C4 = jtbl_8090D7C4; // type:UNK_PTR size:0x4
0x8090D7DC = D_8090D7DC; // type:f32 size:0x4
0x8090D7E0 = D_8090D7E0; // type:f32 size:0x4
0x8090D7E4 = D_8090D7E4; // type:f32 size:0x4
0x8090D7E8 = D_8090D7E8; // type:f32 size:0x4
0x8090D7EC = D_8090D7EC; // type:f32 size:0x4
0x8090D7F0 = D_8090D7F0; // type:f32 size:0x4
0x8090D7F4 = D_8090D7F4; // type:f32 size:0x4
0x8090D7F8 = D_8090D7F8; // type:f32 size:0x4
0x8090D7FC = D_8090D7FC; // type:f32 size:0x4
0x8090D800 = D_8090D800; // type:f32 size:0x4
0x8090D804 = D_8090D804; // type:f32 size:0x4
0x8090D808 = D_8090D808; // type:f32 size:0x4
0x8090D80C = D_8090D80C; // type:f32 size:0x4
0x8090D810 = D_8090D810; // type:f32 size:0x4
0x8090D814 = D_8090D814; // type:f32 size:0x4
0x8090D818 = D_8090D818; // type:f32 size:0x4
0x8090D81C = D_8090D81C; // type:f32 size:0x4
0x8090D820 = D_8090D820; // type:f32 size:0x4
0x8090D824 = D_8090D824; // type:f32 size:0x4
0x8090D828 = D_8090D828; // type:f32 size:0x4
0x8090D82C = D_8090D82C; // type:f32 size:0x4
0x8090D830 = D_8090D830; // type:f32 size:0x4
0x8090D834 = D_8090D834; // type:f32 size:0x4
0x8090D838 = D_8090D838; // type:f32 size:0x4
0x8090D83C = D_8090D83C; // type:f32 size:0x4
0x8090D840 = D_8090D840; // type:f32 size:0x4
0x8090D844 = D_8090D844; // type:f32 size:0x4
0x8090D848 = D_8090D848; // type:f32 size:0x4
0x8090D84C = D_8090D84C; // type:f32 size:0x4
0x8090D850 = D_8090D850; // type:f32 size:0x4
0x8090D854 = D_8090D854; // type:f32 size:0x4
0x8090D858 = D_8090D858; // type:f32 size:0x4
0x8090D85C = D_8090D85C; // type:f32 size:0x4
0x8090D860 = D_8090D860; // type:f32 size:0x4
0x8090D864 = D_8090D864; // type:f32 size:0x4
0x8090D868 = D_8090D868; // type:f32 size:0x4
0x8090D86C = D_8090D86C; // type:f32 size:0x4
0x8090D870 = D_8090D870; // type:f32 size:0x4
0x8090D874 = D_8090D874; // type:f32 size:0x4
0x8090D878 = D_8090D878; // type:f32 size:0x4
0x8090D87C = D_8090D87C; // type:f32 size:0x4
0x8090D880 = D_8090D880; // type:f32 size:0x4
0x8090D884 = D_8090D884; // type:f32 size:0x4
0x8090D888 = D_8090D888; // type:f32 size:0x4
0x8090D88C = D_8090D88C; // type:f32 size:0x4
0x8090D890 = D_8090D890; // type:f32 size:0x4
0x8090D894 = D_8090D894; // type:f32 size:0x4
0x8090D898 = D_8090D898; // type:f32 size:0x4
0x8090D89C = D_8090D89C; // type:f32 size:0x4
0x8090D8A0 = D_8090D8A0; // type:f32 size:0x4
0x8090D8A4 = D_8090D8A4; // type:f32 size:0x4
0x8090D8A8 = D_8090D8A8; // type:f32 size:0x4
0x8090D8AC = D_8090D8AC; // type:f32 size:0x4
0x8090D8B0 = D_8090D8B0; // type:f32 size:0x4
0x8090D8B4 = D_8090D8B4; // type:f32 size:0x4
0x8090D8B8 = D_8090D8B8; // type:f32 size:0x4
0x8090D8BC = D_8090D8BC; // type:f32 size:0x4
0x8090D8C0 = D_8090D8C0; // type:f32 size:0x4
0x8090D8C4 = D_8090D8C4; // type:f32 size:0x4
0x8090D8C8 = D_8090D8C8; // type:f32 size:0x4
0x8090D8CC = D_8090D8CC; // type:f32 size:0x4
0x8090D8D0 = jtbl_8090D8D0; // type:UNK_PTR size:0x4
0x8090D964 = D_8090D964; // type:f32 size:0x4
0x8090D968 = D_8090D968; // type:f32 size:0x4
0x8090D96C = D_8090D96C; // type:f32 size:0x4
0x8090D970 = D_8090D970; // type:f32 size:0x4
0x8090D974 = D_8090D974; // type:f32 size:0x4
0x8090D978 = D_8090D978; // type:f32 size:0x4
0x8090D97C = D_8090D97C; // type:f32 size:0x4
0x8090D980 = D_8090D980; // type:f32 size:0x4
0x8090D984 = D_8090D984; // type:f32 size:0x4
0x8090D988 = D_8090D988; // type:f32 size:0x4
0x8090D98C = D_8090D98C; // type:f32 size:0x4
0x8090D990 = D_8090D990; // type:f32 size:0x4
0x8090D994 = D_8090D994; // type:f32 size:0x4
0x8090D998 = D_8090D998; // type:f32 size:0x4
0x8090D99C = D_8090D99C; // type:f32 size:0x4
0x8090D9A0 = D_8090D9A0; // type:f32 size:0x4
0x8090D9A4 = D_8090D9A4; // type:f32 size:0x4
0x8090D9A8 = D_8090D9A8; // type:f32 size:0x4
0x8090D9AC = D_8090D9AC; // type:f32 size:0x4
0x8090D9B0 = D_8090D9B0; // type:f32 size:0x4
0x8090D9B4 = D_8090D9B4; // type:f32 size:0x4
0x8090D9B8 = D_8090D9B8; // type:f32 size:0x4
0x8090D9BC = D_8090D9BC; // type:f32 size:0x4
0x8090D9C0 = D_8090D9C0; // type:f32 size:0x4
0x8090D9C4 = D_8090D9C4; // type:f32 size:0x4
0x8090D9C8 = D_8090D9C8; // type:f32 size:0x4
0x8090D9CC = D_8090D9CC; // type:f32 size:0x4
0x8090D9D0 = D_8090D9D0; // type:f32 size:0x4
0x8090D9D4 = D_8090D9D4; // type:f32 size:0x4
0x8090D9D8 = D_8090D9D8; // type:f32 size:0x4
0x8090D9DC = D_8090D9DC; // type:f32 size:0x4
0x8090D9E0 = D_8090D9E0; // type:f32 size:0x4
0x8090D9E4 = D_8090D9E4; // type:f32 size:0x4
0x8090D9E8 = D_8090D9E8; // type:f32 size:0x4
0x8090D9EC = D_8090D9EC; // type:f32 size:0x4
0x8090D9F0 = D_8090D9F0; // type:f32 size:0x4
0x8090D9F4 = D_8090D9F4; // type:f32 size:0x4
0x8090D9F8 = D_8090D9F8; // type:f32 size:0x4
0x8090D9FC = D_8090D9FC; // type:f32 size:0x4
0x8090DA00 = D_8090DA00; // type:f32 size:0x4
0x8090DA04 = D_8090DA04; // type:f32 size:0x4
0x8090DA08 = D_8090DA08; // type:f32 size:0x4
0x8090DA0C = D_8090DA0C; // type:f32 size:0x4
0x8090DA10 = D_8090DA10; // type:f32 size:0x4
0x8090DA14 = D_8090DA14; // type:f32 size:0x4
0x8090DA18 = D_8090DA18; // type:f32 size:0x4
0x8090DA1C = D_8090DA1C; // type:f32 size:0x4
0x8090DA20 = D_8090DA20; // type:f32 size:0x4
0x8090DA24 = D_8090DA24; // type:f32 size:0x4
0x8090DA28 = D_8090DA28; // type:f32 size:0x4
0x8090DA2C = D_8090DA2C; // type:f32 size:0x4
0x8090DA30 = D_8090DA30; // type:f32 size:0x4
0x8090DA34 = D_8090DA34; // type:f32 size:0x4
0x8090DA38 = D_8090DA38; // type:f32 size:0x4
0x8090DA3C = D_8090DA3C; // type:f32 size:0x4
0x8090DA40 = D_8090DA40; // type:f32 size:0x4
0x8090DA44 = D_8090DA44; // type:f32 size:0x4
0x8090DA48 = D_8090DA48; // type:f32 size:0x4
0x8090DA4C = D_8090DA4C; // type:f32 size:0x4
0x8090DA50 = D_8090DA50; // type:f32 size:0x4
0x8090DA54 = D_8090DA54; // type:f32 size:0x4
0x8090DA58 = D_8090DA58; // type:f32 size:0x4
0x8090DA5C = D_8090DA5C; // type:f32 size:0x4
0x8090DA60 = D_8090DA60; // type:f32 size:0x4
0x8090DA64 = D_8090DA64; // type:f32 size:0x4
0x8090DA68 = D_8090DA68; // type:f32 size:0x4
0x8090DA6C = D_8090DA6C; // type:f32 size:0x4
0x8090DA70 = D_8090DA70; // type:f32 size:0x4
0x8090DA74 = D_8090DA74; // type:f32 size:0x4
0x8090DA78 = D_8090DA78; // type:f32 size:0x4
0x8090DA7C = D_8090DA7C; // type:f32 size:0x4
0x8090DA80 = D_8090DA80; // type:f32 size:0x4
0x8090DA84 = D_8090DA84; // type:f32 size:0x4
0x8090DA88 = D_8090DA88; // type:f32 size:0x4
0x8090DA8C = D_8090DA8C; // type:f32 size:0x4
0x8090DA90 = D_8090DA90; // type:f32 size:0x4
0x8090DA94 = D_8090DA94; // type:f32 size:0x4
0x8090DA98 = D_8090DA98; // type:f32 size:0x4
0x8090DA9C = D_8090DA9C; // type:f32 size:0x4
0x8090DAA0 = D_8090DAA0; // type:f32 size:0x4
0x8090DAA4 = D_8090DAA4; // type:f32 size:0x4
0x8090DAA8 = D_8090DAA8; // type:f32 size:0x4
0x8090DAAC = D_8090DAAC; // type:f32 size:0x4
0x8090DAB0 = D_8090DAB0; // type:f32 size:0x4
0x8090DAB4 = D_8090DAB4; // type:f32 size:0x4
0x8090DAB8 = D_8090DAB8; // type:f32 size:0x4
0x8090DABC = D_8090DABC; // type:f32 size:0x4
0x8090DAC0 = D_8090DAC0; // type:f32 size:0x4
0x8090DAC4 = D_8090DAC4; // type:f32 size:0x4
0x8090DAC8 = D_8090DAC8; // type:f32 size:0x4
0x8090DACC = D_8090DACC; // type:f32 size:0x4
0x8090DAD0 = D_8090DAD0; // type:f32 size:0x4
0x8090DAD4 = D_8090DAD4; // type:f32 size:0x4
0x8090DAD8 = D_8090DAD8; // type:f32 size:0x4
0x8090DADC = D_8090DADC; // type:f32 size:0x4
0x8090DAE0 = D_8090DAE0; // type:f32 size:0x4
0x8090DAE4 = D_8090DAE4; // type:f32 size:0x4
0x8090DAE8 = D_8090DAE8; // type:f32 size:0x4
0x8090DAEC = D_8090DAEC; // type:f32 size:0x4
0x8090DAF0 = D_8090DAF0; // type:f32 size:0x4
0x8090DAF4 = D_8090DAF4; // type:f32 size:0x4
0x8090DAF8 = jtbl_8090DAF8; // type:UNK_PTR size:0x4
0x8090DB5C = D_8090DB5C; // type:f32 size:0x4
0x8090DB60 = D_8090DB60; // type:f32 size:0x4
0x8090DB64 = D_8090DB64; // type:f32 size:0x4
0x8090DB68 = D_8090DB68; // type:f32 size:0x4
0x8090DB6C = D_8090DB6C; // type:f32 size:0x4
0x8090DB70 = jtbl_8090DB70; // type:UNK_PTR size:0x4
0x8090DBCC = D_8090DBCC; // type:f32 size:0x4
0x8090DBD0 = D_8090DBD0; // type:f32 size:0x4
0x8090DBD4 = D_8090DBD4; // type:f32 size:0x4
0x8090DBD8 = D_8090DBD8; // type:f32 size:0x4
0x8090DBDC = D_8090DBDC; // type:f32 size:0x4
0x8090DBE0 = D_8090DBE0; // type:f32 size:0x4
0x8090DBE4 = D_8090DBE4; // type:f32 size:0x4
0x8090DBE8 = D_8090DBE8; // type:f32 size:0x4
0x8090DBEC = D_8090DBEC; // type:f32 size:0x4
0x8090DBF0 = D_8090DBF0; // type:f32 size:0x4
0x8090DBF4 = D_8090DBF4; // type:f32 size:0x4
0x8090DBF8 = D_8090DBF8; // type:f32 size:0x4
0x8090DBFC = D_8090DBFC; // type:f32 size:0x4
0x8090DC00 = D_8090DC00; // type:f32 size:0x4
0x8090DC04 = D_8090DC04; // type:f32 size:0x4
0x8090DC08 = D_8090DC08; // type:f32 size:0x4
0x8090DC0C = D_8090DC0C; // type:f32 size:0x4
0x8090DC10 = D_8090DC10; // type:f32 size:0x4
0x8090DC14 = D_8090DC14; // type:f32 size:0x4
0x8090DC18 = D_8090DC18; // type:f32 size:0x4
0x8090DC1C = D_8090DC1C; // type:f32 size:0x4
0x8090DC20 = D_8090DC20; // type:f32 size:0x4
0x8090DC24 = D_8090DC24; // type:f32 size:0x4
0x809101B0 = D_809101B0; // type:f32 size:0x4
0x809101B4 = D_809101B4; // type:f32 size:0x4
0x809101B8 = D_809101B8; // type:UNK_TYPE1 size:0x1
0x809101BC = D_809101BC; // type:UNK_TYPE1 size:0x1
0x809101C0 = D_809101C0; // type:f32 size:0x4
0x809101C4 = D_809101C4; // type:f32 size:0x4
0x809101C8 = D_809101C8; // type:f32 size:0x4
0x809101CC = D_809101CC; // type:UNK_TYPE1 size:0x1
0x809101D0 = D_809101D0; // type:UNK_TYPE1 size:0x1
0x809101D8 = sRodTipPos; // type:Vec3f size:0xC
0x809101E8 = sReelLinePos; // type:Vec3f size:0x960
0x80910B48 = sReelLineRot; // type:Vec3f size:0x960
0x809114A8 = sReelLineUnk; // type:Vec3f size:0x960
0x80911E08 = sLureHookRefPos; // type:Vec3f size:0x18
0x80911E20 = sLureHookRotY; // type:f32 size:0x8
0x80911E28 = D_80911E28; // type:UNK_TYPE1 size:0x1
0x80911E30 = sSinkingLurePos; // type:Vec3f size:0xF0
0x80911F20 = D_80911F20; // type:UNK_TYPE1 size:0x1
0x80911F24 = sProjectedW; // type:f32 size:0x4
0x80911F28 = sCameraEye; // type:Vec3f size:0xC
0x80911F38 = sCameraAt; // type:Vec3f size:0xC
0x80911F44 = sCameraId; // type:s32 size:0x4
0x80911F48 = D_80911F48; // type:f32 size:0x4
0x80911F4C = D_80911F4C; // type:f32 size:0x4
0x80911F50 = D_80911F50; // type:UNK_TYPE1 size:0x1
0x80911F58 = sSinkingLureBasePos; // type:Vec3f size:0xC
0x80911F64 = D_80911F64; // type:f32 size:0x4
0x80911F68 = sRandSeed0; // type:s32 size:0x4
0x80911F6C = sRandSeed1; // type:s32 size:0x4
0x80911F70 = sRandSeed2; // type:s32 size:0x4
0x80911F78 = sPondProps; // type:UNK_TYPE1 size:0x20D0
0x80914048 = sGroupFishes; // type:UNK_TYPE1 size:0x10E0
0x80915128 = sFishGroupAngle1; // type:f32 size:0x4
0x8091512C = sFishGroupAngle2; // type:f32 size:0x4
0x80915130 = sFishGroupAngle3; // type:f32 size:0x4
0x80915138 = sFishingEffects; // type:UNK_TYPE1 size:0x2080
0x809171B8 = sStreamSoundProjectedPos; // type:Vec3f size:0xC
0x809171C4 = sFishingMain; // type:UNK_TYPE size:0x4
0x809171C8 = D_809171C8; // type:UNK_TYPE1 size:0x1
0x809171C9 = sLinkAge; // type:UNK_TYPE1 size:0x1
0x809171CA = D_809171CA; // type:UNK_TYPE1 size:0x1
0x809171CB = D_809171CB; // type:UNK_TYPE1 size:0x1
0x809171CC = D_809171CC; // type:f32 size:0x4
0x809171D0 = D_809171D0; // type:UNK_TYPE1 size:0x1
0x809171D1 = D_809171D1; // type:UNK_TYPE1 size:0x1
0x809171D2 = D_809171D2; // type:UNK_TYPE1 size:0x1
0x809171D4 = D_809171D4; // type:UNK_TYPE1 size:0x1
0x809171D6 = D_809171D6; // type:UNK_TYPE1 size:0x1
0x809171D8 = D_809171D8; // type:UNK_TYPE1 size:0x1
0x809171DA = D_809171DA; // type:UNK_TYPE1 size:0x1
0x809171DC = D_809171DC; // type:UNK_TYPE1 size:0x1
0x809171E0 = sOwnerHeadPos; // type:Vec3f size:0xC
0x809171EC = sEffOwnerHatRot; // type:Vec3s size:0x6
0x809171F2 = D_809171F2; // type:UNK_TYPE1 size:0x1
0x809171F4 = D_809171F4; // type:UNK_TYPE1 size:0x1
0x809171F6 = D_809171F6; // type:UNK_TYPE1 size:0x1
0x809171F8 = sFishingHookedFish; // type:UNK_TYPE size:0x4
0x809171FC = D_809171FC; // type:UNK_TYPE1 size:0x1
0x809171FE = D_809171FE; // type:UNK_TYPE1 size:0x1
0x80917200 = D_80917200; // type:UNK_TYPE1 size:0x1
0x80917202 = D_80917202; // type:UNK_TYPE1 size:0x1
0x80917204 = D_80917204; // type:UNK_TYPE1 size:0x1
0x80917206 = D_80917206; // type:UNK_TYPE1 size:0x1
0x80917208 = sLurePos; // type:Vec3f size:0xC
0x80917218 = D_80917218; // type:UNK_TYPE1 size:0x1
0x80917228 = sLureRot; // type:Vec3f size:0xC
0x80917238 = D_80917238; // type:Vec3f size:0xC
0x80917248 = D_80917248; // type:Vec3f size:0xC
0x80917254 = D_80917254; // type:f32 size:0x4
0x80917258 = D_80917258; // type:UNK_TYPE1 size:0x1
0x8091725C = D_8091725C; // type:f32 size:0x4
0x80917260 = D_80917260; // type:f32 size:0x4
0x80917264 = D_80917264; // type:UNK_TYPE1 size:0x1
0x80917266 = D_80917266; // type:UNK_TYPE1 size:0x1
0x80917268 = D_80917268; // type:UNK_TYPE1 size:0x1
0x8091726C = D_8091726C; // type:f32 size:0x4
0x80917270 = D_80917270; // type:UNK_TYPE1 size:0x1
0x80917272 = D_80917272; // type:UNK_TYPE1 size:0x1
0x80917274 = D_80917274; // type:UNK_TYPE1 size:0x1
0x80917278 = D_80917278; // type:Vec3f size:0xC
0x80918830 = Obj_Oshihiki_InitVars; // type:UNK_TYPE1 size:0x1
0x80918850 = D_80918850; // type:UNK_TYPE1 size:0x1
0x80918868 = D_80918868; // type:UNK_TYPE1 size:0x1
0x80918898 = D_80918898; // type:UNK_TYPE1 size:0x1
0x809188A4 = D_809188A4; // type:UNK_TYPE4 size:0x4
0x809188E0 = D_809188E0; // type:UNK_TYPE4 size:0x4
0x80918910 = D_80918910; // type:UNK_TYPE4 size:0x4
0x80918940 = D_80918940; // type:UNK_TYPE1 size:0x1
0x80918950 = D_80918950; // type:f32 size:0x4
0x80918954 = jtbl_80918954; // type:UNK_PTR size:0x4
0x8091896C = D_8091896C; // type:f32 size:0x4
0x80918970 = D_80918970; // type:f32 size:0x4
0x80918974 = D_80918974; // type:f32 size:0x4
0x80918978 = D_80918978; // type:f32 size:0x4
0x8091897C = D_8091897C; // type:f32 size:0x4
0x80918980 = D_80918980; // type:f32 size:0x4
0x80918984 = D_80918984; // type:f32 size:0x4
0x80918988 = D_80918988; // type:f32 size:0x4
0x8091898C = D_8091898C; // type:f32 size:0x4
0x80918990 = D_80918990; // type:f32 size:0x4
0x80919D90 = Eff_Dust_InitVars; // type:UNK_TYPE1 size:0x1
0x80919DB0 = D_80919DB0; // type:UNK_TYPE1 size:0x1
0x80919DC0 = jtbl_80919DC0; // type:UNK_PTR size:0x4
0x80919DD8 = D_80919DD8; // type:f32 size:0x4
0x80919DDC = D_80919DDC; // type:f32 size:0x4
0x80919DE0 = D_80919DE0; // type:f32 size:0x4
0x80919DE4 = D_80919DE4; // type:f32 size:0x4
0x80919DE8 = D_80919DE8; // type:f32 size:0x4
0x80919DEC = D_80919DEC; // type:f32 size:0x4
0x80919DF0 = D_80919DF0; // type:f32 size:0x4
0x80919DF4 = D_80919DF4; // type:f32 size:0x4
0x80919DF8 = D_80919DF8; // type:f32 size:0x4
0x80919DFC = D_80919DFC; // type:f32 size:0x4
0x80919E00 = D_80919E00; // type:f32 size:0x4
0x80919E04 = D_80919E04; // type:f32 size:0x4
0x80919E08 = D_80919E08; // type:f32 size:0x4
0x8091A7F0 = Bg_Umajump_InitVars; // type:UNK_TYPE1 size:0x1
0x8091A810 = D_8091A810; // type:UNK_TYPE1 size:0x1
0x8091BD60 = D_8091BD60; // type:UNK_TYPE2 size:0x2
0x8091BD64 = En_Insect_InitVars; // type:UNK_TYPE1 size:0x1
0x8091BD84 = D_8091BD84; // type:UNK_TYPE1 size:0x1
0x8091BDA8 = D_8091BDA8; // type:UNK_TYPE1 size:0x1
0x8091BDB8 = D_8091BDB8; // type:UNK_TYPE1 size:0x1
0x8091BDBC = D_8091BDBC; // type:UNK_TYPE1 size:0x1
0x8091BDCC = D_8091BDCC; // type:UNK_TYPE1 size:0x1
0x8091BDE0 = D_8091BDE0; // type:f32 size:0x4
0x8091BDE4 = D_8091BDE4; // type:f32 size:0x4
0x8091BDE8 = D_8091BDE8; // type:f32 size:0x4
0x8091BDEC = D_8091BDEC; // type:f32 size:0x4
0x8091BDF0 = D_8091BDF0; // type:f32 size:0x4
0x8091BDF4 = D_8091BDF4; // type:f32 size:0x4
0x8091BDF8 = D_8091BDF8; // type:f32 size:0x4
0x8091BDFC = D_8091BDFC; // type:f32 size:0x4
0x8091BE00 = D_8091BE00; // type:f32 size:0x4
0x8091BE04 = D_8091BE04; // type:f32 size:0x4
0x8091BE08 = D_8091BE08; // type:f32 size:0x4
0x8091BE0C = D_8091BE0C; // type:f32 size:0x4
0x8091BE10 = D_8091BE10; // type:f32 size:0x4
0x8091BE14 = D_8091BE14; // type:f32 size:0x4
0x8091BE18 = D_8091BE18; // type:f32 size:0x4
0x8091BE1C = D_8091BE1C; // type:f32 size:0x4
0x8091BE20 = D_8091BE20; // type:f32 size:0x4
0x8091BE24 = D_8091BE24; // type:f32 size:0x4
0x8091BE28 = D_8091BE28; // type:f32 size:0x4
0x8091BE2C = D_8091BE2C; // type:f32 size:0x4
0x8091BE30 = D_8091BE30; // type:f32 size:0x4
0x8091BE34 = D_8091BE34; // type:f32 size:0x4
0x8091BE38 = D_8091BE38; // type:f32 size:0x4
0x8091BE3C = D_8091BE3C; // type:f32 size:0x4
0x8091BE40 = D_8091BE40; // type:f32 size:0x4
0x8091BE44 = D_8091BE44; // type:f32 size:0x4
0x8091BE48 = D_8091BE48; // type:f32 size:0x4
0x8091BE4C = D_8091BE4C; // type:f32 size:0x4
0x8091BE50 = D_8091BE50; // type:f32 size:0x4
0x8091BE54 = D_8091BE54; // type:f32 size:0x4
0x8091BE58 = D_8091BE58; // type:f32 size:0x4
0x8091BE5C = D_8091BE5C; // type:f32 size:0x4
0x8091BE60 = D_8091BE60; // type:f32 size:0x4
0x8091BE64 = D_8091BE64; // type:f32 size:0x4
0x8091BE68 = D_8091BE68; // type:f32 size:0x4
0x8091BE6C = D_8091BE6C; // type:f32 size:0x4
0x8091D2D0 = D_8091D2D0; // type:UNK_TYPE1 size:0x1
0x8091D2F4 = D_8091D2F4; // type:UNK_TYPE1 size:0x1
0x8091D304 = En_Butte_InitVars; // type:UNK_TYPE1 size:0x1
0x8091D324 = D_8091D324; // type:UNK_TYPE1 size:0x1
0x8091D360 = D_8091D360; // type:UNK_TYPE1 size:0x1
0x8091D39C = D_8091D39C; // type:f32 size:0x4
0x8091D3A0 = D_8091D3A0; // type:UNK_TYPE2 size:0x2
0x8091D3A4 = D_8091D3A4; // type:UNK_TYPE1 size:0x1
0x8091D3B0 = D_8091D3B0; // type:UNK_TYPE1 size:0x1
0x8091D3C0 = D_8091D3C0; // type:UNK_TYPE1 size:0x1
0x8091D3CC = D_8091D3CC; // type:UNK_TYPE1 size:0x1
0x8091D3D8 = D_8091D3D8; // type:UNK_TYPE1 size:0x1
0x8091D3E4 = D_8091D3E4; // type:UNK_TYPE1 size:0x1
0x8091D3F0 = D_8091D3F0; // type:UNK_TYPE4 size:0x4
0x8091D400 = D_8091D400; // type:f32 size:0x4
0x8091D404 = D_8091D404; // type:f32 size:0x4
0x8091D408 = D_8091D408; // type:f32 size:0x4
0x8091D40C = D_8091D40C; // type:f32 size:0x4
0x8091D410 = D_8091D410; // type:f32 size:0x4
0x8091D414 = D_8091D414; // type:f32 size:0x4
0x8091D418 = D_8091D418; // type:f32 size:0x4
0x8091D41C = D_8091D41C; // type:f32 size:0x4
0x8091D420 = D_8091D420; // type:f32 size:0x4
0x8091D424 = D_8091D424; // type:f32 size:0x4
0x8091D428 = D_8091D428; // type:f32 size:0x4
0x8091D42C = D_8091D42C; // type:f32 size:0x4
0x8091D430 = D_8091D430; // type:f32 size:0x4
0x8091D434 = D_8091D434; // type:f32 size:0x4
0x8091D438 = D_8091D438; // type:f32 size:0x4
0x8091D43C = D_8091D43C; // type:f32 size:0x4
0x8091D440 = D_8091D440; // type:f32 size:0x4
0x8091D444 = D_8091D444; // type:f32 size:0x4
0x8091FA60 = D_8091FA60; // type:UNK_TYPE1 size:0x1
0x8091FA84 = D_8091FA84; // type:UNK_TYPE1 size:0x1
0x8091FA94 = D_8091FA94; // type:UNK_TYPE1 size:0x1
0x8091FAA0 = En_Fish_InitVars; // type:UNK_TYPE1 size:0x1
0x8091FAC0 = D_8091FAC0; // type:UNK_TYPE1 size:0x1
0x8091FACC = D_8091FACC; // type:UNK_TYPE1 size:0x1
0x8091FAD4 = D_8091FAD4; // type:UNK_TYPE1 size:0x1
0x8091FADC = D_8091FADC; // type:UNK_TYPE1 size:0x1
0x8091FAE8 = D_8091FAE8; // type:UNK_TYPE4 size:0x4
0x8091FB00 = D_8091FB00; // type:f32 size:0x4
0x8091FB04 = D_8091FB04; // type:f32 size:0x4
0x8091FB08 = D_8091FB08; // type:f32 size:0x4
0x8091FB0C = D_8091FB0C; // type:f32 size:0x4
0x8091FB10 = D_8091FB10; // type:f32 size:0x4
0x8091FB14 = D_8091FB14; // type:f32 size:0x4
0x8091FB18 = D_8091FB18; // type:f32 size:0x4
0x8091FB1C = D_8091FB1C; // type:f32 size:0x4
0x8091FB20 = D_8091FB20; // type:f32 size:0x4
0x8091FB24 = D_8091FB24; // type:f32 size:0x4
0x8091FB28 = D_8091FB28; // type:f32 size:0x4
0x8091FB2C = D_8091FB2C; // type:f32 size:0x4
0x8091FB30 = D_8091FB30; // type:f32 size:0x4
0x8091FB34 = D_8091FB34; // type:f32 size:0x4
0x8091FB38 = D_8091FB38; // type:f32 size:0x4
0x8091FB3C = D_8091FB3C; // type:f32 size:0x4
0x8091FB40 = D_8091FB40; // type:f32 size:0x4
0x8091FB44 = D_8091FB44; // type:f32 size:0x4
0x8091FB48 = D_8091FB48; // type:f32 size:0x4
0x8091FB4C = D_8091FB4C; // type:f32 size:0x4
0x8091FB50 = D_8091FB50; // type:f32 size:0x4
0x8091FB54 = D_8091FB54; // type:f32 size:0x4
0x8091FB58 = D_8091FB58; // type:f32 size:0x4
0x8091FB5C = D_8091FB5C; // type:f32 size:0x4
0x8091FB60 = D_8091FB60; // type:f32 size:0x4
0x8091FB64 = D_8091FB64; // type:f32 size:0x4
0x8091FB68 = D_8091FB68; // type:f32 size:0x4
0x8091FB6C = D_8091FB6C; // type:f32 size:0x4
0x8091FB70 = D_8091FB70; // type:f32 size:0x4
0x8091FB74 = D_8091FB74; // type:f32 size:0x4
0x8091FB78 = D_8091FB78; // type:f32 size:0x4
0x8091FB7C = D_8091FB7C; // type:f32 size:0x4
0x8091FB80 = D_8091FB80; // type:f32 size:0x4
0x8091FB84 = D_8091FB84; // type:f32 size:0x4
0x8091FB88 = D_8091FB88; // type:f32 size:0x4
0x8091FB8C = D_8091FB8C; // type:f32 size:0x4
0x8091FB90 = D_8091FB90; // type:f32 size:0x4
0x8091FB94 = D_8091FB94; // type:f32 size:0x4
0x8091FB98 = D_8091FB98; // type:f32 size:0x4
0x8091FB9C = D_8091FB9C; // type:f32 size:0x4
0x8091FBA0 = D_8091FBA0; // type:f32 size:0x4
0x8091FBA4 = D_8091FBA4; // type:f32 size:0x4
0x8091FBA8 = D_8091FBA8; // type:f32 size:0x4
0x8091FBAC = D_8091FBAC; // type:f32 size:0x4
0x8091FBB0 = D_8091FBB0; // type:f32 size:0x4
0x8091FBB4 = D_8091FBB4; // type:f32 size:0x4
0x80920210 = Item_Etcetera_InitVars; // type:UNK_TYPE1 size:0x1
0x80920230 = D_80920230; // type:UNK_TYPE1 size:0x1
0x8092024C = D_8092024C; // type:UNK_TYPE1 size:0x1
0x80920268 = D_80920268; // type:UNK_TYPE1 size:0x1
0x80920290 = jtbl_80920290; // type:UNK_PTR size:0x4
0x80920DF0 = gFireArrowTex; // type:u8 size:0x800
0x809215F0 = gFireArrowMaskTex; // type:u8 size:0x800
0x80921DF0 = gFireArrowVtx; // type:F3DVertex size:0x2b0
0x809220A0 = gIceArrowMaterialDL; // type:Gfx size:0xb0
0x80922150 = gIceArrowModelDL; // type:Gfx size:0xc0
0x80922210 = Arrow_Fire_InitVars; // type:ActorInit size:0x20
0x80922230 = sQuadInit; // type:UNK_TYPE1 size:0x1
0x80922280 = sInitChain; // type:ActorInitVar size:0x4
0x80922284 = D_80922284; // type:Vec3f size:0xc
0x80922290 = D_80922290; // type:Vec3f size:0xc
0x8092229C = D_8092229C; // type:Vec3f size:0xc
0x809222A8 = D_809222A8; // type:Vec3f size:0xc
0x809222B4 = D_809222B4; // type:Vec3f size:0xc
0x809222C0 = D_809222C0; // type:Vec3f size:0xc
0x809222CC = D_809222CC; // type:Vec3f size:0xc
0x809222D8 = D_809222D8; // type:Vec3f size:0xc
0x809222F0 = D_809222F0; // type:f32 size:0x4
0x809222F4 = D_809222F4; // type:f32 size:0x4
0x809222F8 = D_809222F8; // type:f32 size:0x4
0x809222FC = D_809222FC; // type:f32 size:0x4
0x80922300 = D_80922300; // type:f32 size:0x4
0x80922304 = D_80922304; // type:f32 size:0x4
0x80922308 = D_80922308; // type:f32 size:0x4
0x8092230C = D_8092230C; // type:f32 size:0x4
0x80922DB0 = D_80922DB0; // type:UNK_TYPE1 size:0x1
0x809235B0 = D_809235B0; // type:UNK_TYPE1 size:0x1
0x80923DB0 = D_80923DB0; // type:UNK_TYPE1 size:0x1
0x80923FB0 = D_80923FB0; // type:UNK_TYPE1 size:0x1
0x80924060 = D_80924060; // type:UNK_TYPE1 size:0x1
0x80924110 = D_80924110; // type:UNK_TYPE1 size:0x1
0x809241D0 = Arrow_Ice_InitVars; // type:UNK_TYPE1 size:0x1
0x809241F0 = D_809241F0; // type:UNK_TYPE1 size:0x1
0x80924200 = D_80924200; // type:char size:0x1
0x80924208 = D_80924208; // type:f32 size:0x4
0x8092420C = D_8092420C; // type:f32 size:0x4
0x80924210 = D_80924210; // type:f32 size:0x4
0x80924214 = D_80924214; // type:f32 size:0x4
0x80924218 = D_80924218; // type:f32 size:0x4
0x8092421C = D_8092421C; // type:f32 size:0x4
0x80924220 = D_80924220; // type:f32 size:0x4
0x80924224 = D_80924224; // type:f32 size:0x4
0x80924C60 = D_80924C60; // type:UNK_TYPE1 size:0x1
0x80925460 = D_80925460; // type:UNK_TYPE1 size:0x1
0x80925C60 = D_80925C60; // type:UNK_TYPE1 size:0x1
0x80925E60 = D_80925E60; // type:UNK_TYPE1 size:0x1
0x80925F10 = D_80925F10; // type:UNK_TYPE1 size:0x1
0x80925FC0 = D_80925FC0; // type:UNK_TYPE1 size:0x1
0x80926080 = Arrow_Light_InitVars; // type:UNK_TYPE1 size:0x1
0x809260A0 = sInitChain; // type:UNK_TYPE1 size:0x1
0x809260B0 = D_809260B0; // type:char size:0x1
0x809260B8 = D_809260B8; // type:f32 size:0x4
0x809260BC = D_809260BC; // type:f32 size:0x4
0x809260C0 = D_809260C0; // type:f32 size:0x4
0x809260C4 = D_809260C4; // type:f32 size:0x4
0x809260C8 = D_809260C8; // type:f32 size:0x4
0x809260CC = D_809260CC; // type:f32 size:0x4
0x809260D0 = D_809260D0; // type:f32 size:0x4
0x809260D4 = D_809260D4; // type:f32 size:0x4
0x80927380 = D_80927380; // type:UNK_TYPE2 size:0x2
0x80927384 = D_80927384; // type:UNK_TYPE2 size:0x2
0x80927388 = D_80927388; // type:UNK_TYPE2 size:0x2
0x8092738C = D_8092738C; // type:UNK_TYPE2 size:0x2
0x80927390 = Obj_Kibako_InitVars; // type:UNK_TYPE1 size:0x1
0x809273B0 = D_809273B0; // type:UNK_TYPE1 size:0x1
0x809273DC = D_809273DC; // type:UNK_TYPE1 size:0x1
0x809273E0 = D_809273E0; // type:UNK_TYPE1 size:0x1
0x809273E8 = D_809273E8; // type:UNK_TYPE1 size:0x1
0x809273F0 = D_809273F0; // type:UNK_TYPE1 size:0x1
0x80927400 = D_80927400; // type:f32 size:0x4
0x80927404 = D_80927404; // type:f32 size:0x4
0x80927408 = D_80927408; // type:f32 size:0x4
0x8092740C = D_8092740C; // type:f32 size:0x4
0x80927410 = D_80927410; // type:f32 size:0x4
0x80927414 = D_80927414; // type:f32 size:0x4
0x80927418 = D_80927418; // type:f32 size:0x4
0x8092741C = D_8092741C; // type:f32 size:0x4
0x80927420 = D_80927420; // type:f32 size:0x4
0x80927424 = D_80927424; // type:f32 size:0x4
0x80927428 = D_80927428; // type:f32 size:0x4
0x8092742C = D_8092742C; // type:f32 size:0x4
0x80929500 = D_80929500; // type:UNK_TYPE2 size:0x2
0x80929504 = D_80929504; // type:UNK_TYPE2 size:0x2
0x80929508 = D_80929508; // type:UNK_TYPE2 size:0x2
0x8092950C = D_8092950C; // type:UNK_TYPE2 size:0x2
0x80929510 = Obj_Tsubo_InitVars; // type:UNK_TYPE1 size:0x1
0x80929530 = D_80929530; // type:UNK_TYPE1 size:0x1
0x80929534 = D_80929534; // type:f32 size:0x4
0x80929538 = D_80929538; // type:UNK_TYPE1 size:0x1
0x80929590 = D_80929590; // type:UNK_TYPE1 size:0x1
0x809295B0 = D_809295B0; // type:UNK_TYPE1 size:0x1
0x809295DC = D_809295DC; // type:UNK_TYPE1 size:0x1
0x809295F0 = D_809295F0; // type:f32 size:0x4
0x809295F4 = D_809295F4; // type:f32 size:0x4
0x809295F8 = D_809295F8; // type:f32 size:0x4
0x809295FC = D_809295FC; // type:f32 size:0x4
0x80929600 = D_80929600; // type:f32 size:0x4
0x80929604 = D_80929604; // type:f32 size:0x4
0x80929608 = D_80929608; // type:f32 size:0x4
0x8092960C = D_8092960C; // type:f32 size:0x4
0x80929610 = D_80929610; // type:f32 size:0x4
0x80929614 = D_80929614; // type:f32 size:0x4
0x80929618 = D_80929618; // type:f32 size:0x4
0x8092961C = D_8092961C; // type:f32 size:0x4
0x80929620 = D_80929620; // type:f32 size:0x4
0x80929624 = D_80929624; // type:f32 size:0x4
0x80929628 = D_80929628; // type:f32 size:0x4
0x8092962C = D_8092962C; // type:f32 size:0x4
0x80929630 = D_80929630; // type:f32 size:0x4
0x80929634 = D_80929634; // type:f32 size:0x4
0x80929638 = D_80929638; // type:f32 size:0x4
0x8092963C = D_8092963C; // type:f32 size:0x4
0x80929640 = D_80929640; // type:f32 size:0x4
0x80929644 = D_80929644; // type:f32 size:0x4
0x80929648 = D_80929648; // type:f32 size:0x4
0x8092964C = D_8092964C; // type:f32 size:0x4
0x80929650 = D_80929650; // type:UNK_TYPE1 size:0x1
0x8092BFA0 = D_8092BFA0; // type:UNK_TYPE4 size:0x4
0x8092BFA4 = D_8092BFA4; // type:UNK_TYPE1 size:0x1
0x8092BFD8 = D_8092BFD8; // type:UNK_TYPE4 size:0x4
0x8092BFFC = En_Ik_InitVars; // type:UNK_TYPE1 size:0x1
0x8092C01C = D_8092C01C; // type:UNK_TYPE1 size:0x1
0x8092C048 = D_8092C048; // type:UNK_TYPE1 size:0x1
0x8092C0C0 = D_8092C0C0; // type:UNK_TYPE1 size:0x1
0x8092C0D0 = D_8092C0D0; // type:UNK_TYPE1 size:0x1
0x8092C120 = D_8092C120; // type:UNK_TYPE1 size:0x1
0x8092C140 = D_8092C140; // type:UNK_TYPE1 size:0x1
0x8092C160 = D_8092C160; // type:UNK_TYPE1 size:0x1
0x8092C168 = D_8092C168; // type:UNK_TYPE1 size:0x1
0x8092C174 = D_8092C174; // type:EffectBlureInit2 size:0x24
0x8092C198 = D_8092C198; // type:UNK_TYPE4 size:0x4
0x8092C19C = D_8092C19C; // type:UNK_TYPE1 size:0x1
0x8092C1A8 = D_8092C1A8; // type:UNK_TYPE1 size:0x1
0x8092C1C8 = D_8092C1C8; // type:UNK_TYPE1 size:0x1
0x8092C1D4 = D_8092C1D4; // type:UNK_TYPE1 size:0x1
0x8092C1E0 = D_8092C1E0; // type:UNK_TYPE1 size:0x1
0x8092C200 = D_8092C200; // type:UNK_TYPE1 size:0x1
0x8092C210 = D_8092C210; // type:f32 size:0x4
0x8092C214 = D_8092C214; // type:f32 size:0x4
0x8092C218 = D_8092C218; // type:f32 size:0x4
0x8092C21C = D_8092C21C; // type:f32 size:0x4
0x8092C220 = D_8092C220; // type:f32 size:0x4
0x8092C224 = D_8092C224; // type:f32 size:0x4
0x8092C228 = D_8092C228; // type:f32 size:0x4
0x8092C22C = D_8092C22C; // type:f32 size:0x4
0x8092C230 = D_8092C230; // type:f32 size:0x4
0x8092C234 = D_8092C234; // type:f32 size:0x4
0x8092C238 = D_8092C238; // type:f32 size:0x4
0x8092C23C = D_8092C23C; // type:f32 size:0x4
0x8092C240 = D_8092C240; // type:f32 size:0x4
0x8092C244 = D_8092C244; // type:f32 size:0x4
0x8092C248 = D_8092C248; // type:f32 size:0x4
0x8092C24C = D_8092C24C; // type:f32 size:0x4
0x8092C250 = D_8092C250; // type:f32 size:0x4
0x8092C570 = Demo_Shd_InitVars; // type:UNK_TYPE1 size:0x1
0x8092DCB0 = D_8092DCB0; // type:UNK_TYPE1 size:0x1
0x8092DCC0 = D_8092DCC0; // type:UNK_TYPE1 size:0x1
0x8092DCD0 = D_8092DCD0; // type:UNK_TYPE1 size:0x1
0x8092DCE0 = D_8092DCE0; // type:UNK_TYPE1 size:0x1
0x8092DCF0 = D_8092DCF0; // type:UNK_TYPE1 size:0x1
0x8092DD00 = D_8092DD00; // type:UNK_TYPE1 size:0x1
0x8092DD08 = En_Dns_InitVars; // type:UNK_TYPE1 size:0x1
0x8092DD28 = D_8092DD28; // type:UNK_TYPE1 size:0x1
0x8092DD54 = D_8092DD54; // type:UNK_PTR size:0x4
0x8092DD60 = sAnimations; // type:UNK_TYPE1 size:0x1
0x8092DE00 = D_8092DE00; // type:UNK_TYPE1 size:0x1
0x8092DE0C = D_8092DE0C; // type:UNK_TYPE1 size:0x1
0x8092DE1C = D_8092DE1C; // type:UNK_TYPE1 size:0x1
0x8092DE30 = D_8092DE30; // type:f32 size:0x4
0x8092DE34 = D_8092DE34; // type:f32 size:0x4
0x8092DE38 = D_8092DE38; // type:f32 size:0x4
0x8092E450 = Elf_Msg_InitVars; // type:UNK_TYPE1 size:0x1
0x8092E470 = D_8092E470; // type:UNK_TYPE1 size:0x1
0x8092E480 = D_8092E480; // type:char size:0x1
0x8092E488 = D_8092E488; // type:char size:0x1
0x8092E490 = D_8092E490; // type:f32 size:0x4
0x8092E494 = D_8092E494; // type:f32 size:0x4
0x8092E498 = D_8092E498; // type:f32 size:0x4
0x8092E49C = D_8092E49C; // type:f32 size:0x4
0x809303F0 = D_809303F0; // type:UNK_TYPE4 size:0x4
0x80930400 = D_80930400; // type:UNK_TYPE4 size:0x4
0x80930404 = En_Honotrap_InitVars; // type:UNK_TYPE1 size:0x1
0x80930424 = D_80930424; // type:UNK_TYPE1 size:0x1
0x8093049C = D_8093049C; // type:UNK_TYPE1 size:0x1
0x809304AC = D_809304AC; // type:UNK_TYPE1 size:0x1
0x809304D8 = D_809304D8; // type:UNK_TYPE1 size:0x1
0x809304E0 = D_809304E0; // type:UNK_TYPE1 size:0x1
0x809304EC = D_809304EC; // type:UNK_TYPE1 size:0x1
0x809304F8 = D_809304F8; // type:UNK_TYPE1 size:0x1
0x80930510 = D_80930510; // type:f32 size:0x4
0x80930514 = D_80930514; // type:f32 size:0x4
0x80930518 = D_80930518; // type:f32 size:0x4
0x8093051C = D_8093051C; // type:f32 size:0x4
0x80930520 = D_80930520; // type:f32 size:0x4
0x80930524 = D_80930524; // type:f32 size:0x4
0x80930528 = D_80930528; // type:f32 size:0x4
0x8093052C = D_8093052C; // type:f32 size:0x4
0x80930530 = D_80930530; // type:f32 size:0x4
0x80930534 = D_80930534; // type:f32 size:0x4
0x80930538 = D_80930538; // type:f32 size:0x4
0x8093053C = D_8093053C; // type:f32 size:0x4
0x80930540 = D_80930540; // type:f32 size:0x4
0x80930544 = D_80930544; // type:f32 size:0x4
0x80930548 = D_80930548; // type:f32 size:0x4
0x8093054C = D_8093054C; // type:f32 size:0x4
0x80930550 = D_80930550; // type:f32 size:0x4
0x80930554 = D_80930554; // type:f32 size:0x4
0x80930558 = D_80930558; // type:f32 size:0x4
0x8093055C = D_8093055C; // type:f32 size:0x4
0x80930560 = D_80930560; // type:f32 size:0x4
0x80930564 = D_80930564; // type:f32 size:0x4
0x80930568 = D_80930568; // type:f32 size:0x4
0x8093056C = D_8093056C; // type:f32 size:0x4
0x80930570 = D_80930570; // type:f32 size:0x4
0x80930574 = D_80930574; // type:f32 size:0x4
0x80931410 = D_80931410; // type:UNK_TYPE1 size:0x1
0x8093143C = En_Tubo_Trap_InitVars; // type:UNK_TYPE1 size:0x1
0x8093145C = D_8093145C; // type:UNK_TYPE1 size:0x1
0x8093146C = D_8093146C; // type:UNK_TYPE1 size:0x1
0x80931480 = D_80931480; // type:f32 size:0x4
0x80931484 = D_80931484; // type:f32 size:0x4
0x80931488 = D_80931488; // type:f32 size:0x4
0x8093148C = D_8093148C; // type:f32 size:0x4
0x80931490 = D_80931490; // type:f32 size:0x4
0x80931494 = D_80931494; // type:f32 size:0x4
0x80932300 = Obj_Ice_Poly_InitVars; // type:UNK_TYPE1 size:0x1
0x80932320 = D_80932320; // type:UNK_TYPE1 size:0x1
0x8093234C = D_8093234C; // type:UNK_TYPE1 size:0x1
0x80932378 = D_80932378; // type:UNK_TYPE1 size:0x1
0x8093237C = D_8093237C; // type:UNK_TYPE1 size:0x1
0x80932380 = D_80932380; // type:UNK_TYPE1 size:0x1
0x80932384 = D_80932384; // type:UNK_TYPE1 size:0x1
0x80932388 = D_80932388; // type:UNK_TYPE1 size:0x1
0x809323A0 = D_809323A0; // type:f32 size:0x4
0x809323A4 = D_809323A4; // type:f32 size:0x4
0x809323A8 = D_809323A8; // type:f32 size:0x4
0x809323AC = D_809323AC; // type:f32 size:0x4
0x809323B0 = D_809323B0; // type:f32 size:0x4
0x809323B4 = D_809323B4; // type:f32 size:0x4
0x809323B8 = D_809323B8; // type:f32 size:0x4
0x809346D0 = En_Fz_InitVars; // type:UNK_TYPE1 size:0x1
0x809346F0 = D_809346F0; // type:UNK_TYPE1 size:0x1
0x809346F8 = D_809346F8; // type:UNK_TYPE1 size:0x1
0x80934724 = D_80934724; // type:UNK_TYPE1 size:0x1
0x80934750 = D_80934750; // type:UNK_TYPE1 size:0x1
0x8093477C = D_8093477C; // type:UNK_TYPE1 size:0x1
0x8093479C = D_8093479C; // type:UNK_TYPE1 size:0x1
0x809347AC = D_809347AC; // type:UNK_PTR size:0x4
0x809347BC = D_809347BC; // type:UNK_TYPE1 size:0x1
0x809347D0 = D_809347D0; // type:f32 size:0x4
0x809347D4 = D_809347D4; // type:f32 size:0x4
0x809347D8 = D_809347D8; // type:f32 size:0x4
0x809347DC = D_809347DC; // type:f32 size:0x4
0x809347E0 = D_809347E0; // type:f32 size:0x4
0x809347E4 = D_809347E4; // type:f32 size:0x4
0x809347E8 = D_809347E8; // type:f32 size:0x4
0x809347EC = D_809347EC; // type:f32 size:0x4
0x809347F0 = D_809347F0; // type:f32 size:0x4
0x809347F4 = D_809347F4; // type:f32 size:0x4
0x809347F8 = D_809347F8; // type:f32 size:0x4
0x809347FC = D_809347FC; // type:f32 size:0x4
0x809366A0 = D_809366A0; // type:UNK_TYPE2 size:0x2
0x809366A4 = D_809366A4; // type:UNK_TYPE2 size:0x2
0x809366A8 = D_809366A8; // type:UNK_TYPE2 size:0x2
0x809366AC = D_809366AC; // type:UNK_TYPE2 size:0x2
0x809366B0 = D_809366B0; // type:UNK_TYPE2 size:0x2
0x809366B4 = D_809366B4; // type:UNK_PTR size:0x4
0x809366B8 = En_Kusa_InitVars; // type:UNK_TYPE1 size:0x1
0x809366D8 = D_809366D8; // type:UNK_TYPE1 size:0x1
0x809366E0 = D_809366E0; // type:UNK_TYPE1 size:0x1
0x8093670C = D_8093670C; // type:UNK_TYPE1 size:0x1
0x80936714 = D_80936714; // type:UNK_TYPE4 size:0x4
0x80936744 = D_80936744; // type:UNK_TYPE1 size:0x1
0x80936754 = D_80936754; // type:UNK_TYPE1 size:0x1
0x80936770 = D_80936770; // type:f32 size:0x4
0x80936774 = D_80936774; // type:f32 size:0x4
0x80936778 = D_80936778; // type:f32 size:0x4
0x8093677C = D_8093677C; // type:f32 size:0x4
0x80936780 = D_80936780; // type:f32 size:0x4
0x80936784 = D_80936784; // type:f32 size:0x4
0x80936788 = D_80936788; // type:f32 size:0x4
0x8093678C = D_8093678C; // type:f32 size:0x4
0x80936790 = D_80936790; // type:f32 size:0x4
0x80936794 = D_80936794; // type:f32 size:0x4
0x80936798 = D_80936798; // type:f32 size:0x4
0x8093679C = D_8093679C; // type:f32 size:0x4
0x809367A0 = D_809367A0; // type:f32 size:0x4
0x809367A4 = D_809367A4; // type:f32 size:0x4
0x809367A8 = D_809367A8; // type:f32 size:0x4
0x809367AC = D_809367AC; // type:f32 size:0x4
0x809367B0 = D_809367B0; // type:f32 size:0x4
0x809367B4 = D_809367B4; // type:f32 size:0x4
0x809367B8 = D_809367B8; // type:f32 size:0x4
0x80936AD0 = D_80936AD0; // type:UNK_TYPE4 size:0x4
0x80936AD8 = D_80936AD8; // type:UNK_TYPE4 size:0x4
0x80936CD8 = D_80936CD8; // type:UNK_TYPE2 size:0x2
0x80936CDA = D_80936CDA; // type:UNK_TYPE2 size:0x2
0x80936CDC = D_80936CDC; // type:UNK_TYPE2 size:0x2
0x80936CDE = D_80936CDE; // type:UNK_TYPE2 size:0x2
0x80936CE0 = D_80936CE0; // type:UNK_TYPE2 size:0x2
0x80938F80 = Obj_Bean_InitVars; // type:UNK_TYPE1 size:0x1
0x80938FA0 = D_80938FA0; // type:UNK_TYPE1 size:0x1
0x80938FCC = D_80938FCC; // type:UNK_TYPE1 size:0x1
0x80938FF8 = D_80938FF8; // type:UNK_TYPE1 size:0x1
0x80939018 = D_80939018; // type:UNK_TYPE1 size:0x1
0x80939024 = D_80939024; // type:UNK_PTR size:0x4
0x8093902C = D_8093902C; // type:UNK_TYPE1 size:0x1
0x80939040 = D_80939040; // type:f32 size:0x4
0x80939044 = D_80939044; // type:f32 size:0x4
0x80939048 = D_80939048; // type:f32 size:0x4
0x8093904C = D_8093904C; // type:f32 size:0x4
0x80939050 = D_80939050; // type:f32 size:0x4
0x80939054 = D_80939054; // type:f32 size:0x4
0x80939058 = D_80939058; // type:f32 size:0x4
0x8093905C = D_8093905C; // type:f32 size:0x4
0x80939060 = D_80939060; // type:f32 size:0x4
0x80939064 = D_80939064; // type:f32 size:0x4
0x80939068 = D_80939068; // type:f32 size:0x4
0x8093906C = D_8093906C; // type:f32 size:0x4
0x80939070 = D_80939070; // type:f32 size:0x4
0x80939074 = D_80939074; // type:f32 size:0x4
0x80939078 = D_80939078; // type:f32 size:0x4
0x8093907C = D_8093907C; // type:f32 size:0x4
0x80939080 = D_80939080; // type:f32 size:0x4
0x80939084 = D_80939084; // type:f32 size:0x4
0x80939088 = D_80939088; // type:f32 size:0x4
0x8093908C = D_8093908C; // type:f32 size:0x4
0x80939090 = D_80939090; // type:f32 size:0x4
0x80939094 = D_80939094; // type:f32 size:0x4
0x80939098 = D_80939098; // type:f32 size:0x4
0x8093909C = D_8093909C; // type:f32 size:0x4
0x809390A0 = D_809390A0; // type:f32 size:0x4
0x809390A4 = D_809390A4; // type:f32 size:0x4
0x809390A8 = D_809390A8; // type:f32 size:0x4
0x8093A920 = Obj_Bombiwa_InitVars; // type:UNK_TYPE1 size:0x1
0x8093A940 = D_8093A940; // type:UNK_TYPE1 size:0x1
0x8093A96C = D_8093A96C; // type:UNK_TYPE1 size:0x1
0x8093A998 = D_8093A998; // type:UNK_PTR size:0x4
0x8093A9B8 = D_8093A9B8; // type:UNK_TYPE1 size:0x1
0x8093A9C0 = D_8093A9C0; // type:UNK_TYPE1 size:0x1
0x8093A9D0 = D_8093A9D0; // type:UNK_TYPE2 size:0x2
0x8093A9E0 = D_8093A9E0; // type:UNK_TYPE2 size:0x2
0x8093A9E2 = D_8093A9E2; // type:UNK_TYPE1 size:0x1
0x8093A9F0 = D_8093A9F0; // type:f32 size:0x4
0x8093A9F4 = D_8093A9F4; // type:f32 size:0x4
0x8093A9F8 = D_8093A9F8; // type:f32 size:0x4
0x8093A9FC = D_8093A9FC; // type:f32 size:0x4
0x8093AA00 = D_8093AA00; // type:f32 size:0x4
0x8093AA04 = D_8093AA04; // type:f32 size:0x4
0x8093AA08 = D_8093AA08; // type:f32 size:0x4
0x8093AA0C = D_8093AA0C; // type:f32 size:0x4
0x8093AA10 = D_8093AA10; // type:f32 size:0x4
0x8093AA14 = D_8093AA14; // type:f32 size:0x4
0x8093AA18 = D_8093AA18; // type:f32 size:0x4
0x8093AA1C = D_8093AA1C; // type:f32 size:0x4
0x8093AA20 = D_8093AA20; // type:f32 size:0x4
0x8093AA24 = D_8093AA24; // type:f32 size:0x4
0x8093AA28 = D_8093AA28; // type:f32 size:0x4
0x8093AA2C = D_8093AA2C; // type:f32 size:0x4
0x8093AA30 = D_8093AA30; // type:f32 size:0x4
0x8093AA34 = D_8093AA34; // type:f32 size:0x4
0x8093AA38 = D_8093AA38; // type:f32 size:0x4
0x8093AA3C = D_8093AA3C; // type:f32 size:0x4
0x8093AA40 = D_8093AA40; // type:f32 size:0x4
0x8093CC60 = D_8093CC60; // type:UNK_TYPE4 size:0x4
0x8093CC80 = D_8093CC80; // type:UNK_TYPE4 size:0x4
0x8093CC84 = Obj_Switch_InitVars; // type:UNK_TYPE1 size:0x1
0x8093CCA4 = D_8093CCA4; // type:UNK_TYPE1 size:0x1
0x8093CCA8 = D_8093CCA8; // type:UNK_TYPE1 size:0x1
0x8093CCAC = D_8093CCAC; // type:UNK_TYPE1 size:0x1
0x8093CCB0 = D_8093CCB0; // type:UNK_TYPE1 size:0x1
0x8093CCB4 = D_8093CCB4; // type:UNK_TYPE1 size:0x1
0x8093CCB8 = D_8093CCB8; // type:UNK_TYPE1 size:0x1
0x8093CCBC = D_8093CCBC; // type:UNK_TYPE1 size:0x1
0x8093CCC0 = D_8093CCC0; // type:UNK_TYPE1 size:0x1
0x8093CCD0 = D_8093CCD0; // type:UNK_TYPE1 size:0x1
0x8093CCD4 = D_8093CCD4; // type:UNK_TYPE1 size:0x1
0x8093CD4C = D_8093CD4C; // type:UNK_TYPE1 size:0x1
0x8093CD5C = D_8093CD5C; // type:UNK_TYPE1 size:0x1
0x8093CDD4 = D_8093CDD4; // type:UNK_TYPE1 size:0x1
0x8093CDE4 = D_8093CDE4; // type:UNK_TYPE1 size:0x1
0x8093CE08 = D_8093CE08; // type:UNK_TYPE1 size:0x1
0x8093CE18 = D_8093CE18; // type:UNK_TYPE1 size:0x1
0x8093CE24 = D_8093CE24; // type:UNK_TYPE1 size:0x1
0x8093CE2C = D_8093CE2C; // type:UNK_TYPE1 size:0x1
0x8093CE40 = D_8093CE40; // type:UNK_TYPE1 size:0x1
0x8093CE48 = D_8093CE48; // type:UNK_PTR size:0x4
0x8093CE60 = D_8093CE60; // type:f32 size:0x4
0x8093CE64 = D_8093CE64; // type:f32 size:0x4
0x8093CE68 = D_8093CE68; // type:f32 size:0x4
0x8093CE6C = D_8093CE6C; // type:f32 size:0x4
0x8093CE70 = D_8093CE70; // type:f32 size:0x4
0x8093CE74 = D_8093CE74; // type:f32 size:0x4
0x8093CE78 = jtbl_8093CE78; // type:UNK_PTR size:0x4
0x8093CE8C = D_8093CE8C; // type:f32 size:0x4
0x8093CE90 = jtbl_8093CE90; // type:UNK_PTR size:0x4
0x8093CEA4 = D_8093CEA4; // type:f32 size:0x4
0x8093CEA8 = D_8093CEA8; // type:f32 size:0x4
0x8093CEAC = D_8093CEAC; // type:f32 size:0x4
0x8093CEB0 = D_8093CEB0; // type:f32 size:0x4
0x8093CEB4 = D_8093CEB4; // type:f32 size:0x4
0x8093CEB8 = D_8093CEB8; // type:f32 size:0x4
0x8093CEBC = D_8093CEBC; // type:f32 size:0x4
0x8093CEC0 = D_8093CEC0; // type:f32 size:0x4
0x8093CEC4 = jtbl_8093CEC4; // type:UNK_PTR size:0x4
0x8093D3B0 = D_8093D3B0; // type:UNK_TYPE1 size:0x1
0x8093DD30 = Obj_Lift_InitVars; // type:UNK_TYPE1 size:0x1
0x8093DD50 = D_8093DD50; // type:UNK_TYPE1 size:0x1
0x8093DD60 = D_8093DD60; // type:UNK_TYPE2 size:0x2
0x8093DD84 = D_8093DD84; // type:UNK_TYPE1 size:0x1
0x8093DD98 = D_8093DD98; // type:UNK_TYPE1 size:0x1
0x8093DDA0 = D_8093DDA0; // type:UNK_TYPE1 size:0x1
0x8093DDB0 = D_8093DDB0; // type:f32 size:0x4
0x8093DDB4 = D_8093DDB4; // type:f32 size:0x4
0x8093DDB8 = D_8093DDB8; // type:f32 size:0x4
0x8093E310 = Obj_Hsblock_InitVars; // type:UNK_TYPE1 size:0x1
0x8093E330 = D_8093E330; // type:UNK_TYPE1 size:0x1
0x8093E33C = D_8093E33C; // type:UNK_TYPE1 size:0x1
0x8093E34C = D_8093E34C; // type:UNK_TYPE1 size:0x1
0x8093E358 = D_8093E358; // type:UNK_TYPE1 size:0x1
0x8093E364 = D_8093E364; // type:UNK_TYPE1 size:0x1
0x8093E370 = D_8093E370; // type:f32 size:0x4
0x8093E374 = D_8093E374; // type:f32 size:0x4
0x8093E810 = En_Okarina_Tag_InitVars; // type:UNK_TYPE1 size:0x1
0x8093E830 = D_8093E830; // type:f32 size:0x4
0x8093E834 = D_8093E834; // type:f32 size:0x4
0x80942DA0 = En_Goroiwa_InitVars; // type:UNK_TYPE1 size:0x1
0x80942DC0 = D_80942DC0; // type:UNK_TYPE1 size:0x1
0x80942DE4 = D_80942DE4; // type:UNK_TYPE1 size:0x1
0x80942DF4 = D_80942DF4; // type:UNK_TYPE1 size:0x1
0x80942DFC = D_80942DFC; // type:UNK_TYPE1 size:0x1
0x80942E0C = D_80942E0C; // type:UNK_PTR size:0x4
0x80942E30 = D_80942E30; // type:UNK_TYPE1 size:0x1
0x80942E38 = D_80942E38; // type:UNK_TYPE1 size:0x1
0x80942E3C = D_80942E3C; // type:UNK_TYPE1 size:0x1
0x80942E44 = D_80942E44; // type:UNK_TYPE1 size:0x1
0x80942E48 = D_80942E48; // type:UNK_TYPE1 size:0x1
0x80942E54 = D_80942E54; // type:UNK_TYPE1 size:0x1
0x80942E60 = D_80942E60; // type:UNK_TYPE1 size:0x1
0x80942E6C = D_80942E6C; // type:UNK_TYPE1 size:0x1
0x80942E78 = D_80942E78; // type:UNK_TYPE1 size:0x1
0x80942E8C = D_80942E8C; // type:EffectTireMarkInit size:0x8
0x80942E94 = D_80942E94; // type:UNK_TYPE1 size:0x1
0x80942E9C = D_80942E9C; // type:UNK_TYPE1 size:0x1
0x80942EAC = D_80942EAC; // type:UNK_TYPE1 size:0x1
0x80942EB4 = D_80942EB4; // type:UNK_TYPE1 size:0x1
0x80942EC0 = D_80942EC0; // type:f32 size:0x4
0x80942EC4 = D_80942EC4; // type:f32 size:0x4
0x80942EC8 = D_80942EC8; // type:f32 size:0x4
0x80942ECC = D_80942ECC; // type:f32 size:0x4
0x80942ED0 = D_80942ED0; // type:f32 size:0x4
0x80942ED4 = D_80942ED4; // type:f32 size:0x4
0x80942ED8 = D_80942ED8; // type:f32 size:0x4
0x80942EDC = D_80942EDC; // type:f32 size:0x4
0x80942EE0 = D_80942EE0; // type:f32 size:0x4
0x80942EE4 = D_80942EE4; // type:f32 size:0x4
0x80942EE8 = D_80942EE8; // type:f32 size:0x4
0x80942EEC = D_80942EEC; // type:f32 size:0x4
0x80942EF0 = D_80942EF0; // type:f32 size:0x4
0x80942EF4 = D_80942EF4; // type:f32 size:0x4
0x80942EF8 = D_80942EF8; // type:f32 size:0x4
0x80942EFC = D_80942EFC; // type:f32 size:0x4
0x80942F00 = D_80942F00; // type:f32 size:0x4
0x80942F04 = D_80942F04; // type:f32 size:0x4
0x80942F08 = D_80942F08; // type:f32 size:0x4
0x80942F0C = D_80942F0C; // type:f32 size:0x4
0x80942F10 = D_80942F10; // type:f32 size:0x4
0x80942F14 = D_80942F14; // type:f32 size:0x4
0x80942F18 = D_80942F18; // type:f32 size:0x4
0x80942F1C = D_80942F1C; // type:f32 size:0x4
0x80942F20 = D_80942F20; // type:f32 size:0x4
0x80942F24 = D_80942F24; // type:f32 size:0x4
0x80942F28 = D_80942F28; // type:f32 size:0x4
0x80942F2C = D_80942F2C; // type:f32 size:0x4
0x80942F30 = D_80942F30; // type:f32 size:0x4
0x80942F34 = D_80942F34; // type:f32 size:0x4
0x80942F38 = D_80942F38; // type:f32 size:0x4
0x80942F3C = D_80942F3C; // type:f32 size:0x4
0x80942F40 = D_80942F40; // type:f32 size:0x4
0x80942F44 = D_80942F44; // type:f32 size:0x4
0x80942F48 = D_80942F48; // type:f32 size:0x4
0x80942F4C = D_80942F4C; // type:f32 size:0x4
0x80942F50 = D_80942F50; // type:f32 size:0x4
0x80942F54 = D_80942F54; // type:f32 size:0x4
0x80942F58 = D_80942F58; // type:f32 size:0x4
0x80942F5C = D_80942F5C; // type:f32 size:0x4
0x80942F60 = D_80942F60; // type:f32 size:0x4
0x80942F64 = D_80942F64; // type:f32 size:0x4
0x80942F68 = D_80942F68; // type:f32 size:0x4
0x80942F6C = D_80942F6C; // type:f32 size:0x4
0x80942F70 = D_80942F70; // type:f32 size:0x4
0x80942F74 = D_80942F74; // type:f32 size:0x4
0x80942F78 = D_80942F78; // type:f32 size:0x4
0x80942F7C = D_80942F7C; // type:f32 size:0x4
0x80942F80 = D_80942F80; // type:f32 size:0x4
0x80942F84 = D_80942F84; // type:f32 size:0x4
0x80942F88 = D_80942F88; // type:f32 size:0x4
0x80942F8C = D_80942F8C; // type:f32 size:0x4
0x80942F90 = D_80942F90; // type:f32 size:0x4
0x80942F94 = D_80942F94; // type:f32 size:0x4
0x80942F98 = D_80942F98; // type:f32 size:0x4
0x80942F9C = D_80942F9C; // type:f32 size:0x4
0x80942FA0 = D_80942FA0; // type:f32 size:0x4
0x80942FA4 = D_80942FA4; // type:f32 size:0x4
0x80942FA8 = D_80942FA8; // type:f32 size:0x4
0x80942FAC = D_80942FAC; // type:f32 size:0x4
0x80942FB0 = D_80942FB0; // type:f32 size:0x4
0x80944040 = En_Daiku_InitVars; // type:UNK_TYPE1 size:0x1
0x80944060 = sTextIds; // type:UNK_TYPE1 size:0x1
0x80944078 = D_80944078; // type:UNK_TYPE1 size:0x1
0x809440A4 = D_809440A4; // type:UNK_TYPE1 size:0x1
0x809440C8 = D_809440C8; // type:UNK_TYPE1 size:0x1
0x809440D4 = D_809440D4; // type:UNK_TYPE1 size:0x1
0x809440F0 = D_809440F0; // type:f32 size:0x4
0x809440F4 = jtbl_809440F4; // type:UNK_PTR size:0x4
0x80945370 = En_Nwc_InitVars; // type:UNK_TYPE1 size:0x1
0x80945390 = D_80945390; // type:UNK_TYPE1 size:0x1
0x80945394 = D_80945394; // type:UNK_TYPE1 size:0x1
0x80945398 = D_80945398; // type:UNK_TYPE4 size:0x4
0x809453A0 = D_809453A0; // type:f32 size:0x4
0x809453A4 = jtbl_809453A4; // type:UNK_PTR size:0x4
0x809453B8 = D_809453B8; // type:f32 size:0x4
0x809453BC = D_809453BC; // type:f32 size:0x4
0x809453C0 = D_809453C0; // type:f32 size:0x4
0x809453C4 = D_809453C4; // type:f32 size:0x4
0x80945600 = Item_Inbox_InitVars; // type:UNK_TYPE1 size:0x1
0x809464B0 = En_Ge1_InitVars; // type:UNK_TYPE1 size:0x1
0x809464D0 = sCylinderInit; // type:ColliderCylinderInit size:0x1
0x809464FC = sAnimations; // type:AnimationHeader size:0x28
0x80946524 = sHairstyleDLs; // type:Gfx* size:0xC
0x80946530 = sInitialFocusPos; // type:Vec3f size:0xC
0x8094653C = sZeroVec; // type:Vec3f size:0xC
0x80946548 = sEyeTextures; // type:TexturePtr size:0xC
0x80946560 = jtbl_80946560; // type:UNK_PTR size:0x4
0x80946880 = Obj_Blockstop_InitVars; // type:UNK_TYPE1 size:0x1
0x80947A40 = En_Sda_InitVars; // type:UNK_TYPE1 size:0x1
0x80947A60 = D_80947A60; // type:UNK_TYPE1 size:0x1
0x80947A6C = D_80947A6C; // type:UNK_TYPE2 size:0x2
0x80947A78 = D_80947A78; // type:UNK_TYPE2 size:0x2
0x80947A88 = D_80947A88; // type:UNK_TYPE2 size:0x2
0x80947A98 = D_80947A98; // type:UNK_TYPE2 size:0x2
0x80947AB0 = D_80947AB0; // type:UNK_TYPE2 size:0x2
0x80947ACC = D_80947ACC; // type:UNK_TYPE2 size:0x2
0x80947AEC = D_80947AEC; // type:UNK_TYPE1 size:0x1
0x80947AFC = D_80947AFC; // type:UNK_TYPE1 size:0x1
0x80947B10 = D_80947B10; // type:UNK_TYPE1 size:0x1
0x80947D28 = D_80947D28; // type:UNK_TYPE1 size:0x1
0x80947D68 = D_80947D68; // type:UNK_TYPE1 size:0x1
0x80947D88 = D_80947D88; // type:UNK_TYPE1 size:0x1
0x80947DC0 = D_80947DC0; // type:f32 size:0x4
0x80947DC4 = D_80947DC4; // type:f32 size:0x4
0x80947DC8 = D_80947DC8; // type:f32 size:0x4
0x80947EA0 = D_80947EA0; // type:UNK_TYPE1 size:0x1
0x8094AD40 = En_Clear_Tag_InitVars; // type:UNK_TYPE1 size:0x1
0x8094AD60 = D_8094AD60; // type:UNK_TYPE4 size:0x4
0x8094AD6C = D_8094AD6C; // type:UNK_TYPE4 size:0x4
0x8094AD9C = D_8094AD9C; // type:UNK_TYPE4 size:0x4
0x8094ADCC = D_8094ADCC; // type:UNK_TYPE1 size:0x1
0x8094ADD8 = D_8094ADD8; // type:UNK_TYPE1 size:0x1
0x8094ADE0 = D_8094ADE0; // type:UNK_TYPE1 size:0x1
0x8094ADEC = D_8094ADEC; // type:UNK_TYPE1 size:0x1
0x8094ADF8 = D_8094ADF8; // type:UNK_TYPE1 size:0x1
0x8094AE0C = D_8094AE0C; // type:UNK_TYPE1 size:0x1
0x8094AE20 = D_8094AE20; // type:UNK_TYPE1 size:0x1
0x8094AE34 = D_8094AE34; // type:UNK_TYPE1 size:0x1
0x8094AE60 = D_8094AE60; // type:UNK_TYPE1 size:0x1
0x8094B060 = D_8094B060; // type:UNK_TYPE1 size:0x1
0x8094B090 = D_8094B090; // type:UNK_TYPE1 size:0x1
0x8094B110 = D_8094B110; // type:UNK_TYPE1 size:0x1
0x8094B128 = D_8094B128; // type:UNK_TYPE1 size:0x1
0x8094B528 = D_8094B528; // type:UNK_TYPE1 size:0x1
0x8094B728 = D_8094B728; // type:UNK_TYPE1 size:0x1
0x8094B758 = D_8094B758; // type:UNK_TYPE1 size:0x1
0x8094B800 = D_8094B800; // type:UNK_TYPE1 size:0x1
0x8094B820 = D_8094B820; // type:UNK_TYPE1 size:0x1
0x8094C820 = D_8094C820; // type:UNK_TYPE1 size:0x1
0x8094C860 = D_8094C860; // type:UNK_TYPE1 size:0x1
0x8094C8E0 = D_8094C8E0; // type:UNK_TYPE1 size:0x1
0x8094CAE0 = D_8094CAE0; // type:UNK_TYPE1 size:0x1
0x8094CB10 = D_8094CB10; // type:UNK_TYPE1 size:0x1
0x8094CB98 = D_8094CB98; // type:UNK_TYPE1 size:0x1
0x8094DB98 = D_8094DB98; // type:UNK_TYPE1 size:0x1
0x8094DBD8 = D_8094DBD8; // type:UNK_TYPE1 size:0x1
0x8094DC48 = D_8094DC48; // type:UNK_TYPE1 size:0x1
0x8094DC60 = D_8094DC60; // type:f32 size:0x4
0x8094DC64 = D_8094DC64; // type:f32 size:0x4
0x8094DC68 = D_8094DC68; // type:f32 size:0x4
0x8094DC6C = D_8094DC6C; // type:f32 size:0x4
0x8094DC70 = D_8094DC70; // type:f32 size:0x4
0x8094DC74 = D_8094DC74; // type:f32 size:0x4
0x8094DC78 = D_8094DC78; // type:f32 size:0x4
0x8094DC7C = D_8094DC7C; // type:f32 size:0x4
0x8094DC80 = D_8094DC80; // type:f32 size:0x4
0x8094DC84 = D_8094DC84; // type:f32 size:0x4
0x8094DC88 = D_8094DC88; // type:f32 size:0x4
0x8094DC8C = D_8094DC8C; // type:f32 size:0x4
0x8094DC90 = D_8094DC90; // type:f32 size:0x4
0x8094DC94 = D_8094DC94; // type:f32 size:0x4
0x8094DC98 = D_8094DC98; // type:f32 size:0x4
0x8094DC9C = D_8094DC9C; // type:f32 size:0x4
0x8094DCA0 = D_8094DCA0; // type:f32 size:0x4
0x8094DCA4 = D_8094DCA4; // type:f32 size:0x4
0x8094DCA8 = D_8094DCA8; // type:f32 size:0x4
0x8094DCAC = D_8094DCAC; // type:f32 size:0x4
0x8094DCB0 = D_8094DCB0; // type:f32 size:0x4
0x80951820 = D_80951820; // type:UNK_TYPE1 size:0x1
0x80951A0C = D_80951A0C; // type:UNK_TYPE1 size:0x1
0x80951A88 = D_80951A88; // type:UNK_TYPE1 size:0x1
0x80951A90 = D_80951A90; // type:UNK_TYPE1 size:0x1
0x80951A98 = D_80951A98; // type:UNK_TYPE1 size:0x1
0x80951AD8 = D_80951AD8; // type:UNK_TYPE1 size:0x1
0x80951B98 = D_80951B98; // type:UNK_TYPE1 size:0x1
0x80951BE8 = D_80951BE8; // type:UNK_TYPE1 size:0x1
0x80951C2C = D_80951C2C; // type:UNK_TYPE1 size:0x1
0x80951C34 = D_80951C34; // type:UNK_TYPE1 size:0x1
0x80951C3C = En_Gm_InitVars; // type:UNK_TYPE1 size:0x1
0x80951C5C = D_80951C5C; // type:UNK_TYPE1 size:0x1
0x80951C88 = D_80951C88; // type:UNK_TYPE1 size:0x1
0x80951CB4 = D_80951CB4; // type:UNK_TYPE1 size:0x1
0x80951CC0 = sAnimationInfo; // type:UNK_TYPE1 size:0x1
0x80951D90 = D_80951D90; // type:UNK_TYPE1 size:0x1
0x80951D9C = D_80951D9C; // type:UNK_TYPE1 size:0x1
0x80951DA8 = D_80951DA8; // type:UNK_TYPE1 size:0x1
0x80951DB4 = D_80951DB4; // type:UNK_TYPE1 size:0x1
0x80951DBC = D_80951DBC; // type:UNK_TYPE1 size:0x1
0x80951DC8 = D_80951DC8; // type:UNK_TYPE1 size:0x1
0x80951DD0 = D_80951DD0; // type:UNK_TYPE1 size:0x1
0x80951DDC = D_80951DDC; // type:UNK_TYPE1 size:0x1
0x80951DE4 = D_80951DE4; // type:UNK_TYPE1 size:0x1
0x80951E14 = D_80951E14; // type:UNK_TYPE4 size:0x4
0x80951E24 = D_80951E24; // type:UNK_TYPE1 size:0x1
0x80951E30 = D_80951E30; // type:UNK_TYPE1 size:0x1
0x80951E50 = jtbl_80951E50; // type:UNK_PTR size:0x4
0x80951E80 = jtbl_80951E80; // type:UNK_PTR size:0x4
0x80951EA8 = jtbl_80951EA8; // type:UNK_PTR size:0x4
0x80951EF0 = jtbl_80951EF0; // type:UNK_PTR size:0x4
0x80951F68 = jtbl_80951F68; // type:UNK_PTR size:0x4
0x80951F80 = jtbl_80951F80; // type:UNK_PTR size:0x4
0x80951FBC = jtbl_80951FBC; // type:UNK_PTR size:0x4
0x80952034 = D_80952034; // type:f32 size:0x4
0x80952038 = jtbl_80952038; // type:UNK_PTR size:0x4
0x80952B80 = En_Ms_InitVars; // type:UNK_TYPE1 size:0x1
0x80952BA0 = D_80952BA0; // type:UNK_TYPE1 size:0x1
0x80952BCC = D_80952BCC; // type:UNK_TYPE1 size:0x1
0x809538F0 = En_Hs_InitVars; // type:UNK_TYPE1 size:0x1
0x80953910 = D_80953910; // type:UNK_TYPE1 size:0x1
0x8095393C = D_8095393C; // type:UNK_TYPE1 size:0x1
0x80953950 = jtbl_80953950; // type:UNK_PTR size:0x4
0x80953968 = jtbl_80953968; // type:UNK_PTR size:0x4
0x809548A0 = Bg_Ingate_InitVars; // type:UNK_TYPE1 size:0x1
0x809572E0 = En_Kanban_InitVars; // type:UNK_TYPE1 size:0x1
0x80957300 = D_80957300; // type:UNK_TYPE1 size:0x1
0x8095732C = sPartFlags; // type:UNK_TYPE2 size:0x2
0x8095732E = D_8095732E; // type:UNK_TYPE2 size:0x2
0x80957330 = D_80957330; // type:UNK_TYPE2 size:0x2
0x80957332 = D_80957332; // type:UNK_TYPE2 size:0x2
0x80957344 = sPieceOffsets; // type:UNK_TYPE4 size:0x4
0x80957428 = sPieceSizes; // type:UNK_TYPE4 size:0x4
0x8095750C = sCutTypes; // type:UNK_TYPE1 size:0x1
0x80957530 = sCutFlags; // type:UNK_TYPE1 size:0x1
0x8095753C = D_8095753C; // type:UNK_TYPE4 size:0x4
0x80957548 = D_80957548; // type:UNK_TYPE4 size:0x4
0x8095754C = D_8095754C; // type:UNK_TYPE4 size:0x4
0x80957550 = D_80957550; // type:UNK_PTR size:0x4
0x80957554 = D_80957554; // type:UNK_TYPE4 size:0x4
0x80957558 = D_80957558; // type:UNK_TYPE4 size:0x4
0x8095757C = D_8095757C; // type:UNK_TYPE2 size:0x2
0x80957D7C = D_80957D7C; // type:UNK_TYPE1 size:0x1
0x80957DA0 = D_80957DA0; // type:UNK_TYPE1 size:0x1
0x80957DE0 = D_80957DE0; // type:UNK_TYPE1 size:0x1
0x80957E60 = D_80957E60; // type:f32 size:0x4
0x80957E64 = D_80957E64; // type:f32 size:0x4
0x80957E68 = jtbl_80957E68; // type:UNK_PTR size:0x4
0x80957E80 = D_80957E80; // type:f32 size:0x4
0x80957E84 = D_80957E84; // type:f32 size:0x4
0x80957E88 = D_80957E88; // type:f32 size:0x4
0x80957E8C = D_80957E8C; // type:f32 size:0x4
0x80957E90 = D_80957E90; // type:f32 size:0x4
0x80957E94 = D_80957E94; // type:f32 size:0x4
0x80957E98 = D_80957E98; // type:f32 size:0x4
0x80957E9C = D_80957E9C; // type:f32 size:0x4
0x80957EA0 = D_80957EA0; // type:f32 size:0x4
0x80957EA4 = D_80957EA4; // type:f32 size:0x4
0x80957EA8 = D_80957EA8; // type:f32 size:0x4
0x80957EAC = D_80957EAC; // type:f32 size:0x4
0x80957EB0 = D_80957EB0; // type:f32 size:0x4
0x80957EB4 = D_80957EB4; // type:f32 size:0x4
0x80957EB8 = D_80957EB8; // type:f32 size:0x4
0x80957EBC = D_80957EBC; // type:f32 size:0x4
0x80957EC0 = D_80957EC0; // type:f32 size:0x4
0x80957EC4 = D_80957EC4; // type:f32 size:0x4
0x80959100 = En_Attack_Niw_InitVars; // type:UNK_TYPE1 size:0x1
0x80959120 = D_80959120; // type:UNK_TYPE1 size:0x1
0x80959130 = D_80959130; // type:f32 size:0x4
0x80959134 = D_80959134; // type:f32 size:0x4
0x80959138 = jtbl_80959138; // type:UNK_PTR size:0x4
0x80959150 = D_80959150; // type:f32 size:0x4
0x80959154 = D_80959154; // type:f32 size:0x4
0x80959158 = D_80959158; // type:f32 size:0x4
0x8095915C = D_8095915C; // type:f32 size:0x4
0x80959160 = D_80959160; // type:f32 size:0x4
0x80959164 = D_80959164; // type:f32 size:0x4
0x80959168 = D_80959168; // type:f32 size:0x4
0x8095916C = D_8095916C; // type:f32 size:0x4
0x80959170 = D_80959170; // type:f32 size:0x4
0x80959174 = D_80959174; // type:f32 size:0x4
0x80959178 = D_80959178; // type:f32 size:0x4
0x8095917C = D_8095917C; // type:f32 size:0x4
0x80959180 = D_80959180; // type:f32 size:0x4
0x80959184 = D_80959184; // type:f32 size:0x4
0x80959188 = D_80959188; // type:f32 size:0x4
0x8095918C = D_8095918C; // type:f32 size:0x4
0x80959190 = D_80959190; // type:f32 size:0x4
0x80959194 = D_80959194; // type:f32 size:0x4
0x8095A240 = En_Mk_InitVars; // type:UNK_TYPE1 size:0x1
0x8095A260 = D_8095A260; // type:UNK_TYPE1 size:0x1
0x8095A28C = D_8095A28C; // type:UNK_TYPE4 size:0x4
0x8095A2A0 = D_8095A2A0; // type:UNK_TYPE1 size:0x1
0x8095A2B0 = jtbl_8095A2B0; // type:UNK_PTR size:0x4
0x8095A2C4 = jtbl_8095A2C4; // type:UNK_PTR size:0x4
0x8095D2D0 = En_Owl_InitVars; // type:UNK_TYPE1 size:0x1
0x8095D2F0 = D_8095D2F0; // type:UNK_TYPE1 size:0x1
0x8095D31C = D_8095D31C; // type:UNK_TYPE1 size:0x1
0x8095D32C = D_8095D32C; // type:UNK_TYPE1 size:0x1
0x8095D340 = D_8095D340; // type:f32 size:0x4
0x8095D344 = D_8095D344; // type:f32 size:0x4
0x8095D348 = jtbl_8095D348; // type:UNK_PTR size:0x4
0x8095D378 = D_8095D378; // type:f32 size:0x4
0x8095D37C = D_8095D37C; // type:f32 size:0x4
0x8095D380 = D_8095D380; // type:f32 size:0x4
0x8095D384 = D_8095D384; // type:f32 size:0x4
0x8095D388 = D_8095D388; // type:f32 size:0x4
0x8095D38C = D_8095D38C; // type:f32 size:0x4
0x8095D390 = D_8095D390; // type:f32 size:0x4
0x8095F690 = D_8095F690; // type:UNK_TYPE2 size:0x2
0x8095F694 = D_8095F694; // type:UNK_TYPE2 size:0x2
0x8095F698 = En_Ishi_InitVars; // type:UNK_TYPE1 size:0x1
0x8095F6B8 = D_8095F6B8; // type:UNK_TYPE1 size:0x1
0x8095F6BC = D_8095F6BC; // type:UNK_TYPE1 size:0x1
0x8095F6C0 = D_8095F6C0; // type:UNK_TYPE1 size:0x1
0x8095F6C8 = D_8095F6C8; // type:UNK_TYPE1 size:0x1
0x8095F6D0 = D_8095F6D0; // type:UNK_TYPE1 size:0x1
0x8095F6D4 = D_8095F6D4; // type:UNK_TYPE1 size:0x1
0x8095F6D8 = D_8095F6D8; // type:UNK_TYPE1 size:0x1
0x8095F6DC = D_8095F6DC; // type:UNK_TYPE1 size:0x1
0x8095F6E0 = D_8095F6E0; // type:UNK_TYPE1 size:0x1
0x8095F6E8 = D_8095F6E8; // type:UNK_TYPE1 size:0x1
0x8095F6EC = D_8095F6EC; // type:UNK_TYPE1 size:0x1
0x8095F744 = D_8095F744; // type:UNK_TYPE1 size:0x1
0x8095F74C = D_8095F74C; // type:UNK_TYPE2 size:0x2
0x8095F758 = D_8095F758; // type:UNK_TYPE2 size:0x2
0x8095F76C = D_8095F76C; // type:UNK_TYPE1 size:0x1
0x8095F778 = D_8095F778; // type:UNK_TYPE1 size:0x1
0x8095F784 = D_8095F784; // type:UNK_TYPE1 size:0x1
0x8095F7AC = D_8095F7AC; // type:UNK_TYPE1 size:0x1
0x8095F7B0 = D_8095F7B0; // type:UNK_TYPE1 size:0x1
0x8095F7C0 = D_8095F7C0; // type:f32 size:0x4
0x8095F7C4 = D_8095F7C4; // type:f32 size:0x4
0x8095F7C8 = D_8095F7C8; // type:f32 size:0x4
0x8095F7CC = D_8095F7CC; // type:f32 size:0x4
0x8095F7D0 = D_8095F7D0; // type:f32 size:0x4
0x8095F7D4 = D_8095F7D4; // type:f32 size:0x4
0x8095F7D8 = D_8095F7D8; // type:f32 size:0x4
0x8095F7DC = D_8095F7DC; // type:f32 size:0x4
0x8095F7E0 = D_8095F7E0; // type:f32 size:0x4
0x8095F7E4 = D_8095F7E4; // type:f32 size:0x4
0x8095F7E8 = D_8095F7E8; // type:f32 size:0x4
0x8095F7EC = D_8095F7EC; // type:f32 size:0x4
0x8095F7F0 = D_8095F7F0; // type:f32 size:0x4
0x8095F7F4 = D_8095F7F4; // type:f32 size:0x4
0x8095F7F8 = D_8095F7F8; // type:f32 size:0x4
0x8095F7FC = D_8095F7FC; // type:f32 size:0x4
0x8095F800 = D_8095F800; // type:f32 size:0x4
0x8095F804 = D_8095F804; // type:f32 size:0x4
0x8095F808 = D_8095F808; // type:f32 size:0x4
0x8095F80C = D_8095F80C; // type:f32 size:0x4
0x8095F810 = D_8095F810; // type:f32 size:0x4
0x8095F814 = D_8095F814; // type:f32 size:0x4
0x8095F818 = D_8095F818; // type:f32 size:0x4
0x8095F81C = D_8095F81C; // type:f32 size:0x4
0x8095F820 = D_8095F820; // type:f32 size:0x4
0x8095F824 = D_8095F824; // type:f32 size:0x4
0x8095F828 = D_8095F828; // type:f32 size:0x4
0x8095F82C = D_8095F82C; // type:f32 size:0x4
0x8095FB90 = Obj_Hana_InitVars; // type:UNK_TYPE1 size:0x1
0x8095FBB0 = D_8095FBB0; // type:UNK_TYPE1 size:0x1
0x80960B70 = Obj_Lightswitch_InitVars; // type:UNK_TYPE1 size:0x1
0x80960B90 = D_80960B90; // type:UNK_TYPE1 size:0x1
0x80960BB4 = D_80960BB4; // type:UNK_TYPE1 size:0x1
0x80960BC4 = sLightswitchFaceGfx; // type:UNK_TYPE1 size:0x1
0x80960BD0 = sLightswitchEffectPrimColor; // type:UNK_TYPE1 size:0x1
0x80960BD4 = sLightswitchEffectEnvColor; // type:UNK_TYPE1 size:0x1
0x80960BD8 = D_80960BD8; // type:UNK_TYPE1 size:0x1
0x80960BF0 = D_80960BF0; // type:f32 size:0x4
0x80961570 = Obj_Mure2_InitVars; // type:UNK_TYPE1 size:0x1
0x80961590 = D_80961590; // type:UNK_TYPE1 size:0x1
0x8096159C = D_8096159C; // type:UNK_TYPE1 size:0x1
0x809615A8 = D_809615A8; // type:UNK_TYPE1 size:0x1
0x809615B0 = D_809615B0; // type:UNK_TYPE1 size:0x1
0x809615B8 = D_809615B8; // type:UNK_TYPE2 size:0x2
0x809615E8 = D_809615E8; // type:UNK_TYPE1 size:0x1
0x809615F4 = D_809615F4; // type:UNK_TYPE1 size:0x1
0x80964AE0 = En_Fu_InitVars; // type:UNK_TYPE1 size:0x1
0x80964B00 = D_80964B00; // type:UNK_TYPE1 size:0x1
0x80964B0C = D_80964B0C; // type:UNK_TYPE4 size:0x4
0x80964B18 = D_80964B18; // type:UNK_TYPE4 size:0x4
0x80964B24 = D_80964B24; // type:UNK_TYPE4 size:0x4
0x80964B30 = D_80964B30; // type:UNK_TYPE1 size:0x1
0x80964BD8 = D_80964BD8; // type:UNK_TYPE1 size:0x1
0x80964C04 = D_80964C04; // type:UNK_TYPE4 size:0x4
0x80964C10 = D_80964C10; // type:UNK_TYPE4 size:0x4
0x80964C1C = D_80964C1C; // type:UNK_TYPE4 size:0x4
0x80964C20 = D_80964C20; // type:UNK_TYPE4 size:0x4
0x80964C24 = D_80964C24; // type:UNK_TYPE4 size:0x4
0x80964C28 = D_80964C28; // type:UNK_TYPE1 size:0x1
0x80964C34 = D_80964C34; // type:UNK_TYPE1 size:0x1
0x80964C40 = D_80964C40; // type:UNK_TYPE4 size:0x4
0x80964C4C = D_80964C4C; // type:UNK_TYPE4 size:0x4
0x80964C58 = D_80964C58; // type:UNK_TYPE4 size:0x4
0x80964C70 = D_80964C70; // type:f32 size:0x4
0x80964C74 = D_80964C74; // type:f32 size:0x4
0x80964C78 = D_80964C78; // type:f32 size:0x4
0x80964C7C = jtbl_80964C7C; // type:UNK_PTR size:0x4
0x80964DB4 = jtbl_80964DB4; // type:UNK_PTR size:0x4
0x80964DD0 = jtbl_80964DD0; // type:UNK_PTR size:0x4
0x80964E00 = jtbl_80964E00; // type:UNK_PTR size:0x4
0x80964F10 = jtbl_80964F10; // type:UNK_PTR size:0x4
0x80965008 = D_80965008; // type:f32 size:0x4
0x80965B00 = En_Stream_InitVars; // type:UNK_TYPE1 size:0x1
0x80965B20 = D_80965B20; // type:UNK_TYPE1 size:0x1
0x80965B30 = D_80965B30; // type:f32 size:0x4
0x80966320 = En_Mm_InitVars; // type:UNK_TYPE1 size:0x1
0x80966340 = D_80966340; // type:UNK_TYPE1 size:0x1
0x8096636C = D_8096636C; // type:UNK_TYPE1 size:0x1
0x80966380 = D_80966380; // type:f32 size:0x4
0x809677A0 = En_Weather_Tag_InitVars; // type:UNK_TYPE1 size:0x1
0x809677C0 = jtbl_809677C0; // type:UNK_PTR size:0x4
0x809677E0 = D_809677E0; // type:f32 size:0x4
0x809677E4 = D_809677E4; // type:f32 size:0x4
0x809677E8 = D_809677E8; // type:f32 size:0x4
0x809677EC = D_809677EC; // type:f32 size:0x4
0x809677F0 = D_809677F0; // type:f32 size:0x4
0x809677F4 = D_809677F4; // type:f32 size:0x4
0x809677F8 = D_809677F8; // type:f32 size:0x4
0x80968650 = En_Ani_InitVars; // type:UNK_TYPE1 size:0x1
0x80968670 = D_80968670; // type:UNK_TYPE1 size:0x1
0x8096869C = D_8096869C; // type:UNK_TYPE1 size:0x1
0x809686A4 = D_809686A4; // type:UNK_TYPE1 size:0x1
0x809686B0 = D_809686B0; // type:UNK_TYPE1 size:0x1
0x809686C0 = D_809686C0; // type:f32 size:0x4
0x8096AB80 = En_Js_InitVars; // type:UNK_TYPE1 size:0x1
0x8096ABA0 = D_8096ABA0; // type:UNK_TYPE1 size:0x1
0x8096ABCC = D_8096ABCC; // type:UNK_TYPE1 size:0x1
0x8096ABE0 = D_8096ABE0; // type:UNK_TYPE1 size:0x1
0x8096ABF4 = D_8096ABF4; // type:UNK_TYPE1 size:0x1
0x8096AC08 = D_8096AC08; // type:UNK_TYPE1 size:0x1
0x8096AC1C = D_8096AC1C; // type:UNK_TYPE1 size:0x1
0x8096AC30 = D_8096AC30; // type:UNK_TYPE1 size:0x1
0x8096AC40 = jtbl_8096AC40; // type:UNK_PTR size:0x4
0x8096AC64 = jtbl_8096AC64; // type:UNK_PTR size:0x4
0x8096AC88 = jtbl_8096AC88; // type:UNK_PTR size:0x4
0x8096ACA8 = jtbl_8096ACA8; // type:UNK_PTR size:0x4
0x8096ACC8 = jtbl_8096ACC8; // type:UNK_PTR size:0x4
0x8096ACF8 = jtbl_8096ACF8; // type:UNK_PTR size:0x4
0x8096AD3C = jtbl_8096AD3C; // type:UNK_PTR size:0x4
0x8096B290 = En_Okarina_Effect_InitVars; // type:UNK_TYPE1 size:0x1
0x8096B2B0 = D_8096B2B0; // type:f32 size:0x4
0x8096E910 = sInputDelayTimer; // type:s16 size:0x2
0x8096E914 = sZeldaEffectColorTimer; // type:s16 size:0x2
0x8096E918 = sZeldaEffectColorTargetIndex; // type:s16 size:0x2
0x8096E91C = sTextAlphaTargetIndex; // type:s16 size:0x2
0x8096E920 = sTextAlphaTimer; // type:s16 size:0x2
0x8096E924 = En_Mag_InitVars; // type:UNK_TYPE1 size:0x1
0x8096E944 = sDisplayEffectPrimRedTargets; // type:s16 size:0x4
0x8096E948 = sDisplayEffectPrimGreenTargets; // type:s16 size:0x4
0x8096E94C = sDisplayEffectPrimBlueTargets; // type:s16 size:0x4
0x8096E950 = sDisplayEffectEnvRedTargets; // type:s16 size:0x4
0x8096E954 = sDisplayEffectEnvBlueTargets; // type:s16 size:0x4
0x8096E958 = sAppearEffectPrimGreenTargets; // type:s16 size:0x4
0x8096E95C = sAppearEffectEnvRedTargets; // type:s16 size:0x4
0x8096E960 = sAppearEffectEnvBlueTargets; // type:s16 size:0x4
0x8096E964 = pressStartFontIndices; // type:u8 size:0x1
0x8096E970 = sAppearEffectMaskTextures; // type:TexturePtr size:0x18
0x8096E988 = sDisplayEffectMaskTextures; // type:TexturePtr size:0x18
0x8096E9A0 = sEffectTextures; // type:TexturePtr size:0x18
0x8096E9B8 = sEffectScrollVelocitySs; // type:s16 size:0xC
0x8096E9C4 = sEffectScrollVelocityTs; // type:s16 size:0xC
0x8096E9D0 = sTextAlpha; // type:s16 size:0x2
0x8096E9D4 = sTextAlphaTargets; // type:s16 size:0x4
0x8096E9E0 = jtbl_8096E9E0; // type:UNK_PTR size:0x4
0x8096F090 = Elf_Msg2_InitVars; // type:UNK_TYPE1 size:0x1
0x8096F0B0 = D_8096F0B0; // type:UNK_TYPE1 size:0x1
0x8096F0C0 = D_8096F0C0; // type:char size:0x1
0x8096F0C8 = D_8096F0C8; // type:char size:0x1
0x8096F0D4 = D_8096F0D4; // type:char size:0x1
0x8096F510 = D_8096F510; // type:UNK_TYPE1 size:0x1
0x8096F514 = D_8096F514; // type:UNK_TYPE4 size:0x4
0x8096F520 = Bg_F40_Swlift_InitVars; // type:UNK_TYPE1 size:0x1
0x8096F540 = D_8096F540; // type:UNK_TYPE1 size:0x1
0x8096F550 = D_8096F550; // type:f32 size:0x4
0x8096F554 = D_8096F554; // type:f32 size:0x4
0x8096F5D0 = D_8096F5D0; // type:UNK_TYPE1 size:0x1
0x80971D80 = D_80971D80; // type:UNK_TYPE1 size:0x1
0x80971DAC = En_Kakasi_InitVars; // type:UNK_TYPE1 size:0x1
0x80971DCC = D_80971DCC; // type:UNK_TYPE4 size:0x4
0x80971E38 = D_80971E38; // type:UNK_TYPE4 size:0x4
0x80971EEC = D_80971EEC; // type:UNK_TYPE4 size:0x4
0x80971FA0 = D_80971FA0; // type:UNK_TYPE4 size:0x4
0x80971FE8 = D_80971FE8; // type:UNK_TYPE4 size:0x4
0x80972030 = D_80972030; // type:UNK_TYPE4 size:0x4
0x8097203C = D_8097203C; // type:UNK_TYPE4 size:0x4
0x80972048 = D_80972048; // type:UNK_TYPE1 size:0x1
0x8097206C = D_8097206C; // type:UNK_TYPE1 size:0x1
0x80972080 = D_80972080; // type:f32 size:0x4
0x80972084 = D_80972084; // type:f32 size:0x4
0x80972088 = jtbl_80972088; // type:UNK_PTR size:0x4
0x809720C4 = D_809720C4; // type:f32 size:0x4
0x809720C8 = D_809720C8; // type:f32 size:0x4
0x80972630 = Obj_Makeoshihiki_InitVars; // type:UNK_TYPE1 size:0x1
0x80972D80 = Oceff_Spot_InitVars; // type:UNK_TYPE1 size:0x1
0x80972DA0 = D_80972DA0; // type:UNK_TYPE1 size:0x1
0x809731A0 = D_809731A0; // type:UNK_TYPE1 size:0x1
0x80973350 = D_80973350; // type:UNK_TYPE1 size:0x1
0x809733E8 = D_809733E8; // type:UNK_TYPE1 size:0x1
0x80973478 = D_80973478; // type:UNK_TYPE1 size:0x1
0x80973480 = D_80973480; // type:f32 size:0x4
0x80973484 = D_80973484; // type:f32 size:0x4
0x80973488 = D_80973488; // type:f32 size:0x4
0x8097348C = D_8097348C; // type:f32 size:0x4
0x80973490 = D_80973490; // type:f32 size:0x4
0x80973494 = D_80973494; // type:f32 size:0x4
0x80973498 = D_80973498; // type:f32 size:0x4
0x8097349C = D_8097349C; // type:f32 size:0x4
0x809735E0 = En_Torch_InitVars; // type:UNK_TYPE1 size:0x1
0x80973600 = D_80973600; // type:UNK_TYPE1 size:0x1
0x80973B80 = Shot_Sun_InitVars; // type:UNK_TYPE1 size:0x1
0x80973BA0 = D_80973BA0; // type:UNK_TYPE1 size:0x1
0x80973BD0 = D_80973BD0; // type:f32 size:0x4
0x80973BD4 = D_80973BD4; // type:f32 size:0x4
0x80973BD8 = D_80973BD8; // type:f32 size:0x4
0x80973E90 = Obj_Roomtimer_InitVars; // type:UNK_TYPE1 size:0x1
0x80976010 = En_Ssh_InitVars; // type:UNK_TYPE1 size:0x1
0x80976030 = D_80976030; // type:UNK_TYPE1 size:0x1
0x8097605C = D_8097605C; // type:UNK_PTR size:0x4
0x80976068 = D_80976068; // type:UNK_TYPE1 size:0x1
0x80976094 = D_80976094; // type:UNK_TYPE1 size:0x1
0x809760B8 = D_809760B8; // type:UNK_TYPE1 size:0x1
0x809760C8 = D_809760C8; // type:UNK_TYPE4 size:0x4
0x809760D4 = D_809760D4; // type:UNK_TYPE4 size:0x4
0x809760D8 = D_809760D8; // type:UNK_TYPE4 size:0x4
0x809760DC = D_809760DC; // type:UNK_TYPE4 size:0x4
0x809760E0 = D_809760E0; // type:UNK_TYPE4 size:0x4
0x809760E4 = D_809760E4; // type:UNK_TYPE4 size:0x4
0x809760F0 = D_809760F0; // type:UNK_TYPE4 size:0x4
0x809760FC = D_809760FC; // type:UNK_PTR size:0x4
0x80976114 = D_80976114; // type:UNK_TYPE4 size:0x4
0x80976130 = D_80976130; // type:UNK_TYPE4 size:0x4
0x8097614C = D_8097614C; // type:UNK_TYPE4 size:0x4
0x80976154 = D_80976154; // type:UNK_TYPE4 size:0x4
0x80976178 = D_80976178; // type:UNK_TYPE1 size:0x1
0x80976190 = D_80976190; // type:f32 size:0x4
0x80976194 = D_80976194; // type:f32 size:0x4
0x80976198 = D_80976198; // type:f32 size:0x4
0x8097619C = D_8097619C; // type:f32 size:0x4
0x809761A0 = D_809761A0; // type:f32 size:0x4
0x809761A4 = D_809761A4; // type:f32 size:0x4
0x809761A8 = jtbl_809761A8; // type:UNK_PTR size:0x4
0x80976980 = Oceff_Wipe_InitVars; // type:UNK_TYPE1 size:0x1
0x809769A0 = D_809769A0; // type:UNK_TYPE1 size:0x1
0x80976DA0 = D_80976DA0; // type:UNK_TYPE1 size:0x1
0x80976FA0 = D_80976FA0; // type:UNK_TYPE1 size:0x1
0x80977020 = D_80977020; // type:UNK_TYPE1 size:0x1
0x809770A8 = D_809770A8; // type:UNK_TYPE1 size:0x1
0x80977160 = D_80977160; // type:UNK_TYPE1 size:0x1
0x80977174 = D_80977174; // type:UNK_TYPE1 size:0x1
0x80977180 = D_80977180; // type:f32 size:0x4
0x80977910 = Effect_Ss_Dust_InitVars; // type:UNK_TYPE1 size:0x1
0x80977918 = effectDustUpdateFuncs; // type:EffectSsUpdateFunc size:0x8
0x80977920 = effectDustTextureAddrs; // type:UNK_TYPE1 size:0x1
0x80977940 = D_80977940; // type:f32 size:0x4
0x80977944 = D_80977944; // type:f32 size:0x4
0x80977948 = D_80977948; // type:f32 size:0x4
0x8097794C = D_8097794C; // type:f32 size:0x4
0x80977950 = D_80977950; // type:f32 size:0x4
0x80977954 = D_80977954; // type:f32 size:0x4
0x80977958 = D_80977958; // type:f32 size:0x4
0x8097795C = D_8097795C; // type:f32 size:0x4
0x80977960 = D_80977960; // type:f32 size:0x4
0x80977FC0 = Effect_Ss_Kirakira_InitVars; // type:UNK_TYPE1 size:0x1
0x80977FD0 = D_80977FD0; // type:f32 size:0x4
0x80977FD4 = D_80977FD4; // type:f32 size:0x4
0x80977FD8 = D_80977FD8; // type:f32 size:0x4
0x80977FDC = D_80977FDC; // type:f32 size:0x4
0x80977FE0 = D_80977FE0; // type:f32 size:0x4
0x80977FE4 = D_80977FE4; // type:f32 size:0x4
0x80977FE8 = D_80977FE8; // type:f32 size:0x4
0x80977FEC = D_80977FEC; // type:f32 size:0x4
0x809787F0 = Effect_Ss_Bomb2_InitVars; // type:UNK_TYPE1 size:0x1
0x809787F8 = D_809787F8; // type:UNK_TYPE1 size:0x1
0x80978800 = D_80978800; // type:UNK_TYPE1 size:0x1
0x80978820 = D_80978820; // type:UNK_TYPE1 size:0x1
0x80978840 = D_80978840; // type:f32 size:0x4
0x80978844 = D_80978844; // type:f32 size:0x4
0x80978848 = D_80978848; // type:f32 size:0x4
0x8097884C = D_8097884C; // type:f32 size:0x4
0x80978850 = D_80978850; // type:f32 size:0x4
0x80978BD0 = Effect_Ss_Blast_InitVars; // type:UNK_TYPE1 size:0x1
0x80978BE0 = D_80978BE0; // type:f32 size:0x4
0x80979130 = Effect_Ss_G_Spk_InitVars; // type:UNK_TYPE1 size:0x1
0x80979138 = D_80979138; // type:UNK_TYPE1 size:0x1
0x80979150 = D_80979150; // type:f32 size:0x4
0x80979560 = Effect_Ss_D_Fire_InitVars; // type:UNK_TYPE1 size:0x1
0x80979568 = D_80979568; // type:UNK_TYPE1 size:0x1
0x80979AB0 = Effect_Ss_Bubble_InitVars; // type:UNK_TYPE1 size:0x8
0x80979AB8 = D_80979AB8; // type:f32 size:0xC
0x80979AD0 = D_80979AD0; // type:f32 size:0x4
0x80979AD4 = D_80979AD4; // type:f32 size:0x4
0x80979FF0 = Effect_Ss_G_Ripple_InitVars; // type:UNK_TYPE1 size:0x1
0x8097A000 = D_8097A000; // type:f32 size:0x4
0x8097A3E0 = Effect_Ss_G_Splash_InitVars; // type:UNK_TYPE1 size:0x1
0x8097A3E8 = D_8097A3E8; // type:UNK_TYPE1 size:0x1
0x8097A410 = D_8097A410; // type:f32 size:0x4
0x8097A610 = Effect_Ss_G_Fire_InitVars; // type:UNK_TYPE1 size:0x1
0x8097A618 = D_8097A618; // type:UNK_TYPE4 size:0x4
0x8097AC80 = D_8097AC80; // type:UNK_TYPE4 size:0x4
0x8097ACA0 = Effect_Ss_Lightning_InitVars; // type:UNK_TYPE1 size:0x1
0x8097ACA8 = D_8097ACA8; // type:UNK_TYPE4 size:0x4
0x8097ACB0 = D_8097ACB0; // type:f32 size:0x4
0x8097ACB4 = D_8097ACB4; // type:f32 size:0x4
0x8097ACB8 = D_8097ACB8; // type:f32 size:0x4
0x8097ACBC = D_8097ACBC; // type:f32 size:0x4
0x8097ACC0 = D_8097ACC0; // type:f32 size:0x4
0x8097B1E0 = D_8097B1E0; // type:UNK_TYPE1 size:0x1
0x8097B1F0 = D_8097B1F0; // type:UNK_TYPE1 size:0x1
0x8097B200 = Effect_Ss_Dt_Bubble_InitVars; // type:UNK_TYPE1 size:0x1
0x8097B210 = D_8097B210; // type:f32 size:0x4
0x8097B790 = Effect_Ss_Hahen_InitVars; // type:UNK_TYPE1 size:0x1
0x8097B7A0 = D_8097B7A0; // type:UNK_TYPE4 size:0x4 # float but gnu assembler doesn't convert it properly
0x8097B7A4 = D_8097B7A4; // type:f32 size:0x4
0x8097B7A8 = D_8097B7A8; // type:f32 size:0x4
0x8097B7AC = D_8097B7AC; // type:f32 size:0x4
0x8097BA70 = Effect_Ss_Stick_InitVars; // type:UNK_TYPE1 size:0x1
0x8097BA80 = D_8097BA80; // type:f32 size:0x4
0x8097BA84 = D_8097BA84; // type:f32 size:0x4
0x8097C080 = Effect_Ss_Sibuki_InitVars; // type:UNK_TYPE1 size:0x1
0x8097C090 = D_8097C090; // type:f32 size:0x4
0x8097C094 = D_8097C094; // type:f32 size:0x4
0x8097C098 = D_8097C098; // type:f32 size:0x4
0x8097C0A4 = D_8097C0A4; // type:f32 size:0x4
0x8097C0A8 = D_8097C0A8; // type:f32 size:0x4
0x8097C0AC = D_8097C0AC; // type:f32 size:0x4
0x8097C0B0 = D_8097C0B0; // type:f32 size:0x4
0x8097C3D0 = Effect_Ss_Stone1_InitVars; // type:UNK_TYPE1 size:0x1
0x8097C3D8 = D_8097C3D8; // type:UNK_TYPE4 size:0x4
0x8097C440 = D_8097C440; // type:f32 size:0x4
0x8097C880 = D_8097C880; // type:UNK_TYPE1 size:0x1
0x8097C8B0 = D_8097C8B0; // type:UNK_TYPE1 size:0x1
0x8097C930 = Effect_Ss_Hitmark_InitVars; // type:UNK_TYPE1 size:0x1
0x8097CEC0 = Effect_Ss_Fhg_Flash_InitVars; // type:UNK_TYPE1 size:0x1
0x8097CEC8 = D_8097CEC8; // type:UNK_TYPE4 size:0x4
0x8097CEE0 = D_8097CEE0; // type:UNK_TYPE1 size:0x1
0x8097CF20 = D_8097CF20; // type:UNK_TYPE1 size:0x1
0x8097CF98 = D_8097CF98; // type:UNK_TYPE1 size:0x1
0x8097D3A0 = D_8097D3A0; // type:f32 size:0x4
0x8097D3A4 = D_8097D3A4; // type:f32 size:0x4
0x8097D7F0 = Effect_Ss_K_Fire_InitVars; // type:UNK_TYPE1 size:0x1
0x8097D800 = D_8097D800; // type:f32 size:0x4
0x8097D804 = D_8097D804; // type:f32 size:0x4
0x8097DC40 = Effect_Ss_Solder_Srch_Ball_InitVars; // type:UNK_TYPE1 size:0x1
0x8097DC50 = D_8097DC50; // type:f32 size:0x4
0x8097EAD0 = Effect_Ss_Kakera_InitVars; // type:UNK_TYPE1 size:0x1
0x8097EAD8 = D_8097EAD8; // type:UNK_TYPE1 size:0x1
0x8097EAE4 = D_8097EAE4; // type:UNK_TYPE1 size:0x1
0x8097EB0C = D_8097EB0C; // type:UNK_TYPE1 size:0x1
0x8097EB14 = D_8097EB14; // type:UNK_TYPE1 size:0x1
0x8097EB30 = D_8097EB30; // type:UNK_TYPE1 size:0x1
0x8097EB3C = D_8097EB3C; // type:UNK_PTR size:0x4
0x8097EB64 = D_8097EB64; // type:UNK_TYPE1 size:0x1
0x8097EB70 = D_8097EB70; // type:char size:0x12
0x8097EB84 = D_8097EB84; // type:f32 size:0x4
0x8097EB88 = D_8097EB88; // type:f32 size:0x4
0x8097EB8C = D_8097EB8C; // type:f32 size:0x4
0x8097EB90 = D_8097EB90; // type:f32 size:0x4
0x8097EB94 = D_8097EB94; // type:f32 size:0x4
0x8097EB98 = D_8097EB98; // type:f32 size:0x4
0x8097F070 = Effect_Ss_Ice_Piece_InitVars; // type:UNK_TYPE1 size:0x1
0x8097F080 = D_8097F080; // type:f32 size:0x4
0x8097F084 = D_8097F084; // type:f32 size:0x4
0x8097F810 = Effect_Ss_En_Ice_InitVars; // type:UNK_TYPE1 size:0x1
0x8097F820 = D_8097F820; // type:f32 size:0x4
0x8097F824 = D_8097F824; // type:f32 size:0x4
0x8097FED0 = Effect_Ss_Fire_Tail_InitVars; // type:UNK_TYPE1 size:0x1
0x8097FEE0 = D_8097FEE0; // type:f32 size:0x4
0x8097FEE4 = D_8097FEE4; // type:f32 size:0x4
0x8097FEE8 = D_8097FEE8; // type:f32 size:0x4
0x8097FEEC = D_8097FEEC; // type:f32 size:0x4
0x8097FEF0 = D_8097FEF0; // type:f32 size:0x4
0x8097FEF4 = D_8097FEF4; // type:f32 size:0x4
0x80980570 = Effect_Ss_En_Fire_InitVars; // type:UNK_TYPE1 size:0x1
0x80980580 = D_80980580; // type:f32 size:0x4
0x80980584 = D_80980584; // type:f32 size:0x4
0x809808E0 = D_809808E0; // type:UNK_TYPE1 size:0x1
0x809808E8 = Effect_Ss_Extra_InitVars; // type:UNK_TYPE1 size:0x1
0x809808F0 = D_809808F0; // type:UNK_TYPE1 size:0x1
0x80980CD0 = Effect_Ss_Dead_Db_InitVars; // type:UNK_TYPE1 size:0x1
0x80980CD8 = D_80980CD8; // type:UNK_TYPE1 size:0x1
0x80980D00 = D_80980D00; // type:f32 size:0x4
0x80981270 = Effect_Ss_Dead_Dd_InitVars; // type:UNK_TYPE1 size:0x1
0x80981280 = D_80981280; // type:f32 size:0x4
0x80981700 = Effect_Ss_Dead_Ds_InitVars; // type:UNK_TYPE1 size:0x1
0x80981710 = D_80981710; // type:f32 size:0x4
0x80981714 = D_80981714; // type:f32 size:0x4
0x80981F70 = Oceff_Storm_InitVars; // type:UNK_TYPE1 size:0x1
0x80981F90 = D_80981F90; // type:UNK_TYPE1 size:0x1
0x80982F90 = D_80982F90; // type:UNK_TYPE1 size:0x1
0x80983038 = D_80983038; // type:UNK_TYPE1 size:0x1
0x80983046 = D_80983046; // type:UNK_TYPE1 size:0x1
0x80983047 = D_80983047; // type:UNK_TYPE1 size:0x1
0x809830A6 = D_809830A6; // type:UNK_TYPE1 size:0x1
0x809830A7 = D_809830A7; // type:UNK_TYPE1 size:0x1
0x809830E6 = D_809830E6; // type:UNK_TYPE1 size:0x1
0x809830E7 = D_809830E7; // type:UNK_TYPE1 size:0x1
0x80983146 = D_80983146; // type:UNK_TYPE1 size:0x1
0x80983147 = D_80983147; // type:UNK_TYPE1 size:0x1
0x809831A6 = D_809831A6; // type:UNK_TYPE1 size:0x1
0x809831A7 = D_809831A7; // type:UNK_TYPE1 size:0x1
0x809831D6 = D_809831D6; // type:UNK_TYPE1 size:0x1
0x809831D7 = D_809831D7; // type:UNK_TYPE1 size:0x1
0x809831E8 = D_809831E8; // type:UNK_TYPE1 size:0x1
0x80983290 = D_80983290; // type:UNK_TYPE1 size:0x1
0x80983320 = jtbl_80983320; // type:UNK_PTR size:0x4
0x8098339C = D_8098339C; // type:f32 size:0x4
0x809833A0 = D_809833A0; // type:f32 size:0x4
0x809833A4 = D_809833A4; // type:f32 size:0x4
0x809833A8 = D_809833A8; // type:f32 size:0x4
0x809833AC = D_809833AC; // type:f32 size:0x4
0x809833B0 = D_809833B0; // type:f32 size:0x4
0x80983890 = Obj_Demo_InitVars; // type:UNK_TYPE1 size:0x1
0x809857C0 = En_Minislime_InitVars; // type:UNK_TYPE1 size:0x1
0x809857E0 = D_809857E0; // type:UNK_TYPE1 size:0x1
0x8098580C = D_8098580C; // type:UNK_TYPE1 size:0x1
0x80985814 = D_80985814; // type:UNK_TYPE1 size:0x1
0x80985840 = D_80985840; // type:f32 size:0x4
0x80985844 = D_80985844; // type:f32 size:0x4
0x80985848 = D_80985848; // type:f32 size:0x4
0x8098584C = D_8098584C; // type:f32 size:0x4
0x80985850 = D_80985850; // type:f32 size:0x4
0x80985854 = D_80985854; // type:f32 size:0x4
0x80985858 = D_80985858; // type:f32 size:0x4
0x8098585C = D_8098585C; // type:f32 size:0x4
0x80985860 = D_80985860; // type:f32 size:0x4
0x80985864 = D_80985864; // type:f32 size:0x4
0x80985868 = D_80985868; // type:f32 size:0x4
0x8098586C = D_8098586C; // type:f32 size:0x4
0x80985870 = D_80985870; // type:f32 size:0x4
0x80985874 = D_80985874; // type:f32 size:0x4
0x80985878 = D_80985878; // type:f32 size:0x4
0x8098587C = D_8098587C; // type:f32 size:0x4
0x80985880 = D_80985880; // type:f32 size:0x4
0x80985884 = D_80985884; // type:f32 size:0x4
0x80985888 = D_80985888; // type:f32 size:0x4
0x8098588C = D_8098588C; // type:f32 size:0x4
0x80985890 = D_80985890; // type:f32 size:0x4
0x80985894 = D_80985894; // type:f32 size:0x4
0x80985898 = D_80985898; // type:f32 size:0x4
0x8098589C = D_8098589C; // type:f32 size:0x4
0x809858A0 = D_809858A0; // type:f32 size:0x4
0x809858A4 = D_809858A4; // type:f32 size:0x4
0x809858A8 = D_809858A8; // type:f32 size:0x4
0x809858AC = D_809858AC; // type:f32 size:0x4
0x809858B0 = D_809858B0; // type:f32 size:0x4
0x809858B4 = D_809858B4; // type:f32 size:0x4
0x809858B8 = D_809858B8; // type:f32 size:0x4
0x809858BC = D_809858BC; // type:f32 size:0x4
0x809858C0 = D_809858C0; // type:f32 size:0x4
0x809858C4 = D_809858C4; // type:f32 size:0x4
0x809858C8 = D_809858C8; // type:f32 size:0x4
0x809858CC = D_809858CC; // type:f32 size:0x4
0x809858D0 = D_809858D0; // type:f32 size:0x4
0x809858D4 = D_809858D4; // type:f32 size:0x4
0x809858D8 = D_809858D8; // type:f32 size:0x4
0x809858DC = D_809858DC; // type:f32 size:0x4
0x809858E0 = D_809858E0; // type:f32 size:0x4
0x809858E4 = D_809858E4; // type:f32 size:0x4
0x809858E8 = D_809858E8; // type:f32 size:0x4
0x809858EC = D_809858EC; // type:f32 size:0x4
0x809858F0 = D_809858F0; // type:f32 size:0x4
0x809858F4 = D_809858F4; // type:f32 size:0x4
0x809858F8 = D_809858F8; // type:f32 size:0x4
0x809858FC = D_809858FC; // type:f32 size:0x4
0x80985900 = D_80985900; // type:f32 size:0x4
0x80985904 = D_80985904; // type:f32 size:0x4
0x809861D0 = En_Nutsball_InitVars; // type:UNK_TYPE1 size:0x1
0x809861F0 = D_809861F0; // type:UNK_TYPE1 size:0x1
0x80986220 = D_80986220; // type:f32 size:0x4
0x80986670 = Oceff_Wipe2_InitVars; // type:UNK_TYPE1 size:0x1
0x80986690 = D_80986690; // type:UNK_TYPE1 size:0x1
0x80986E90 = D_80986E90; // type:UNK_TYPE1 size:0x1
0x80987690 = D_80987690; // type:UNK_TYPE1 size:0x1
0x809876AE = D_809876AE; // type:UNK_TYPE1 size:0x1
0x809876AF = D_809876AF; // type:UNK_TYPE1 size:0x1
0x809876CE = D_809876CE; // type:UNK_TYPE1 size:0x1
0x809876CF = D_809876CF; // type:UNK_TYPE1 size:0x1
0x809876EE = D_809876EE; // type:UNK_TYPE1 size:0x1
0x809876EF = D_809876EF; // type:UNK_TYPE1 size:0x1
0x8098770E = D_8098770E; // type:UNK_TYPE1 size:0x1
0x8098770F = D_8098770F; // type:UNK_TYPE1 size:0x1
0x8098772E = D_8098772E; // type:UNK_TYPE1 size:0x1
0x8098772F = D_8098772F; // type:UNK_TYPE1 size:0x1
0x8098774E = D_8098774E; // type:UNK_TYPE1 size:0x1
0x8098774F = D_8098774F; // type:UNK_TYPE1 size:0x1
0x8098776E = D_8098776E; // type:UNK_TYPE1 size:0x1
0x8098776F = D_8098776F; // type:UNK_TYPE1 size:0x1
0x8098778E = D_8098778E; // type:UNK_TYPE1 size:0x1
0x8098778F = D_8098778F; // type:UNK_TYPE1 size:0x1
0x8098779E = D_8098779E; // type:UNK_TYPE1 size:0x1
0x8098779F = D_8098779F; // type:UNK_TYPE1 size:0x1
0x809877BE = D_809877BE; // type:UNK_TYPE1 size:0x1
0x809877BF = D_809877BF; // type:UNK_TYPE1 size:0x1
0x809877DE = D_809877DE; // type:UNK_TYPE1 size:0x1
0x809877DF = D_809877DF; // type:UNK_TYPE1 size:0x1
0x809877F0 = D_809877F0; // type:UNK_TYPE1 size:0x1
0x80987898 = D_80987898; // type:UNK_TYPE1 size:0x1
0x80987900 = D_80987900; // type:f32 size:0x4
0x80987904 = D_80987904; // type:f32 size:0x4
0x80987908 = D_80987908; // type:f32 size:0x4
0x80987DF0 = Oceff_Wipe3_InitVars; // type:UNK_TYPE1 size:0x1
0x80987E10 = D_80987E10; // type:UNK_TYPE1 size:0x1
0x80988E10 = D_80988E10; // type:UNK_TYPE1 size:0x1
0x80988E2E = D_80988E2E; // type:UNK_TYPE1 size:0x1
0x80988E2F = D_80988E2F; // type:UNK_TYPE1 size:0x1
0x80988E4E = D_80988E4E; // type:UNK_TYPE1 size:0x1
0x80988E4F = D_80988E4F; // type:UNK_TYPE1 size:0x1
0x80988E6E = D_80988E6E; // type:UNK_TYPE1 size:0x1
0x80988E6F = D_80988E6F; // type:UNK_TYPE1 size:0x1
0x80988E8E = D_80988E8E; // type:UNK_TYPE1 size:0x1
0x80988E8F = D_80988E8F; // type:UNK_TYPE1 size:0x1
0x80988EAE = D_80988EAE; // type:UNK_TYPE1 size:0x1
0x80988EAF = D_80988EAF; // type:UNK_TYPE1 size:0x1
0x80988ECE = D_80988ECE; // type:UNK_TYPE1 size:0x1
0x80988ECF = D_80988ECF; // type:UNK_TYPE1 size:0x1
0x80988EEE = D_80988EEE; // type:UNK_TYPE1 size:0x1
0x80988EEF = D_80988EEF; // type:UNK_TYPE1 size:0x1
0x80988F0E = D_80988F0E; // type:UNK_TYPE1 size:0x1
0x80988F0F = D_80988F0F; // type:UNK_TYPE1 size:0x1
0x80988F2E = D_80988F2E; // type:UNK_TYPE1 size:0x1
0x80988F2F = D_80988F2F; // type:UNK_TYPE1 size:0x1
0x80988F4E = D_80988F4E; // type:UNK_TYPE1 size:0x1
0x80988F4F = D_80988F4F; // type:UNK_TYPE1 size:0x1
0x80988F6E = D_80988F6E; // type:UNK_TYPE1 size:0x1
0x80988F6F = D_80988F6F; // type:UNK_TYPE1 size:0x1
0x80988F70 = D_80988F70; // type:UNK_TYPE1 size:0x1
0x80988FF8 = D_80988FF8; // type:UNK_TYPE1 size:0x1
0x80989060 = D_80989060; // type:f32 size:0x4
0x80989064 = D_80989064; // type:f32 size:0x4
0x80989068 = D_80989068; // type:f32 size:0x4
0x8098C280 = En_Dg_InitVars; // type:UNK_TYPE1 size:0x1
0x8098C2A0 = sIsAnyDogHeld; // type:UNK_TYPE1 size:0x1
0x8098C2A4 = sBremenMaskFollower; // type:UNK_TYPE2 size:0x2
0x8098C2A8 = D_8098C2A8; // type:UNK_TYPE2 size:0x2
0x8098C2AC = D_8098C2AC; // type:UNK_TYPE2 size:0x2
0x8098C2FC = D_8098C2FC; // type:UNK_TYPE1 size:0x1
0x8098C2FE = D_8098C2FE; // type:UNK_TYPE2 size:0x2
0x8098C304 = D_8098C304; // type:UNK_TYPE1 size:0x1
0x8098C330 = D_8098C330; // type:UNK_TYPE1 size:0x1
0x8098C33C = D_8098C33C; // type:UNK_TYPE1 size:0x1
0x8098C35C = D_8098C35C; // type:UNK_PTR size:0x4
0x8098C410 = D_8098C410; // type:UNK_TYPE1 size:0x1
0x8098C440 = D_8098C440; // type:UNK_TYPE1 size:0x1
0x8098C45C = D_8098C45C; // type:UNK_TYPE1 size:0x1
0x8098C460 = D_8098C460; // type:UNK_TYPE4 size:0x4
0x8098C46C = D_8098C46C; // type:UNK_TYPE4 size:0x4
0x8098C480 = D_8098C480; // type:f32 size:0x4
0x8098C484 = D_8098C484; // type:f32 size:0x4
0x8098C488 = D_8098C488; // type:f32 size:0x4
0x8098C48C = D_8098C48C; // type:f32 size:0x4
0x8098C490 = D_8098C490; // type:f32 size:0x4
0x8098C494 = D_8098C494; // type:f32 size:0x4
0x8098C498 = D_8098C498; // type:f32 size:0x4
0x8098C49C = jtbl_8098C49C; // type:UNK_PTR size:0x4
0x8098CD60 = En_Si_InitVars; // type:UNK_TYPE1 size:0x1
0x8098CD80 = D_8098CD80; // type:UNK_TYPE1 size:0x1
0x8098CDAC = D_8098CDAC; // type:UNK_PTR size:0x4
0x8098CDB8 = D_8098CDB8; // type:UNK_TYPE1 size:0x1
0x8098E420 = Obj_Comb_InitVars; // type:UNK_TYPE1 size:0x1
0x8098E440 = D_8098E440; // type:UNK_TYPE1 size:0x1
0x8098E464 = D_8098E464; // type:UNK_TYPE1 size:0x1
0x8098E474 = D_8098E474; // type:UNK_TYPE1 size:0x1
0x8098E490 = D_8098E490; // type:f32 size:0x4
0x8098E494 = D_8098E494; // type:f32 size:0x4
0x8098E498 = D_8098E498; // type:f32 size:0x4
0x8098E49C = D_8098E49C; // type:f32 size:0x4
0x8098E4A0 = D_8098E4A0; // type:f32 size:0x4
0x8098E4A4 = D_8098E4A4; // type:f32 size:0x4
0x8098E4A8 = D_8098E4A8; // type:f32 size:0x4
0x8098E4AC = D_8098E4AC; // type:f32 size:0x4
0x8098E4B0 = D_8098E4B0; // type:f32 size:0x4
0x8098E4B4 = D_8098E4B4; // type:f32 size:0x4
0x8098E4B8 = D_8098E4B8; // type:f32 size:0x4
0x8098E4BC = D_8098E4BC; // type:f32 size:0x4
0x8098EE40 = Obj_Kibako2_InitVars; // type:UNK_TYPE1 size:0x1
0x8098EE60 = D_8098EE60; // type:UNK_TYPE1 size:0x1
0x8098EE8C = D_8098EE8C; // type:UNK_TYPE1 size:0x1
0x8098EEA0 = D_8098EEA0; // type:f32 size:0x4
0x8098EEA4 = D_8098EEA4; // type:f32 size:0x4
0x8098EEA8 = D_8098EEA8; // type:f32 size:0x4
0x8098EEAC = D_8098EEAC; // type:f32 size:0x4
0x8098EEB0 = D_8098EEB0; // type:f32 size:0x4
0x8098EEB4 = D_8098EEB4; // type:UNK_TYPE1 size:0x1
0x8098EFF0 = En_Hs2_InitVars; // type:UNK_TYPE1 size:0x1
0x8098F720 = Obj_Mure3_InitVars; // type:UNK_TYPE1 size:0x1
0x8098F740 = D_8098F740; // type:UNK_TYPE1 size:0x1
0x8098F748 = D_8098F748; // type:UNK_TYPE1 size:0x1
0x8098F754 = D_8098F754; // type:UNK_TYPE1 size:0x1
0x8098F760 = D_8098F760; // type:f32 size:0x4
0x8098F764 = D_8098F764; // type:f32 size:0x4
0x809901A0 = En_Tg_InitVars; // type:UNK_TYPE1 size:0x1
0x809901C0 = D_809901C0; // type:UNK_TYPE1 size:0x1
0x809901EC = D_809901EC; // type:UNK_TYPE1 size:0x1
0x809901F8 = D_809901F8; // type:UNK_TYPE1 size:0x1
0x80990218 = D_80990218; // type:UNK_TYPE1 size:0x1
0x80990228 = D_80990228; // type:UNK_TYPE4 size:0x4
0x80990234 = D_80990234; // type:UNK_TYPE4 size:0x4
0x80990240 = D_80990240; // type:UNK_TYPE4 size:0x4
0x8099024C = D_8099024C; // type:UNK_TYPE4 size:0x4
0x80990260 = D_80990260; // type:f32 size:0x4
0x80994150 = En_Wf_InitVars; // type:UNK_TYPE1 size:0x1
0x80994170 = D_80994170; // type:UNK_TYPE1 size:0x1
0x80994200 = D_80994200; // type:UNK_TYPE1 size:0x1
0x80994210 = D_80994210; // type:UNK_TYPE1 size:0x1
0x8099423C = D_8099423C; // type:UNK_TYPE1 size:0x1
0x80994268 = D_80994268; // type:UNK_TYPE1 size:0x1
0x80994288 = D_80994288; // type:UNK_TYPE1 size:0x1
0x809942A8 = D_809942A8; // type:UNK_TYPE1 size:0x1
0x809942B0 = D_809942B0; // type:UNK_TYPE4 size:0x4
0x809942C0 = D_809942C0; // type:UNK_PTR size:0x4
0x809942D0 = D_809942D0; // type:UNK_TYPE1 size:0x1
0x809942D8 = D_809942D8; // type:UNK_TYPE4 size:0x4
0x809942DC = D_809942DC; // type:UNK_TYPE1 size:0x1
0x809942E8 = D_809942E8; // type:UNK_TYPE1 size:0x1
0x809942EC = D_809942EC; // type:UNK_TYPE1 size:0x1
0x809942F0 = D_809942F0; // type:UNK_TYPE1 size:0x1
0x809942FC = D_809942FC; // type:UNK_TYPE1 size:0x1
0x80994302 = D_80994302; // type:UNK_TYPE1 size:0x1
0x80994320 = D_80994320; // type:f32 size:0x4
0x80994324 = D_80994324; // type:f32 size:0x4
0x80994328 = D_80994328; // type:f32 size:0x4
0x8099432C = D_8099432C; // type:f32 size:0x4
0x80994330 = D_80994330; // type:f32 size:0x4
0x80994334 = D_80994334; // type:f32 size:0x4
0x80994338 = D_80994338; // type:f32 size:0x4
0x8099433C = D_8099433C; // type:f32 size:0x4
0x80994340 = D_80994340; // type:f32 size:0x4
0x80994344 = D_80994344; // type:f32 size:0x4
0x80994348 = D_80994348; // type:f32 size:0x4
0x8099434C = D_8099434C; // type:f32 size:0x4
0x80994350 = D_80994350; // type:f32 size:0x4
0x80994354 = D_80994354; // type:f32 size:0x4
0x80994358 = D_80994358; // type:f32 size:0x4
0x8099435C = D_8099435C; // type:f32 size:0x4
0x80994360 = D_80994360; // type:f32 size:0x4
0x80994364 = D_80994364; // type:f32 size:0x4
0x80994368 = D_80994368; // type:f32 size:0x4
0x8099436C = D_8099436C; // type:f32 size:0x4
0x80997330 = D_80997330; // type:UNK_TYPE1 size:0x1
0x80997468 = D_80997468; // type:UNK_TYPE4 size:0x4
0x80997498 = D_80997498; // type:UNK_TYPE1 size:0x1
0x809974E0 = D_809974E0; // type:UNK_TYPE1 size:0x1
0x809974F0 = D_809974F0; // type:UNK_TYPE1 size:0x1
0x80997510 = En_Skb_InitVars; // type:UNK_TYPE1 size:0x1
0x80997530 = D_80997530; // type:UNK_TYPE4 size:0x4
0x8099753C = D_8099753C; // type:UNK_TYPE4 size:0x4
0x80997548 = D_80997548; // type:UNK_TYPE1 size:0x1
0x80997550 = D_80997550; // type:UNK_TYPE1 size:0x1
0x80997554 = D_80997554; // type:UNK_TYPE1 size:0x1
0x80997558 = D_80997558; // type:UNK_TYPE1 size:0x1
0x80997564 = D_80997564; // type:UNK_TYPE1 size:0x1
0x80997570 = D_80997570; // type:f32 size:0x4
0x80997574 = D_80997574; // type:f32 size:0x4
0x80997578 = jtbl_80997578; // type:UNK_PTR size:0x4
0x80997594 = D_80997594; // type:f32 size:0x4
0x80997598 = D_80997598; // type:f32 size:0x4
0x8099759C = D_8099759C; // type:f32 size:0x4
0x809975A0 = D_809975A0; // type:f32 size:0x4
0x809975A4 = D_809975A4; // type:f32 size:0x4
0x809975A8 = D_809975A8; // type:f32 size:0x4
0x809975AC = D_809975AC; // type:f32 size:0x4
0x809975B0 = D_809975B0; // type:f32 size:0x4
0x809975B4 = jtbl_809975B4; // type:UNK_PTR size:0x4
0x809975E8 = jtbl_809975E8; // type:UNK_PTR size:0x4
0x80997624 = D_80997624; // type:f32 size:0x4
0x80997628 = D_80997628; // type:f32 size:0x4
0x8099A380 = En_Gs_InitVars; // type:UNK_TYPE1 size:0x1
0x8099A3A0 = D_8099A3A0; // type:UNK_TYPE1 size:0x1
0x8099A3CC = D_8099A3CC; // type:UNK_TYPE1 size:0x1
0x8099A3D8 = D_8099A3D8; // type:UNK_TYPE1 size:0x1
0x8099A3F8 = D_8099A3F8; // type:UNK_TYPE1 size:0x1
0x8099A404 = D_8099A404; // type:UNK_TYPE1 size:0x1
0x8099A408 = D_8099A408; // type:UNK_TYPE1 size:0x1
0x8099A418 = D_8099A418; // type:UNK_TYPE1 size:0x1
0x8099A41A = D_8099A41A; // type:UNK_TYPE1 size:0x1
0x8099A41B = D_8099A41B; // type:UNK_TYPE1 size:0x1
0x8099A41E = D_8099A41E; // type:UNK_TYPE1 size:0x1
0x8099A424 = D_8099A424; // type:UNK_TYPE1 size:0x1
0x8099A430 = D_8099A430; // type:UNK_TYPE1 size:0x1
0x8099A434 = D_8099A434; // type:UNK_TYPE1 size:0x1
0x8099A438 = D_8099A438; // type:UNK_TYPE1 size:0x1
0x8099A444 = D_8099A444; // type:UNK_TYPE1 size:0x1
0x8099A450 = D_8099A450; // type:UNK_TYPE4 size:0x4
0x8099A458 = D_8099A458; // type:UNK_TYPE4 size:0x4
0x8099A470 = jtbl_8099A470; // type:UNK_PTR size:0x4
0x8099A48C = jtbl_8099A48C; // type:UNK_PTR size:0x4
0x8099A4B8 = D_8099A4B8; // type:f32 size:0x4
0x8099A4BC = D_8099A4BC; // type:f32 size:0x4
0x8099A4C0 = jtbl_8099A4C0; // type:UNK_PTR size:0x4
0x8099A4D8 = D_8099A4D8; // type:f32 size:0x4
0x8099A4DC = D_8099A4DC; // type:f32 size:0x4
0x8099A4E0 = D_8099A4E0; // type:f32 size:0x4
0x8099A4E4 = D_8099A4E4; // type:f32 size:0x4
0x8099A4E8 = D_8099A4E8; // type:f32 size:0x4
0x8099A4EC = D_8099A4EC; // type:f32 size:0x4
0x8099A4F0 = D_8099A4F0; // type:f32 size:0x4
0x8099A4F4 = D_8099A4F4; // type:f32 size:0x4
0x8099A4F8 = D_8099A4F8; // type:f32 size:0x4
0x8099A4FC = D_8099A4FC; // type:f32 size:0x4
0x8099A500 = D_8099A500; // type:f32 size:0x4
0x8099A504 = D_8099A504; // type:f32 size:0x4
0x8099A508 = D_8099A508; // type:f32 size:0x4
0x8099A50C = D_8099A50C; // type:f32 size:0x4
0x8099A510 = D_8099A510; // type:f32 size:0x4
0x8099A514 = D_8099A514; // type:f32 size:0x4
0x8099A518 = D_8099A518; // type:f32 size:0x4
0x8099A51C = D_8099A51C; // type:f32 size:0x4
0x8099A520 = D_8099A520; // type:f32 size:0x4
0x8099A524 = D_8099A524; // type:f32 size:0x4
0x8099A528 = D_8099A528; // type:f32 size:0x4
0x8099A52C = D_8099A52C; // type:f32 size:0x4
0x8099A530 = D_8099A530; // type:f32 size:0x4
0x8099A534 = D_8099A534; // type:f32 size:0x4
0x8099A538 = D_8099A538; // type:f32 size:0x4
0x8099A53C = D_8099A53C; // type:f32 size:0x4
0x8099A540 = D_8099A540; // type:f32 size:0x4
0x8099A544 = D_8099A544; // type:f32 size:0x4
0x8099A548 = D_8099A548; // type:f32 size:0x4
0x8099A54C = D_8099A54C; // type:f32 size:0x4
0x8099A550 = D_8099A550; // type:f32 size:0x4
0x8099A554 = D_8099A554; // type:f32 size:0x4
0x8099A558 = D_8099A558; // type:f32 size:0x4
0x8099A55C = D_8099A55C; // type:f32 size:0x4
0x8099A560 = D_8099A560; // type:f32 size:0x4
0x8099A564 = jtbl_8099A564; // type:UNK_PTR size:0x4
0x8099A578 = D_8099A578; // type:f32 size:0x4
0x8099A57C = D_8099A57C; // type:f32 size:0x4
0x8099A580 = D_8099A580; // type:f32 size:0x4
0x8099AAE0 = Obj_Sound_InitVars; // type:UNK_TYPE1 size:0x1
0x8099C050 = En_Crow_InitVars; // type:UNK_TYPE1 size:0x1
0x8099C070 = D_8099C070; // type:UNK_TYPE1 size:0x1
0x8099C094 = D_8099C094; // type:UNK_TYPE1 size:0x1
0x8099C0A0 = D_8099C0A0; // type:UNK_PTR size:0x4
0x8099C0A4 = D_8099C0A4; // type:UNK_TYPE1 size:0x1
0x8099C0AC = D_8099C0AC; // type:UNK_TYPE1 size:0x1
0x8099C0CC = D_8099C0CC; // type:UNK_TYPE4 size:0x4
0x8099C0D0 = D_8099C0D0; // type:UNK_TYPE1 size:0x1
0x8099C0E0 = D_8099C0E0; // type:f32 size:0x4
0x8099C0E4 = D_8099C0E4; // type:f32 size:0x4
0x8099C0E8 = D_8099C0E8; // type:f32 size:0x4
0x8099C0EC = D_8099C0EC; // type:f32 size:0x4
0x8099C0F0 = D_8099C0F0; // type:f32 size:0x4
0x8099C0F4 = D_8099C0F4; // type:f32 size:0x4
0x8099C0F8 = D_8099C0F8; // type:f32 size:0x4
0x8099C0FC = D_8099C0FC; // type:f32 size:0x4
0x8099C100 = D_8099C100; // type:f32 size:0x4
0x8099C104 = D_8099C104; // type:f32 size:0x4
0x8099C108 = D_8099C108; // type:f32 size:0x4
0x8099C10C = D_8099C10C; // type:f32 size:0x4
0x8099C110 = D_8099C110; // type:f32 size:0x4
0x8099D5F0 = En_Cow_InitVars; // type:UNK_TYPE1 size:0x1
0x8099D610 = D_8099D610; // type:UNK_TYPE1 size:0x1
0x8099D63C = D_8099D63C; // type:UNK_TYPE1 size:0x1
0x8099D650 = D_8099D650; // type:f32 size:0x4
0x8099D654 = D_8099D654; // type:f32 size:0x4
0x8099D658 = D_8099D658; // type:f32 size:0x4
0x8099D65C = D_8099D65C; // type:f32 size:0x4
0x8099D660 = D_8099D660; // type:f32 size:0x4
0x8099DB90 = Oceff_Wipe4_InitVars; // type:UNK_TYPE1 size:0x1
0x8099DBB0 = D_8099DBB0; // type:UNK_TYPE1 size:0x1
0x8099E3B0 = D_8099E3B0; // type:UNK_TYPE1 size:0x1
0x8099E3CE = D_8099E3CE; // type:UNK_TYPE1 size:0x1
0x8099E3CF = D_8099E3CF; // type:UNK_TYPE1 size:0x1
0x8099E3EE = D_8099E3EE; // type:UNK_TYPE1 size:0x1
0x8099E3EF = D_8099E3EF; // type:UNK_TYPE1 size:0x1
0x8099E40E = D_8099E40E; // type:UNK_TYPE1 size:0x1
0x8099E40F = D_8099E40F; // type:UNK_TYPE1 size:0x1
0x8099E42E = D_8099E42E; // type:UNK_TYPE1 size:0x1
0x8099E42F = D_8099E42F; // type:UNK_TYPE1 size:0x1
0x8099E44E = D_8099E44E; // type:UNK_TYPE1 size:0x1
0x8099E44F = D_8099E44F; // type:UNK_TYPE1 size:0x1
0x8099E46E = D_8099E46E; // type:UNK_TYPE1 size:0x1
0x8099E46F = D_8099E46F; // type:UNK_TYPE1 size:0x1
0x8099E48E = D_8099E48E; // type:UNK_TYPE1 size:0x1
0x8099E48F = D_8099E48F; // type:UNK_TYPE1 size:0x1
0x8099E4AE = D_8099E4AE; // type:UNK_TYPE1 size:0x1
0x8099E4AF = D_8099E4AF; // type:UNK_TYPE1 size:0x1
0x8099E4CE = D_8099E4CE; // type:UNK_TYPE1 size:0x1
0x8099E4CF = D_8099E4CF; // type:UNK_TYPE1 size:0x1
0x8099E4EE = D_8099E4EE; // type:UNK_TYPE1 size:0x1
0x8099E4EF = D_8099E4EF; // type:UNK_TYPE1 size:0x1
0x8099E50E = D_8099E50E; // type:UNK_TYPE1 size:0x1
0x8099E50F = D_8099E50F; // type:UNK_TYPE1 size:0x1
0x8099E510 = D_8099E510; // type:UNK_TYPE1 size:0x1
0x8099E578 = D_8099E578; // type:UNK_TYPE1 size:0x1
0x8099E5E0 = D_8099E5E0; // type:UNK_TYPE1 size:0x1
0x8099E638 = D_8099E638; // type:UNK_TYPE1 size:0x1
0x8099E6A0 = D_8099E6A0; // type:f32 size:0x4
0x8099E6A4 = D_8099E6A4; // type:f32 size:0x4
0x8099E6A8 = D_8099E6A8; // type:f32 size:0x4
0x8099F490 = En_Zo_InitVars; // type:UNK_TYPE1 size:0x1
0x8099F4B0 = D_8099F4B0; // type:UNK_TYPE1 size:0x1
0x8099F4DC = D_8099F4DC; // type:UNK_TYPE1 size:0x1
0x8099F4E8 = D_8099F4E8; // type:UNK_TYPE1 size:0x1
0x8099F508 = D_8099F508; // type:UNK_TYPE1 size:0x1
0x8099F578 = D_8099F578; // type:UNK_TYPE1 size:0x1
0x8099F57C = D_8099F57C; // type:UNK_TYPE1 size:0x1
0x8099F57E = D_8099F57E; // type:UNK_TYPE1 size:0x1
0x8099F57F = D_8099F57F; // type:UNK_TYPE1 size:0x1
0x8099F586 = D_8099F586; // type:UNK_TYPE1 size:0x1
0x8099F587 = D_8099F587; // type:UNK_TYPE1 size:0x1
0x8099F58C = D_8099F58C; // type:UNK_TYPE1 size:0x1
0x8099F59C = D_8099F59C; // type:UNK_TYPE1 size:0x1
0x8099F5AC = D_8099F5AC; // type:UNK_TYPE1 size:0x1
0x8099F5CC = D_8099F5CC; // type:UNK_TYPE4 size:0x4
0x8099F5D8 = D_8099F5D8; // type:UNK_TYPE4 size:0x4
0x8099F5F8 = D_8099F5F8; // type:UNK_TYPE1 size:0x1
0x8099F600 = D_8099F600; // type:UNK_TYPE4 size:0x4
0x8099F610 = D_8099F610; // type:f32 size:0x4
0x8099F614 = D_8099F614; // type:f32 size:0x4
0x8099F618 = D_8099F618; // type:f32 size:0x4
0x8099F9E0 = Effect_Ss_Ice_Smoke_InitVars; // type:UNK_TYPE1 size:0x1
0x8099F9F0 = D_8099F9F0; // type:f32 size:0x4
0x8099FE10 = Obj_Makekinsuta_InitVars; // type:UNK_TYPE1 size:0x1
0x8099FE30 = D_8099FE30; // type:UNK_TYPE1 size:0x1
0x8099FE3C = D_8099FE3C; // type:UNK_TYPE1 size:0x1
0x8099FE50 = D_8099FE50; // type:UNK_TYPE1 size:0x1
0x809A0D80 = En_Ge3_InitVars; // type:UNK_TYPE1 size:0x1
0x809A0DA0 = D_809A0DA0; // type:UNK_TYPE1 size:0x1
0x809A0DCC = D_809A0DCC; // type:UNK_TYPE1 size:0x1
0x809A0DF0 = D_809A0DF0; // type:UNK_TYPE4 size:0x4
0x809A0DFC = D_809A0DFC; // type:UNK_TYPE1 size:0x1
0x809A0E10 = jtbl_809A0E10; // type:UNK_PTR size:0x4
0x809A1A80 = Obj_Hamishi_InitVars; // type:UNK_TYPE1 size:0x1
0x809A1AA0 = D_809A1AA0; // type:UNK_TYPE1 size:0x1
0x809A1ACC = D_809A1ACC; // type:UNK_TYPE1 size:0x1
0x809A1AD4 = D_809A1AD4; // type:UNK_TYPE2 size:0x2
0x809A1AE8 = D_809A1AE8; // type:UNK_TYPE1 size:0x1
0x809A1B00 = D_809A1B00; // type:f32 size:0x4
0x809A1B04 = D_809A1B04; // type:f32 size:0x4
0x809A1B08 = D_809A1B08; // type:f32 size:0x4
0x809A1B0C = D_809A1B0C; // type:f32 size:0x4
0x809A1B10 = D_809A1B10; // type:f32 size:0x4
0x809A1F60 = En_Zl4_InitVars; // type:UNK_TYPE1 size:0x1
0x809A1F80 = D_809A1F80; // type:UNK_TYPE1 size:0x1
0x809A1F98 = D_809A1F98; // type:UNK_TYPE4 size:0x4
0x809A1FB0 = D_809A1FB0; // type:f32 size:0x4
0x809A2250 = En_Mm2_InitVars; // type:UNK_TYPE1 size:0x1
0x809A2270 = D_809A2270; // type:UNK_TYPE1 size:0x1
0x809A2670 = D_809A2670; // type:UNK_TYPE1 size:0x1
0x809A2870 = D_809A2870; // type:UNK_TYPE1 size:0x1
0x809A2910 = D_809A2910; // type:UNK_TYPE1 size:0x1
0x809A29D8 = D_809A29D8; // type:UNK_TYPE1 size:0x1
0x809A3230 = Door_Spiral_InitVars; // type:UNK_TYPE1 size:0x1
0x809A3250 = D_809A3250; // type:UNK_TYPE1 size:0x1
0x809A32D0 = D_809A32D0; // type:UNK_TYPE1 size:0x1
0x809A32EC = D_809A32EC; // type:UNK_TYPE2 size:0x2
0x809A3308 = D_809A3308; // type:UNK_TYPE1 size:0x1
0x809A3320 = D_809A3320; // type:f32 size:0x4
0x809A4030 = Obj_Pzlblock_InitVars; // type:UNK_TYPE1 size:0x1
0x809A4050 = D_809A4050; // type:UNK_TYPE1 size:0x1
0x809A4058 = D_809A4058; // type:UNK_TYPE1 size:0x1
0x809A4060 = D_809A4060; // type:UNK_TYPE2 size:0x2
0x809A4078 = D_809A4078; // type:UNK_TYPE1 size:0x1
0x809A4088 = D_809A4088; // type:UNK_TYPE1 size:0x1
0x809A40A0 = D_809A40A0; // type:f32 size:0x4
0x809A40A4 = D_809A40A4; // type:f32 size:0x4
0x809A4C90 = Obj_Toge_InitVars; // type:UNK_TYPE1 size:0x1
0x809A4CB0 = D_809A4CB0; // type:UNK_TYPE1 size:0x1
0x809A4CDC = D_809A4CDC; // type:UNK_TYPE1 size:0x1
0x809A4CFC = D_809A4CFC; // type:UNK_TYPE1 size:0x1
0x809A4D0C = D_809A4D0C; // type:f32 size:0x4
0x809A4D10 = D_809A4D10; // type:UNK_TYPE1 size:0x1
0x809A4D14 = D_809A4D14; // type:UNK_TYPE1 size:0x1
0x809A4D30 = D_809A4D30; // type:f32 size:0x4
0x809A4D34 = D_809A4D34; // type:f32 size:0x4
0x809A4D38 = D_809A4D38; // type:f32 size:0x4
0x809A5B90 = Obj_Armos_InitVars; // type:UNK_TYPE1 size:0x1
0x809A5BB0 = D_809A5BB0; // type:UNK_TYPE1 size:0x1
0x809A5BB8 = D_809A5BB8; // type:UNK_TYPE1 size:0x1
0x809A5BC0 = D_809A5BC0; // type:UNK_TYPE1 size:0x1
0x809A5BE0 = D_809A5BE0; // type:f32 size:0x4
0x809A5BE4 = D_809A5BE4; // type:f32 size:0x4
0x809A5BE8 = D_809A5BE8; // type:f32 size:0x4
0x809A5BEC = D_809A5BEC; // type:f32 size:0x4
0x809A5BF0 = D_809A5BF0; // type:f32 size:0x4
0x809A5BF4 = D_809A5BF4; // type:f32 size:0x4
0x809A6150 = Obj_Boyo_InitVars; // type:UNK_TYPE1 size:0x1
0x809A6170 = D_809A6170; // type:UNK_TYPE1 size:0x1
0x809A619C = D_809A619C; // type:UNK_TYPE1 size:0x1
0x809A61B0 = sBumperCollideInfo; // type:UNK_TYPE1 size:0x1
0x809A61B4 = D_809A61B4; // type:UNK_TYPE2 size:0x2
0x809A61D0 = D_809A61D0; // type:f32 size:0x4
0x809A61D4 = D_809A61D4; // type:f32 size:0x4
0x809A61D8 = D_809A61D8; // type:f32 size:0x4
0x809A61DC = D_809A61DC; // type:f32 size:0x4
0x809A61E0 = D_809A61E0; // type:f32 size:0x4
0x809A61E4 = D_809A61E4; // type:f32 size:0x4
0x809A61E8 = D_809A61E8; // type:f32 size:0x4
0x809A8C80 = sOccupiedIndices; // type:UNK_TYPE4 size:0x4
0x809A8C94 = sLimbIndexToShadowBodyPartsIndex; // type:UNK_TYPE1 size:0x1
0x809A8CAC = sParentBodyParts; // type:UNK_TYPE1 size:0x1
0x809A8CC4 = sShadowSizes; // type:UNK_TYPE1 size:0x1
0x809A8CDC = sDamageTable; // type:UNK_TYPE1 size:0x1
0x809A8CFC = En_Grasshopper_InitVars; // type:UNK_TYPE1 size:0x1
0x809A8D1C = sJntSphElementsInit; // type:UNK_TYPE1 size:0x1
0x809A8D64 = sJntSphInit; // type:UNK_TYPE1 size:0x1
0x809A8D74 = sAnimations; // type:UNK_TYPE1 size:0x1
0x809A8D94 = sAnimationModes; // type:UNK_TYPE1 size:0x1
0x809A8D9C = sFireVelocityAndAccel; // type:UNK_TYPE4 size:0x4
0x809A8E08 = sEffectOffsetFromTailTop; // type:UNK_TYPE4 size:0x4
0x809A8E14 = sZeroVec3f; // type:UNK_TYPE4 size:0x4
0x809A8E20 = sLightningTextures; // type:UNK_TYPE1 size:0x1
0x809A8E40 = D_809A8E40; // type:f32 size:0x4
0x809A8E44 = D_809A8E44; // type:f32 size:0x4
0x809A8E48 = D_809A8E48; // type:f32 size:0x4
0x809A8E4C = D_809A8E4C; // type:f32 size:0x4
0x809A8E50 = D_809A8E50; // type:f32 size:0x4
0x809A8E54 = D_809A8E54; // type:f32 size:0x4
0x809A8E58 = D_809A8E58; // type:f32 size:0x4
0x809A8E5C = D_809A8E5C; // type:f32 size:0x4
0x809A8E60 = D_809A8E60; // type:f32 size:0x4
0x809A8E64 = D_809A8E64; // type:f32 size:0x4
0x809A8E68 = D_809A8E68; // type:f32 size:0x4
0x809A8E6C = D_809A8E6C; // type:f32 size:0x4
0x809A8E70 = D_809A8E70; // type:f32 size:0x4
0x809A8E74 = D_809A8E74; // type:f32 size:0x4
0x809A8E78 = D_809A8E78; // type:f32 size:0x4
0x809A8E7C = D_809A8E7C; // type:f32 size:0x4
0x809A8E80 = D_809A8E80; // type:f32 size:0x4
0x809A8E84 = D_809A8E84; // type:f32 size:0x4
0x809A8E88 = D_809A8E88; // type:f32 size:0x4
0x809A8E8C = D_809A8E8C; // type:f32 size:0x4
0x809A8E90 = D_809A8E90; // type:f32 size:0x4
0x809A8E94 = D_809A8E94; // type:f32 size:0x4
0x809A8E98 = D_809A8E98; // type:f32 size:0x4
0x809A8E9C = D_809A8E9C; // type:f32 size:0x4
0x809A8EA0 = D_809A8EA0; // type:f32 size:0x4
0x809A8EA4 = D_809A8EA4; // type:f32 size:0x4
0x809AA9F0 = D_809AA9F0; // type:UNK_TYPE1 size:0x1
0x809AAA68 = D_809AAA68; // type:UNK_TYPE1 size:0x1
0x809AAAE0 = D_809AAAE0; // type:UNK_TYPE1 size:0x1
0x809AAB00 = Obj_Grass_InitVars; // type:UNK_TYPE1 size:0x1
0x809AAB20 = D_809AAB20; // type:UNK_TYPE1 size:0x1
0x809AAB4C = D_809AAB4C; // type:UNK_TYPE4 size:0x4
0x809AAB7C = D_809AAB7C; // type:UNK_TYPE1 size:0x1
0x809AAB8C = D_809AAB8C; // type:UNK_TYPE4 size:0x4
0x809AAB94 = D_809AAB94; // type:UNK_TYPE4 size:0x4
0x809AABA0 = D_809AABA0; // type:f32 size:0x4
0x809AABA4 = D_809AABA4; // type:f32 size:0x4
0x809AABA8 = D_809AABA8; // type:f32 size:0x4
0x809AABAC = D_809AABAC; // type:f32 size:0x4
0x809AABB0 = D_809AABB0; // type:f32 size:0x4
0x809AABB4 = D_809AABB4; // type:f32 size:0x4
0x809AABB8 = D_809AABB8; // type:f32 size:0x4
0x809AABBC = D_809AABBC; // type:f32 size:0x4
0x809AABC0 = D_809AABC0; // type:f32 size:0x4
0x809AABC4 = D_809AABC4; // type:f32 size:0x4
0x809AABC8 = D_809AABC8; // type:f32 size:0x4
0x809AABCC = D_809AABCC; // type:f32 size:0x4
0x809AABD0 = D_809AABD0; // type:f32 size:0x4
0x809AABD4 = D_809AABD4; // type:f32 size:0x4
0x809AABD8 = D_809AABD8; // type:f32 size:0x4
0x809AADA0 = D_809AADA0; // type:UNK_TYPE1 size:0x1
0x809AADB0 = D_809AADB0; // type:UNK_TYPE1 size:0x1
0x809AADC0 = D_809AADC0; // type:UNK_TYPE1 size:0x1
0x809AAE10 = D_809AAE10; // type:UNK_TYPE1 size:0x1
0x809ABBB0 = Obj_Grass_Carry_InitVars; // type:UNK_TYPE1 size:0x1
0x809ABBD0 = D_809ABBD0; // type:UNK_TYPE1 size:0x1
0x809ABBFC = D_809ABBFC; // type:UNK_TYPE2 size:0x2
0x809ABC00 = D_809ABC00; // type:UNK_TYPE2 size:0x2
0x809ABC04 = D_809ABC04; // type:UNK_TYPE2 size:0x2
0x809ABC08 = D_809ABC08; // type:UNK_TYPE2 size:0x2
0x809ABC0C = D_809ABC0C; // type:UNK_TYPE4 size:0x4
0x809ABC3C = D_809ABC3C; // type:UNK_TYPE1 size:0x1
0x809ABC4C = D_809ABC4C; // type:UNK_TYPE1 size:0x1
0x809ABC60 = D_809ABC60; // type:f32 size:0x4
0x809ABC64 = D_809ABC64; // type:f32 size:0x4
0x809ABC68 = D_809ABC68; // type:f32 size:0x4
0x809ABC6C = D_809ABC6C; // type:f32 size:0x4
0x809ABC70 = D_809ABC70; // type:f32 size:0x4
0x809ABC74 = D_809ABC74; // type:f32 size:0x4
0x809ABC78 = D_809ABC78; // type:f32 size:0x4
0x809AC340 = Obj_Grass_Unit_InitVars; // type:UNK_TYPE1 size:0x1
0x809AC360 = D_809AC360; // type:UNK_TYPE1 size:0x1
0x809AC3A8 = D_809AC3A8; // type:UNK_TYPE1 size:0x1
0x809AC408 = D_809AC408; // type:UNK_TYPE1 size:0x1
0x809AC418 = D_809AC418; // type:UNK_TYPE4 size:0x4
0x809AC41C = D_809AC41C; // type:UNK_TYPE4 size:0x4
0x809AC420 = D_809AC420; // type:UNK_TYPE4 size:0x4
0x809AC424 = D_809AC424; // type:UNK_TYPE4 size:0x4
0x809ACC40 = Bg_Fire_Wall_InitVars; // type:UNK_TYPE1 size:0x1
0x809ACC60 = D_809ACC60; // type:UNK_TYPE1 size:0x1
0x809ACC8C = D_809ACC8C; // type:UNK_TYPE1 size:0x1
0x809ACC94 = D_809ACC94; // type:UNK_TYPE1 size:0x1
0x809ACCC0 = D_809ACCC0; // type:f32 size:0x4
0x809ACCC4 = D_809ACCC4; // type:f32 size:0x4
0x809ACCC8 = D_809ACCC8; // type:f32 size:0x4
0x809ACCCC = D_809ACCCC; // type:f32 size:0x4
0x809ACCD0 = D_809ACCD0; // type:f32 size:0x4
0x809ACED0 = En_Bu_InitVars; // type:UNK_TYPE1 size:0x1
0x809ACEF0 = D_809ACEF0; // type:f32 size:0x4
0x809AD7F0 = En_Encount3_InitVars; // type:UNK_TYPE1 size:0x1
0x809AD810 = D_809AD810; // type:UNK_TYPE4 size:0x4
0x809AD820 = D_809AD820; // type:f32 size:0x4
0x809AD824 = D_809AD824; // type:f32 size:0x4
0x809AD828 = D_809AD828; // type:f32 size:0x4
0x809AD82C = D_809AD82C; // type:f32 size:0x4
0x809AD830 = D_809AD830; // type:f32 size:0x4
0x809AD834 = D_809AD834; // type:f32 size:0x4
0x809B0F40 = D_809B0F40; // type:UNK_TYPE4 size:0x4
0x809B0F44 = D_809B0F44; // type:UNK_TYPE4 size:0x4
0x809B0F48 = D_809B0F48; // type:UNK_TYPE1 size:0x1
0x809B0F68 = En_Jso_InitVars; // type:UNK_TYPE1 size:0x1
0x809B0F88 = D_809B0F88; // type:UNK_TYPE1 size:0x1
0x809B0FB4 = D_809B0FB4; // type:UNK_TYPE1 size:0x1
0x809B1004 = D_809B1004; // type:UNK_TYPE1 size:0x1
0x809B100C = D_809B100C; // type:UNK_TYPE1 size:0x1
0x809B103C = D_809B103C; // type:UNK_TYPE1 size:0x1
0x809B1048 = D_809B1048; // type:UNK_TYPE4 size:0x4
0x809B10B4 = D_809B10B4; // type:UNK_TYPE1 size:0x1
0x809B10C0 = D_809B10C0; // type:UNK_TYPE1 size:0x1
0x809B10CC = D_809B10CC; // type:UNK_TYPE1 size:0x1
0x809B10D8 = D_809B10D8; // type:UNK_TYPE1 size:0x1
0x809B10E4 = D_809B10E4; // type:UNK_TYPE2 size:0x2
0x809B1110 = D_809B1110; // type:f32 size:0x4
0x809B1114 = jtbl_809B1114; // type:UNK_PTR size:0x4
0x809B112C = D_809B112C; // type:f32 size:0x4
0x809B1130 = D_809B1130; // type:f32 size:0x4
0x809B1134 = D_809B1134; // type:f32 size:0x4
0x809B1138 = D_809B1138; // type:f32 size:0x4
0x809B113C = D_809B113C; // type:f32 size:0x4
0x809B1140 = D_809B1140; // type:f32 size:0x4
0x809B1144 = D_809B1144; // type:f32 size:0x4
0x809B1148 = D_809B1148; // type:f32 size:0x4
0x809B114C = D_809B114C; // type:f32 size:0x4
0x809B1150 = D_809B1150; // type:f32 size:0x4
0x809B1154 = D_809B1154; // type:f32 size:0x4
0x809B1158 = jtbl_809B1158; // type:UNK_PTR size:0x4
0x809B1180 = jtbl_809B1180; // type:UNK_PTR size:0x4
0x809B11A4 = D_809B11A4; // type:f32 size:0x4
0x809B11A8 = D_809B11A8; // type:f32 size:0x4
0x809B11AC = D_809B11AC; // type:f32 size:0x4
0x809B11B0 = D_809B11B0; // type:f32 size:0x4
0x809B1FA0 = Obj_Chikuwa_InitVars; // type:UNK_TYPE1 size:0x1
0x809B1FC0 = D_809B1FC0; // type:UNK_TYPE1 size:0x1
0x809B1FD0 = D_809B1FD0; // type:UNK_TYPE1 size:0x1
0x809B1FDC = D_809B1FDC; // type:UNK_TYPE1 size:0x1
0x809B1FF0 = D_809B1FF0; // type:f32 size:0x4
0x809B1FF4 = D_809B1FF4; // type:f32 size:0x4
0x809B1FF8 = D_809B1FF8; // type:f32 size:0x4
0x809B1FFC = D_809B1FFC; // type:f32 size:0x4
0x809B2000 = D_809B2000; // type:f32 size:0x4
0x809B2004 = D_809B2004; // type:f32 size:0x4
0x809B2008 = D_809B2008; // type:f32 size:0x4
0x809B200C = D_809B200C; // type:f32 size:0x4
0x809B2010 = D_809B2010; // type:f32 size:0x4
0x809B2014 = D_809B2014; // type:f32 size:0x4
0x809B2018 = D_809B2018; // type:f32 size:0x4
0x809B201C = D_809B201C; // type:f32 size:0x4
0x809B2020 = D_809B2020; // type:f32 size:0x4
0x809B2024 = D_809B2024; // type:f32 size:0x4
0x809BDAF0 = D_809BDAF0; // type:UNK_TYPE4 size:0x4
0x809BDAFC = D_809BDAFC; // type:UNK_TYPE1 size:0x1
0x809BDB00 = D_809BDB00; // type:UNK_TYPE1 size:0x1
0x809BDB04 = D_809BDB04; // type:UNK_TYPE1 size:0x1
0x809BDB24 = D_809BDB24; // type:UNK_TYPE1 size:0x1
0x809BDB44 = D_809BDB44; // type:UNK_TYPE1 size:0x1
0x809BDB68 = D_809BDB68; // type:UNK_TYPE1 size:0x1
0x809BDB8C = D_809BDB8C; // type:UNK_TYPE1 size:0x1
0x809BDB9C = D_809BDB9C; // type:UNK_TYPE1 size:0x1
0x809BDBAC = D_809BDBAC; // type:UNK_TYPE1 size:0x1
0x809BDBD0 = D_809BDBD0; // type:UNK_TYPE1 size:0x1
0x809BDBE0 = D_809BDBE0; // type:UNK_TYPE1 size:0x1
0x809BDC28 = D_809BDC28; // type:UNK_TYPE1 size:0x1
0x809BDC38 = D_809BDC38; // type:UNK_TYPE1 size:0x1
0x809BDC64 = D_809BDC64; // type:UNK_TYPE1 size:0x1
0x809BDC90 = D_809BDC90; // type:UNK_TYPE1 size:0x1
0x809BDC94 = D_809BDC94; // type:UNK_TYPE1 size:0x1
0x809BDC98 = En_Knight_InitVars; // type:UNK_TYPE1 size:0x1
0x809BDCB8 = D_809BDCB8; // type:UNK_TYPE1 size:0x1
0x809BDCC0 = D_809BDCC0; // type:UNK_TYPE1 size:0x1
0x809BDCC8 = D_809BDCC8; // type:UNK_TYPE1 size:0x1
0x809BDCD0 = D_809BDCD0; // type:UNK_TYPE1 size:0x1
0x809BDCD8 = D_809BDCD8; // type:UNK_TYPE1 size:0x1
0x809BDCE0 = D_809BDCE0; // type:UNK_TYPE1 size:0x1
0x809BDCE8 = D_809BDCE8; // type:UNK_TYPE1 size:0x1
0x809BDCF0 = D_809BDCF0; // type:UNK_TYPE1 size:0x1
0x809BDCF4 = D_809BDCF4; // type:UNK_TYPE1 size:0x1
0x809BDCF8 = D_809BDCF8; // type:UNK_TYPE1 size:0x1
0x809BDCFC = D_809BDCFC; // type:UNK_TYPE1 size:0x1
0x809BDD00 = D_809BDD00; // type:UNK_TYPE1 size:0x1
0x809BDD0C = D_809BDD0C; // type:UNK_TYPE1 size:0x1
0x809BDD18 = D_809BDD18; // type:UNK_TYPE1 size:0x1
0x809BDD24 = D_809BDD24; // type:UNK_TYPE1 size:0x1
0x809BDD30 = D_809BDD30; // type:UNK_TYPE1 size:0x1
0x809BDD3C = D_809BDD3C; // type:UNK_TYPE1 size:0x1
0x809BDD5C = D_809BDD5C; // type:UNK_TYPE1 size:0x1
0x809BDD68 = D_809BDD68; // type:UNK_TYPE1 size:0x1
0x809BDD74 = D_809BDD74; // type:UNK_TYPE1 size:0x1
0x809BDD80 = D_809BDD80; // type:UNK_TYPE1 size:0x1
0x809BDD90 = D_809BDD90; // type:f32 size:0x4
0x809BDD94 = D_809BDD94; // type:f32 size:0x4
0x809BDD98 = D_809BDD98; // type:f32 size:0x4
0x809BDD9C = D_809BDD9C; // type:f32 size:0x4
0x809BDDA0 = D_809BDDA0; // type:f32 size:0x4
0x809BDDA4 = D_809BDDA4; // type:f32 size:0x4
0x809BDDA8 = D_809BDDA8; // type:f32 size:0x4
0x809BDDAC = D_809BDDAC; // type:f32 size:0x4
0x809BDDB0 = D_809BDDB0; // type:f32 size:0x4
0x809BDDB4 = D_809BDDB4; // type:f32 size:0x4
0x809BDDB8 = D_809BDDB8; // type:f32 size:0x4
0x809BDDBC = D_809BDDBC; // type:f32 size:0x4
0x809BDDC0 = D_809BDDC0; // type:f32 size:0x4
0x809BDDC4 = D_809BDDC4; // type:f32 size:0x4
0x809BDDC8 = D_809BDDC8; // type:f32 size:0x4
0x809BDDCC = D_809BDDCC; // type:f32 size:0x4
0x809BDDD0 = D_809BDDD0; // type:f32 size:0x4
0x809BDDD4 = D_809BDDD4; // type:f32 size:0x4
0x809BDDD8 = D_809BDDD8; // type:f32 size:0x4
0x809BDDDC = D_809BDDDC; // type:f32 size:0x4
0x809BDDE0 = D_809BDDE0; // type:f32 size:0x4
0x809BDDE4 = D_809BDDE4; // type:f32 size:0x4
0x809BDDE8 = D_809BDDE8; // type:f32 size:0x4
0x809BDDEC = D_809BDDEC; // type:f32 size:0x4
0x809BDDF0 = D_809BDDF0; // type:f32 size:0x4
0x809BDDF4 = D_809BDDF4; // type:f32 size:0x4
0x809BDDF8 = D_809BDDF8; // type:f32 size:0x4
0x809BDDFC = D_809BDDFC; // type:f32 size:0x4
0x809BDE00 = D_809BDE00; // type:f32 size:0x4
0x809BDE04 = D_809BDE04; // type:f32 size:0x4
0x809BDE08 = D_809BDE08; // type:f32 size:0x4
0x809BDE0C = D_809BDE0C; // type:f32 size:0x4
0x809BDE10 = D_809BDE10; // type:f32 size:0x4
0x809BDE14 = D_809BDE14; // type:f32 size:0x4
0x809BDE18 = D_809BDE18; // type:f32 size:0x4
0x809BDE1C = D_809BDE1C; // type:f32 size:0x4
0x809BDE20 = D_809BDE20; // type:f32 size:0x4
0x809BDE24 = D_809BDE24; // type:f32 size:0x4
0x809BDE28 = D_809BDE28; // type:f32 size:0x4
0x809BDE2C = jtbl_809BDE2C; // type:UNK_PTR size:0x4
0x809BDE5C = D_809BDE5C; // type:f32 size:0x4
0x809BDE60 = D_809BDE60; // type:f32 size:0x4
0x809BDE64 = D_809BDE64; // type:f32 size:0x4
0x809BDE68 = D_809BDE68; // type:f32 size:0x4
0x809BDE6C = D_809BDE6C; // type:f32 size:0x4
0x809BDE70 = D_809BDE70; // type:f32 size:0x4
0x809BDE74 = D_809BDE74; // type:f32 size:0x4
0x809BDE78 = D_809BDE78; // type:f32 size:0x4
0x809BDE7C = D_809BDE7C; // type:f32 size:0x4
0x809BDE80 = D_809BDE80; // type:f32 size:0x4
0x809BDE84 = D_809BDE84; // type:f32 size:0x4
0x809BDE88 = jtbl_809BDE88; // type:UNK_PTR size:0x4
0x809BDE9C = jtbl_809BDE9C; // type:UNK_PTR size:0x4
0x809BDEC0 = D_809BDEC0; // type:f32 size:0x4
0x809BDEC4 = D_809BDEC4; // type:f32 size:0x4
0x809BDEC8 = D_809BDEC8; // type:f32 size:0x4
0x809BDECC = D_809BDECC; // type:f32 size:0x4
0x809BDED0 = D_809BDED0; // type:f32 size:0x4
0x809BDED4 = D_809BDED4; // type:f32 size:0x4
0x809BDED8 = D_809BDED8; // type:f32 size:0x4
0x809BDEDC = D_809BDEDC; // type:f32 size:0x4
0x809BDEE0 = D_809BDEE0; // type:f32 size:0x4
0x809BDEE4 = D_809BDEE4; // type:f32 size:0x4
0x809BDEE8 = D_809BDEE8; // type:f32 size:0x4
0x809BDEEC = D_809BDEEC; // type:f32 size:0x4
0x809BDEF0 = D_809BDEF0; // type:f32 size:0x4
0x809BDEF4 = D_809BDEF4; // type:f32 size:0x4
0x809BDEF8 = D_809BDEF8; // type:f32 size:0x4
0x809BDEFC = D_809BDEFC; // type:f32 size:0x4
0x809BDF00 = D_809BDF00; // type:f32 size:0x4
0x809BDF04 = D_809BDF04; // type:f32 size:0x4
0x809BDF08 = D_809BDF08; // type:f32 size:0x4
0x809BDF0C = D_809BDF0C; // type:f32 size:0x4
0x809BDF10 = D_809BDF10; // type:f32 size:0x4
0x809BDF14 = D_809BDF14; // type:f32 size:0x4
0x809BDF18 = D_809BDF18; // type:f32 size:0x4
0x809BDF1C = D_809BDF1C; // type:f32 size:0x4
0x809BDF20 = D_809BDF20; // type:f32 size:0x4
0x809BDF24 = D_809BDF24; // type:f32 size:0x4
0x809BDF28 = D_809BDF28; // type:f32 size:0x4
0x809BDF2C = D_809BDF2C; // type:f32 size:0x4
0x809BDF30 = D_809BDF30; // type:f32 size:0x4
0x809BDF34 = D_809BDF34; // type:f32 size:0x4
0x809BDF38 = D_809BDF38; // type:f32 size:0x4
0x809BDF3C = D_809BDF3C; // type:f32 size:0x4
0x809BDF40 = D_809BDF40; // type:f32 size:0x4
0x809BDF44 = D_809BDF44; // type:f32 size:0x4
0x809BDF48 = D_809BDF48; // type:f32 size:0x4
0x809BDF4C = D_809BDF4C; // type:f32 size:0x4
0x809BDF50 = D_809BDF50; // type:f32 size:0x4
0x809BDF54 = D_809BDF54; // type:f32 size:0x4
0x809BDF58 = D_809BDF58; // type:f32 size:0x4
0x809BDF5C = D_809BDF5C; // type:f32 size:0x4
0x809BDF60 = D_809BDF60; // type:f32 size:0x4
0x809BDF64 = jtbl_809BDF64; // type:UNK_PTR size:0x4
0x809BDF9C = D_809BDF9C; // type:f32 size:0x4
0x809BDFA0 = D_809BDFA0; // type:f32 size:0x4
0x809BDFA4 = D_809BDFA4; // type:f32 size:0x4
0x809BDFA8 = D_809BDFA8; // type:f32 size:0x4
0x809BDFAC = D_809BDFAC; // type:f32 size:0x4
0x809BDFB0 = D_809BDFB0; // type:f32 size:0x4
0x809BDFB4 = D_809BDFB4; // type:f32 size:0x4
0x809BDFB8 = D_809BDFB8; // type:f32 size:0x4
0x809BDFBC = D_809BDFBC; // type:f32 size:0x4
0x809BDFC0 = D_809BDFC0; // type:f32 size:0x4
0x809BDFC4 = D_809BDFC4; // type:f32 size:0x4
0x809BDFC8 = D_809BDFC8; // type:f32 size:0x4
0x809BDFCC = D_809BDFCC; // type:f32 size:0x4
0x809BDFD0 = D_809BDFD0; // type:f32 size:0x4
0x809BDFD4 = D_809BDFD4; // type:f32 size:0x4
0x809BDFD8 = jtbl_809BDFD8; // type:UNK_PTR size:0x4
0x809BE080 = D_809BE080; // type:f32 size:0x4
0x809BE084 = D_809BE084; // type:f32 size:0x4
0x809BE088 = D_809BE088; // type:f32 size:0x4
0x809BE08C = D_809BE08C; // type:f32 size:0x4
0x809BE090 = D_809BE090; // type:f32 size:0x4
0x809BE094 = D_809BE094; // type:f32 size:0x4
0x809BE098 = D_809BE098; // type:f32 size:0x4
0x809BE09C = D_809BE09C; // type:f32 size:0x4
0x809BE0A0 = D_809BE0A0; // type:f32 size:0x4
0x809BE0A4 = D_809BE0A4; // type:f32 size:0x4
0x809BE0A8 = D_809BE0A8; // type:f32 size:0x4
0x809BE0AC = D_809BE0AC; // type:f32 size:0x4
0x809BE0B0 = D_809BE0B0; // type:f32 size:0x4
0x809BE0B4 = D_809BE0B4; // type:f32 size:0x4
0x809BE0B8 = D_809BE0B8; // type:f32 size:0x4
0x809BE0BC = D_809BE0BC; // type:f32 size:0x4
0x809BEFD0 = D_809BEFD0; // type:UNK_TYPE4 size:0x4
0x809BEFD4 = D_809BEFD4; // type:UNK_TYPE4 size:0x4
0x809BEFD8 = D_809BEFD8; // type:UNK_TYPE4 size:0x4
0x809BEFDC = D_809BEFDC; // type:UNK_TYPE4 size:0x4
0x809BEFE0 = D_809BEFE0; // type:UNK_TYPE4 size:0x4
0x809BEFE4 = D_809BEFE4; // type:UNK_TYPE4 size:0x4
0x809BEFE8 = D_809BEFE8; // type:UNK_TYPE1 size:0x1
0x809C014A = D_809C014A; // type:UNK_TYPE1 size:0x1
0x809C0758 = D_809C0758; // type:UNK_TYPE1 size:0x1
0x809C0FE0 = En_Warp_tag_InitVars; // type:UNK_TYPE1 size:0x1
0x809C1000 = D_809C1000; // type:UNK_TYPE1 size:0x1
0x809C1008 = D_809C1008; // type:UNK_TYPE1 size:0x1
0x809C1010 = D_809C1010; // type:f32 size:0x4
0x809C3770 = En_Aob_01_InitVars; // type:UNK_TYPE1 size:0x1
0x809C3790 = sAnimationInfo; // type:UNK_TYPE4 size:0x4
0x809C3820 = D_809C3820; // type:UNK_TYPE1 size:0x1
0x809C384C = D_809C384C; // type:UNK_TYPE4 size:0x4
0x809C392C = D_809C392C; // type:UNK_TYPE1 size:0x1
0x809C394C = D_809C394C; // type:UNK_TYPE4 size:0x4
0x809C395C = D_809C395C; // type:UNK_PTR size:0x4
0x809C3968 = D_809C3968; // type:UNK_TYPE1 size:0x1
0x809C3980 = D_809C3980; // type:f32 size:0x4
0x809C3984 = D_809C3984; // type:f32 size:0x4
0x809C3988 = D_809C3988; // type:f32 size:0x4
0x809C398C = jtbl_809C398C; // type:UNK_PTR size:0x4
0x809C3A38 = jtbl_809C3A38; // type:UNK_PTR size:0x4
0x809C3A4C = D_809C3A4C; // type:f32 size:0x4
0x809C3A50 = D_809C3A50; // type:f32 size:0x4
0x809C3A54 = D_809C3A54; // type:f32 size:0x4
0x809C3A58 = D_809C3A58; // type:f32 size:0x4
0x809C3A5C = D_809C3A5C; // type:f32 size:0x4
0x809C3DC0 = En_Boj_01_InitVars; // type:UNK_TYPE1 size:0x1
0x809C3E50 = En_Boj_02_InitVars; // type:UNK_TYPE1 size:0x1
0x809C3EE0 = En_Boj_03_InitVars; // type:UNK_TYPE1 size:0x1
0x809C46B0 = En_Encount4_InitVars; // type:UNK_TYPE1 size:0x1
0x809C46D0 = D_809C46D0; // type:UNK_TYPE1 size:0x1
0x809C46DC = D_809C46DC; // type:UNK_TYPE1 size:0x1
0x809C6100 = D_809C6100; // type:UNK_TYPE4 size:0x4
0x809C6104 = D_809C6104; // type:UNK_TYPE4 size:0x4
0x809C6108 = En_Bom_Bowl_Man_InitVars; // type:UNK_TYPE1 size:0x1
0x809C6128 = D_809C6128; // type:UNK_TYPE1 size:0x1
0x809C6178 = D_809C6178; // type:UNK_TYPE1 size:0x1
0x809C618C = D_809C618C; // type:UNK_TYPE2 size:0x2
0x809C6198 = D_809C6198; // type:UNK_TYPE2 size:0x2
0x809C61A0 = D_809C61A0; // type:UNK_TYPE1 size:0x1
0x809C61B8 = D_809C61B8; // type:UNK_TYPE1 size:0x1
0x809C61DC = D_809C61DC; // type:UNK_TYPE1 size:0x1
0x809C61E0 = D_809C61E0; // type:UNK_TYPE1 size:0x1
0x809C61F0 = D_809C61F0; // type:UNK_TYPE1 size:0x1
0x809C6200 = D_809C6200; // type:UNK_PTR size:0x4
0x809C6214 = D_809C6214; // type:UNK_TYPE1 size:0x1
0x809C6220 = D_809C6220; // type:UNK_TYPE1 size:0x1
0x809C6240 = jtbl_809C6240; // type:UNK_PTR size:0x4
0x809C6258 = D_809C6258; // type:f32 size:0x4
0x809C625C = D_809C625C; // type:f32 size:0x4
0x809C6260 = D_809C6260; // type:f32 size:0x4
0x809C6264 = D_809C6264; // type:f32 size:0x4
0x809C6268 = D_809C6268; // type:f32 size:0x4
0x809C9160 = En_Syateki_Man_InitVars; // type:UNK_TYPE1 size:0x1
0x809C9180 = sAnimations; // type:UNK_TYPE1 size:0x1
0x809C91C8 = sGuayFlagsPerWave; // type:UNK_TYPE1 size:0x1
0x809C91D0 = sNormalSwampTargetActorList; // type:UNK_TYPE1 size:0x1
0x809C934C = sUnusedSwampTargetActorList; // type:UNK_TYPE1 size:0x1
0x809C9464 = sSwampTargetActorLists; // type:UNK_PTR size:0x4
0x809C946C = sSwampTargetActorListLengths; // type:UNK_TYPE1 size:0x1
0x809C9474 = sSwampPlayerPos; // type:UNK_TYPE4 size:0x4
0x809C9480 = sTownFierceDeityPlayerPos; // type:UNK_TYPE4 size:0x4
0x809C948C = sTownPlayerPos; // type:UNK_TYPE4 size:0x4
0x809C9498 = sGameStartTimer; // type:s16 size:0x2
0x809C949C = sHasSpawnedGuaysForThisWave; // type:UNK_TYPE2 size:0x2
0x809C94A0 = sBonusTimer; // type:s32 size:0x4
0x809C94A4 = sGameStartTimer; // type:s16 size:0x2
0x809C94A8 = sModFromLosingTime; // type:s32 size:0x4
0x809C94AC = sFocusOffset; // type:UNK_TYPE4 size:0x4
0x809C94B8 = sEyeTextures; // type:UNK_PTR size:0x4
0x809C94D0 = sOctorokFlagsPerWave; // type:UNK_TYPE1 size:0x1
0x809C950C = jtbl_809C950C; // type:UNK_PTR size:0x4
0x809C9544 = jtbl_809C9544; // type:UNK_PTR size:0x4
0x809C9570 = jtbl_809C9570; // type:UNK_PTR size:0x4
0x809C95F0 = jtbl_809C95F0; // type:UNK_PTR size:0x4
0x809C961C = D_809C961C; // type:f32 size:0x4
0x809C9620 = D_809C9620; // type:f32 size:0x4
0x809C9624 = D_809C9624; // type:f32 size:0x4
0x809CA2B0 = D_809CA2B0; // type:UNK_TYPE1 size:0x1
0x809CA2DC = Bg_Icicle_InitVars; // type:UNK_TYPE1 size:0x1
0x809CA2FC = D_809CA2FC; // type:UNK_TYPE1 size:0x1
0x809CA30C = D_809CA30C; // type:UNK_TYPE1 size:0x1
0x809CA318 = D_809CA318; // type:UNK_TYPE1 size:0x1
0x809CA31C = D_809CA31C; // type:UNK_TYPE1 size:0x1
0x809CA320 = D_809CA320; // type:f32 size:0x4
0x809CA324 = D_809CA324; // type:f32 size:0x4
0x809CB050 = sZeroVec; // type:UNK_TYPE1 size:0x1
0x809CB05C = En_Syateki_Crow_InitVars; // type:UNK_TYPE1 size:0x1
0x809CB07C = D_809CB07C; // type:UNK_TYPE1 size:0x1
0x809CB0A0 = D_809CB0A0; // type:UNK_TYPE1 size:0x1
0x809CB0AC = D_809CB0AC; // type:UNK_PTR size:0x4
0x809CB0B0 = D_809CB0B0; // type:UNK_TYPE1 size:0x1
0x809CB0C0 = sVelocity; // type:UNK_TYPE1 size:0x1
0x809CB0CC = sAccel; // type:UNK_TYPE1 size:0x1
0x809CB0D8 = sBodyOffset; // type:UNK_TYPE1 size:0x1
0x809CB0F0 = D_809CB0F0; // type:f32 size:0x4
0x809CB0F4 = D_809CB0F4; // type:f32 size:0x4
0x809CB0F8 = D_809CB0F8; // type:f32 size:0x4
0x809CB0FC = D_809CB0FC; // type:f32 size:0x4
0x809CB240 = En_Boj_04_InitVars; // type:UNK_TYPE1 size:0x1
0x809CBEE0 = En_Cne_01_InitVars; // type:UNK_TYPE1 size:0x1
0x809CBF00 = D_809CBF00; // type:UNK_TYPE1 size:0x1
0x809CBF2C = D_809CBF2C; // type:UNK_TYPE1 size:0x1
0x809CBF38 = D_809CBF38; // type:UNK_TYPE1 size:0x1
0x809CBF58 = D_809CBF58; // type:UNK_TYPE1 size:0x1
0x809CBF78 = D_809CBF78; // type:UNK_TYPE4 size:0x4
0x809CBF84 = D_809CBF84; // type:UNK_TYPE4 size:0x4
0x809CBF90 = D_809CBF90; // type:f32 size:0x4
0x809CBF94 = D_809CBF94; // type:f32 size:0x4
0x809CCC60 = En_Bba_01_InitVars; // type:UNK_TYPE1 size:0x1
0x809CCC80 = D_809CCC80; // type:UNK_TYPE1 size:0x1
0x809CCCAC = D_809CCCAC; // type:UNK_TYPE1 size:0x1
0x809CCCB8 = D_809CCCB8; // type:UNK_TYPE1 size:0x1
0x809CCCD8 = D_809CCCD8; // type:UNK_TYPE1 size:0x1
0x809CCCF8 = D_809CCCF8; // type:UNK_TYPE4 size:0x4
0x809CCD04 = D_809CCD04; // type:UNK_TYPE4 size:0x4
0x809CCD10 = D_809CCD10; // type:f32 size:0x4
0x809CCD14 = D_809CCD14; // type:f32 size:0x4
0x809CDC30 = En_Bji_01_InitVars; // type:ActorInit size:0x20
0x809CDC50 = D_809CDC50; // type:UNK_TYPE1 size:0x1
0x809CDC7C = sAnimationInfo; // type:UNK_TYPE1 size:0x1
0x809CDCBC = D_809CDCBC; // type:UNK_TYPE1 size:0x1
0x809CDCC8 = D_809CDCC8; // type:UNK_TYPE1 size:0x1
0x809CDCD4 = D_809CDCD4; // type:UNK_TYPE1 size:0x1
0x809CDCE0 = D_809CDCE0; // type:f32 size:0x4
0x809CDCE4 = jtbl_809CDCE4; // type:UNK_PTR size:0x4
0x809CDD58 = D_809CDD58; // type:f32 size:0x4
0x809CF060 = Bg_Spdweb_InitVars; // type:UNK_TYPE1 size:0x1
0x809CF080 = D_809CF080; // type:UNK_TYPE1 size:0x1
0x809CF0F8 = D_809CF0F8; // type:UNK_TYPE1 size:0x1
0x809CF108 = D_809CF108; // type:UNK_TYPE1 size:0x1
0x809CF1F8 = D_809CF1F8; // type:UNK_TYPE1 size:0x1
0x809CF208 = D_809CF208; // type:UNK_TYPE1 size:0x1
0x809CF20C = D_809CF20C; // type:UNK_TYPE1 size:0x1
0x809CF210 = D_809CF210; // type:UNK_TYPE1 size:0x1
0x809CF220 = D_809CF220; // type:f32 size:0x4
0x809CF224 = D_809CF224; // type:f32 size:0x4
0x809CF228 = D_809CF228; // type:f32 size:0x4
0x809CF22C = D_809CF22C; // type:f32 size:0x4
0x809CF230 = D_809CF230; // type:f32 size:0x4
0x809CF234 = D_809CF234; // type:f32 size:0x4
0x809CF238 = D_809CF238; // type:f32 size:0x4
0x809CF23C = D_809CF23C; // type:f32 size:0x4
0x809CF240 = D_809CF240; // type:f32 size:0x4
0x809CF244 = D_809CF244; // type:f32 size:0x4
0x809D0190 = En_Mt_tag_InitVars; // type:UNK_TYPE1 size:0x1
0x809D01B0 = D_809D01B0; // type:UNK_TYPE1 size:0x1
0x809D01FC = D_809D01FC; // type:UNK_TYPE4 size:0x4
0x809D0430 = D_809D0430; // type:f32 size:0x4
0x809D0434 = D_809D0434; // type:f32 size:0x4
0x809D0438 = D_809D0438; // type:f32 size:0x4
0x809D043C = D_809D043C; // type:f32 size:0x4
0x809D7980 = D_809D7980; // type:UNK_TYPE1 size:0x1
0x809D798C = D_809D798C; // type:f32 size:0x4
0x809D7990 = D_809D7990; // type:UNK_TYPE1 size:0x1
0x809D79B0 = D_809D79B0; // type:UNK_TYPE1 size:0x1
0x809D79D0 = D_809D79D0; // type:UNK_TYPE1 size:0x1
0x809D7A3C = D_809D7A3C; // type:UNK_TYPE1 size:0x1
0x809D7A4C = D_809D7A4C; // type:UNK_TYPE1 size:0x1
0x809D7A70 = D_809D7A70; // type:UNK_TYPE1 size:0x1
0x809D7A80 = D_809D7A80; // type:UNK_TYPE1 size:0x1
0x809D7C0C = D_809D7C0C; // type:UNK_TYPE1 size:0x1
0x809D7C1C = D_809D7C1C; // type:UNK_TYPE1 size:0x1
0x809D7C64 = D_809D7C64; // type:UNK_TYPE1 size:0x1
0x809D7C74 = D_809D7C74; // type:UNK_TYPE1 size:0x1
0x809D7CA0 = D_809D7CA0; // type:UNK_TYPE1 size:0x1
0x809D7CCC = Boss_01_InitVars; // type:UNK_TYPE1 size:0x1
0x809D7CEC = D_809D7CEC; // type:UNK_TYPE1 size:0x1
0x809D7CF0 = D_809D7CF0; // type:UNK_TYPE1 size:0x1
0x809D7CF4 = D_809D7CF4; // type:UNK_TYPE1 size:0x1
0x809D7D24 = D_809D7D24; // type:UNK_TYPE4 size:0x4
0x809D7D38 = D_809D7D38; // type:UNK_TYPE4 size:0x4
0x809D7D4C = D_809D7D4C; // type:UNK_TYPE1 size:0x1
0x809D7D50 = D_809D7D50; // type:UNK_TYPE1 size:0x1
0x809D7D54 = D_809D7D54; // type:UNK_TYPE1 size:0x1
0x809D7D60 = D_809D7D60; // type:UNK_TYPE1 size:0x1
0x809D7D6C = D_809D7D6C; // type:UNK_TYPE1 size:0x1
0x809D7D78 = D_809D7D78; // type:UNK_TYPE1 size:0x1
0x809D7D7A = D_809D7D7A; // type:UNK_TYPE1 size:0x1
0x809D7D7E = D_809D7D7E; // type:UNK_TYPE1 size:0x1
0x809D7D7F = D_809D7D7F; // type:UNK_TYPE1 size:0x1
0x809D7D84 = D_809D7D84; // type:UNK_TYPE1 size:0x1
0x809D7D8E = D_809D7D8E; // type:UNK_TYPE1 size:0x1
0x809D7D8F = D_809D7D8F; // type:UNK_TYPE1 size:0x1
0x809D7D96 = D_809D7D96; // type:UNK_TYPE1 size:0x1
0x809D7D97 = D_809D7D97; // type:UNK_TYPE1 size:0x1
0x809D7D98 = D_809D7D98; // type:UNK_TYPE1 size:0x1
0x809D7DB4 = D_809D7DB4; // type:UNK_TYPE1 size:0x1
0x809D7E38 = D_809D7E38; // type:UNK_TYPE1 size:0x1
0x809D7E44 = D_809D7E44; // type:UNK_TYPE1 size:0x1
0x809D7E50 = D_809D7E50; // type:UNK_TYPE1 size:0x1
0x809D7E5C = D_809D7E5C; // type:UNK_TYPE1 size:0x1
0x809D7E68 = D_809D7E68; // type:UNK_TYPE1 size:0x1
0x809D7EA0 = D_809D7EA0; // type:UNK_TYPE1 size:0x1
0x809D7EAC = D_809D7EAC; // type:UNK_TYPE4 size:0x4
0x809D7EC4 = D_809D7EC4; // type:UNK_TYPE4 size:0x4
0x809D7EE0 = D_809D7EE0; // type:UNK_TYPE4 size:0x4
0x809D7F00 = D_809D7F00; // type:UNK_TYPE4 size:0x4
0x809D7F30 = D_809D7F30; // type:UNK_TYPE4 size:0x4
0x809D7F6C = D_809D7F6C; // type:UNK_TYPE1 size:0x1
0x809D7F80 = D_809D7F80; // type:f32 size:0x4
0x809D7F84 = D_809D7F84; // type:f32 size:0x4
0x809D7F88 = D_809D7F88; // type:f32 size:0x4
0x809D7F8C = D_809D7F8C; // type:f32 size:0x4
0x809D7F90 = D_809D7F90; // type:f32 size:0x4
0x809D7F94 = D_809D7F94; // type:f32 size:0x4
0x809D7F98 = D_809D7F98; // type:f32 size:0x4
0x809D7F9C = D_809D7F9C; // type:f32 size:0x4
0x809D7FA0 = D_809D7FA0; // type:f32 size:0x4
0x809D7FA4 = D_809D7FA4; // type:f32 size:0x4
0x809D7FA8 = D_809D7FA8; // type:f32 size:0x4
0x809D7FAC = D_809D7FAC; // type:f32 size:0x4
0x809D7FB0 = D_809D7FB0; // type:f32 size:0x4
0x809D7FB4 = D_809D7FB4; // type:f32 size:0x4
0x809D7FB8 = D_809D7FB8; // type:f32 size:0x4
0x809D7FBC = D_809D7FBC; // type:f32 size:0x4
0x809D7FC0 = D_809D7FC0; // type:f32 size:0x4
0x809D7FC4 = D_809D7FC4; // type:f32 size:0x4
0x809D7FC8 = jtbl_809D7FC8; // type:UNK_TYPE1 size:0x1
0x809D7FF4 = D_809D7FF4; // type:f32 size:0x4
0x809D7FF8 = D_809D7FF8; // type:f32 size:0x4
0x809D7FFC = D_809D7FFC; // type:f32 size:0x4
0x809D8000 = D_809D8000; // type:f32 size:0x4
0x809D8004 = D_809D8004; // type:f32 size:0x4
0x809D8008 = D_809D8008; // type:f32 size:0x4
0x809D800C = D_809D800C; // type:f32 size:0x4
0x809D8010 = jtbl_809D8010; // type:UNK_PTR size:0x4
0x809D8040 = D_809D8040; // type:f32 size:0x4
0x809D8044 = D_809D8044; // type:f32 size:0x4
0x809D8048 = D_809D8048; // type:f32 size:0x4
0x809D804C = D_809D804C; // type:f32 size:0x4
0x809D8050 = jtbl_809D8050; // type:UNK_PTR size:0x4
0x809D80F8 = D_809D80F8; // type:f32 size:0x4
0x809D80FC = D_809D80FC; // type:f32 size:0x4
0x809D8100 = D_809D8100; // type:f32 size:0x4
0x809D8104 = D_809D8104; // type:f32 size:0x4
0x809D8108 = D_809D8108; // type:f32 size:0x4
0x809D810C = D_809D810C; // type:f32 size:0x4
0x809D8110 = D_809D8110; // type:f32 size:0x4
0x809D8114 = D_809D8114; // type:f32 size:0x4
0x809D8118 = D_809D8118; // type:f32 size:0x4
0x809D811C = D_809D811C; // type:f32 size:0x4
0x809D8120 = D_809D8120; // type:f32 size:0x4
0x809D8124 = D_809D8124; // type:f32 size:0x4
0x809D8128 = D_809D8128; // type:f32 size:0x4
0x809D812C = D_809D812C; // type:f32 size:0x4
0x809D8130 = D_809D8130; // type:f32 size:0x4
0x809D8134 = D_809D8134; // type:f32 size:0x4
0x809D8138 = D_809D8138; // type:f32 size:0x4
0x809D813C = D_809D813C; // type:f32 size:0x4
0x809D8140 = D_809D8140; // type:f32 size:0x4
0x809D8144 = D_809D8144; // type:f32 size:0x4
0x809D8148 = D_809D8148; // type:f32 size:0x4
0x809D814C = D_809D814C; // type:f32 size:0x4
0x809D8150 = D_809D8150; // type:f32 size:0x4
0x809D8154 = D_809D8154; // type:f32 size:0x4
0x809D8158 = D_809D8158; // type:f32 size:0x4
0x809D8A10 = D_809D8A10; // type:UNK_TYPE2 size:0x2
0x809D8A14 = D_809D8A14; // type:UNK_TYPE4 size:0x4
0x809D8A18 = D_809D8A18; // type:UNK_TYPE4 size:0x4
0x809D8A1C = D_809D8A1C; // type:f32 size:0x4
0x809D8A20 = D_809D8A20; // type:f32 size:0x4
0x809D8A24 = D_809D8A24; // type:f32 size:0x4
0x809D8A28 = D_809D8A28; // type:f32 size:0x4
0x809D8A2C = D_809D8A2C; // type:f32 size:0x4
0x809D8A30 = D_809D8A30; // type:f32 size:0x4
0x809D8A34 = D_809D8A34; // type:f32 size:0x4
0x809D8A38 = D_809D8A38; // type:UNK_TYPE1 size:0x1
0x809D8A40 = D_809D8A40; // type:UNK_TYPE1 size:0x1
0x809D8A4C = D_809D8A4C; // type:UNK_TYPE4 size:0x4
0x809D8A50 = D_809D8A50; // type:UNK_TYPE4 size:0x4
0x809D8A54 = D_809D8A54; // type:UNK_TYPE4 size:0x4
0x809D8A58 = D_809D8A58; // type:UNK_TYPE1 size:0x1
0x809DF550 = D_809DF550; // type:UNK_TYPE1 size:0x1
0x809DF570 = D_809DF570; // type:UNK_TYPE1 size:0x1
0x809DF590 = Boss_02_InitVars; // type:UNK_TYPE1 size:0x1
0x809DF5B0 = D_809DF5B0; // type:f32 size:0x4
0x809DF5B4 = D_809DF5B4; // type:UNK_TYPE2 size:0x30
0x809DF5E4 = D_809DF5E4; // type:UNK_TYPE2 size:0x30
0x809DF614 = D_809DF614; // type:UNK_TYPE1 size:0x1
0x809DF92C = D_809DF92C; // type:UNK_TYPE1 size:0x1
0x809DF93C = D_809DF93C; // type:UNK_TYPE1 size:0x1
0x809DF984 = D_809DF984; // type:UNK_TYPE1 size:0x1
0x809DF994 = D_809DF994; // type:UNK_TYPE1 size:0x1
0x809DF9C0 = D_809DF9C0; // type:UNK_TYPE1 size:0x1
0x809DFA2C = D_809DFA2C; // type:UNK_TYPE1 size:0x1
0x809DFA98 = D_809DFA98; // type:UNK_TYPE1 size:0x1
0x809DFA9C = D_809DFA9C; // type:UNK_TYPE4 size:0x4
0x809DFAF4 = D_809DFAF4; // type:UNK_TYPE1 size:0x1
0x809DFB00 = D_809DFB00; // type:f32 size:0x4
0x809DFB04 = D_809DFB04; // type:f32 size:0x4
0x809DFB08 = D_809DFB08; // type:f32 size:0x4
0x809DFB0C = D_809DFB0C; // type:f32 size:0x4
0x809DFB10 = D_809DFB10; // type:f32 size:0x4
0x809DFB14 = D_809DFB14; // type:f32 size:0x4
0x809DFB18 = D_809DFB18; // type:f32 size:0x4
0x809DFB1C = D_809DFB1C; // type:f32 size:0x4
0x809DFB20 = D_809DFB20; // type:f32 size:0x4
0x809DFB28 = D_809DFB28; // type:f32 size:0x4
0x809DFB2C = jtbl_809DFB2C; // type:UNK_PTR size:0x4
0x809DFB8C = D_809DFB8C; // type:f32 size:0x4
0x809DFB90 = D_809DFB90; // type:f32 size:0x4
0x809DFB94 = D_809DFB94; // type:f32 size:0x4
0x809DFB98 = D_809DFB98; // type:f32 size:0x4
0x809DFB9C = D_809DFB9C; // type:f32 size:0x4
0x809DFBA0 = D_809DFBA0; // type:f32 size:0x4
0x809DFBA4 = D_809DFBA4; // type:f32 size:0x4
0x809DFBA8 = D_809DFBA8; // type:f32 size:0x4
0x809DFBAC = D_809DFBAC; // type:f32 size:0x4
0x809DFBB0 = D_809DFBB0; // type:f32 size:0x4
0x809DFBB4 = D_809DFBB4; // type:f32 size:0x4
0x809DFBB8 = D_809DFBB8; // type:f32 size:0x4
0x809DFBBC = D_809DFBBC; // type:f32 size:0x4
0x809DFBC0 = D_809DFBC0; // type:f32 size:0x4
0x809DFBC4 = D_809DFBC4; // type:f32 size:0x4
0x809DFBC8 = D_809DFBC8; // type:f32 size:0x4
0x809DFBCC = D_809DFBCC; // type:f32 size:0x4
0x809DFBD0 = D_809DFBD0; // type:f32 size:0x4
0x809DFBD4 = D_809DFBD4; // type:f32 size:0x4
0x809DFBD8 = D_809DFBD8; // type:f32 size:0x4
0x809DFBDC = D_809DFBDC; // type:f32 size:0x4
0x809DFBE0 = D_809DFBE0; // type:f32 size:0x4
0x809DFBE4 = jtbl_809DFBE4; // type:UNK_PTR size:0x4
0x809DFC14 = D_809DFC14; // type:f32 size:0x4
0x809DFC18 = D_809DFC18; // type:f32 size:0x4
0x809DFC1C = D_809DFC1C; // type:f32 size:0x4
0x809DFC20 = D_809DFC20; // type:f32 size:0x4
0x809DFC24 = D_809DFC24; // type:f32 size:0x4
0x809DFC28 = D_809DFC28; // type:f32 size:0x4
0x809DFC2C = D_809DFC2C; // type:f32 size:0x4
0x809DFC30 = D_809DFC30; // type:f32 size:0x4
0x809DFC34 = D_809DFC34; // type:f32 size:0x4
0x809DFC38 = jtbl_809DFC38; // type:UNK_PTR size:0x4
0x809DFC8C = D_809DFC8C; // type:f32 size:0x4
0x809DFC90 = D_809DFC90; // type:f32 size:0x4
0x809DFC94 = D_809DFC94; // type:f32 size:0x4
0x809DFC98 = D_809DFC98; // type:f32 size:0x4
0x809DFC9C = D_809DFC9C; // type:f32 size:0x4
0x809DFCA0 = D_809DFCA0; // type:f32 size:0x4
0x809DFCB0 = D_809DFCB0; // type:f32 size:0x4
0x809DFCC4 = D_809DFCC4; // type:f32 size:0x4
0x809DFCC8 = D_809DFCC8; // type:f32 size:0x4
0x809DFCCC = D_809DFCCC; // type:f32 size:0x4
0x809DFCD0 = D_809DFCD0; // type:f32 size:0x4
0x809DFCF0 = D_809DFCF0; // type:f32 size:0x4
0x809DFCFC = D_809DFCFC; // type:f32 size:0x4
0x809DFD00 = D_809DFD00; // type:f32 size:0x4
0x809DFD04 = D_809DFD04; // type:f32 size:0x4
0x809DFD08 = D_809DFD08; // type:f32 size:0x4
0x809DFD0C = D_809DFD0C; // type:f32 size:0x4
0x809DFD10 = D_809DFD10; // type:f32 size:0x4
0x809DFD18 = D_809DFD18; // type:f32 size:0x4
0x809DFD1C = D_809DFD1C; // type:f32 size:0x4
0x809DFD20 = D_809DFD20; // type:f32 size:0x4
0x809DFD24 = D_809DFD24; // type:f32 size:0x4
0x809DFD28 = D_809DFD28; // type:f32 size:0x4
0x809DFD2C = D_809DFD2C; // type:f32 size:0x4
0x809DFD30 = D_809DFD30; // type:f32 size:0x4
0x809DFD34 = D_809DFD34; // type:f32 size:0x4
0x809DFD38 = D_809DFD38; // type:f32 size:0x4
0x809DFD3C = D_809DFD3C; // type:f32 size:0x4
0x809E0420 = D_809E0420; // type:UNK_TYPE1 size:0x1
0x809E0421 = D_809E0421; // type:UNK_TYPE1 size:0x1
0x809E0422 = D_809E0422; // type:UNK_TYPE1 size:0x1
0x809E0424 = sRedTwinmold; // type:UNK_TYPE4 size:0x4
0x809E0428 = sBlueTwinmold; // type:UNK_TYPE4 size:0x4
0x809E042C = sTwinmoldStatic; // type:UNK_TYPE4 size:0x4
0x809E0430 = sMusicStartTimer; // type:UNK_TYPE1 size:0x1
0x809E0434 = sBlueWarp; // type:UNK_TYPE4 size:0x4
0x809E0438 = sEffects; // type:UNK_TYPE1 size:0x1
0x809E8EA0 = D_809E8EA0; // type:UNK_TYPE4 size:0x4
0x809E8EAC = Boss_03_InitVars; // type:UNK_TYPE1 size:0x1
0x809E8ECC = D_809E8ECC; // type:UNK_TYPE1 size:0x1
0x809E8F14 = D_809E8F14; // type:UNK_TYPE1 size:0x1
0x809E8F24 = D_809E8F24; // type:UNK_TYPE1 size:0x1
0x809E8FD8 = D_809E8FD8; // type:UNK_TYPE1 size:0x1
0x809E8FE8 = sGyorgInitialPos; // type:Vec3f size:0xC
0x809E8FF4 = D_809E8FF4; // type:f32 size:0x1
0x809E90FC = sGyorgDustPrimColor; // type:UNK_TYPE1 size:0x1
0x809E9100 = sGyorgDustEnvColor; // type:UNK_TYPE1 size:0x1
0x809E9104 = D_809E9104; // type:UNK_TYPE1 size:0x1
0x809E9128 = sGyorgSphElementIndices; // type:s8 size:0x1E
0x809E9148 = D_809E9148; // type:UNK_TYPE1 size:0x1
0x809E9154 = D_809E9154; // type:Vec3f size:0x54
0x809E91A8 = D_809E91A8; // type:UNK_TYPE1 size:0x1
0x809E91B4 = D_809E91B4; // type:f32 size:0x4
0x809E91C0 = sGyorgSeaweedDLs; // type:UNK_TYPE4 size:0x4
0x809E91E0 = D_809E91E0; // type:f32 size:0x4
0x809E91E4 = D_809E91E4; // type:f32 size:0x4
0x809E91E8 = D_809E91E8; // type:f32 size:0x4
0x809E91EC = D_809E91EC; // type:f32 size:0x4
0x809E91F0 = D_809E91F0; // type:f32 size:0x4
0x809E91F4 = D_809E91F4; // type:f32 size:0x4
0x809E91F8 = D_809E91F8; // type:f32 size:0x4
0x809E91FC = D_809E91FC; // type:f32 size:0x4
0x809E9200 = D_809E9200; // type:f32 size:0x4
0x809E9204 = D_809E9204; // type:f32 size:0x4
0x809E9208 = D_809E9208; // type:f32 size:0x4
0x809E920C = D_809E920C; // type:f32 size:0x4
0x809E9210 = D_809E9210; // type:f32 size:0x4
0x809E9214 = D_809E9214; // type:f32 size:0x4
0x809E9218 = D_809E9218; // type:f32 size:0x4
0x809E921C = D_809E921C; // type:f32 size:0x4
0x809E9220 = D_809E9220; // type:f32 size:0x4
0x809E9224 = D_809E9224; // type:f32 size:0x4
0x809E9228 = D_809E9228; // type:f32 size:0x4
0x809E922C = D_809E922C; // type:f32 size:0x4
0x809E9230 = D_809E9230; // type:f32 size:0x4
0x809E9234 = D_809E9234; // type:f32 size:0x4
0x809E9238 = D_809E9238; // type:f32 size:0x4
0x809E923C = D_809E923C; // type:f32 size:0x4
0x809E9240 = D_809E9240; // type:f32 size:0x4
0x809E9244 = D_809E9244; // type:f32 size:0x4
0x809E9248 = D_809E9248; // type:f32 size:0x4
0x809E924C = D_809E924C; // type:f32 size:0x4
0x809E9250 = D_809E9250; // type:f32 size:0x4
0x809E9254 = D_809E9254; // type:f32 size:0x4
0x809E9258 = D_809E9258; // type:f32 size:0x4
0x809E925C = D_809E925C; // type:f32 size:0x4
0x809E9260 = D_809E9260; // type:f32 size:0x4
0x809E9264 = D_809E9264; // type:f32 size:0x4
0x809E9268 = jtbl_809E9268; // type:UNK_PTR size:0x4
0x809E9284 = D_809E9284; // type:f32 size:0x4
0x809E9288 = D_809E9288; // type:f32 size:0x4
0x809E928C = D_809E928C; // type:f32 size:0x4
0x809E9290 = D_809E9290; // type:f32 size:0x4
0x809E9294 = D_809E9294; // type:f32 size:0x4
0x809E9298 = D_809E9298; // type:f32 size:0x4
0x809E929C = D_809E929C; // type:f32 size:0x4
0x809E92A0 = D_809E92A0; // type:f32 size:0x4
0x809E92A4 = D_809E92A4; // type:f32 size:0x4
0x809E92A8 = D_809E92A8; // type:f32 size:0x4
0x809E92AC = D_809E92AC; // type:f32 size:0x4
0x809E92B0 = D_809E92B0; // type:f32 size:0x4
0x809E92B4 = D_809E92B4; // type:f32 size:0x4
0x809E92B8 = D_809E92B8; // type:f32 size:0x4
0x809E92BC = D_809E92BC; // type:f32 size:0x4
0x809E92C0 = D_809E92C0; // type:f32 size:0x4
0x809E92C4 = D_809E92C4; // type:f32 size:0x4
0x809E92C8 = D_809E92C8; // type:f32 size:0x4
0x809E92CC = D_809E92CC; // type:f32 size:0x4
0x809E92D0 = D_809E92D0; // type:f32 size:0x4
0x809E92D4 = D_809E92D4; // type:f32 size:0x4
0x809E92D8 = D_809E92D8; // type:f32 size:0x4
0x809E92DC = D_809E92DC; // type:f32 size:0x4
0x809E9840 = D_809E9840; // type:UNK_TYPE1 size:0x1
0x809E9841 = D_809E9841; // type:UNK_TYPE1 size:0x1
0x809E9842 = D_809E9842; // type:UNK_TYPE1 size:0x1
0x809E9848 = D_809E9848; // type:UNK_TYPE1 size:0x1
0x809E9858 = sGyorgEffects; // type:UNK_TYPE1 size:0x27D8
0x809EC030 = sGyorgBossInstance; // type:UNK_TYPE4 size:0x4
0x809EC034 = sRandSeed0; // type:UNK_TYPE4 size:0x4
0x809EC038 = sRandSeed1; // type:UNK_TYPE4 size:0x4
0x809EC03C = sRandSeed2; // type:UNK_TYPE4 size:0x4
0x809EE150 = D_809EE150; // type:UNK_TYPE1 size:0x1
0x809EE170 = Boss_04_InitVars; // type:UNK_TYPE1 size:0x1
0x809EE190 = D_809EE190; // type:UNK_TYPE1 size:0x1
0x809EE1B4 = D_809EE1B4; // type:UNK_TYPE1 size:0x1
0x809EE1C4 = D_809EE1C4; // type:UNK_TYPE1 size:0x1
0x809EE1E8 = D_809EE1E8; // type:UNK_TYPE1 size:0x1
0x809EE1F8 = D_809EE1F8; // type:UNK_TYPE4 size:0x4
0x809EE204 = D_809EE204; // type:UNK_TYPE4 size:0x4
0x809EE210 = D_809EE210; // type:UNK_TYPE1 size:0x1
0x809EE21C = D_809EE21C; // type:UNK_TYPE1 size:0x1
0x809EE228 = D_809EE228; // type:UNK_TYPE1 size:0x1
0x809EE234 = D_809EE234; // type:UNK_TYPE1 size:0x1
0x809EE240 = D_809EE240; // type:f32 size:0x4
0x809EE244 = D_809EE244; // type:f32 size:0x4
0x809EE248 = jtbl_809EE248; // type:UNK_PTR size:0x4
0x809EE280 = D_809EE280; // type:f32 size:0x4
0x809EE284 = D_809EE284; // type:f32 size:0x4
0x809EE288 = D_809EE288; // type:f32 size:0x4
0x809EE28C = D_809EE28C; // type:f32 size:0x4
0x809EE290 = D_809EE290; // type:f32 size:0x4
0x809EE294 = D_809EE294; // type:f32 size:0x4
0x809EE298 = D_809EE298; // type:f32 size:0x4
0x809EE29C = D_809EE29C; // type:f32 size:0x4
0x809EE2A0 = D_809EE2A0; // type:f32 size:0x4
0x809EE2A4 = D_809EE2A4; // type:f32 size:0x4
0x809EE2A8 = D_809EE2A8; // type:f32 size:0x4
0x809EE2AC = D_809EE2AC; // type:f32 size:0x4
0x809EE2B0 = D_809EE2B0; // type:f32 size:0x4
0x809EE2B4 = D_809EE2B4; // type:f32 size:0x4
0x809EE2B8 = D_809EE2B8; // type:f32 size:0x4
0x809EE2BC = D_809EE2BC; // type:f32 size:0x4
0x809EE2C0 = D_809EE2C0; // type:f32 size:0x4
0x809EE2C4 = D_809EE2C4; // type:f32 size:0x4
0x809EE2C8 = D_809EE2C8; // type:f32 size:0x4
0x809EE2CC = D_809EE2CC; // type:f32 size:0x4
0x809EE4D0 = D_809EE4D0; // type:UNK_TYPE1 size:0x1
0x809F1A20 = D_809F1A20; // type:UNK_TYPE1 size:0x1
0x809F1A28 = D_809F1A28; // type:UNK_TYPE1 size:0x1
0x809F1A30 = D_809F1A30; // type:UNK_TYPE1 size:0x1
0x809F1AD0 = D_809F1AD0; // type:UNK_TYPE1 size:0x1
0x809F1B00 = D_809F1B00; // type:UNK_TYPE1 size:0x1
0x809F1B2C = D_809F1B2C; // type:UNK_TYPE1 size:0x1
0x809F1B74 = D_809F1B74; // type:UNK_TYPE1 size:0x1
0x809F1B84 = D_809F1B84; // type:UNK_TYPE1 size:0x1
0x809F1BA8 = D_809F1BA8; // type:UNK_TYPE1 size:0x1
0x809F1BB8 = D_809F1BB8; // type:UNK_TYPE1 size:0x1
0x809F1BDC = D_809F1BDC; // type:UNK_TYPE1 size:0x1
0x809F1BEC = D_809F1BEC; // type:UNK_TYPE1 size:0x1
0x809F1BF0 = D_809F1BF0; // type:UNK_TYPE1 size:0x1
0x809F1BF4 = D_809F1BF4; // type:UNK_TYPE1 size:0x1
0x809F1C00 = D_809F1C00; // type:UNK_TYPE1 size:0x1
0x809F1C20 = D_809F1C20; // type:UNK_TYPE1 size:0x1
0x809F1C40 = Boss_05_InitVars; // type:UNK_TYPE1 size:0x1
0x809F1C60 = D_809F1C60; // type:UNK_TYPE2 size:0x2
0x809F1C8C = D_809F1C8C; // type:UNK_TYPE2 size:0x2
0x809F1CB8 = D_809F1CB8; // type:UNK_TYPE1 size:0x1
0x809F1CC0 = D_809F1CC0; // type:UNK_TYPE1 size:0x1
0x809F1CC4 = D_809F1CC4; // type:UNK_TYPE1 size:0x1
0x809F1CD0 = D_809F1CD0; // type:UNK_TYPE1 size:0x1
0x809F1CDC = D_809F1CDC; // type:UNK_TYPE1 size:0x1
0x809F1D20 = D_809F1D20; // type:f32 size:0x4
0x809F1D24 = D_809F1D24; // type:f32 size:0x4
0x809F1D28 = D_809F1D28; // type:f32 size:0x4
0x809F1D2C = D_809F1D2C; // type:f32 size:0x4
0x809F1D30 = D_809F1D30; // type:f32 size:0x4
0x809F1D34 = D_809F1D34; // type:f32 size:0x4
0x809F1D38 = D_809F1D38; // type:f32 size:0x4
0x809F1D3C = D_809F1D3C; // type:f32 size:0x4
0x809F1D40 = D_809F1D40; // type:f32 size:0x4
0x809F1D44 = D_809F1D44; // type:f32 size:0x4
0x809F1D48 = D_809F1D48; // type:f32 size:0x4
0x809F1D4C = jtbl_809F1D4C; // type:UNK_PTR size:0x4
0x809F1DA4 = D_809F1DA4; // type:f32 size:0x4
0x809F1DA8 = D_809F1DA8; // type:f32 size:0x4
0x809F1DAC = D_809F1DAC; // type:f32 size:0x4
0x809F2110 = D_809F2110; // type:UNK_TYPE1 size:0x1
0x809F4080 = D_809F4080; // type:UNK_TYPE1 size:0x1
0x809F40A0 = Boss_06_InitVars; // type:UNK_TYPE1 size:0x1
0x809F40C0 = D_809F40C0; // type:UNK_TYPE1 size:0x1
0x809F40EC = D_809F40EC; // type:UNK_TYPE1 size:0x1
0x809F4110 = D_809F4110; // type:f32 size:0x4
0x809F4114 = D_809F4114; // type:f32 size:0x4
0x809F4118 = D_809F4118; // type:f32 size:0x4
0x809F411C = D_809F411C; // type:f32 size:0x4
0x809F4120 = D_809F4120; // type:f32 size:0x4
0x809F4124 = D_809F4124; // type:f32 size:0x4
0x809F4128 = D_809F4128; // type:f32 size:0x4
0x809F412C = D_809F412C; // type:f32 size:0x4
0x809F4130 = D_809F4130; // type:f32 size:0x4
0x809F4134 = D_809F4134; // type:f32 size:0x4
0x809F4138 = D_809F4138; // type:f32 size:0x4
0x809F413C = D_809F413C; // type:f32 size:0x4
0x809F4140 = D_809F4140; // type:f32 size:0x4
0x809F4144 = D_809F4144; // type:f32 size:0x4
0x809F4148 = D_809F4148; // type:f32 size:0x4
0x809F414C = D_809F414C; // type:f32 size:0x4
0x809F4150 = D_809F4150; // type:f32 size:0x4
0x809F4154 = D_809F4154; // type:f32 size:0x4
0x809F4158 = D_809F4158; // type:f32 size:0x4
0x809F415C = D_809F415C; // type:f32 size:0x4
0x809F4160 = D_809F4160; // type:f32 size:0x4
0x809F4164 = D_809F4164; // type:f32 size:0x4
0x809F4168 = D_809F4168; // type:f32 size:0x4
0x809F416C = D_809F416C; // type:f32 size:0x4
0x809F4170 = D_809F4170; // type:f32 size:0x4
0x809F4174 = D_809F4174; // type:f32 size:0x4
0x809F4370 = D_809F4370; // type:UNK_TYPE4 size:0x4
0x809F4970 = D_809F4970; // type:UNK_TYPE4 size:0x4
0x809F4974 = D_809F4974; // type:UNK_TYPE4 size:0x4
0x809F4978 = D_809F4978; // type:UNK_TYPE4 size:0x4
0x809F497C = D_809F497C; // type:UNK_TYPE4 size:0x4
0x80A07950 = D_80A07950; // type:UNK_TYPE2 size:0x2
0x80A07952 = D_80A07952; // type:UNK_TYPE2 size:0x2
0x80A07954 = D_80A07954; // type:UNK_TYPE2 size:0x2
0x80A07968 = D_80A07968; // type:UNK_TYPE1 size:0x1
0x80A07980 = D_80A07980; // type:UNK_TYPE1 size:0x1
0x80A079A0 = D_80A079A0; // type:UNK_TYPE1 size:0x1
0x80A079C0 = D_80A079C0; // type:UNK_TYPE1 size:0x1
0x80A079E0 = D_80A079E0; // type:UNK_TYPE1 size:0x1
0x80A07A00 = D_80A07A00; // type:UNK_TYPE1 size:0x1
0x80A07A20 = Boss_07_InitVars; // type:UNK_TYPE1 size:0x1
0x80A07A40 = D_80A07A40; // type:UNK_TYPE1 size:0x1
0x80A07A8C = D_80A07A8C; // type:UNK_TYPE2 size:0x2
0x80A07A90 = D_80A07A90; // type:UNK_TYPE2 size:0x2
0x80A07BCC = D_80A07BCC; // type:UNK_TYPE1 size:0x1
0x80A07BDC = D_80A07BDC; // type:UNK_TYPE1 size:0x1
0x80A07C08 = D_80A07C08; // type:UNK_TYPE1 size:0x1
0x80A07C2C = D_80A07C2C; // type:UNK_TYPE1 size:0x1
0x80A07C3C = D_80A07C3C; // type:UNK_TYPE1 size:0x1
0x80A07C8C = D_80A07C8C; // type:UNK_TYPE1 size:0x1
0x80A07CDC = D_80A07CDC; // type:UNK_TYPE1 size:0x1
0x80A07E68 = D_80A07E68; // type:UNK_TYPE1 size:0x1
0x80A07E78 = D_80A07E78; // type:UNK_TYPE1 size:0x1
0x80A07EA4 = D_80A07EA4; // type:UNK_TYPE1 size:0x1
0x80A07ED0 = D_80A07ED0; // type:UNK_TYPE1 size:0x1
0x80A07EFC = D_80A07EFC; // type:UNK_TYPE1 size:0x1
0x80A07F00 = D_80A07F00; // type:UNK_TYPE1 size:0x1
0x80A07F04 = D_80A07F04; // type:UNK_TYPE1 size:0x1
0x80A07F08 = D_80A07F08; // type:UNK_TYPE1 size:0x1
0x80A07F0C = D_80A07F0C; // type:UNK_TYPE1 size:0x1
0x80A07F3C = D_80A07F3C; // type:UNK_TYPE1 size:0x1
0x80A07F54 = D_80A07F54; // type:UNK_TYPE2 size:0x2
0x80A07F5C = D_80A07F5C; // type:EffectTireMarkInit size:0x8
0x80A07F64 = D_80A07F64; // type:EffectTireMarkInit size:0x8
0x80A07F6C = D_80A07F6C; // type:UNK_TYPE4 size:0x4
0x80A07FA8 = D_80A07FA8; // type:UNK_TYPE4 size:0x4
0x80A07FB4 = D_80A07FB4; // type:UNK_TYPE4 size:0x4
0x80A07FC0 = D_80A07FC0; // type:UNK_TYPE4 size:0x4
0x80A07FCC = D_80A07FCC; // type:UNK_TYPE1 size:0x1
0x80A07FD0 = D_80A07FD0; // type:UNK_TYPE1 size:0x1
0x80A07FD4 = D_80A07FD4; // type:UNK_TYPE1 size:0x1
0x80A07FE0 = D_80A07FE0; // type:UNK_TYPE4 size:0x4
0x80A07FEC = D_80A07FEC; // type:UNK_TYPE1 size:0x1
0x80A07FF8 = D_80A07FF8; // type:UNK_TYPE1 size:0x1
0x80A07FFC = D_80A07FFC; // type:UNK_TYPE1 size:0x1
0x80A07FFD = D_80A07FFD; // type:UNK_TYPE1 size:0x1
0x80A07FFE = D_80A07FFE; // type:UNK_TYPE1 size:0x1
0x80A07FFF = D_80A07FFF; // type:UNK_TYPE1 size:0x1
0x80A08002 = D_80A08002; // type:UNK_TYPE1 size:0x1
0x80A08004 = D_80A08004; // type:UNK_TYPE1 size:0x1
0x80A08006 = D_80A08006; // type:UNK_TYPE1 size:0x1
0x80A0800C = D_80A0800C; // type:UNK_TYPE1 size:0x1
0x80A08090 = D_80A08090; // type:UNK_TYPE1 size:0x1
0x80A080B0 = D_80A080B0; // type:UNK_TYPE1 size:0x1
0x80A080BC = D_80A080BC; // type:UNK_TYPE4 size:0x4
0x80A080D4 = D_80A080D4; // type:UNK_TYPE4 size:0x4
0x80A080F0 = D_80A080F0; // type:UNK_TYPE4 size:0x4
0x80A08110 = D_80A08110; // type:UNK_TYPE4 size:0x4
0x80A08140 = D_80A08140; // type:UNK_TYPE4 size:0x4
0x80A0817C = D_80A0817C; // type:UNK_TYPE1 size:0x1
0x80A0818C = D_80A0818C; // type:UNK_TYPE1 size:0x1
0x80A08198 = D_80A08198; // type:UNK_TYPE1 size:0x1
0x80A081A0 = D_80A081A0; // type:UNK_TYPE1 size:0x1
0x80A081A8 = D_80A081A8; // type:UNK_TYPE1 size:0x1
0x80A081C8 = D_80A081C8; // type:UNK_TYPE1 size:0x1
0x80A081E8 = D_80A081E8; // type:UNK_TYPE1 size:0x1
0x80A0826C = D_80A0826C; // type:UNK_TYPE1 size:0x1
0x80A0828C = D_80A0828C; // type:UNK_TYPE1 size:0x1
0x80A082A4 = D_80A082A4; // type:UNK_TYPE1 size:0x1
0x80A082BC = D_80A082BC; // type:UNK_TYPE4 size:0x4
0x80A082C8 = D_80A082C8; // type:UNK_TYPE4 size:0x4
0x80A082D4 = D_80A082D4; // type:UNK_TYPE4 size:0x4
0x80A082E0 = D_80A082E0; // type:UNK_TYPE1 size:0x1
0x80A082F0 = D_80A082F0; // type:f32 size:0x4
0x80A082F4 = D_80A082F4; // type:f32 size:0x4
0x80A082F8 = D_80A082F8; // type:f32 size:0x4
0x80A082FC = D_80A082FC; // type:f32 size:0x4
0x80A08300 = D_80A08300; // type:f32 size:0x4
0x80A08304 = D_80A08304; // type:f32 size:0x4
0x80A08308 = D_80A08308; // type:f32 size:0x4
0x80A0830C = D_80A0830C; // type:f32 size:0x4
0x80A08310 = D_80A08310; // type:f32 size:0x4
0x80A08314 = D_80A08314; // type:f32 size:0x4
0x80A08318 = D_80A08318; // type:f32 size:0x4
0x80A0831C = D_80A0831C; // type:f32 size:0x4
0x80A08320 = D_80A08320; // type:f32 size:0x4
0x80A08324 = D_80A08324; // type:f32 size:0x4
0x80A08328 = D_80A08328; // type:f32 size:0x4
0x80A0832C = D_80A0832C; // type:f32 size:0x4
0x80A08330 = D_80A08330; // type:f32 size:0x4
0x80A08334 = D_80A08334; // type:f32 size:0x4
0x80A08338 = D_80A08338; // type:f32 size:0x4
0x80A0833C = D_80A0833C; // type:f32 size:0x4
0x80A08340 = D_80A08340; // type:f32 size:0x4
0x80A08344 = D_80A08344; // type:f32 size:0x4
0x80A08348 = D_80A08348; // type:f32 size:0x4
0x80A0834C = D_80A0834C; // type:f32 size:0x4
0x80A08350 = D_80A08350; // type:f32 size:0x4
0x80A08354 = D_80A08354; // type:f32 size:0x4
0x80A08358 = D_80A08358; // type:f32 size:0x4
0x80A0835C = D_80A0835C; // type:f32 size:0x4
0x80A08360 = D_80A08360; // type:f32 size:0x4
0x80A08364 = D_80A08364; // type:f32 size:0x4
0x80A08368 = D_80A08368; // type:f32 size:0x4
0x80A0836C = D_80A0836C; // type:f32 size:0x4
0x80A08370 = D_80A08370; // type:f32 size:0x4
0x80A08374 = D_80A08374; // type:f32 size:0x4
0x80A08378 = D_80A08378; // type:f32 size:0x4
0x80A0837C = D_80A0837C; // type:f32 size:0x4
0x80A08380 = D_80A08380; // type:f32 size:0x4
0x80A08384 = jtbl_80A08384; // type:UNK_PTR size:0x4
0x80A083A4 = D_80A083A4; // type:f32 size:0x4
0x80A083A8 = jtbl_80A083A8; // type:UNK_PTR size:0x4
0x80A083C8 = D_80A083C8; // type:f32 size:0x4
0x80A083CC = D_80A083CC; // type:f32 size:0x4
0x80A083D0 = D_80A083D0; // type:f32 size:0x4
0x80A083D4 = D_80A083D4; // type:f32 size:0x4
0x80A083D8 = D_80A083D8; // type:f32 size:0x4
0x80A083DC = D_80A083DC; // type:f32 size:0x4
0x80A083E0 = jtbl_80A083E0; // type:UNK_PTR size:0x4
0x80A08404 = jtbl_80A08404; // type:UNK_PTR size:0x4
0x80A084AC = D_80A084AC; // type:f32 size:0x4
0x80A084B0 = D_80A084B0; // type:f32 size:0x4
0x80A084B4 = D_80A084B4; // type:f32 size:0x4
0x80A084B8 = D_80A084B8; // type:f32 size:0x4
0x80A084BC = D_80A084BC; // type:f32 size:0x4
0x80A084C0 = D_80A084C0; // type:f32 size:0x4
0x80A084C4 = D_80A084C4; // type:f32 size:0x4
0x80A084C8 = D_80A084C8; // type:f32 size:0x4
0x80A084CC = D_80A084CC; // type:f32 size:0x4
0x80A084D0 = D_80A084D0; // type:f32 size:0x4
0x80A084D4 = D_80A084D4; // type:f32 size:0x4
0x80A084D8 = D_80A084D8; // type:f32 size:0x4
0x80A084E4 = D_80A084E4; // type:f32 size:0x4
0x80A084E8 = D_80A084E8; // type:f32 size:0x4
0x80A084EC = D_80A084EC; // type:f32 size:0x4
0x80A084F0 = D_80A084F0; // type:f32 size:0x4
0x80A084F4 = D_80A084F4; // type:f32 size:0x4
0x80A084F8 = D_80A084F8; // type:f32 size:0x4
0x80A084FC = D_80A084FC; // type:f32 size:0x4
0x80A08500 = D_80A08500; // type:f32 size:0x4
0x80A08504 = D_80A08504; // type:f32 size:0x4
0x80A08508 = D_80A08508; // type:f32 size:0x4
0x80A0850C = D_80A0850C; // type:f32 size:0x4
0x80A08510 = D_80A08510; // type:f32 size:0x4
0x80A08514 = D_80A08514; // type:f32 size:0x4
0x80A08518 = D_80A08518; // type:f32 size:0x4
0x80A0851C = D_80A0851C; // type:f32 size:0x4
0x80A08520 = D_80A08520; // type:f32 size:0x4
0x80A08524 = jtbl_80A08524; // type:UNK_PTR size:0x4
0x80A0853C = D_80A0853C; // type:f32 size:0x4
0x80A08540 = D_80A08540; // type:f32 size:0x4
0x80A08544 = D_80A08544; // type:f32 size:0x4
0x80A08548 = D_80A08548; // type:f32 size:0x4
0x80A0854C = D_80A0854C; // type:f32 size:0x4
0x80A08550 = jtbl_80A08550; // type:UNK_PTR size:0x4
0x80A0857C = D_80A0857C; // type:f32 size:0x4
0x80A08580 = D_80A08580; // type:f32 size:0x4
0x80A08584 = D_80A08584; // type:f32 size:0x4
0x80A08588 = D_80A08588; // type:f32 size:0x4
0x80A0858C = D_80A0858C; // type:f32 size:0x4
0x80A08590 = jtbl_80A08590; // type:UNK_PTR size:0x4
0x80A085B4 = D_80A085B4; // type:f32 size:0x4
0x80A085B8 = D_80A085B8; // type:f32 size:0x4
0x80A085BC = D_80A085BC; // type:f32 size:0x4
0x80A085C0 = D_80A085C0; // type:f32 size:0x4
0x80A085C4 = jtbl_80A085C4; // type:UNK_PTR size:0x4
0x80A085DC = D_80A085DC; // type:f32 size:0x4
0x80A085E0 = D_80A085E0; // type:f32 size:0x4
0x80A085E4 = D_80A085E4; // type:f32 size:0x4
0x80A085E8 = D_80A085E8; // type:f32 size:0x4
0x80A085EC = D_80A085EC; // type:f32 size:0x4
0x80A085F0 = D_80A085F0; // type:f32 size:0x4
0x80A085F4 = D_80A085F4; // type:f32 size:0x4
0x80A085F8 = D_80A085F8; // type:f32 size:0x4
0x80A085FC = D_80A085FC; // type:f32 size:0x4
0x80A08600 = D_80A08600; // type:f32 size:0x4
0x80A08604 = D_80A08604; // type:f32 size:0x4
0x80A08608 = D_80A08608; // type:f32 size:0x4
0x80A0860C = jtbl_80A0860C; // type:UNK_PTR size:0x4
0x80A08620 = D_80A08620; // type:f32 size:0x4
0x80A08624 = D_80A08624; // type:f32 size:0x4
0x80A08628 = D_80A08628; // type:f32 size:0x4
0x80A0862C = D_80A0862C; // type:f32 size:0x4
0x80A08630 = D_80A08630; // type:f32 size:0x4
0x80A08634 = D_80A08634; // type:f32 size:0x4
0x80A0863C = D_80A0863C; // type:f32 size:0x4
0x80A08640 = D_80A08640; // type:f32 size:0x4
0x80A08644 = D_80A08644; // type:f32 size:0x4
0x80A08648 = D_80A08648; // type:f32 size:0x4
0x80A0864C = D_80A0864C; // type:f32 size:0x4
0x80A08650 = D_80A08650; // type:f32 size:0x4
0x80A08654 = D_80A08654; // type:f32 size:0x4
0x80A08658 = D_80A08658; // type:f32 size:0x4
0x80A0865C = D_80A0865C; // type:f32 size:0x4
0x80A08660 = D_80A08660; // type:f32 size:0x4
0x80A08664 = D_80A08664; // type:f32 size:0x4
0x80A08668 = D_80A08668; // type:f32 size:0x4
0x80A0866C = D_80A0866C; // type:f32 size:0x4
0x80A08670 = D_80A08670; // type:f32 size:0x4
0x80A08674 = D_80A08674; // type:f32 size:0x4
0x80A08678 = D_80A08678; // type:f32 size:0x4
0x80A0867C = D_80A0867C; // type:f32 size:0x4
0x80A08680 = D_80A08680; // type:f32 size:0x4
0x80A08684 = D_80A08684; // type:f32 size:0x4
0x80A08688 = D_80A08688; // type:f32 size:0x4
0x80A0868C = D_80A0868C; // type:f32 size:0x4
0x80A08690 = D_80A08690; // type:f32 size:0x4
0x80A08694 = jtbl_80A08694; // type:UNK_PTR size:0x4
0x80A086E8 = D_80A086E8; // type:f32 size:0x4
0x80A086EC = D_80A086EC; // type:f32 size:0x4
0x80A086F0 = D_80A086F0; // type:f32 size:0x4
0x80A086F4 = D_80A086F4; // type:f32 size:0x4
0x80A086F8 = D_80A086F8; // type:f32 size:0x4
0x80A086FC = D_80A086FC; // type:f32 size:0x4
0x80A08700 = D_80A08700; // type:f32 size:0x4
0x80A08704 = D_80A08704; // type:f32 size:0x4
0x80A08708 = D_80A08708; // type:f32 size:0x4
0x80A0870C = D_80A0870C; // type:f32 size:0x4
0x80A08710 = D_80A08710; // type:f32 size:0x4
0x80A08714 = D_80A08714; // type:f32 size:0x4
0x80A08718 = D_80A08718; // type:f32 size:0x4
0x80A0871C = D_80A0871C; // type:f32 size:0x4
0x80A08720 = D_80A08720; // type:f32 size:0x4
0x80A08724 = D_80A08724; // type:f32 size:0x4
0x80A08728 = D_80A08728; // type:f32 size:0x4
0x80A0872C = D_80A0872C; // type:f32 size:0x4
0x80A08730 = D_80A08730; // type:f32 size:0x4
0x80A08734 = D_80A08734; // type:f32 size:0x4
0x80A08738 = D_80A08738; // type:f32 size:0x4
0x80A0873C = D_80A0873C; // type:f32 size:0x4
0x80A08740 = D_80A08740; // type:f32 size:0x4
0x80A08744 = D_80A08744; // type:f32 size:0x4
0x80A08748 = D_80A08748; // type:f32 size:0x4
0x80A0874C = D_80A0874C; // type:f32 size:0x4
0x80A08750 = D_80A08750; // type:f32 size:0x4
0x80A08754 = D_80A08754; // type:f32 size:0x4
0x80A08758 = D_80A08758; // type:f32 size:0x4
0x80A0875C = D_80A0875C; // type:f32 size:0x4
0x80A08760 = D_80A08760; // type:f32 size:0x4
0x80A08764 = D_80A08764; // type:f32 size:0x4
0x80A08768 = D_80A08768; // type:f32 size:0x4
0x80A0876C = D_80A0876C; // type:f32 size:0x4
0x80A08770 = jtbl_80A08770; // type:UNK_PTR size:0x4
0x80A0878C = D_80A0878C; // type:f32 size:0x4
0x80A08790 = D_80A08790; // type:f32 size:0x4
0x80A08794 = D_80A08794; // type:f32 size:0x4
0x80A08798 = D_80A08798; // type:f32 size:0x4
0x80A09740 = D_80A09740; // type:UNK_TYPE1 size:0x1
0x80A09A40 = D_80A09A40; // type:UNK_TYPE1 size:0x1
0x80A09A4C = D_80A09A4C; // type:UNK_TYPE1 size:0x1
0x80A09A50 = D_80A09A50; // type:UNK_TYPE4 size:0x4
0x80A09A54 = D_80A09A54; // type:UNK_TYPE4 size:0x4
0x80A09A58 = D_80A09A58; // type:UNK_TYPE4 size:0x4
0x80A09A5C = D_80A09A5C; // type:UNK_TYPE4 size:0x4
0x80A09A60 = D_80A09A60; // type:UNK_TYPE4 size:0x4
0x80A09A64 = D_80A09A64; // type:UNK_TYPE4 size:0x4
0x80A09A68 = D_80A09A68; // type:UNK_TYPE4 size:0x4
0x80A09A6C = D_80A09A6C; // type:UNK_TYPE4 size:0x4
0x80A09A70 = D_80A09A70; // type:UNK_TYPE1 size:0x1
0x80A09A71 = D_80A09A71; // type:UNK_TYPE1 size:0x1
0x80A09A78 = D_80A09A78; // type:UNK_TYPE1 size:0x1
0x80A0A888 = D_80A0A888; // type:UNK_TYPE4 size:0x4
0x80A0A88C = D_80A0A88C; // type:UNK_TYPE4 size:0x4
0x80A0A890 = D_80A0A890; // type:UNK_TYPE4 size:0x4
0x80A0C4A0 = Bg_Dy_Yoseizo_InitVars; // type:UNK_TYPE1 size:0x1
0x80A0C4C0 = D_80A0C4C0; // type:UNK_TYPE4 size:0x4
0x80A0C4C4 = D_80A0C4C4; // type:UNK_TYPE4 size:0x4
0x80A0C4C8 = D_80A0C4C8; // type:UNK_TYPE4 size:0x4
0x80A0C4CC = D_80A0C4CC; // type:UNK_TYPE4 size:0x4
0x80A0C4D0 = D_80A0C4D0; // type:UNK_TYPE4 size:0x4
0x80A0C4D8 = D_80A0C4D8; // type:UNK_TYPE4 size:0x4
0x80A0C4DC = D_80A0C4DC; // type:UNK_TYPE4 size:0x4
0x80A0C4E0 = D_80A0C4E0; // type:UNK_TYPE4 size:0x4
0x80A0C4E4 = D_80A0C4E4; // type:UNK_TYPE1 size:0x1
0x80A0C4F8 = D_80A0C4F8; // type:UNK_TYPE1 size:0x1
0x80A0C50C = D_80A0C50C; // type:UNK_TYPE1 size:0x1
0x80A0C514 = D_80A0C514; // type:UNK_TYPE1 size:0x1
0x80A0C540 = D_80A0C540; // type:f32 size:0x4
0x80A0C544 = D_80A0C544; // type:f32 size:0x4
0x80A0C548 = D_80A0C548; // type:f32 size:0x4
0x80A0C54C = D_80A0C54C; // type:f32 size:0x4
0x80A0C550 = D_80A0C550; // type:f32 size:0x4
0x80A0C554 = D_80A0C554; // type:f32 size:0x4
0x80A0C558 = D_80A0C558; // type:f32 size:0x4
0x80A0C55C = D_80A0C55C; // type:f32 size:0x4
0x80A0C560 = D_80A0C560; // type:f32 size:0x4
0x80A0C7C0 = En_Boj_05_InitVars; // type:UNK_TYPE1 size:0x1
0x80A10860 = sAnimationsBombShopkeeper; // type:UNK_PTR size:0x4
0x80A10890 = En_Sob1_InitVars; // type:UNK_TYPE1 size:0x1
0x80A108B0 = sObjectIds; // type:UNK_TYPE2 size:0x2
0x80A108C8 = sFacingShopkeeperTextIds; // type:UNK_TYPE1 size:0x1
0x80A108D0 = sNoRoomTextIds; // type:UNK_TYPE1 size:0x1
0x80A108D8 = sBuySuccessTextIds; // type:UNK_TYPE1 size:0x1
0x80A108E0 = sCannotGetNowTextIds; // type:UNK_TYPE1 size:0x1
0x80A108E8 = sNeedRupeesTextIds; // type:UNK_TYPE1 size:0x1
0x80A108F0 = sNeedEmptyBottleTextIds; // type:UNK_TYPE1 size:0x1
0x80A108F8 = sCannotGetNow2TextIds; // type:UNK_TYPE1 size:0x1
0x80A10900 = sNoRoom2TextIds; // type:UNK_TYPE1 size:0x1
0x80A10908 = sActorScales; // type:UNK_TYPE1 size:0x1
0x80A10918 = sShops; // type:UNK_TYPE1 size:0x1
0x80A10978 = sPosXZRanges; // type:UNK_TYPE1 size:0x1
0x80A109B8 = sSelectedItemPositions; // type:UNK_TYPE4 size:0x4
0x80A109E8 = D_80A109E8; // type:UNK_TYPE1 size:0x1
0x80A109EC = sInitFuncs; // type:UNK_PTR size:0x4
0x80A109FC = sPosOffset; // type:UNK_TYPE4 size:0x4
0x80A10A2C = sZoraShopkeeperEyeTextures; // type:UNK_TYPE1 size:0x1
0x80A10A38 = sGoronShopkeeperEyeTextures; // type:UNK_TYPE1 size:0x1
0x80A10A50 = filename1; // type:char size:0x1
0x80A10A60 = filename2; // type:char size:0x1
0x80A10A70 = jtbl_D_80A10A70; // type:UNK_PTR size:0x4
0x80A10AD4 = D_80A10AD4; // type:f32 size:0x4
0x80A10AD8 = D_80A10AD8; // type:f32 size:0x4
0x80A10ADC = jtbl_80A10ADC; // type:UNK_PTR size:0x4
0x80A10B04 = D_80A10B04; // type:f32 size:0x4
0x80A10B08 = D_80A10B08; // type:f32 size:0x4
0x80A10B0C = D_80A10B0C; // type:f32 size:0x4
0x80A10B10 = D_80A10B10; // type:f32 size:0x4
0x80A10B14 = D_80A10B14; // type:f32 size:0x4
0x80A10B18 = D_80A10B18; // type:f32 size:0x4
0x80A10B1C = D_80A10B1C; // type:f32 size:0x4
0x80A10B20 = D_80A10B20; // type:f32 size:0x4
0x80A10B24 = D_80A10B24; // type:f32 size:0x4
0x80A10B28 = D_80A10B28; // type:f32 size:0x4
0x80A10B2C = D_80A10B2C; // type:f32 size:0x4
0x80A10B30 = D_80A10B30; // type:f32 size:0x4
0x80A16100 = D_80A16100; // type:UNK_TYPE1 size:0x1
0x80A16164 = D_80A16164; // type:UNK_TYPE1 size:0x1
0x80A16208 = D_80A16208; // type:UNK_TYPE1 size:0x1
0x80A16210 = D_80A16210; // type:UNK_TYPE1 size:0x1
0x80A16254 = D_80A16254; // type:UNK_TYPE1 size:0x1
0x80A16280 = D_80A16280; // type:UNK_TYPE1 size:0x1
0x80A16350 = D_80A16350; // type:UNK_TYPE1 size:0x1
0x80A163BC = D_80A163BC; // type:UNK_TYPE1 size:0x1
0x80A163CC = D_80A163CC; // type:UNK_TYPE1 size:0x1
0x80A163DC = D_80A163DC; // type:UNK_TYPE1 size:0x1
0x80A163EC = D_80A163EC; // type:UNK_TYPE1 size:0x1
0x80A163FC = D_80A163FC; // type:UNK_TYPE1 size:0x1
0x80A1640C = D_80A1640C; // type:UNK_TYPE1 size:0x1
0x80A16414 = En_Go_InitVars; // type:UNK_TYPE1 size:0x1
0x80A16434 = D_80A16434; // type:UNK_TYPE1 size:0x1
0x80A16460 = D_80A16460; // type:UNK_TYPE1 size:0x1
0x80A1648C = D_80A1648C; // type:UNK_TYPE1 size:0x1
0x80A164B8 = D_80A164B8; // type:UNK_TYPE1 size:0x1
0x80A164C4 = D_80A164C4; // type:UNK_TYPE1 size:0x1
0x80A164E4 = D_80A164E4; // type:UNK_TYPE1 size:0x1
0x80A16644 = D_80A16644; // type:UNK_TYPE1 size:0x1
0x80A16664 = D_80A16664; // type:UNK_TYPE1 size:0x1
0x80A16670 = D_80A16670; // type:UNK_TYPE1 size:0x1
0x80A1667C = D_80A1667C; // type:UNK_TYPE1 size:0x1
0x80A1668C = D_80A1668C; // type:UNK_TYPE1 size:0x1
0x80A16698 = D_80A16698; // type:UNK_TYPE4 size:0x4
0x80A166A4 = D_80A166A4; // type:UNK_TYPE1 size:0x1
0x80A166B0 = D_80A166B0; // type:UNK_TYPE1 size:0x1
0x80A166BC = D_80A166BC; // type:UNK_TYPE1 size:0x1
0x80A166D4 = D_80A166D4; // type:UNK_TYPE1 size:0x1
0x80A166DC = D_80A166DC; // type:EffectTireMarkInit size:0x8
0x80A166E4 = D_80A166E4; // type:UNK_TYPE4 size:0x4
0x80A16704 = D_80A16704; // type:UNK_TYPE1 size:0x1
0x80A1670C = D_80A1670C; // type:UNK_TYPE1 size:0x1
0x80A16720 = D_80A16720; // type:f32 size:0x4
0x80A16724 = D_80A16724; // type:f32 size:0x4
0x80A16728 = D_80A16728; // type:f32 size:0x4
0x80A1672C = D_80A1672C; // type:f32 size:0x4
0x80A16730 = D_80A16730; // type:f32 size:0x4
0x80A16734 = D_80A16734; // type:f32 size:0x4
0x80A16738 = D_80A16738; // type:f32 size:0x4
0x80A1673C = D_80A1673C; // type:f32 size:0x4
0x80A16740 = D_80A16740; // type:f32 size:0x4
0x80A16744 = D_80A16744; // type:f32 size:0x4
0x80A16748 = jtbl_80A16748; // type:UNK_PTR size:0x4
0x80A16790 = D_80A16790; // type:f32 size:0x4
0x80A16794 = D_80A16794; // type:f32 size:0x4
0x80A16798 = D_80A16798; // type:f32 size:0x4
0x80A1679C = D_80A1679C; // type:f32 size:0x4
0x80A167A0 = D_80A167A0; // type:f32 size:0x4
0x80A167A4 = jtbl_80A167A4; // type:UNK_PTR size:0x4
0x80A167BC = D_80A167BC; // type:f32 size:0x4
0x80A167C0 = D_80A167C0; // type:f32 size:0x4
0x80A167C4 = D_80A167C4; // type:f32 size:0x4
0x80A167C8 = jtbl_80A167C8; // type:UNK_PTR size:0x4
0x80A167E8 = D_80A167E8; // type:f32 size:0x4
0x80A167EC = D_80A167EC; // type:f32 size:0x4
0x80A167F0 = D_80A167F0; // type:f32 size:0x4
0x80A167F4 = D_80A167F4; // type:f32 size:0x4
0x80A167F8 = D_80A167F8; // type:f32 size:0x4
0x80A167FC = D_80A167FC; // type:f32 size:0x4
0x80A16800 = jtbl_80A16800; // type:UNK_PTR size:0x4
0x80A16818 = jtbl_80A16818; // type:UNK_PTR size:0x4
0x80A18EC0 = En_Raf_InitVars; // type:UNK_TYPE1 size:0x1
0x80A18EE0 = D_80A18EE0; // type:UNK_TYPE1 size:0x1
0x80A18F0C = D_80A18F0C; // type:u8 size:0x40
0x80A18F4C = D_80A18F4C; // type:u8 size:0x40
0x80A18F8C = D_80A18F8C; // type:u8 size:0x200
0x80A1918C = D_80A1918C; // type:u8 size:0x200
0x80A1939C = D_80A1939C; // type:UNK_TYPE1 size:0x1
0x80A193BC = D_80A193BC; // type:UNK_TYPE4 size:0x4
0x80A193C8 = D_80A193C8; // type:UNK_TYPE1 size:0x1
0x80A193E0 = D_80A193E0; // type:UNK_TYPE1 size:0x1
0x80A193E8 = D_80A193E8; // type:UNK_TYPE4 size:0x4
0x80A193F4 = D_80A193F4; // type:UNK_TYPE4 size:0x4
0x80A19400 = D_80A19400; // type:UNK_TYPE4 size:0x4
0x80A1940C = D_80A1940C; // type:UNK_TYPE4 size:0x4
0x80A19418 = D_80A19418; // type:UNK_TYPE2 size:0x2
0x80A19420 = D_80A19420; // type:Vec3f size:0x24
0x80A19444 = D_80A19444; // type:Vec3f size:0x24
0x80A19468 = D_80A19468; // type:UNK_TYPE2 size:0x2
0x80A19474 = D_80A19474; // type:UNK_TYPE1 size:0x1
0x80A194B0 = D_80A194B0; // type:UNK_TYPE1 size:0x1
0x80A194F0 = D_80A194F0; // type:f32 size:0x4
0x80A194F4 = D_80A194F4; // type:f32 size:0x4
0x80A194F8 = D_80A194F8; // type:f32 size:0x4
0x80A194FC = D_80A194FC; // type:f32 size:0x4
0x80A19500 = D_80A19500; // type:f32 size:0x4
0x80A19504 = D_80A19504; // type:f32 size:0x4
0x80A19508 = D_80A19508; // type:f32 size:0x4
0x80A1950C = D_80A1950C; // type:f32 size:0x4
0x80A19510 = D_80A19510; // type:f32 size:0x4
0x80A19514 = D_80A19514; // type:f32 size:0x4
0x80A19518 = D_80A19518; // type:f32 size:0x4
0x80A1951C = D_80A1951C; // type:f32 size:0x4
0x80A19520 = D_80A19520; // type:f32 size:0x4
0x80A19524 = D_80A19524; // type:f32 size:0x4
0x80A198B0 = Obj_Funen_InitVars; // type:UNK_TYPE1 size:0x1
0x80A198D0 = D_80A198D0; // type:UNK_TYPE1 size:0x1
0x80A1A390 = Obj_Raillift_InitVars; // type:UNK_TYPE1 size:0x1
0x80A1A3B0 = D_80A1A3B0; // type:UNK_TYPE1 size:0x1
0x80A1A3C0 = sColHeaders; // type:UNK_TYPE1 size:0x1
0x80A1A3C4 = D_80A1A3C4; // type:UNK_TYPE1 size:0x1
0x80A1A3D0 = D_80A1A3D0; // type:f32 size:0x4
0x80A1A3D4 = D_80A1A3D4; // type:f32 size:0x4
0x80A1A3D8 = D_80A1A3D8; // type:f32 size:0x4
0x80A1A3DC = D_80A1A3DC; // type:f32 size:0x4
0x80A1A3E0 = D_80A1A3E0; // type:f32 size:0x4
0x80A1A3E4 = D_80A1A3E4; // type:f32 size:0x4
0x80A1A3E8 = D_80A1A3E8; // type:f32 size:0x4
0x80A1A3EC = D_80A1A3EC; // type:f32 size:0x4
0x80A1A3F0 = D_80A1A3F0; // type:f32 size:0x4
0x80A1B240 = Bg_Numa_Hana_InitVars; // type:UNK_TYPE1 size:0x1
0x80A1B260 = D_80A1B260; // type:UNK_TYPE1 size:0x1
0x80A1B28C = D_80A1B28C; // type:FireObjInitParams size:0xd
0x80A1B29C = D_80A1B29C; // type:UNK_TYPE2 size:0x2
0x80A1B2A8 = D_80A1B2A8; // type:UNK_TYPE1 size:0x1
0x80A1B2C0 = D_80A1B2C0; // type:f32 size:0x4
0x80A1B2C4 = D_80A1B2C4; // type:f32 size:0x4
0x80A1B2C8 = D_80A1B2C8; // type:f32 size:0x4
0x80A1B2CC = D_80A1B2CC; // type:f32 size:0x4
0x80A1B2D0 = D_80A1B2D0; // type:f32 size:0x4
0x80A1D380 = Obj_Flowerpot_InitVars; // type:UNK_TYPE1 size:0x1
0x80A1D3A0 = D_80A1D3A0; // type:UNK_TYPE1 size:0x1
0x80A1D3E8 = D_80A1D3E8; // type:UNK_TYPE1 size:0x1
0x80A1D3F8 = D_80A1D3F8; // type:UNK_TYPE2 size:0x2
0x80A1D3FC = D_80A1D3FC; // type:UNK_TYPE2 size:0x2
0x80A1D400 = D_80A1D400; // type:UNK_TYPE2 size:0x2
0x80A1D404 = D_80A1D404; // type:UNK_PTR size:0x4
0x80A1D408 = D_80A1D408; // type:UNK_TYPE1 size:0x1
0x80A1D414 = D_80A1D414; // type:UNK_TYPE1 size:0x1
0x80A1D430 = D_80A1D430; // type:f32 size:0x4
0x80A1D434 = D_80A1D434; // type:f32 size:0x4
0x80A1D438 = D_80A1D438; // type:f32 size:0x4
0x80A1D43C = D_80A1D43C; // type:f32 size:0x4
0x80A1D440 = D_80A1D440; // type:f32 size:0x4
0x80A1D444 = D_80A1D444; // type:f32 size:0x4
0x80A1D448 = D_80A1D448; // type:f32 size:0x4
0x80A1D44C = D_80A1D44C; // type:f32 size:0x4
0x80A1D450 = D_80A1D450; // type:f32 size:0x4
0x80A1D454 = D_80A1D454; // type:f32 size:0x4
0x80A1D458 = D_80A1D458; // type:f32 size:0x4
0x80A1D45C = D_80A1D45C; // type:f32 size:0x4
0x80A1D460 = D_80A1D460; // type:f32 size:0x4
0x80A1D464 = D_80A1D464; // type:f32 size:0x4
0x80A1D468 = D_80A1D468; // type:f32 size:0x4
0x80A1D46C = D_80A1D46C; // type:f32 size:0x4
0x80A1D470 = D_80A1D470; // type:f32 size:0x4
0x80A1D474 = D_80A1D474; // type:f32 size:0x4
0x80A1D478 = D_80A1D478; // type:f32 size:0x4
0x80A1D47C = D_80A1D47C; // type:f32 size:0x4
0x80A1D480 = D_80A1D480; // type:f32 size:0x4
0x80A1D484 = D_80A1D484; // type:f32 size:0x4
0x80A1D488 = D_80A1D488; // type:f32 size:0x4
0x80A1D48C = D_80A1D48C; // type:f32 size:0x4
0x80A1D490 = D_80A1D490; // type:f32 size:0x4
0x80A1D494 = D_80A1D494; // type:f32 size:0x4
0x80A1D498 = D_80A1D498; // type:f32 size:0x4
0x80A1D49C = D_80A1D49C; // type:f32 size:0x4
0x80A1D4A0 = D_80A1D4A0; // type:f32 size:0x4
0x80A1D4A4 = D_80A1D4A4; // type:f32 size:0x4
0x80A1D4A8 = D_80A1D4A8; // type:f32 size:0x4
0x80A1D4AC = D_80A1D4AC; // type:f32 size:0x4
0x80A1D4B0 = D_80A1D4B0; // type:f32 size:0x4
0x80A1D4B4 = D_80A1D4B4; // type:f32 size:0x4
0x80A1D4B8 = D_80A1D4B8; // type:f32 size:0x4
0x80A1D4BC = D_80A1D4BC; // type:f32 size:0x4
0x80A1D4C0 = D_80A1D4C0; // type:f32 size:0x4
0x80A1D4C4 = D_80A1D4C4; // type:f32 size:0x4
0x80A1D830 = D_80A1D830; // type:UNK_TYPE4 size:0x4
0x80A1D838 = D_80A1D838; // type:UNK_TYPE4 size:0x4
0x80A1DA38 = D_80A1DA38; // type:UNK_TYPE2 size:0x2
0x80A1DA3A = D_80A1DA3A; // type:UNK_TYPE2 size:0x2
0x80A1DA3C = D_80A1DA3C; // type:UNK_TYPE2 size:0x2
0x80A1DA3E = D_80A1DA3E; // type:UNK_TYPE2 size:0x2
0x80A1DA40 = D_80A1DA40; // type:UNK_TYPE2 size:0x2
0x80A1F020 = Obj_Spinyroll_InitVars; // type:UNK_TYPE1 size:0x1
0x80A1F040 = D_80A1F040; // type:UNK_TYPE1 size:0x1
0x80A1F1A8 = D_80A1F1A8; // type:UNK_TYPE1 size:0x1
0x80A1F1B8 = D_80A1F1B8; // type:UNK_TYPE1 size:0x1
0x80A1F1C4 = D_80A1F1C4; // type:UNK_TYPE1 size:0x1
0x80A1F1E4 = D_80A1F1E4; // type:UNK_TYPE1 size:0x1
0x80A1F1F4 = D_80A1F1F4; // type:UNK_TYPE4 size:0x4
0x80A1F1FC = D_80A1F1FC; // type:UNK_TYPE4 size:0x4
0x80A1F204 = D_80A1F204; // type:UNK_TYPE1 size:0x1
0x80A1F20C = D_80A1F20C; // type:UNK_TYPE1 size:0x1
0x80A1F210 = D_80A1F210; // type:f32 size:0x4
0x80A1F214 = D_80A1F214; // type:f32 size:0x4
0x80A1F218 = D_80A1F218; // type:f32 size:0x4
0x80A1F21C = D_80A1F21C; // type:f32 size:0x4
0x80A1F220 = D_80A1F220; // type:f32 size:0x4
0x80A1F224 = D_80A1F224; // type:f32 size:0x4
0x80A1F228 = D_80A1F228; // type:f32 size:0x4
0x80A1F22C = D_80A1F22C; // type:f32 size:0x4
0x80A1F230 = D_80A1F230; // type:f32 size:0x4
0x80A1F234 = D_80A1F234; // type:f32 size:0x4
0x80A1F238 = D_80A1F238; // type:f32 size:0x4
0x80A1FDB0 = Dm_Hina_InitVars; // type:UNK_TYPE1 size:0x1
0x80A1FDD0 = D_80A1FDD0; // type:f32 size:0x4
0x80A1FDD4 = D_80A1FDD4; // type:f32 size:0x4
0x80A1FDD8 = D_80A1FDD8; // type:f32 size:0x4
0x80A1FDDC = D_80A1FDDC; // type:f32 size:0x4
0x80A20E50 = D_80A20E50; // type:UNK_TYPE1 size:0x1
0x80A20E74 = D_80A20E74; // type:UNK_TYPE1 size:0x1
0x80A20EA0 = D_80A20EA0; // type:UNK_TYPE1 size:0x1
0x80A20EAC = D_80A20EAC; // type:UNK_PTR size:0x4
0x80A20EB0 = D_80A20EB0; // type:UNK_TYPE1 size:0x1
0x80A20EDC = sVelocity; // type:UNK_TYPE1 size:0x1
0x80A20EE8 = sAccel; // type:UNK_TYPE1 size:0x1
0x80A20EF4 = En_Syateki_Wf_InitVars; // type:UNK_TYPE1 size:0x1
0x80A20F14 = D_80A20F14; // type:UNK_PTR size:0x4
0x80A20FBC = D_80A20FBC; // type:UNK_TYPE1 size:0x1
0x80A20FC4 = sFireVelocityAndAccel; // type:UNK_TYPE4 size:0x4
0x80A20FD0 = sTailColliderOffset; // type:UNK_TYPE1 size:0x1
0x80A20FDC = D_80A20FDC; // type:UNK_TYPE1 size:0x1
0x80A20FF0 = D_80A20FF0; // type:f32 size:0x4
0x80A229F0 = Obj_Skateblock_InitVars; // type:UNK_TYPE1 size:0x1
0x80A22A10 = D_80A22A10; // type:UNK_TYPE4 size:0x4
0x80A22A14 = D_80A22A14; // type:UNK_TYPE4 size:0x4
0x80A22A18 = D_80A22A18; // type:UNK_TYPE4 size:0x4
0x80A22A1C = D_80A22A1C; // type:UNK_TYPE4 size:0x4
0x80A22A44 = D_80A22A44; // type:UNK_TYPE4 size:0x4
0x80A22A6C = D_80A22A6C; // type:UNK_TYPE4 size:0x4
0x80A22A94 = D_80A22A94; // type:UNK_TYPE4 size:0x4
0x80A22ABC = D_80A22ABC; // type:UNK_TYPE4 size:0x4
0x80A22AC4 = D_80A22AC4; // type:UNK_TYPE4 size:0x4
0x80A22ACC = D_80A22ACC; // type:UNK_TYPE1 size:0x1
0x80A22AD8 = D_80A22AD8; // type:UNK_TYPE1 size:0x1
0x80A22ADC = D_80A22ADC; // type:UNK_TYPE1 size:0x1
0x80A22AE0 = D_80A22AE0; // type:UNK_TYPE1 size:0x1
0x80A22AF8 = D_80A22AF8; // type:UNK_TYPE1 size:0x1
0x80A22B08 = D_80A22B08; // type:UNK_TYPE1 size:0x1
0x80A22B40 = D_80A22B40; // type:f32 size:0x4
0x80A22B44 = D_80A22B44; // type:f32 size:0x4
0x80A22B48 = D_80A22B48; // type:f32 size:0x4
0x80A22B4C = D_80A22B4C; // type:f32 size:0x4
0x80A22B50 = D_80A22B50; // type:f32 size:0x4
0x80A22B54 = D_80A22B54; // type:f32 size:0x4
0x80A22B58 = D_80A22B58; // type:f32 size:0x4
0x80A22B5C = D_80A22B5C; // type:f32 size:0x4
0x80A23020 = Effect_En_Ice_Block_InitVars; // type:UNK_TYPE1 size:0x1
0x80A23030 = D_80A23030; // type:f32 size:0x4
0x80A23034 = D_80A23034; // type:f32 size:0x4
0x80A23038 = D_80A23038; // type:f32 size:0x4
0x80A26E30 = Obj_Iceblock_InitVars; // type:UNK_TYPE1 size:0x1
0x80A26E50 = D_80A26E50; // type:UNK_TYPE1 size:0x1
0x80A26E7C = D_80A26E7C; // type:UNK_TYPE4 size:0x4
0x80A26E80 = D_80A26E80; // type:UNK_TYPE1 size:0x1
0x80A26E88 = D_80A26E88; // type:UNK_TYPE1 size:0x1
0x80A26E90 = D_80A26E90; // type:UNK_TYPE4 size:0x4
0x80A26EB8 = D_80A26EB8; // type:UNK_TYPE4 size:0x4
0x80A26EE0 = D_80A26EE0; // type:UNK_TYPE4 size:0x4
0x80A26F08 = D_80A26F08; // type:UNK_TYPE4 size:0x4
0x80A26F30 = D_80A26F30; // type:UNK_TYPE4 size:0x4
0x80A26F38 = D_80A26F38; // type:UNK_TYPE4 size:0x4
0x80A26F40 = D_80A26F40; // type:UNK_TYPE4 size:0x4
0x80A26F68 = D_80A26F68; // type:UNK_TYPE4 size:0x4
0x80A26F90 = D_80A26F90; // type:UNK_TYPE1 size:0x1
0x80A26F9C = D_80A26F9C; // type:UNK_TYPE1 size:0x1
0x80A26FA0 = D_80A26FA0; // type:UNK_TYPE1 size:0x1
0x80A26FA4 = D_80A26FA4; // type:UNK_TYPE1 size:0x1
0x80A26FC0 = D_80A26FC0; // type:UNK_TYPE1 size:0x1
0x80A26FD0 = D_80A26FD0; // type:f32 size:0x4
0x80A26FD4 = D_80A26FD4; // type:f32 size:0x4
0x80A26FD8 = D_80A26FD8; // type:f32 size:0x4
0x80A26FDC = D_80A26FDC; // type:f32 size:0x4
0x80A26FE0 = D_80A26FE0; // type:f32 size:0x4
0x80A26FE4 = D_80A26FE4; // type:f32 size:0x4
0x80A26FE8 = D_80A26FE8; // type:f32 size:0x4
0x80A26FEC = D_80A26FEC; // type:f32 size:0x4
0x80A26FF0 = D_80A26FF0; // type:f32 size:0x4
0x80A26FF4 = D_80A26FF4; // type:f32 size:0x4
0x80A26FF8 = D_80A26FF8; // type:f32 size:0x4
0x80A26FFC = D_80A26FFC; // type:f32 size:0x4
0x80A27000 = D_80A27000; // type:f32 size:0x4
0x80A27004 = D_80A27004; // type:f32 size:0x4
0x80A27008 = D_80A27008; // type:f32 size:0x4
0x80A2700C = D_80A2700C; // type:f32 size:0x4
0x80A27010 = D_80A27010; // type:f32 size:0x4
0x80A27014 = D_80A27014; // type:f32 size:0x4
0x80A27018 = D_80A27018; // type:f32 size:0x4
0x80A2701C = D_80A2701C; // type:f32 size:0x4
0x80A27020 = D_80A27020; // type:f32 size:0x4
0x80A27024 = D_80A27024; // type:f32 size:0x4
0x80A27028 = D_80A27028; // type:f32 size:0x4
0x80A2702C = D_80A2702C; // type:f32 size:0x4
0x80A27030 = D_80A27030; // type:f32 size:0x4
0x80A27034 = D_80A27034; // type:f32 size:0x4
0x80A27038 = D_80A27038; // type:f32 size:0x4
0x80A2703C = D_80A2703C; // type:f32 size:0x4
0x80A27040 = D_80A27040; // type:f32 size:0x4
0x80A27044 = D_80A27044; // type:f32 size:0x4
0x80A27048 = D_80A27048; // type:f32 size:0x4
0x80A2704C = D_80A2704C; // type:f32 size:0x4
0x80A27050 = D_80A27050; // type:f32 size:0x4
0x80A27054 = D_80A27054; // type:f32 size:0x4
0x80A27058 = D_80A27058; // type:f32 size:0x4
0x80A2705C = D_80A2705C; // type:f32 size:0x4
0x80A27060 = D_80A27060; // type:f32 size:0x4
0x80A27064 = D_80A27064; // type:f32 size:0x4
0x80A27068 = D_80A27068; // type:f32 size:0x4
0x80A2706C = D_80A2706C; // type:f32 size:0x4
0x80A27070 = D_80A27070; // type:f32 size:0x4
0x80A27074 = D_80A27074; // type:f32 size:0x4
0x80A27078 = D_80A27078; // type:f32 size:0x4
0x80A2707C = D_80A2707C; // type:f32 size:0x4
0x80A27080 = D_80A27080; // type:f32 size:0x4
0x80A27084 = D_80A27084; // type:f32 size:0x4
0x80A27088 = D_80A27088; // type:f32 size:0x4
0x80A2708C = D_80A2708C; // type:f32 size:0x4
0x80A27090 = D_80A27090; // type:f32 size:0x4
0x80A27094 = D_80A27094; // type:f32 size:0x4
0x80A296E0 = En_Bigpamet_InitVars; // type:UNK_TYPE1 size:0x1
0x80A29700 = D_80A29700; // type:UNK_TYPE1 size:0x1
0x80A2972C = D_80A2972C; // type:UNK_TYPE1 size:0x1
0x80A29734 = D_80A29734; // type:UNK_TYPE1 size:0x1
0x80A29754 = D_80A29754; // type:UNK_TYPE4 size:0x4
0x80A29764 = D_80A29764; // type:UNK_TYPE1 size:0x1
0x80A29778 = D_80A29778; // type:UNK_TYPE4 size:0x4
0x80A2977C = D_80A2977C; // type:UNK_TYPE1 size:0x1
0x80A29788 = D_80A29788; // type:UNK_TYPE1 size:0x1
0x80A2978C = D_80A2978C; // type:UNK_TYPE1 size:0x1
0x80A29790 = D_80A29790; // type:f32 size:0x4
0x80A29794 = D_80A29794; // type:f32 size:0x4
0x80A29798 = D_80A29798; // type:f32 size:0x4
0x80A2979C = D_80A2979C; // type:f32 size:0x4
0x80A297A0 = D_80A297A0; // type:f32 size:0x4
0x80A297A4 = D_80A297A4; // type:f32 size:0x4
0x80A297A8 = D_80A297A8; // type:f32 size:0x4
0x80A297AC = D_80A297AC; // type:f32 size:0x4
0x80A297B0 = D_80A297B0; // type:f32 size:0x4
0x80A297B4 = D_80A297B4; // type:f32 size:0x4
0x80A297B8 = D_80A297B8; // type:f32 size:0x4
0x80A297BC = D_80A297BC; // type:f32 size:0x4
0x80A297C0 = D_80A297C0; // type:f32 size:0x4
0x80A297C4 = D_80A297C4; // type:f32 size:0x4
0x80A297C8 = D_80A297C8; // type:f32 size:0x4
0x80A297CC = D_80A297CC; // type:f32 size:0x4
0x80A297D0 = D_80A297D0; // type:f32 size:0x4
0x80A2B870 = D_80A2B870; // type:UNK_TYPE1 size:0x1
0x80A2B88C = Bg_Dblue_Movebg_InitVars; // type:UNK_TYPE1 size:0x1
0x80A2B8AC = sOpaDLists; // type:UNK_TYPE1 size:0x1
0x80A2B8DC = sXluDLists; // type:UNK_TYPE1 size:0x1
0x80A2B90C = sColHeaders; // type:UNK_TYPE1 size:0x1
0x80A2B93C = sTexAnims; // type:UNK_TYPE1 size:0x1
0x80A2B96C = D_80A2B96C; // type:UNK_TYPE1 size:0x1
0x80A2B974 = D_80A2B974; // type:UNK_TYPE2 size:0x2
0x80A2B978 = D_80A2B978; // type:UNK_TYPE1 size:0x1
0x80A2B988 = D_80A2B988; // type:UNK_TYPE1 size:0x1
0x80A2B9A0 = jtbl_80A2B9A0; // type:UNK_PTR size:0x4
0x80A2B9CC = D_80A2B9CC; // type:f32 size:0x4
0x80A2B9D0 = D_80A2B9D0; // type:f32 size:0x4
0x80A2B9D4 = D_80A2B9D4; // type:f32 size:0x4
0x80A2B9D8 = D_80A2B9D8; // type:f32 size:0x4
0x80A2B9DC = D_80A2B9DC; // type:f32 size:0x4
0x80A2B9E0 = D_80A2B9E0; // type:f32 size:0x4
0x80A2B9E4 = D_80A2B9E4; // type:f32 size:0x4
0x80A2B9E8 = D_80A2B9E8; // type:f32 size:0x4
0x80A2B9EC = D_80A2B9EC; // type:f32 size:0x4
0x80A2BBF0 = D_80A2BBF0; // type:UNK_TYPE1 size:0x1
0x80A2BBF4 = D_80A2BBF4; // type:UNK_TYPE1 size:0x1
0x80A2BBF5 = D_80A2BBF5; // type:UNK_TYPE1 size:0x1
0x80A2CA90 = En_Syateki_Dekunuts_InitVars; // type:UNK_TYPE1 size:0x1
0x80A2CAB0 = sCylinderInit; // type:UNK_TYPE1 size:0x1
0x80A2CADC = sBonusDekuScrubColliderDimensions; // type:UNK_TYPE4 size:0x4
0x80A2CAE8 = sAnimationInfo; // type:UNK_PTR size:0x4
0x80A2CB90 = sInitChain; // type:UNK_TYPE1 size:0x1
0x80A2CB9C = sDrawFlowers; // type:UNK_TYPE4 size:0x4
0x80A2CBA0 = sVelocity; // type:UNK_TYPE1 size:0x1
0x80A2CBAC = sAccel; // type:UNK_TYPE1 size:0x1
0x80A2CBB8 = sPrimColor; // type:UNK_TYPE1 size:0x1
0x80A2CBBC = sEnvColor; // type:UNK_TYPE1 size:0x1
0x80A2CBC0 = D_80A2CBC0; // type:f32 size:0x4
0x80A2D1C0 = Elf_Msg3_InitVars; // type:UNK_TYPE1 size:0x1
0x80A2D1E0 = D_80A2D1E0; // type:UNK_TYPE1 size:0x1
0x80A2D1F0 = D_80A2D1F0; // type:char size:0x1
0x80A2D1F8 = D_80A2D1F8; // type:char size:0x1
0x80A2D200 = D_80A2D200; // type:f32 size:0x4
0x80A2D204 = D_80A2D204; // type:f32 size:0x4
0x80A2D208 = D_80A2D208; // type:f32 size:0x4
0x80A2D20C = D_80A2D20C; // type:f32 size:0x4
0x80A2E4E0 = En_Fg_InitVars; // type:UNK_TYPE1 size:0x1
0x80A2E500 = D_80A2E500; // type:UNK_TYPE1 size:0x1
0x80A2E52C = D_80A2E52C; // type:UNK_PTR size:0x4
0x80A2E538 = D_80A2E538; // type:UNK_TYPE1 size:0x1
0x80A2E558 = D_80A2E558; // type:UNK_TYPE1 size:0x1
0x80A2E598 = D_80A2E598; // type:UNK_TYPE4 size:0x4
0x80A2E5A4 = D_80A2E5A4; // type:UNK_TYPE4 size:0x4
0x80A2E5BC = D_80A2E5BC; // type:UNK_TYPE4 size:0x4
0x80A2E5C8 = D_80A2E5C8; // type:UNK_TYPE4 size:0x4
0x80A2E5D4 = D_80A2E5D4; // type:UNK_TYPE1 size:0x1
0x80A2E600 = D_80A2E600; // type:f32 size:0x4
0x80A2E604 = D_80A2E604; // type:f32 size:0x4
0x80A2E608 = D_80A2E608; // type:f32 size:0x4
0x80A2E60C = D_80A2E60C; // type:f32 size:0x4
0x80A2E610 = D_80A2E610; // type:f32 size:0x4
0x80A2E614 = D_80A2E614; // type:f32 size:0x4
0x80A2E618 = D_80A2E618; // type:f32 size:0x4
0x80A2E61C = D_80A2E61C; // type:f32 size:0x4
0x80A2E620 = D_80A2E620; // type:f32 size:0x4
0x80A2E624 = D_80A2E624; // type:f32 size:0x4
0x80A2E628 = D_80A2E628; // type:f32 size:0x4
0x80A2E62C = D_80A2E62C; // type:f32 size:0x4
0x80A2E630 = D_80A2E630; // type:f32 size:0x4
0x80A2E910 = Dm_Ravine_InitVars; // type:UNK_TYPE1 size:0x1
0x80A2ECE0 = Dm_Sa_InitVars; // type:UNK_TYPE1 size:0x1
0x80A2ED00 = sAnimationInfo; // type:UNK_TYPE1 size:0x1
0x80A2ED20 = D_80A2ED20; // type:f32 size:0x4
0x80A31AD0 = En_Slime_InitVars; // type:UNK_TYPE1 size:0x1
0x80A31AF0 = D_80A31AF0; // type:UNK_TYPE1 size:0x1
0x80A31B1C = D_80A31B1C; // type:UNK_TYPE1 size:0x1
0x80A31B3C = D_80A31B3C; // type:UNK_TYPE1 size:0x1
0x80A31B44 = D_80A31B44; // type:UNK_TYPE4 size:0x4
0x80A31B54 = D_80A31B54; // type:UNK_TYPE1 size:0x1
0x80A31B5C = D_80A31B5C; // type:UNK_TYPE4 size:0x4
0x80A31B60 = D_80A31B60; // type:UNK_TYPE1 size:0x1
0x80A31B64 = D_80A31B64; // type:UNK_TYPE1 size:0x1
0x80A31B68 = D_80A31B68; // type:UNK_TYPE1 size:0x1
0x80A31B74 = D_80A31B74; // type:UNK_TYPE1 size:0x1
0x80A31B84 = D_80A31B84; // type:UNK_TYPE1 size:0x1
0x80A31B94 = D_80A31B94; // type:UNK_TYPE1 size:0x1
0x80A31BD0 = D_80A31BD0; // type:f32 size:0x4
0x80A31BD4 = D_80A31BD4; // type:f32 size:0x4
0x80A31BD8 = D_80A31BD8; // type:f32 size:0x4
0x80A31BDC = D_80A31BDC; // type:f32 size:0x4
0x80A31BE0 = D_80A31BE0; // type:f32 size:0x4
0x80A31BE4 = D_80A31BE4; // type:f32 size:0x4
0x80A31BE8 = D_80A31BE8; // type:f32 size:0x4
0x80A31BEC = D_80A31BEC; // type:f32 size:0x4
0x80A31BF0 = D_80A31BF0; // type:f32 size:0x4
0x80A31BF4 = D_80A31BF4; // type:f32 size:0x4
0x80A31BF8 = D_80A31BF8; // type:f32 size:0x4
0x80A31BFC = D_80A31BFC; // type:f32 size:0x4
0x80A31C00 = D_80A31C00; // type:f32 size:0x4
0x80A31C04 = D_80A31C04; // type:f32 size:0x4
0x80A31C08 = D_80A31C08; // type:f32 size:0x4
0x80A31C0C = D_80A31C0C; // type:f32 size:0x4
0x80A31C10 = D_80A31C10; // type:f32 size:0x4
0x80A31C14 = D_80A31C14; // type:f32 size:0x4
0x80A31C18 = D_80A31C18; // type:f32 size:0x4
0x80A31C1C = D_80A31C1C; // type:f32 size:0x4
0x80A31C20 = D_80A31C20; // type:f32 size:0x4
0x80A31C24 = D_80A31C24; // type:f32 size:0x4
0x80A31C28 = D_80A31C28; // type:f32 size:0x4
0x80A31C2C = D_80A31C2C; // type:f32 size:0x4
0x80A31C30 = D_80A31C30; // type:f32 size:0x4
0x80A31C34 = D_80A31C34; // type:f32 size:0x4
0x80A31C38 = D_80A31C38; // type:f32 size:0x4
0x80A31C3C = D_80A31C3C; // type:f32 size:0x4
0x80A31C40 = D_80A31C40; // type:f32 size:0x4
0x80A31C44 = D_80A31C44; // type:f32 size:0x4
0x80A31C48 = D_80A31C48; // type:f32 size:0x4
0x80A31C4C = D_80A31C4C; // type:f32 size:0x4
0x80A31C50 = D_80A31C50; // type:f32 size:0x4
0x80A31C54 = D_80A31C54; // type:f32 size:0x4
0x80A31C58 = D_80A31C58; // type:f32 size:0x4
0x80A31C5C = D_80A31C5C; // type:f32 size:0x4
0x80A31C60 = D_80A31C60; // type:f32 size:0x4
0x80A31C64 = D_80A31C64; // type:f32 size:0x4
0x80A31C68 = D_80A31C68; // type:f32 size:0x4
0x80A31C6C = D_80A31C6C; // type:f32 size:0x4
0x80A31C70 = D_80A31C70; // type:f32 size:0x4
0x80A31C74 = D_80A31C74; // type:f32 size:0x4
0x80A31C78 = D_80A31C78; // type:f32 size:0x4
0x80A31C7C = D_80A31C7C; // type:f32 size:0x4
0x80A31C80 = D_80A31C80; // type:f32 size:0x4
0x80A31C84 = D_80A31C84; // type:f32 size:0x4
0x80A31C88 = D_80A31C88; // type:f32 size:0x4
0x80A31C8C = D_80A31C8C; // type:f32 size:0x4
0x80A31C90 = D_80A31C90; // type:f32 size:0x4
0x80A31C94 = D_80A31C94; // type:f32 size:0x4
0x80A31C98 = D_80A31C98; // type:f32 size:0x4
0x80A31C9C = D_80A31C9C; // type:f32 size:0x4
0x80A31CA0 = D_80A31CA0; // type:f32 size:0x4
0x80A31CA4 = D_80A31CA4; // type:f32 size:0x4
0x80A31CA8 = D_80A31CA8; // type:f32 size:0x4
0x80A31CAC = D_80A31CAC; // type:f32 size:0x4
0x80A31CB0 = D_80A31CB0; // type:f32 size:0x4
0x80A31CB4 = D_80A31CB4; // type:f32 size:0x4
0x80A31CB8 = D_80A31CB8; // type:f32 size:0x4
0x80A31CBC = D_80A31CBC; // type:f32 size:0x4
0x80A31CC0 = D_80A31CC0; // type:f32 size:0x4
0x80A31CC4 = D_80A31CC4; // type:f32 size:0x4
0x80A31CC8 = D_80A31CC8; // type:f32 size:0x4
0x80A31CCC = D_80A31CCC; // type:f32 size:0x4
0x80A31CD0 = D_80A31CD0; // type:f32 size:0x4
0x80A31CD4 = D_80A31CD4; // type:f32 size:0x4
0x80A31CD8 = D_80A31CD8; // type:f32 size:0x4
0x80A31CDC = D_80A31CDC; // type:f32 size:0x4
0x80A31CE0 = D_80A31CE0; // type:f32 size:0x4
0x80A31CE4 = D_80A31CE4; // type:f32 size:0x4
0x80A31CE8 = D_80A31CE8; // type:f32 size:0x4
0x80A31CEC = D_80A31CEC; // type:f32 size:0x4
0x80A31CF0 = D_80A31CF0; // type:f32 size:0x4
0x80A31CF4 = D_80A31CF4; // type:f32 size:0x4
0x80A31CF8 = D_80A31CF8; // type:f32 size:0x4
0x80A31CFC = D_80A31CFC; // type:f32 size:0x4
0x80A31D00 = D_80A31D00; // type:f32 size:0x4
0x80A31D04 = D_80A31D04; // type:f32 size:0x4
0x80A31D08 = D_80A31D08; // type:f32 size:0x4
0x80A31D0C = D_80A31D0C; // type:f32 size:0x4
0x80A31D10 = D_80A31D10; // type:f32 size:0x4
0x80A31D14 = D_80A31D14; // type:f32 size:0x4
0x80A31D18 = D_80A31D18; // type:f32 size:0x4
0x80A31D1C = D_80A31D1C; // type:f32 size:0x4
0x80A32200 = D_80A32200; // type:UNK_TYPE1 size:0x1
0x80A338A0 = D_80A338A0; // type:UNK_TYPE1 size:0x1
0x80A338C0 = D_80A338C0; // type:UNK_TYPE1 size:0x1
0x80A338D4 = En_Pr_InitVars; // type:UNK_TYPE1 size:0x1
0x80A338F4 = D_80A338F4; // type:UNK_TYPE1 size:0x1
0x80A33920 = D_80A33920; // type:UNK_TYPE1 size:0x1
0x80A33934 = D_80A33934; // type:UNK_TYPE1 size:0x1
0x80A3393C = D_80A3393C; // type:UNK_TYPE4 size:0x4
0x80A33950 = D_80A33950; // type:f32 size:0x4
0x80A33954 = D_80A33954; // type:f32 size:0x4
0x80A33958 = D_80A33958; // type:f32 size:0x4
0x80A3395C = D_80A3395C; // type:f32 size:0x4
0x80A33960 = D_80A33960; // type:f32 size:0x4
0x80A33964 = D_80A33964; // type:f32 size:0x4
0x80A33968 = D_80A33968; // type:f32 size:0x4
0x80A3396C = D_80A3396C; // type:f32 size:0x4
0x80A33970 = D_80A33970; // type:f32 size:0x4
0x80A34570 = Obj_Toudai_InitVars; // type:UNK_TYPE1 size:0x1
0x80A34590 = D_80A34590; // type:UNK_TYPE1 size:0x1
0x80A3459F = D_80A3459F; // type:UNK_TYPE1 size:0x1
0x80A345AF = D_80A345AF; // type:UNK_TYPE1 size:0x1
0x80A345B0 = D_80A345B0; // type:UNK_TYPE1 size:0x1
0x80A34670 = D_80A34670; // type:f32 size:0x4
0x80A34674 = D_80A34674; // type:f32 size:0x4
0x80A34678 = D_80A34678; // type:f32 size:0x4
0x80A3467C = D_80A3467C; // type:f32 size:0x4
0x80A353F0 = Obj_Entotu_InitVars; // type:UNK_TYPE1 size:0x1
0x80A35410 = D_80A35410; // type:UNK_TYPE1 size:0x1
0x80A3541F = D_80A3541F; // type:UNK_TYPE1 size:0x1
0x80A3542F = D_80A3542F; // type:UNK_TYPE1 size:0x1
0x80A3543F = D_80A3543F; // type:UNK_TYPE1 size:0x1
0x80A35480 = D_80A35480; // type:f32 size:0x4
0x80A35484 = D_80A35484; // type:f32 size:0x4
0x80A35488 = D_80A35488; // type:f32 size:0x4
0x80A3548C = D_80A3548C; // type:f32 size:0x4
0x80A35E70 = Obj_Bell_InitVars; // type:ActorInit size:0x20
0x80A35E90 = D_80A35E90; // type:UNK_TYPE1 size:0x1
0x80A35EBC = D_80A35EBC; // type:UNK_TYPE1 size:0x1
0x80A35EE8 = D_80A35EE8; // type:UNK_TYPE1 size:0x1
0x80A35EF4 = D_80A35EF4; // type:DamageTable size:0x20
0x80A35F20 = D_80A35F20; // type:f32 size:0x4
0x80A35F24 = D_80A35F24; // type:f32 size:0x4
0x80A35F28 = D_80A35F28; // type:f32 size:0x4
0x80A35F2C = D_80A35F2C; // type:f32 size:0x4
0x80A35F30 = D_80A35F30; // type:f32 size:0x4
0x80A35F34 = D_80A35F34; // type:f32 size:0x4
0x80A35F38 = D_80A35F38; // type:f32 size:0x4
0x80A35F3C = D_80A35F3C; // type:f32 size:0x4
0x80A37550 = En_Syateki_Okuta_InitVars; // type:UNK_TYPE1 size:0x1
0x80A37570 = D_80A37570; // type:UNK_TYPE1 size:0x1
0x80A3759C = D_80A3759C; // type:UNK_PTR size:0x4
0x80A37630 = D_80A37630; // type:UNK_TYPE1 size:0x1
0x80A37648 = D_80A37648; // type:UNK_TYPE1 size:0x1
0x80A37848 = D_80A37848; // type:UNK_TYPE1 size:0x1
0x80A37A48 = D_80A37A48; // type:UNK_TYPE1 size:0x1
0x80A37A88 = D_80A37A88; // type:UNK_TYPE1 size:0x1
0x80A37B08 = D_80A37B08; // type:UNK_TYPE1 size:0x1
0x80A37B88 = D_80A37B88; // type:UNK_TYPE1 size:0x1
0x80A37B90 = D_80A37B90; // type:UNK_TYPE1 size:0x1
0x80A37B94 = D_80A37B94; // type:UNK_TYPE1 size:0x1
0x80A37B98 = D_80A37B98; // type:UNK_TYPE1 size:0x1
0x80A37BA4 = D_80A37BA4; // type:UNK_TYPE1 size:0x1
0x80A37BA8 = D_80A37BA8; // type:UNK_TYPE1 size:0x1
0x80A37BB0 = D_80A37BB0; // type:f32 size:0x4
0x80A37BB4 = D_80A37BB4; // type:f32 size:0x4
0x80A37BB8 = D_80A37BB8; // type:f32 size:0x4
0x80A37BBC = D_80A37BBC; // type:f32 size:0x4
0x80A37BC0 = D_80A37BC0; // type:f32 size:0x4
0x80A37BC4 = D_80A37BC4; // type:f32 size:0x4
0x80A37BC8 = D_80A37BC8; // type:f32 size:0x4
0x80A37BCC = D_80A37BCC; // type:f32 size:0x4
0x80A37BD0 = D_80A37BD0; // type:f32 size:0x4
0x80A37BD4 = D_80A37BD4; // type:f32 size:0x4
0x80A37BD8 = D_80A37BD8; // type:f32 size:0x4
0x80A37BDC = D_80A37BDC; // type:f32 size:0x4
0x80A37BE0 = D_80A37BE0; // type:f32 size:0x4
0x80A37BE4 = D_80A37BE4; // type:f32 size:0x4
0x80A37BE8 = D_80A37BE8; // type:f32 size:0x4
0x80A37BEC = D_80A37BEC; // type:f32 size:0x4
0x80A37BF0 = D_80A37BF0; // type:f32 size:0x4
0x80A37BF4 = D_80A37BF4; // type:f32 size:0x4
0x80A37BF8 = D_80A37BF8; // type:f32 size:0x4
0x80A37BFC = D_80A37BFC; // type:f32 size:0x4
0x80A37C00 = D_80A37C00; // type:f32 size:0x4
0x80A37C04 = D_80A37C04; // type:f32 size:0x4
0x80A37C08 = D_80A37C08; // type:f32 size:0x4
0x80A37C0C = D_80A37C0C; // type:f32 size:0x4
0x80A37C10 = D_80A37C10; // type:f32 size:0x4
0x80A37C14 = D_80A37C14; // type:f32 size:0x4
0x80A37C18 = D_80A37C18; // type:f32 size:0x4
0x80A37C1C = D_80A37C1C; // type:f32 size:0x4
0x80A37C20 = D_80A37C20; // type:f32 size:0x4
0x80A38110 = Obj_Shutter_InitVars; // type:UNK_TYPE1 size:0x1
0x80A38130 = D_80A38130; // type:UNK_TYPE1 size:0x1
0x80A38140 = D_80A38140; // type:f32 size:0x4
0x80A38144 = D_80A38144; // type:f32 size:0x4
0x80A387D0 = Dm_Zl_InitVars; // type:UNK_TYPE1 size:0x1
0x80A387F0 = D_80A387F0; // type:UNK_TYPE1 size:0x1
0x80A38898 = D_80A38898; // type:UNK_TYPE1 size:0x1
0x80A388A8 = D_80A388A8; // type:UNK_TYPE1 size:0x1
0x80A388D0 = jtbl_80A388D0; // type:UNK_PTR size:0x4
0x80A39430 = En_Ru_InitVars; // type:UNK_TYPE1 size:0x1
0x80A39450 = D_80A39450; // type:UNK_TYPE1 size:0x1
0x80A3947C = D_80A3947C; // type:UNK_TYPE1 size:0x1
0x80A39488 = D_80A39488; // type:UNK_TYPE1 size:0x1
0x80A394A8 = D_80A394A8; // type:UNK_TYPE1 size:0x1
0x80A39528 = D_80A39528; // type:UNK_TYPE1 size:0x1
0x80A3952C = D_80A3952C; // type:UNK_TYPE1 size:0x1
0x80A39530 = D_80A39530; // type:UNK_TYPE1 size:0x1
0x80A3953C = D_80A3953C; // type:UNK_TYPE1 size:0x1
0x80A3953D = D_80A3953D; // type:UNK_TYPE1 size:0x1
0x80A39540 = D_80A39540; // type:UNK_TYPE1 size:0x1
0x80A39550 = D_80A39550; // type:UNK_TYPE1 size:0x1
0x80A39560 = D_80A39560; // type:UNK_TYPE1 size:0x1
0x80A39580 = D_80A39580; // type:UNK_TYPE4 size:0x4
0x80A3958C = D_80A3958C; // type:UNK_TYPE4 size:0x4
0x80A395A8 = D_80A395A8; // type:UNK_TYPE1 size:0x1
0x80A395B0 = D_80A395B0; // type:UNK_TYPE4 size:0x4
0x80A395C0 = D_80A395C0; // type:f32 size:0x4
0x80A395C4 = D_80A395C4; // type:f32 size:0x4
0x80A3AAD0 = En_Elfgrp_InitVars; // type:UNK_TYPE1 size:0x1
0x80A3B010 = Dm_Tsg_InitVars; // type:UNK_TYPE1 size:0x1
0x80A3B030 = D_80A3B030; // type:f32 size:0x4
0x80A3B034 = D_80A3B034; // type:f32 size:0x4
0x80A3C2D0 = En_Baguo_InitVars; // type:UNK_TYPE1 size:0x1
0x80A3C2F0 = D_80A3C2F0; // type:UNK_TYPE1 size:0x1
0x80A3C314 = D_80A3C314; // type:UNK_TYPE1 size:0x1
0x80A3C324 = D_80A3C324; // type:UNK_TYPE1 size:0x1
0x80A3C344 = D_80A3C344; // type:UNK_TYPE4 size:0x4
0x80A3C350 = D_80A3C350; // type:UNK_TYPE4 size:0x4
0x80A3C35C = D_80A3C35C; // type:UNK_TYPE1 size:0x1
0x80A3C370 = D_80A3C370; // type:f32 size:0x4
0x80A3C374 = D_80A3C374; // type:f32 size:0x4
0x80A3C378 = D_80A3C378; // type:f32 size:0x4
0x80A3C37C = D_80A3C37C; // type:f32 size:0x4
0x80A3C380 = D_80A3C380; // type:f32 size:0x4
0x80A3C384 = D_80A3C384; // type:f32 size:0x4
0x80A3C388 = D_80A3C388; // type:f32 size:0x4
0x80A3C38C = D_80A3C38C; // type:f32 size:0x4
0x80A3C390 = D_80A3C390; // type:f32 size:0x4
0x80A3C394 = D_80A3C394; // type:f32 size:0x4
0x80A3C398 = D_80A3C398; // type:f32 size:0x4
0x80A3C39C = D_80A3C39C; // type:f32 size:0x4
0x80A3C3A0 = D_80A3C3A0; // type:f32 size:0x4
0x80A3D430 = Obj_Vspinyroll_InitVars; // type:UNK_TYPE1 size:0x1
0x80A3D450 = D_80A3D450; // type:UNK_TYPE1 size:0x1
0x80A3D454 = D_80A3D454; // type:UNK_TYPE1 size:0x1
0x80A3D458 = D_80A3D458; // type:UNK_TYPE1 size:0x1
0x80A3D478 = D_80A3D478; // type:UNK_TYPE1 size:0x1
0x80A3D488 = D_80A3D488; // type:UNK_TYPE1 size:0x1
0x80A3D4B4 = D_80A3D4B4; // type:UNK_TYPE4 size:0x4
0x80A3D4C4 = D_80A3D4C4; // type:UNK_TYPE4 size:0x4
0x80A3D4D4 = D_80A3D4D4; // type:UNK_TYPE1 size:0x1
0x80A3D4DC = D_80A3D4DC; // type:UNK_TYPE1 size:0x1
0x80A3D4E0 = D_80A3D4E0; // type:f32 size:0x4
0x80A3D4E4 = D_80A3D4E4; // type:f32 size:0x4
0x80A3D4E8 = D_80A3D4E8; // type:f32 size:0x4
0x80A3D4EC = D_80A3D4EC; // type:f32 size:0x4
0x80A3D4F0 = D_80A3D4F0; // type:f32 size:0x4
0x80A3D4F4 = D_80A3D4F4; // type:f32 size:0x4
0x80A3D4F8 = D_80A3D4F8; // type:f32 size:0x4
0x80A3D4FC = D_80A3D4FC; // type:f32 size:0x4
0x80A3D500 = D_80A3D500; // type:f32 size:0x4
0x80A3D504 = D_80A3D504; // type:f32 size:0x4
0x80A3D508 = D_80A3D508; // type:f32 size:0x4
0x80A3E270 = Obj_Smork_InitVars; // type:UNK_TYPE1 size:0x1
0x80A3E290 = D_80A3E290; // type:UNK_TYPE1 size:0x1
0x80A3E29F = D_80A3E29F; // type:UNK_TYPE1 size:0x1
0x80A3E2AF = D_80A3E2AF; // type:UNK_TYPE1 size:0x1
0x80A3E2BF = D_80A3E2BF; // type:UNK_TYPE1 size:0x1
0x80A3E300 = D_80A3E300; // type:f32 size:0x4
0x80A3E304 = D_80A3E304; // type:f32 size:0x4
0x80A3E308 = D_80A3E308; // type:f32 size:0x4
0x80A3E690 = En_Test2_InitVars; // type:UNK_TYPE1 size:0x1
0x80A3E6B0 = D_80A3E6B0; // type:UNK_PTR size:0x4
0x80A3E6B4 = D_80A3E6B4; // type:UNK_TYPE4 size:0x4
0x80A3E74C = D_80A3E74C; // type:UNK_TYPE1 size:0x1
0x80A3E75C = D_80A3E75C; // type:UNK_TYPE1 size:0x1
0x80A41530 = D_80A41530; // type:UNK_TYPE1 size:0x1
0x80A4166C = En_Test3_InitVars; // type:UNK_TYPE1 size:0x1
0x80A4168C = D_80A4168C; // type:UNK_TYPE1 size:0x1
0x80A4169C = D_80A4169C; // type:UNK_PTR size:0x4
0x80A416C0 = D_80A416C0; // type:UNK_PTR size:0x4
0x80A416E0 = D_80A416E0; // type:UNK_TYPE1 size:0x1
0x80A417BC = D_80A417BC; // type:EffectBlureInit2 size:0x24
0x80A417E0 = D_80A417E0; // type:EffectTireMarkInit size:0x8
0x80A417E8 = D_80A417E8; // type:UNK_TYPE1 size:0x1
0x80A417EC = D_80A417EC; // type:UNK_PTR size:0x4
0x80A41828 = D_80A41828; // type:UNK_TYPE1 size:0x1
0x80A41854 = D_80A41854; // type:UNK_TYPE1 size:0x1
0x80A41858 = D_80A41858; // type:UNK_TYPE1 size:0x1
0x80A4186C = D_80A4186C; // type:UNK_TYPE1 size:0x1
0x80A41870 = D_80A41870; // type:UNK_TYPE1 size:0x1
0x80A4187C = D_80A4187C; // type:UNK_TYPE1 size:0x1
0x80A41880 = D_80A41880; // type:UNK_TYPE1 size:0x1
0x80A41884 = D_80A41884; // type:UNK_TYPE1 size:0x1
0x80A41898 = D_80A41898; // type:UNK_TYPE1 size:0x1
0x80A4189C = D_80A4189C; // type:UNK_TYPE1 size:0x1
0x80A418A0 = D_80A418A0; // type:UNK_TYPE1 size:0x1
0x80A418A4 = D_80A418A4; // type:UNK_TYPE1 size:0x1
0x80A418A8 = D_80A418A8; // type:UNK_PTR size:0x4
0x80A418BC = D_80A418BC; // type:UNK_TYPE1 size:0x1
0x80A418C8 = D_80A418C8; // type:UNK_TYPE4 size:0x4
0x80A418CC = D_80A418CC; // type:UNK_TYPE1 size:0x1
0x80A418D8 = D_80A418D8; // type:UNK_TYPE1 size:0x1
0x80A418F8 = D_80A418F8; // type:UNK_TYPE1 size:0x1
0x80A41908 = D_80A41908; // type:UNK_TYPE1 size:0x1
0x80A41909 = D_80A41909; // type:UNK_TYPE1 size:0x1
0x80A41930 = D_80A41930; // type:f32 size:0x4
0x80A41934 = D_80A41934; // type:f32 size:0x4
0x80A41938 = D_80A41938; // type:f32 size:0x4
0x80A41D20 = D_80A41D20; // type:UNK_TYPE1 size:0x1
0x80A41D24 = D_80A41D24; // type:UNK_TYPE1 size:0x1
0x80A41D28 = sEnTest3_Input; // type:Input size:0x18
0x80A41D40 = D_80A41D40; // type:f32 size:0x4
0x80A41D44 = D_80A41D44; // type:UNK_TYPE1 size:0x1
0x80A41D48 = D_80A41D48; // type:UNK_TYPE1 size:0x1
0x80A41D50 = D_80A41D50; // type:UNK_TYPE1 size:0x1
0x80A41D5C = D_80A41D5C; // type:UNK_TYPE1 size:0x1
0x80A41D60 = D_80A41D60; // type:UNK_TYPE1 size:0x1
0x80A41D64 = D_80A41D64; // type:UNK_TYPE1 size:0x1
0x80A41D68 = D_80A41D68; // type:UNK_TYPE1 size:0x1
0x80A41D6C = D_80A41D6C; // type:UNK_TYPE1 size:0x1
0x80A43320 = En_Test4_InitVars; // type:ActorInit size:0x20
0x80A43340 = sIsLoaded; // type:s32 size:0x6
0x80A43342 = sNightMessages1; // type:s16 size:0x6
0x80A4334A = sDayMessages1; // type:s16 size:0x6
0x80A43352 = sNightMessages2; // type:s16 size:0x6
0x80A4335A = sDayMessages2; // type:s16 size:0x6
0x80A43364 = D_80A43364; // type:u16 size:0x4
0x80A434D0 = sCutscenes; // type:s16 size:0x4
0x80A434D4 = sCurrentCs; // type:s16 size:0x2
0x80A449E0 = En_Bat_InitVars; // type:ActorInit size:0x1
0x80A44A00 = sSphereInit; // type:ColliderSphereInit size:0x1
0x80A44A2C = sDamageTable; // type:DamageTable size:0x1
0x80A44A4C = sColChkInfoInit; // type:CollisionCheckInfoInit size:0x1
0x80A44A54 = sInitChain; // type:InitChainEntry size:0x1
0x80A44A64 = sWingsDLs; // type:Gfx*[] size:0x1
0x80A44A90 = D_80A44A90; // type:f32 size:0x4
0x80A44A94 = D_80A44A94; // type:f32 size:0x4
0x80A44A98 = D_80A44A98; // type:f32 size:0x4
0x80A44A9C = D_80A44A9C; // type:f32 size:0x4
0x80A44AA0 = D_80A44AA0; // type:f32 size:0x4
0x80A44AA4 = D_80A44AA4; // type:f32 size:0x4
0x80A44AA8 = D_80A44AA8; // type:f32 size:0x4
0x80A44AAC = D_80A44AAC; // type:f32 size:0x4
0x80A44AB0 = D_80A44AB0; // type:f32 size:0x4
0x80A44AB4 = D_80A44AB4; // type:f32 size:0x4
0x80A44AB8 = D_80A44AB8; // type:f32 size:0x4
0x80A44ABC = D_80A44ABC; // type:f32 size:0x4
0x80A44AC0 = D_80A44AC0; // type:f32 size:0x4
0x80A44AC4 = D_80A44AC4; // type:f32 size:0x4
0x80A44AC8 = D_80A44AC8; // type:f32 size:0x4
0x80A44ACC = D_80A44ACC; // type:f32 size:0x4
0x80A44C70 = sNumberAttacking; // type:UNK_TYPE1 size:0x1
0x80A44C74 = sAlreadySpawned; // type:UNK_TYPE1 size:0x1
0x80A45250 = En_Sekihi_InitVars; // type:UNK_TYPE1 size:0x1
0x80A45270 = D_80A45270; // type:UNK_TYPE1 size:0x1
0x80A4527C = D_80A4527C; // type:UNK_TYPE1 size:0x1
0x80A45290 = D_80A45290; // type:UNK_TYPE1 size:0x1
0x80A452A4 = D_80A452A4; // type:UNK_TYPE1 size:0x1
0x80A452B0 = D_80A452B0; // type:UNK_TYPE4 size:0x4
0x80A48B30 = En_Wiz_InitVars; // type:UNK_TYPE1 size:0x1
0x80A48B50 = sJntSphElementsInit; // type:UNK_TYPE1 size:0x1
0x80A48CB8 = sJntSphInit; // type:UNK_PTR size:0x4
0x80A48CC8 = sCylinderInit; // type:UNK_TYPE1 size:0x1
0x80A48CF4 = sFireWizrobeDamageTable; // type:UNK_TYPE1 size:0x1
0x80A48D14 = sIceWizrobeDamageTable; // type:UNK_TYPE1 size:0x1
0x80A48D34 = sAnimations; // type:UNK_TYPE1 size:0x1
0x80A48D4C = sAnimationModes; // type:UNK_TYPE1 size:0x1
0x80A48D54 = staffTargetFlameScale; // type:UNK_TYPE4 size:0x4
0x80A48D60 = sDustPrimColor; // type:UNK_TYPE1 size:0x1
0x80A48D64 = sDustEnvTimer; // type:UNK_TYPE1 size:0x1
0x80A48D68 = staffFlamePos; // type:UNK_TYPE4 size:0x4
0x80A48D74 = staffFlamePos; // type:UNK_TYPE4 size:0x4
0x80A48D80 = jtbl_80A48D80; // type:UNK_PTR size:0x4
0x80A48D98 = D_80A48D98; // type:f32 size:0x4
0x80A48D9C = D_80A48D9C; // type:f32 size:0x4
0x80A48DA0 = D_80A48DA0; // type:f32 size:0x4
0x80A48DA4 = D_80A48DA4; // type:f32 size:0x4
0x80A48DA8 = D_80A48DA8; // type:f32 size:0x4
0x80A48DAC = D_80A48DAC; // type:f32 size:0x4
0x80A48DB0 = D_80A48DB0; // type:f32 size:0x4
0x80A48DB4 = D_80A48DB4; // type:f32 size:0x4
0x80A48DB8 = D_80A48DB8; // type:f32 size:0x4
0x80A48DBC = D_80A48DBC; // type:f32 size:0x4
0x80A48DC0 = D_80A48DC0; // type:f32 size:0x4
0x80A48DC4 = D_80A48DC4; // type:f32 size:0x4
0x80A48DC8 = D_80A48DC8; // type:f32 size:0x4
0x80A48DCC = D_80A48DCC; // type:f32 size:0x4
0x80A48DD0 = D_80A48DD0; // type:f32 size:0x4
0x80A495B0 = D_80A495B0; // type:UNK_TYPE2 size:0x2
0x80A495B4 = En_Wiz_Brock_InitVars; // type:UNK_TYPE1 size:0x1
0x80A495E0 = D_80A495E0; // type:f32 size:0x4
0x80A495E4 = D_80A495E4; // type:f32 size:0x4
0x80A495E8 = D_80A495E8; // type:f32 size:0x4
0x80A495EC = D_80A495EC; // type:f32 size:0x4
0x80A495F0 = D_80A495F0; // type:f32 size:0x4
0x80A495F4 = D_80A495F4; // type:f32 size:0x4
0x80A495F8 = D_80A495F8; // type:f32 size:0x4
0x80A495FC = D_80A495FC; // type:f32 size:0x4
0x80A49600 = D_80A49600; // type:f32 size:0x4
0x80A4C1C0 = sPoolHitByIceArrow; // type:UNK_TYPE4 size:0x4
0x80A4C1C4 = En_Wiz_Fire_InitVars; // type:UNK_TYPE1 size:0x1
0x80A4C1E4 = D_80A4C1E4; // type:UNK_TYPE1 size:0x1
0x80A4C210 = D_80A4C210; // type:UNK_TYPE4 size:0x4
0x80A4C21C = D_80A4C21C; // type:UNK_TYPE4 size:0x4
0x80A4C228 = D_80A4C228; // type:UNK_TYPE4 size:0x4
0x80A4C234 = lightSettingsColors; // type:UNK_TYPE1 size:0x1
0x80A4C24C = sSteamPrimColor; // type:UNK_TYPE1 size:0x1
0x80A4C250 = sSteamEnvColor; // type:UNK_TYPE1 size:0x1
0x80A4C260 = jtbl_80A4C260; // type:UNK_PTR size:0x4
0x80A4C274 = D_80A4C274; // type:f32 size:0x4
0x80A4C278 = D_80A4C278; // type:f32 size:0x4
0x80A4C27C = D_80A4C27C; // type:f32 size:0x4
0x80A4C280 = D_80A4C280; // type:f32 size:0x4
0x80A4C284 = D_80A4C284; // type:f32 size:0x4
0x80A4C288 = D_80A4C288; // type:f32 size:0x4
0x80A4C28C = D_80A4C28C; // type:f32 size:0x4
0x80A4C290 = D_80A4C290; // type:f32 size:0x4
0x80A4C294 = D_80A4C294; // type:f32 size:0x4
0x80A4C298 = D_80A4C298; // type:f32 size:0x4
0x80A4C29C = D_80A4C29C; // type:f32 size:0x4
0x80A4C2A0 = D_80A4C2A0; // type:f32 size:0x4
0x80A4C2A4 = D_80A4C2A4; // type:f32 size:0x4
0x80A4C2A8 = D_80A4C2A8; // type:f32 size:0x4
0x80A4C2AC = D_80A4C2AC; // type:f32 size:0x4
0x80A4C2B0 = D_80A4C2B0; // type:f32 size:0x4
0x80A4C2B4 = D_80A4C2B4; // type:f32 size:0x4
0x80A4C2B8 = D_80A4C2B8; // type:f32 size:0x4
0x80A4C2BC = D_80A4C2BC; // type:f32 size:0x4
0x80A4C2C0 = D_80A4C2C0; // type:f32 size:0x4
0x80A4C2C4 = D_80A4C2C4; // type:f32 size:0x4
0x80A4C2C8 = D_80A4C2C8; // type:f32 size:0x4
0x80A4C900 = Eff_Change_InitVars; // type:UNK_TYPE1 size:0x1
0x80A4C920 = D_80A4C920; // type:UNK_TYPE1 size:0x1
0x80A4C950 = D_80A4C950; // type:f32 size:0x4
0x80A4C954 = D_80A4C954; // type:f32 size:0x4
0x80A4CA40 = Dm_Statue_InitVars; // type:UNK_TYPE1 size:0x1
0x80A4D800 = Obj_Fireshield_InitVars; // type:UNK_TYPE1 size:0x1
0x80A4D820 = D_80A4D820; // type:UNK_TYPE1 size:0x1
0x80A4D84C = D_80A4D84C; // type:UNK_TYPE1 size:0x1
0x80A4D864 = D_80A4D864; // type:UNK_TYPE4 size:0x4
0x80A4D874 = D_80A4D874; // type:UNK_TYPE1 size:0x1
0x80A4D884 = D_80A4D884; // type:UNK_TYPE1 size:0x1
0x80A4D894 = D_80A4D894; // type:UNK_TYPE1 size:0x1
0x80A4D8A4 = D_80A4D8A4; // type:UNK_TYPE1 size:0x1
0x80A4D8B0 = D_80A4D8B0; // type:f32 size:0x4
0x80A4D8B4 = D_80A4D8B4; // type:f32 size:0x4
0x80A4D8B8 = D_80A4D8B8; // type:f32 size:0x4
0x80A4DE20 = Bg_Ladder_InitVars; // type:UNK_TYPE1 size:0x1
0x80A4DE40 = D_80A4DE40; // type:UNK_TYPE1 size:0x1
0x80A4DE44 = D_80A4DE44; // type:UNK_TYPE1 size:0x1
0x80A4F700 = En_Mkk_InitVars; // type:UNK_TYPE1 size:0x1
0x80A4F720 = D_80A4F720; // type:UNK_TYPE1 size:0x1
0x80A4F748 = D_80A4F748; // type:UNK_TYPE2 size:0x2
0x80A4F74C = D_80A4F74C; // type:UNK_TYPE1 size:0x1
0x80A4F754 = D_80A4F754; // type:UNK_TYPE1 size:0x1
0x80A4F774 = D_80A4F774; // type:UNK_TYPE1 size:0x1
0x80A4F780 = D_80A4F780; // type:UNK_TYPE1 size:0x1
0x80A4F784 = D_80A4F784; // type:UNK_TYPE1 size:0x1
0x80A4F788 = D_80A4F788; // type:UNK_TYPE1 size:0x1
0x80A4F794 = D_80A4F794; // type:UNK_TYPE1 size:0x1
0x80A4F79C = D_80A4F79C; // type:UNK_TYPE1 size:0x1
0x80A4F7A4 = D_80A4F7A4; // type:UNK_TYPE1 size:0x1
0x80A4F7C4 = D_80A4F7C4; // type:UNK_TYPE1 size:0x1
0x80A4F7E0 = D_80A4F7E0; // type:f32 size:0x4
0x80A4F7E4 = D_80A4F7E4; // type:f32 size:0x4
0x80A4F7E8 = D_80A4F7E8; // type:f32 size:0x4
0x80A4F7EC = D_80A4F7EC; // type:f32 size:0x4
0x80A4F7F0 = D_80A4F7F0; // type:f32 size:0x4
0x80A4F7F4 = D_80A4F7F4; // type:f32 size:0x4
0x80A4F7F8 = D_80A4F7F8; // type:f32 size:0x4
0x80A4F7FC = D_80A4F7FC; // type:f32 size:0x4
0x80A4F800 = D_80A4F800; // type:f32 size:0x4
0x80A4F804 = D_80A4F804; // type:f32 size:0x4
0x80A4F808 = D_80A4F808; // type:f32 size:0x4
0x80A4F80C = D_80A4F80C; // type:f32 size:0x4
0x80A4F810 = D_80A4F810; // type:f32 size:0x4
0x80A4F814 = D_80A4F814; // type:f32 size:0x4
0x80A4F818 = D_80A4F818; // type:f32 size:0x4
0x80A4F81C = D_80A4F81C; // type:f32 size:0x4
0x80A4F820 = D_80A4F820; // type:f32 size:0x4
0x80A4F824 = D_80A4F824; // type:f32 size:0x4
0x80A4F828 = D_80A4F828; // type:f32 size:0x4
0x80A4F82C = D_80A4F82C; // type:f32 size:0x4
0x80A4F830 = D_80A4F830; // type:f32 size:0x4
0x80A4F834 = D_80A4F834; // type:f32 size:0x4
0x80A4F83C = D_80A4F83C; // type:f32 size:0x4
0x80A4F840 = D_80A4F840; // type:f32 size:0x4
0x80A4FD40 = Demo_Getitem_InitVars; // type:UNK_TYPE1 size:0x1
0x80A4FD60 = D_80A4FD60; // type:UNK_TYPE1 size:0x1
0x80A4FD64 = D_80A4FD64; // type:UNK_TYPE1 size:0x1
0x80A4FD68 = D_80A4FD68; // type:UNK_TYPE1 size:0x1
0x80A50C90 = En_Dnb_InitVars; // type:UNK_TYPE1 size:0x1
0x80A50CB0 = D_80A50CB0; // type:UNK_TYPE1 size:0x1
0x80A50CBC = D_80A50CBC; // type:UNK_TYPE1 size:0x1
0x80A51250 = D_80A51250; // type:UNK_TYPE1 size:0x1
0x80A51384 = D_80A51384; // type:UNK_TYPE1 size:0x1
0x80A5138C = D_80A5138C; // type:UNK_TYPE1 size:0x1
0x80A5140C = En_Dnh_InitVars; // type:UNK_TYPE1 size:0x1
0x80A5142C = D_80A5142C; // type:UNK_PTR size:0x4
0x80A5143C = D_80A5143C; // type:UNK_TYPE1 size:0x1
0x80A51450 = D_80A51450; // type:f32 size:0x4
0x80A521A0 = D_80A521A0; // type:UNK_TYPE2 size:0x2
0x80A521A4 = En_Dnk_InitVars; // type:UNK_TYPE1 size:0x1
0x80A521C4 = D_80A521C4; // type:UNK_TYPE1 size:0x1
0x80A521F0 = D_80A521F0; // type:UNK_PTR size:0x4
0x80A521FC = D_80A521FC; // type:UNK_TYPE1 size:0x1
0x80A5221C = D_80A5221C; // type:UNK_TYPE1 size:0x1
0x80A5245C = D_80A5245C; // type:UNK_TYPE1 size:0x1
0x80A53400 = D_80A53400; // type:UNK_TYPE1 size:0x1
0x80A53420 = D_80A53420; // type:UNK_TYPE1 size:0x1
0x80A53438 = D_80A53438; // type:UNK_TYPE1 size:0x1
0x80A53444 = En_Dnq_InitVars; // type:UNK_TYPE1 size:0x1
0x80A53464 = D_80A53464; // type:UNK_TYPE1 size:0x1
0x80A53490 = D_80A53490; // type:UNK_PTR size:0x4
0x80A5349C = sAnimationInfo; // type:UNK_TYPE1 size:0x1
0x80A535DC = D_80A535DC; // type:UNK_TYPE1 size:0x1
0x80A535F0 = D_80A535F0; // type:UNK_TYPE4 size:0x4
0x80A535FC = D_80A535FC; // type:UNK_TYPE1 size:0x1
0x80A53620 = jtbl_80A53620; // type:UNK_PTR size:0x4
0x80A53648 = jtbl_80A53648; // type:UNK_PTR size:0x4
0x80A53B50 = Bg_Keikoku_Saku_InitVars; // type:UNK_TYPE1 size:0x1
0x80A53B70 = D_80A53B70; // type:f32 size:0x4
0x80A53B74 = D_80A53B74; // type:f32 size:0x4
0x80A53B78 = D_80A53B78; // type:f32 size:0x4
0x80A55CE0 = Obj_Hugebombiwa_InitVars; // type:UNK_TYPE1 size:0x1
0x80A55D00 = D_80A55D00; // type:UNK_TYPE1 size:0x1
0x80A55D2C = D_80A55D2C; // type:UNK_TYPE1 size:0x1
0x80A55D38 = D_80A55D38; // type:UNK_TYPE1 size:0x1
0x80A55D3C = D_80A55D3C; // type:UNK_TYPE1 size:0x1
0x80A55D40 = D_80A55D40; // type:UNK_TYPE4 size:0x4
0x80A55D50 = D_80A55D50; // type:UNK_TYPE2 size:0x2
0x80A55D60 = D_80A55D60; // type:UNK_TYPE1 size:0x1
0x80A55D70 = D_80A55D70; // type:UNK_TYPE1 size:0x1
0x80A55D74 = D_80A55D74; // type:f32 size:0x4
0x80A55D7C = D_80A55D7C; // type:UNK_TYPE1 size:0x1
0x80A55D90 = D_80A55D90; // type:f32 size:0x4
0x80A55D94 = D_80A55D94; // type:f32 size:0x4
0x80A55D98 = D_80A55D98; // type:f32 size:0x4
0x80A55D9C = D_80A55D9C; // type:f32 size:0x4
0x80A55DA0 = D_80A55DA0; // type:f32 size:0x4
0x80A55DA4 = D_80A55DA4; // type:f32 size:0x4
0x80A55DA8 = D_80A55DA8; // type:f32 size:0x4
0x80A55DAC = D_80A55DAC; // type:f32 size:0x4
0x80A55DB0 = D_80A55DB0; // type:f32 size:0x4
0x80A55DB4 = D_80A55DB4; // type:f32 size:0x4
0x80A55DB8 = D_80A55DB8; // type:f32 size:0x4
0x80A55DBC = D_80A55DBC; // type:f32 size:0x4
0x80A55DC0 = D_80A55DC0; // type:f32 size:0x4
0x80A55DC4 = D_80A55DC4; // type:f32 size:0x4
0x80A55DC8 = D_80A55DC8; // type:f32 size:0x4
0x80A55DCC = D_80A55DCC; // type:f32 size:0x4
0x80A55DD0 = D_80A55DD0; // type:f32 size:0x4
0x80A55DD4 = D_80A55DD4; // type:f32 size:0x4
0x80A55DD8 = D_80A55DD8; // type:f32 size:0x4
0x80A55DDC = D_80A55DDC; // type:f32 size:0x4
0x80A55DE0 = D_80A55DE0; // type:f32 size:0x4
0x80A55DE4 = D_80A55DE4; // type:f32 size:0x4
0x80A55DE8 = D_80A55DE8; // type:f32 size:0x4
0x80A55DEC = D_80A55DEC; // type:f32 size:0x4
0x80A55DF0 = D_80A55DF0; // type:f32 size:0x4
0x80A55DF4 = D_80A55DF4; // type:f32 size:0x4
0x80A55DF8 = D_80A55DF8; // type:f32 size:0x4
0x80A55DFC = D_80A55DFC; // type:f32 size:0x4
0x80A55E00 = D_80A55E00; // type:f32 size:0x4
0x80A55E04 = D_80A55E04; // type:f32 size:0x4
0x80A55E08 = D_80A55E08; // type:f32 size:0x4
0x80A55E0C = D_80A55E0C; // type:f32 size:0x4
0x80A55E10 = D_80A55E10; // type:f32 size:0x4
0x80A55E14 = D_80A55E14; // type:f32 size:0x4
0x80A55E18 = D_80A55E18; // type:f32 size:0x4
0x80A55E1C = D_80A55E1C; // type:f32 size:0x4
0x80A55E20 = D_80A55E20; // type:f32 size:0x4
0x80A55E24 = D_80A55E24; // type:f32 size:0x4
0x80A55E28 = D_80A55E28; // type:f32 size:0x4
0x80A55E2C = D_80A55E2C; // type:f32 size:0x4
0x80A55E30 = D_80A55E30; // type:f32 size:0x4
0x80A55E34 = D_80A55E34; // type:f32 size:0x4
0x80A55E38 = D_80A55E38; // type:f32 size:0x4
0x80A55E3C = D_80A55E3C; // type:f32 size:0x4
0x80A55E40 = D_80A55E40; // type:f32 size:0x4
0x80A56100 = En_Firefly2_InitVars; // type:UNK_TYPE1 size:0x1
0x80A583E0 = En_Rat_InitVars; // type:UNK_TYPE1 size:0x1
0x80A58400 = sSphereInit; // type:UNK_TYPE1 size:0x1
0x80A5842C = sDamageTable; // type:UNK_TYPE1 size:0x1
0x80A5844C = sColChkInfoInit; // type:UNK_TYPE1 size:0x1
0x80A58454 = sSparkTextures; // type:UNK_TYPE4 size:0x4
0x80A58464 = sInitChain; // type:UNK_TYPE1 size:0x1
0x80A58470 = sBlureInit; // type:EffectBlureInit2 size:0x24
0x80A58494 = sTexturesDesegmented; // type:UNK_TYPE4 size:0x4
0x80A58498 = sSmokeAccel; // type:UNK_TYPE1 size:0x1
0x80A584A4 = sSmokeColor; // type:UNK_TYPE1 size:0x1
0x80A584A8 = sBlureP1Offset; // type:UNK_TYPE1 size:0x1
0x80A584B4 = sBlureP2LeftOffset; // type:UNK_TYPE1 size:0x1
0x80A584C0 = sBlureP2RightOffset; // type:UNK_TYPE1 size:0x1
0x80A584CC = sDustVelocity; // type:UNK_TYPE1 size:0x1
0x80A584E0 = D_80A584E0; // type:f32 size:0x4
0x80A584E4 = D_80A584E4; // type:f32 size:0x4
0x80A584E8 = D_80A584E8; // type:f32 size:0x4
0x80A584EC = D_80A584EC; // type:f32 size:0x4
0x80A584F0 = D_80A584F0; // type:f32 size:0x4
0x80A584F4 = D_80A584F4; // type:f32 size:0x4
0x80A584F8 = D_80A584F8; // type:f32 size:0x4
0x80A584FC = D_80A584FC; // type:f32 size:0x4
0x80A58500 = D_80A58500; // type:f32 size:0x4
0x80A58504 = D_80A58504; // type:f32 size:0x4
0x80A58508 = D_80A58508; // type:f32 size:0x4
0x80A5850C = D_80A5850C; // type:f32 size:0x4
0x80A58510 = D_80A58510; // type:f32 size:0x4
0x80A58514 = D_80A58514; // type:f32 size:0x4
0x80A58518 = D_80A58518; // type:f32 size:0x4
0x80A5851C = D_80A5851C; // type:f32 size:0x4
0x80A58520 = D_80A58520; // type:f32 size:0x4
0x80A58524 = D_80A58524; // type:f32 size:0x4
0x80A58528 = D_80A58528; // type:f32 size:0x4
0x80A5AF90 = En_Water_Effect_InitVars; // type:UNK_TYPE1 size:0x1
0x80A5AFB0 = D_80A5AFB0; // type:UNK_TYPE4 size:0x4
0x80A5AFBC = D_80A5AFBC; // type:UNK_TYPE4 size:0x4
0x80A5AFD0 = D_80A5AFD0; // type:f32 size:0x4
0x80A5AFD4 = D_80A5AFD4; // type:f32 size:0x4
0x80A5AFD8 = D_80A5AFD8; // type:f32 size:0x4
0x80A5AFDC = D_80A5AFDC; // type:f32 size:0x4
0x80A5AFE0 = D_80A5AFE0; // type:f32 size:0x4
0x80A5AFE4 = D_80A5AFE4; // type:f32 size:0x4
0x80A5AFE8 = D_80A5AFE8; // type:f32 size:0x4
0x80A5AFEC = D_80A5AFEC; // type:f32 size:0x4
0x80A5AFF0 = D_80A5AFF0; // type:f32 size:0x4
0x80A5AFF4 = D_80A5AFF4; // type:f32 size:0x4
0x80A5AFF8 = D_80A5AFF8; // type:f32 size:0x4
0x80A5AFFC = D_80A5AFFC; // type:f32 size:0x4
0x80A5B000 = D_80A5B000; // type:f32 size:0x4
0x80A5B004 = D_80A5B004; // type:f32 size:0x4
0x80A5B008 = D_80A5B008; // type:f32 size:0x4
0x80A5B00C = D_80A5B00C; // type:f32 size:0x4
0x80A5B010 = D_80A5B010; // type:f32 size:0x4
0x80A5B014 = D_80A5B014; // type:f32 size:0x4
0x80A5B018 = D_80A5B018; // type:f32 size:0x4
0x80A5B01C = D_80A5B01C; // type:f32 size:0x4
0x80A5B020 = D_80A5B020; // type:f32 size:0x4
0x80A5B024 = D_80A5B024; // type:f32 size:0x4
0x80A5EAA0 = En_Kusa2_InitVars; // type:UNK_TYPE1 size:0x1
0x80A5EAC0 = D_80A5EAC0; // type:UNK_TYPE1 size:0x1
0x80A5EAEC = D_80A5EAEC; // type:UNK_PTR size:0x4
0x80A5EAF0 = D_80A5EAF0; // type:UNK_TYPE2 size:0x2
0x80A5EAF4 = D_80A5EAF4; // type:UNK_TYPE2 size:0x2
0x80A5EAFC = D_80A5EAFC; // type:UNK_TYPE2 size:0x2
0x80A5EAFE = D_80A5EAFE; // type:UNK_TYPE2 size:0x2
0x80A5EB00 = D_80A5EB00; // type:UNK_TYPE2 size:0x2
0x80A5EB04 = D_80A5EB04; // type:UNK_TYPE2 size:0x2
0x80A5EB0C = D_80A5EB0C; // type:Vec3f size:0xC
0x80A5EB18 = D_80A5EB18; // type:Vec3f size:0xC
0x80A5EB24 = D_80A5EB24; // type:UNK_TYPE1 size:0x1
0x80A5EB48 = D_80A5EB48; // type:UNK_TYPE4 size:0x4
0x80A5EB4C = D_80A5EB4C; // type:UNK_TYPE1 size:0x1
0x80A5EB50 = D_80A5EB50; // type:UNK_TYPE1 size:0x1
0x80A5EB68 = D_80A5EB68; // type:UNK_PTR size:0x4
0x80A5EB70 = D_80A5EB70; // type:f32 size:0x4
0x80A5EB74 = D_80A5EB74; // type:f32 size:0x4
0x80A5EB78 = D_80A5EB78; // type:f32 size:0x4
0x80A5EB7C = D_80A5EB7C; // type:f32 size:0x4
0x80A5EB80 = D_80A5EB80; // type:f32 size:0x4
0x80A5EB84 = D_80A5EB84; // type:f32 size:0x4
0x80A5EB88 = D_80A5EB88; // type:f32 size:0x4
0x80A5EB8C = D_80A5EB8C; // type:f32 size:0x4
0x80A5EB90 = D_80A5EB90; // type:f32 size:0x4
0x80A5EB94 = D_80A5EB94; // type:f32 size:0x4
0x80A5EB98 = D_80A5EB98; // type:f32 size:0x4
0x80A5EB9C = D_80A5EB9C; // type:f32 size:0x4
0x80A5EBA0 = D_80A5EBA0; // type:f32 size:0x4
0x80A5EBA4 = D_80A5EBA4; // type:f32 size:0x4
0x80A5EBA8 = D_80A5EBA8; // type:f32 size:0x4
0x80A5EBAC = D_80A5EBAC; // type:f32 size:0x4
0x80A5EBB0 = D_80A5EBB0; // type:f32 size:0x4
0x80A5EBB4 = D_80A5EBB4; // type:f32 size:0x4
0x80A5EBB8 = D_80A5EBB8; // type:f32 size:0x4
0x80A5EBBC = D_80A5EBBC; // type:f32 size:0x4
0x80A5EBC0 = D_80A5EBC0; // type:f32 size:0x4
0x80A5EBC4 = D_80A5EBC4; // type:f32 size:0x4
0x80A5EBC8 = D_80A5EBC8; // type:f32 size:0x4
0x80A5EBCC = D_80A5EBCC; // type:f32 size:0x4
0x80A5EBD0 = D_80A5EBD0; // type:f32 size:0x4
0x80A5EBD4 = D_80A5EBD4; // type:f32 size:0x4
0x80A5EBD8 = D_80A5EBD8; // type:f32 size:0x4
0x80A5EBDC = D_80A5EBDC; // type:f32 size:0x4
0x80A5EBE0 = D_80A5EBE0; // type:f32 size:0x4
0x80A5EBE4 = D_80A5EBE4; // type:f32 size:0x4
0x80A5EBE8 = D_80A5EBE8; // type:f32 size:0x4
0x80A5EBEC = D_80A5EBEC; // type:f32 size:0x4
0x80A5EBF0 = D_80A5EBF0; // type:f32 size:0x4
0x80A5EBF4 = D_80A5EBF4; // type:f32 size:0x4
0x80A5EBF8 = D_80A5EBF8; // type:f32 size:0x4
0x80A5EBFC = D_80A5EBFC; // type:f32 size:0x4
0x80A5EC00 = D_80A5EC00; // type:f32 size:0x4
0x80A5EC04 = D_80A5EC04; // type:f32 size:0x4
0x80A5EC08 = D_80A5EC08; // type:f32 size:0x4
0x80A5EC0C = D_80A5EC0C; // type:f32 size:0x4
0x80A5EC10 = D_80A5EC10; // type:f32 size:0x4
0x80A5EC14 = D_80A5EC14; // type:f32 size:0x4
0x80A5EC18 = D_80A5EC18; // type:f32 size:0x4
0x80A5EC1C = D_80A5EC1C; // type:f32 size:0x4
0x80A5EC20 = D_80A5EC20; // type:f32 size:0x4
0x80A5EC24 = D_80A5EC24; // type:f32 size:0x4
0x80A5EC28 = D_80A5EC28; // type:f32 size:0x4
0x80A5EC2C = D_80A5EC2C; // type:f32 size:0x4
0x80A5EC30 = D_80A5EC30; // type:f32 size:0x4
0x80A5EC34 = D_80A5EC34; // type:f32 size:0x4
0x80A5EC38 = D_80A5EC38; // type:f32 size:0x4
0x80A5EC3C = D_80A5EC3C; // type:f32 size:0x4
0x80A5F1C0 = D_80A5F1C0; // type:UNK_TYPE1 size:0x1
0x80A60900 = D_80A60900; // type:UNK_TYPE4 size:0x4
0x80A60908 = D_80A60908; // type:UNK_TYPE4 size:0x4
0x80A60B08 = D_80A60B08; // type:UNK_TYPE2 size:0x2
0x80A60B0A = D_80A60B0A; // type:UNK_TYPE2 size:0x2
0x80A60B0C = D_80A60B0C; // type:UNK_TYPE2 size:0x2
0x80A60B0E = D_80A60B0E; // type:UNK_TYPE2 size:0x2
0x80A60B10 = D_80A60B10; // type:UNK_TYPE2 size:0x2
0x80A61140 = Bg_Spout_Fire_InitVars; // type:UNK_TYPE1 size:0x1
0x80A61160 = D_80A61160; // type:UNK_TYPE1 size:0x1
0x80A6118C = D_80A6118C; // type:UNK_TYPE1 size:0x1
0x80A61194 = D_80A61194; // type:UNK_TYPE4 size:0x4
0x80A611B4 = D_80A611B4; // type:UNK_TYPE4 size:0x4
0x80A611C0 = D_80A611C0; // type:f32 size:0x4
0x80A611C4 = D_80A611C4; // type:f32 size:0x4
0x80A611C8 = D_80A611C8; // type:f32 size:0x4
0x80A611CC = D_80A611CC; // type:f32 size:0x4
0x80A611D0 = D_80A611D0; // type:f32 size:0x4
0x80A61720 = En_Dy_Extra_InitVars; // type:UNK_TYPE1 size:0x1
0x80A61740 = D_80A61740; // type:UNK_TYPE1 size:0x1
0x80A61754 = D_80A61754; // type:UNK_TYPE1 size:0x1
0x80A61768 = D_80A61768; // type:UNK_TYPE1 size:0x1
0x80A61790 = D_80A61790; // type:f32 size:0x4
0x80A61794 = D_80A61794; // type:f32 size:0x4
0x80A61798 = D_80A61798; // type:f32 size:0x4
0x80A6179C = D_80A6179C; // type:f32 size:0x4
0x80A63CC0 = En_Bal_InitVars; // type:UNK_TYPE1 size:0x1
0x80A63CE0 = D_80A63CE0; // type:UNK_TYPE1 size:0x1
0x80A63D00 = D_80A63D00; // type:UNK_PTR size:0x4
0x80A63D0C = D_80A63D0C; // type:UNK_TYPE1 size:0x1
0x80A63D30 = D_80A63D30; // type:UNK_TYPE1 size:0x1
0x80A63D40 = D_80A63D40; // type:UNK_TYPE1 size:0x1
0x80A63D58 = D_80A63D58; // type:UNK_PTR size:0x4
0x80A63EA8 = D_80A63EA8; // type:UNK_TYPE4 size:0x4
0x80A63EB4 = D_80A63EB4; // type:f32 size:0x4
0x80A63EB8 = D_80A63EB8; // type:f32 size:0x4
0x80A63EBC = D_80A63EBC; // type:f32 size:0x4
0x80A63EC0 = D_80A63EC0; // type:UNK_TYPE1 size:0x1
0x80A63EC4 = D_80A63EC4; // type:f32 size:0x4
0x80A63ECC = D_80A63ECC; // type:UNK_TYPE1 size:0x1
0x80A63ED0 = D_80A63ED0; // type:UNK_TYPE1 size:0x1
0x80A63ED4 = D_80A63ED4; // type:f32 size:0x4
0x80A63ED8 = D_80A63ED8; // type:f32 size:0x4
0x80A63EDC = D_80A63EDC; // type:f32 size:0x4
0x80A63EE0 = D_80A63EE0; // type:UNK_TYPE1 size:0x1
0x80A63EEC = D_80A63EEC; // type:UNK_TYPE1 size:0x1
0x80A63EF0 = D_80A63EF0; // type:UNK_TYPE1 size:0x1
0x80A63EF4 = D_80A63EF4; // type:UNK_TYPE4 size:0x4
0x80A63EF8 = D_80A63EF8; // type:UNK_TYPE1 size:0x1
0x80A63F04 = D_80A63F04; // type:UNK_TYPE1 size:0x1
0x80A63F10 = D_80A63F10; // type:f32 size:0x4
0x80A63F14 = D_80A63F14; // type:f32 size:0x4
0x80A63F18 = D_80A63F18; // type:f32 size:0x4
0x80A63F1C = D_80A63F1C; // type:f32 size:0x4
0x80A63F20 = D_80A63F20; // type:f32 size:0x4
0x80A63F24 = D_80A63F24; // type:f32 size:0x4
0x80A63F28 = D_80A63F28; // type:f32 size:0x4
0x80A63F2C = D_80A63F2C; // type:f32 size:0x4
0x80A63F30 = D_80A63F30; // type:f32 size:0x4
0x80A63F34 = D_80A63F34; // type:f32 size:0x4
0x80A63F38 = jtbl_80A63F38; // type:UNK_PTR size:0x4
0x80A63F64 = D_80A63F64; // type:f32 size:0x4
0x80A63F68 = jtbl_80A63F68; // type:UNK_PTR size:0x4
0x80A63F80 = jtbl_80A63F80; // type:UNK_PTR size:0x4
0x80A63F98 = jtbl_80A63F98; // type:UNK_PTR size:0x4
0x80A63FF8 = jtbl_80A63FF8; // type:UNK_PTR size:0x4
0x80A64010 = jtbl_80A64010; // type:UNK_PTR size:0x4
0x80A64028 = D_80A64028; // type:f32 size:0x4
0x80A6402C = D_80A6402C; // type:f32 size:0x4
0x80A65D40 = En_Ginko_Man_InitVars; // type:UNK_TYPE1 size:0x1
0x80A65D60 = animations; // type:UNK_PTR size:0x4
0x80A65DE0 = jtbl_80A65DE0; // type:UNK_PTR size:0x4
0x80A65EAC = jtbl_80A65EAC; // type:UNK_PTR size:0x4
0x80A65EE8 = D_80A65EE8; // type:f32 size:0x4
0x80A65EEC = D_80A65EEC; // type:f32 size:0x4
0x80A664A0 = En_Warp_Uzu_InitVars; // type:UNK_TYPE1 size:0x1
0x80A664C0 = D_80A664C0; // type:UNK_TYPE1 size:0x1
0x80A664EC = D_80A664EC; // type:UNK_TYPE1 size:0x1
0x80A664FC = D_80A664FC; // type:UNK_TYPE1 size:0x1
0x80A67600 = Obj_Driftice_InitVars; // type:UNK_TYPE1 size:0x1
0x80A67620 = D_80A67620; // type:UNK_TYPE4 size:0x4
0x80A67644 = D_80A67644; // type:f32 size:0x4
0x80A67664 = D_80A67664; // type:UNK_TYPE1 size:0x1
0x80A67694 = D_80A67694; // type:UNK_TYPE2 size:0x2
0x80A676B8 = D_80A676B8; // type:UNK_TYPE2 size:0x2
0x80A676D0 = D_80A676D0; // type:UNK_TYPE2 size:0x2
0x80A676F4 = D_80A676F4; // type:UNK_TYPE1 size:0x1
0x80A67700 = D_80A67700; // type:f32 size:0x4
0x80A67704 = D_80A67704; // type:f32 size:0x4
0x80A67708 = D_80A67708; // type:f32 size:0x4
0x80A6770C = D_80A6770C; // type:f32 size:0x4
0x80A67710 = D_80A67710; // type:f32 size:0x4
0x80A67714 = D_80A67714; // type:f32 size:0x4
0x80A67718 = D_80A67718; // type:f32 size:0x4
0x80A6771C = D_80A6771C; // type:f32 size:0x4
0x80A67720 = D_80A67720; // type:f32 size:0x4
0x80A67724 = D_80A67724; // type:f32 size:0x4
0x80A67728 = D_80A67728; // type:f32 size:0x4
0x80A6772C = D_80A6772C; // type:f32 size:0x4
0x80A67730 = D_80A67730; // type:f32 size:0x4
0x80A67734 = D_80A67734; // type:f32 size:0x4
0x80A67738 = D_80A67738; // type:f32 size:0x4
0x80A6773C = D_80A6773C; // type:f32 size:0x4
0x80A67740 = D_80A67740; // type:f32 size:0x4
0x80A67744 = D_80A67744; // type:f32 size:0x4
0x80A67748 = D_80A67748; // type:f32 size:0x4
0x80A685E0 = En_Look_Nuts_InitVars; // type:UNK_TYPE1 size:0x1
0x80A68600 = D_80A68600; // type:UNK_TYPE1 size:0x1
0x80A6862C = D_80A6862C; // type:UNK_TYPE4 size:0x4
0x80A68630 = D_80A68630; // type:UNK_TYPE1 size:0x1
0x80A68650 = D_80A68650; // type:UNK_TYPE4 size:0x4
0x80A6865C = D_80A6865C; // type:UNK_TYPE1 size:0x1
0x80A68670 = D_80A68670; // type:f32 size:0x4
0x80A68674 = D_80A68674; // type:f32 size:0x4
0x80A68678 = D_80A68678; // type:f32 size:0x4
0x80A6867C = jtbl_80A6867C; // type:UNK_PTR size:0x4
0x80A6B930 = En_Mushi2_InitVars; // type:UNK_TYPE1 size:0x1
0x80A6B950 = D_80A6B950; // type:UNK_TYPE1 size:0x1
0x80A6B974 = D_80A6B974; // type:UNK_TYPE1 size:0x1
0x80A6B984 = D_80A6B984; // type:UNK_TYPE1 size:0x1
0x80A6B98C = D_80A6B98C; // type:UNK_TYPE1 size:0x1
0x80A6B994 = D_80A6B994; // type:UNK_TYPE4 size:0x4
0x80A6B998 = D_80A6B998; // type:UNK_TYPE2 size:0x2
0x80A6B9A0 = D_80A6B9A0; // type:UNK_TYPE1 size:0x1
0x80A6B9AC = D_80A6B9AC; // type:UNK_TYPE1 size:0x1
0x80A6B9B8 = D_80A6B9B8; // type:UNK_TYPE1 size:0x1
0x80A6B9C4 = D_80A6B9C4; // type:UNK_TYPE4 size:0x4
0x80A6BA04 = D_80A6BA04; // type:UNK_TYPE1 size:0x1
0x80A6BA14 = D_80A6BA14; // type:f32 size:0x4
0x80A6BA20 = D_80A6BA20; // type:f32 size:0x4
0x80A6BA24 = D_80A6BA24; // type:f32 size:0x4
0x80A6BA28 = D_80A6BA28; // type:f32 size:0x4
0x80A6BA2C = D_80A6BA2C; // type:f32 size:0x4
0x80A6BA30 = D_80A6BA30; // type:f32 size:0x4
0x80A6BA34 = D_80A6BA34; // type:f32 size:0x4
0x80A6BA38 = D_80A6BA38; // type:f32 size:0x4
0x80A6BA3C = D_80A6BA3C; // type:f32 size:0x4
0x80A6BA40 = D_80A6BA40; // type:f32 size:0x4
0x80A6BA44 = D_80A6BA44; // type:f32 size:0x4
0x80A6BA48 = D_80A6BA48; // type:f32 size:0x4
0x80A6BA4C = D_80A6BA4C; // type:f32 size:0x4
0x80A6BA50 = D_80A6BA50; // type:f32 size:0x4
0x80A6BA54 = D_80A6BA54; // type:f32 size:0x4
0x80A6BA58 = D_80A6BA58; // type:f32 size:0x4
0x80A6BA5C = D_80A6BA5C; // type:f32 size:0x4
0x80A6BA60 = D_80A6BA60; // type:f32 size:0x4
0x80A6BA64 = D_80A6BA64; // type:f32 size:0x4
0x80A6BA68 = D_80A6BA68; // type:f32 size:0x4
0x80A6BA6C = D_80A6BA6C; // type:f32 size:0x4
0x80A6BA70 = D_80A6BA70; // type:f32 size:0x4
0x80A6BA74 = D_80A6BA74; // type:f32 size:0x4
0x80A6BA78 = D_80A6BA78; // type:f32 size:0x4
0x80A6BA7C = D_80A6BA7C; // type:f32 size:0x4
0x80A6BA80 = D_80A6BA80; // type:f32 size:0x4
0x80A6BA84 = D_80A6BA84; // type:f32 size:0x4
0x80A6BA88 = D_80A6BA88; // type:f32 size:0x4
0x80A6BA8C = D_80A6BA8C; // type:f32 size:0x4
0x80A6BA90 = D_80A6BA90; // type:f32 size:0x4
0x80A6BA94 = D_80A6BA94; // type:f32 size:0x4
0x80A6BA98 = D_80A6BA98; // type:f32 size:0x4
0x80A6BA9C = D_80A6BA9C; // type:f32 size:0x4
0x80A6BAA0 = D_80A6BAA0; // type:f32 size:0x4
0x80A6BAA4 = D_80A6BAA4; // type:f32 size:0x4
0x80A6BAA8 = D_80A6BAA8; // type:f32 size:0x4
0x80A6BAAC = D_80A6BAAC; // type:f32 size:0x4
0x80A6BAB0 = D_80A6BAB0; // type:f32 size:0x4
0x80A6BAB4 = D_80A6BAB4; // type:f32 size:0x4
0x80A6BAB8 = D_80A6BAB8; // type:f32 size:0x4
0x80A6BABC = D_80A6BABC; // type:f32 size:0x4
0x80A6BAC0 = D_80A6BAC0; // type:f32 size:0x4
0x80A6BAC4 = D_80A6BAC4; // type:f32 size:0x4
0x80A6BAC8 = D_80A6BAC8; // type:f32 size:0x4
0x80A6BACC = D_80A6BACC; // type:f32 size:0x4
0x80A6BAD0 = D_80A6BAD0; // type:f32 size:0x4
0x80A6BAD4 = D_80A6BAD4; // type:f32 size:0x4
0x80A6BAD8 = D_80A6BAD8; // type:f32 size:0x4
0x80A6BADC = D_80A6BADC; // type:f32 size:0x4
0x80A6BAE0 = D_80A6BAE0; // type:f32 size:0x4
0x80A6BAE4 = D_80A6BAE4; // type:f32 size:0x4
0x80A6BAE8 = D_80A6BAE8; // type:f32 size:0x4
0x80A6BAEC = D_80A6BAEC; // type:f32 size:0x4
0x80A6BAF0 = D_80A6BAF0; // type:f32 size:0x4
0x80A6BAF4 = D_80A6BAF4; // type:f32 size:0x4
0x80A6BAF8 = D_80A6BAF8; // type:f32 size:0x4
0x80A6BAFC = D_80A6BAFC; // type:f32 size:0x4
0x80A6BB00 = D_80A6BB00; // type:f32 size:0x4
0x80A6E490 = En_Fall_InitVars; // type:UNK_TYPE1 size:0x1
0x80A6E4B0 = D_80A6E4B0; // type:UNK_TYPE4 size:0x4
0x80A6E4B4 = D_80A6E4B4; // type:s8 size:0xD0
0x80A6E588 = D_80A6E588; // type:UNK_TYPE1 size:0x1
0x80A6E594 = D_80A6E594; // type:UNK_TYPE1 size:0x1
0x80A6E5A0 = D_80A6E5A0; // type:f32 size:0x4
0x80A6E5A4 = D_80A6E5A4; // type:f32 size:0x4
0x80A6E5A8 = D_80A6E5A8; // type:f32 size:0x4
0x80A6E5AC = D_80A6E5AC; // type:f32 size:0x4
0x80A6E5B0 = D_80A6E5B0; // type:f32 size:0x4
0x80A6E5B4 = D_80A6E5B4; // type:f32 size:0x4
0x80A6E5B8 = D_80A6E5B8; // type:f32 size:0x4
0x80A6E5BC = D_80A6E5BC; // type:f32 size:0x4
0x80A6E5C0 = D_80A6E5C0; // type:f32 size:0x4
0x80A6E5C4 = D_80A6E5C4; // type:f32 size:0x4
0x80A6E5C8 = D_80A6E5C8; // type:f32 size:0x4
0x80A6E5CC = jtbl_80A6E5CC; // type:UNK_PTR size:0x4
0x80A6E5EC = jtbl_80A6E5EC; // type:UNK_PTR size:0x4
0x80A6E61C = D_80A6E61C; // type:f32 size:0x4
0x80A6E620 = D_80A6E620; // type:f32 size:0x4
0x80A6E624 = D_80A6E624; // type:f32 size:0x4
0x80A6E628 = D_80A6E628; // type:f32 size:0x4
0x80A6E62C = D_80A6E62C; // type:f32 size:0x4
0x80A6E630 = D_80A6E630; // type:f32 size:0x4
0x80A6E634 = D_80A6E634; // type:f32 size:0x4
0x80A6E638 = D_80A6E638; // type:f32 size:0x4
0x80A6E63C = D_80A6E63C; // type:f32 size:0x4
0x80A6E640 = D_80A6E640; // type:f32 size:0x4
0x80A6E644 = D_80A6E644; // type:f32 size:0x4
0x80A6E648 = D_80A6E648; // type:f32 size:0x4
0x80A6E64C = D_80A6E64C; // type:f32 size:0x4
0x80A6E650 = D_80A6E650; // type:f32 size:0x4
0x80A6E654 = D_80A6E654; // type:f32 size:0x4
0x80A6E990 = D_80A6E990; // type:UNK_TYPE1 size:0x1
0x80A6F098 = D_80A6F098; // type:UNK_TYPE1 size:0x1
0x80A703D0 = En_Mm3_InitVars; // type:UNK_TYPE1 size:0x1
0x80A703F0 = D_80A703F0; // type:UNK_TYPE1 size:0x1
0x80A7041C = D_80A7041C; // type:UNK_TYPE1 size:0x1
0x80A70428 = D_80A70428; // type:UNK_TYPE1 size:0x1
0x80A704E8 = D_80A704E8; // type:UNK_TYPE1 size:0x1
0x80A704F0 = D_80A704F0; // type:UNK_TYPE1 size:0x1
0x80A704FC = D_80A704FC; // type:UNK_TYPE1 size:0x1
0x80A70510 = jtbl_80A70510; // type:UNK_PTR size:0x4
0x80A7056C = jtbl_80A7056C; // type:UNK_PTR size:0x4
0x80A71080 = Bg_Crace_Movebg_InitVars; // type:UNK_TYPE1 size:0x1
0x80A710A0 = sHasInitializedIsLoaded; // type:UNK_TYPE1 size:0x1
0x80A710A4 = sLoadedDoorCount; // type:UNK_TYPE1 size:0x1
0x80A710A8 = sInitChain; // type:UNK_TYPE1 size:0x1
0x80A710AC = sUnitVecZ; // type:UNK_TYPE1 size:0x1
0x80A710C0 = D_80A710C0; // type:f32 size:0x4
0x80A711B0 = sIsLoaded; // type:UNK_TYPE1 size:0x1
0x80A739A0 = D_80A739A0; // type:UNK_PTR size:0x4
0x80A73AE0 = En_Dno_InitVars; // type:UNK_TYPE1 size:0x1
0x80A73B00 = D_80A73B00; // type:UNK_TYPE1 size:0x1
0x80A73B2C = D_80A73B2C; // type:UNK_TYPE1 size:0x1
0x80A73B38 = D_80A73B38; // type:UNK_TYPE1 size:0x1
0x80A73B40 = D_80A73B40; // type:UNK_TYPE1 size:0x1
0x80A73B50 = jtbl_80A73B50; // type:UNK_PTR size:0x4
0x80A73B88 = jtbl_80A73B88; // type:UNK_PTR size:0x4
0x80A73BA4 = jtbl_80A73BA4; // type:UNK_PTR size:0x4
0x80A73BC0 = jtbl_80A73BC0; // type:UNK_PTR size:0x4
0x80A73BDC = D_80A73BDC; // type:f32 size:0x4
0x80A73BE0 = jtbl_80A73BE0; // type:UNK_PTR size:0x4
0x80A73BFC = D_80A73BFC; // type:f32 size:0x4
0x80A73C00 = D_80A73C00; // type:f32 size:0x4
0x80A73C04 = D_80A73C04; // type:f32 size:0x4
0x80A73C08 = D_80A73C08; // type:f32 size:0x4
0x80A73C0C = D_80A73C0C; // type:f32 size:0x4
0x80A73C10 = jtbl_80A73C10; // type:UNK_PTR size:0x4
0x80A73C24 = D_80A73C24; // type:f32 size:0x4
0x80A75BC0 = D_80A75BC0; // type:UNK_TYPE1 size:0x1
0x80A75BE0 = D_80A75BE0; // type:UNK_TYPE1 size:0x1
0x80A75C0C = En_Pr2_InitVars; // type:UNK_TYPE1 size:0x1
0x80A75C2C = D_80A75C2C; // type:UNK_TYPE1 size:0x1
0x80A75C38 = D_80A75C38; // type:UNK_TYPE1 size:0x1
0x80A75C3C = D_80A75C3C; // type:UNK_TYPE1 size:0x1
0x80A75C60 = D_80A75C60; // type:f32 size:0x4
0x80A75C64 = D_80A75C64; // type:f32 size:0x4
0x80A75C68 = D_80A75C68; // type:f32 size:0x4
0x80A75C6C = D_80A75C6C; // type:f32 size:0x4
0x80A75C70 = D_80A75C70; // type:f32 size:0x4
0x80A75C74 = D_80A75C74; // type:f32 size:0x4
0x80A75C78 = D_80A75C78; // type:f32 size:0x4
0x80A75C7C = D_80A75C7C; // type:f32 size:0x4
0x80A75C80 = D_80A75C80; // type:f32 size:0x4
0x80A75C84 = D_80A75C84; // type:f32 size:0x4
0x80A771C0 = D_80A771C0; // type:UNK_TYPE1 size:0x1
0x80A771E0 = D_80A771E0; // type:f32 size:0x4
0x80A771F4 = D_80A771F4; // type:UNK_TYPE1 size:0x1
0x80A77220 = En_Prz_InitVars; // type:UNK_TYPE1 size:0x1
0x80A77240 = D_80A77240; // type:UNK_TYPE1 size:0x1
0x80A77248 = D_80A77248; // type:UNK_TYPE1 size:0x1
0x80A7724C = D_80A7724C; // type:UNK_TYPE4 size:0x4
0x80A77260 = D_80A77260; // type:f32 size:0x4
0x80A77264 = D_80A77264; // type:f32 size:0x4
0x80A77268 = D_80A77268; // type:f32 size:0x4
0x80A7726C = D_80A7726C; // type:f32 size:0x4
0x80A77270 = D_80A77270; // type:f32 size:0x4
0x80A77274 = D_80A77274; // type:f32 size:0x4
0x80A77278 = D_80A77278; // type:f32 size:0x4
0x80A7727C = D_80A7727C; // type:f32 size:0x4
0x80A77280 = D_80A77280; // type:f32 size:0x4
0x80A77284 = D_80A77284; // type:f32 size:0x4
0x80A7B4F0 = D_80A7B4F0; // type:UNK_TYPE1 size:0x1
0x80A7B510 = D_80A7B510; // type:UNK_TYPE4 size:0x4
0x80A7B558 = D_80A7B558; // type:UNK_TYPE1 size:0x1
0x80A7B564 = D_80A7B564; // type:UNK_TYPE1 size:0x1
0x80A7B570 = D_80A7B570; // type:UNK_TYPE1 size:0x1
0x80A7B57C = D_80A7B57C; // type:UNK_TYPE1 size:0x1
0x80A7B588 = D_80A7B588; // type:UNK_TYPE1 size:0x1
0x80A7B594 = D_80A7B594; // type:UNK_TYPE1 size:0x1
0x80A7B5A0 = D_80A7B5A0; // type:UNK_TYPE1 size:0x1
0x80A7B5AC = D_80A7B5AC; // type:UNK_TYPE1 size:0x1
0x80A7B5B8 = D_80A7B5B8; // type:UNK_TYPE1 size:0x1
0x80A7B5C4 = D_80A7B5C4; // type:UNK_TYPE1 size:0x1
0x80A7B5D0 = D_80A7B5D0; // type:UNK_TYPE1 size:0x1
0x80A7B5DC = D_80A7B5DC; // type:UNK_TYPE1 size:0x1
0x80A7B5E8 = En_Jso2_InitVars; // type:UNK_TYPE1 size:0x1
0x80A7B608 = D_80A7B608; // type:UNK_TYPE1 size:0x1
0x80A7B634 = D_80A7B634; // type:UNK_TYPE1 size:0x1
0x80A7B684 = D_80A7B684; // type:UNK_TYPE1 size:0x1
0x80A7B6DC = D_80A7B6DC; // type:UNK_TYPE1 size:0x1
0x80A7B6F4 = D_80A7B6F4; // type:UNK_TYPE2 size:0x2
0x80A7B6FC = D_80A7B6FC; // type:UNK_TYPE4 size:0x4
0x80A7B708 = D_80A7B708; // type:UNK_TYPE1 size:0x1
0x80A7B714 = D_80A7B714; // type:UNK_TYPE1 size:0x1
0x80A7B720 = D_80A7B720; // type:UNK_TYPE1 size:0x1
0x80A7B72C = D_80A7B72C; // type:UNK_TYPE1 size:0x1
0x80A7B738 = D_80A7B738; // type:UNK_TYPE2 size:0x2
0x80A7B760 = D_80A7B760; // type:f32 size:0x4
0x80A7B764 = jtbl_80A7B764; // type:UNK_PTR size:0x4
0x80A7B794 = D_80A7B794; // type:f32 size:0x4
0x80A7B798 = D_80A7B798; // type:f32 size:0x4
0x80A7B79C = D_80A7B79C; // type:f32 size:0x4
0x80A7B7A0 = D_80A7B7A0; // type:f32 size:0x4
0x80A7B7A4 = D_80A7B7A4; // type:f32 size:0x4
0x80A7B7A8 = D_80A7B7A8; // type:f32 size:0x4
0x80A7B7AC = D_80A7B7AC; // type:f32 size:0x4
0x80A7B7B0 = D_80A7B7B0; // type:f32 size:0x4
0x80A7B7B4 = D_80A7B7B4; // type:f32 size:0x4
0x80A7B7B8 = D_80A7B7B8; // type:f32 size:0x4
0x80A7B7BC = D_80A7B7BC; // type:f32 size:0x4
0x80A7B7C0 = D_80A7B7C0; // type:f32 size:0x4
0x80A7B7C4 = D_80A7B7C4; // type:f32 size:0x4
0x80A7B7C8 = D_80A7B7C8; // type:f32 size:0x4
0x80A7B7CC = D_80A7B7CC; // type:f32 size:0x4
0x80A7B7D0 = D_80A7B7D0; // type:f32 size:0x4
0x80A7B7D4 = D_80A7B7D4; // type:f32 size:0x4
0x80A7B7D8 = D_80A7B7D8; // type:f32 size:0x4
0x80A7B7DC = D_80A7B7DC; // type:f32 size:0x4
0x80A7B7E0 = D_80A7B7E0; // type:f32 size:0x4
0x80A7B7E4 = D_80A7B7E4; // type:f32 size:0x4
0x80A7B7E8 = D_80A7B7E8; // type:f32 size:0x4
0x80A7B7EC = D_80A7B7EC; // type:f32 size:0x4
0x80A7B7F0 = D_80A7B7F0; // type:f32 size:0x4
0x80A7B7F4 = jtbl_80A7B7F4; // type:UNK_PTR size:0x4
0x80A7B80C = D_80A7B80C; // type:f32 size:0x4
0x80A7B810 = jtbl_80A7B810; // type:UNK_PTR size:0x4
0x80A7B834 = D_80A7B834; // type:f32 size:0x4
0x80A7B838 = D_80A7B838; // type:f32 size:0x4
0x80A7C770 = Obj_Etcetera_InitVars; // type:UNK_TYPE1 size:0x1
0x80A7C790 = D_80A7C790; // type:UNK_TYPE1 size:0x1
0x80A7C7BC = D_80A7C7BC; // type:UNK_TYPE2 size:0x2
0x80A7C7C4 = D_80A7C7C4; // type:f32 size:0x4
0x80A7C80C = D_80A7C80C; // type:UNK_TYPE4 size:0x4
0x80A7C820 = D_80A7C820; // type:f32 size:0x4
0x80A7C824 = D_80A7C824; // type:f32 size:0x4
0x80A7C828 = D_80A7C828; // type:f32 size:0x4
0x80A7C82C = D_80A7C82C; // type:f32 size:0x4
0x80A7C830 = D_80A7C830; // type:f32 size:0x4
0x80A7C834 = D_80A7C834; // type:f32 size:0x4
0x80A7C838 = D_80A7C838; // type:f32 size:0x4
0x80A7C83C = D_80A7C83C; // type:f32 size:0x4
0x80A7C840 = D_80A7C840; // type:f32 size:0x4
0x80A7C844 = D_80A7C844; // type:f32 size:0x4
0x80A7C848 = D_80A7C848; // type:f32 size:0x4
0x80A7C84C = D_80A7C84C; // type:f32 size:0x4
0x80A7C850 = D_80A7C850; // type:f32 size:0x4
0x80A7C854 = D_80A7C854; // type:f32 size:0x4
0x80A80C40 = D_80A80C40; // type:UNK_TYPE1 size:0x1
0x80A80C64 = D_80A80C64; // type:UNK_TYPE1 size:0x1
0x80A80D3C = D_80A80D3C; // type:UNK_TYPE1 size:0x1
0x80A80D4C = D_80A80D4C; // type:UNK_TYPE1 size:0x1
0x80A80D5C = D_80A80D5C; // type:UNK_TYPE1 size:0x1
0x80A80DAC = D_80A80DAC; // type:UNK_TYPE1 size:0x1
0x80A80DCC = D_80A80DCC; // type:UNK_TYPE1 size:0x1
0x80A80DD8 = D_80A80DD8; // type:UNK_TYPE1 size:0x1
0x80A80DE4 = D_80A80DE4; // type:UNK_TYPE1 size:0x1
0x80A80DEA = D_80A80DEA; // type:UNK_TYPE1 size:0x1
0x80A80DEC = En_Egol_InitVars; // type:UNK_TYPE1 size:0x1
0x80A80E0C = D_80A80E0C; // type:UNK_TYPE1 size:0x1
0x80A80E48 = D_80A80E48; // type:UNK_TYPE1 size:0x1
0x80A80E58 = D_80A80E58; // type:UNK_TYPE1 size:0x1
0x80A80E60 = D_80A80E60; // type:UNK_TYPE4 size:0x4
0x80A80E6C = D_80A80E6C; // type:UNK_TYPE4 size:0x4
0x80A80E78 = D_80A80E78; // type:UNK_TYPE4 size:0x4
0x80A80E90 = D_80A80E90; // type:f32 size:0x4
0x80A80E94 = D_80A80E94; // type:f32 size:0x4
0x80A80E98 = D_80A80E98; // type:f32 size:0x4
0x80A80E9C = D_80A80E9C; // type:f32 size:0x4
0x80A80EA0 = D_80A80EA0; // type:f32 size:0x4
0x80A80EA4 = D_80A80EA4; // type:f32 size:0x4
0x80A80EA8 = D_80A80EA8; // type:f32 size:0x4
0x80A80EAC = D_80A80EAC; // type:f32 size:0x4
0x80A80EB0 = D_80A80EB0; // type:f32 size:0x4
0x80A80EB4 = D_80A80EB4; // type:f32 size:0x4
0x80A80EB8 = D_80A80EB8; // type:f32 size:0x4
0x80A80EBC = D_80A80EBC; // type:f32 size:0x4
0x80A80EC0 = D_80A80EC0; // type:f32 size:0x4
0x80A80EC4 = D_80A80EC4; // type:f32 size:0x4
0x80A80EC8 = D_80A80EC8; // type:f32 size:0x4
0x80A80ECC = D_80A80ECC; // type:f32 size:0x4
0x80A80ED0 = D_80A80ED0; // type:f32 size:0x4
0x80A80ED4 = D_80A80ED4; // type:f32 size:0x4
0x80A80ED8 = D_80A80ED8; // type:f32 size:0x4
0x80A80EDC = D_80A80EDC; // type:f32 size:0x4
0x80A80EE0 = D_80A80EE0; // type:f32 size:0x4
0x80A80EE4 = D_80A80EE4; // type:f32 size:0x4
0x80A84550 = Obj_Mine_InitVars; // type:UNK_TYPE1 size:0x1
0x80A84570 = D_80A84570; // type:UNK_TYPE1 size:0x1
0x80A84594 = D_80A84594; // type:UNK_TYPE1 size:0x1
0x80A845A4 = D_80A845A4; // type:f32 size:0x4
0x80A845C4 = D_80A845C4; // type:UNK_TYPE1 size:0x1
0x80A845D0 = D_80A845D0; // type:UNK_TYPE1 size:0x1
0x80A845E8 = D_80A845E8; // type:UNK_TYPE1 size:0x1
0x80A84600 = D_80A84600; // type:f32 size:0x4
0x80A84604 = D_80A84604; // type:f32 size:0x4
0x80A84608 = D_80A84608; // type:f32 size:0x4
0x80A8460C = D_80A8460C; // type:f32 size:0x4
0x80A84610 = D_80A84610; // type:f32 size:0x4
0x80A84614 = D_80A84614; // type:f32 size:0x4
0x80A84618 = D_80A84618; // type:f32 size:0x4
0x80A8461C = D_80A8461C; // type:f32 size:0x4
0x80A84620 = D_80A84620; // type:f32 size:0x4
0x80A84624 = D_80A84624; // type:f32 size:0x4
0x80A84628 = D_80A84628; // type:f32 size:0x4
0x80A8462C = D_80A8462C; // type:f32 size:0x4
0x80A84630 = D_80A84630; // type:f32 size:0x4
0x80A84634 = D_80A84634; // type:f32 size:0x4
0x80A84638 = D_80A84638; // type:f32 size:0x4
0x80A8463C = D_80A8463C; // type:f32 size:0x4
0x80A84640 = D_80A84640; // type:f32 size:0x4
0x80A84644 = D_80A84644; // type:f32 size:0x4
0x80A84648 = D_80A84648; // type:f32 size:0x4
0x80A8464C = D_80A8464C; // type:f32 size:0x4
0x80A84650 = D_80A84650; // type:f32 size:0x4
0x80A84654 = D_80A84654; // type:f32 size:0x4
0x80A84658 = D_80A84658; // type:f32 size:0x4
0x80A8465C = D_80A8465C; // type:f32 size:0x4
0x80A84660 = D_80A84660; // type:f32 size:0x4
0x80A84664 = D_80A84664; // type:f32 size:0x4
0x80A84668 = D_80A84668; // type:f32 size:0x4
0x80A8466C = D_80A8466C; // type:f32 size:0x4
0x80A84670 = D_80A84670; // type:f32 size:0x4
0x80A84674 = D_80A84674; // type:f32 size:0x4
0x80A84678 = D_80A84678; // type:f32 size:0x4
0x80A8467C = D_80A8467C; // type:f32 size:0x4
0x80A84680 = D_80A84680; // type:f32 size:0x4
0x80A84684 = D_80A84684; // type:f32 size:0x4
0x80A84688 = D_80A84688; // type:f32 size:0x4
0x80A8468C = D_80A8468C; // type:f32 size:0x4
0x80A84690 = D_80A84690; // type:f32 size:0x4
0x80A84694 = D_80A84694; // type:f32 size:0x4
0x80A84698 = D_80A84698; // type:f32 size:0x4
0x80A8469C = D_80A8469C; // type:f32 size:0x4
0x80A846A0 = D_80A846A0; // type:f32 size:0x4
0x80A849D0 = D_80A849D0; // type:UNK_TYPE4 size:0x4
0x80A85460 = Obj_Purify_InitVars; // type:UNK_TYPE1 size:0x1
0x80A85480 = ObjPurifyInfoList; // type:UNK_TYPE1 size:0x1
0x80A854A0 = D_80A854A0; // type:UNK_TYPE1 size:0x1
0x80A88910 = D_80A88910; // type:UNK_TYPE1 size:0x1
0x80A88918 = D_80A88918; // type:UNK_TYPE1 size:0x1
0x80A88924 = D_80A88924; // type:UNK_TYPE1 size:0x1
0x80A8892C = D_80A8892C; // type:UNK_TYPE1 size:0x1
0x80A88984 = D_80A88984; // type:UNK_TYPE1 size:0x1
0x80A889A4 = D_80A889A4; // type:UNK_TYPE1 size:0x1
0x80A889B0 = En_Tru_InitVars; // type:UNK_TYPE1 size:0x1
0x80A889D0 = D_80A889D0; // type:UNK_TYPE1 size:0x1
0x80A88DD0 = D_80A88DD0; // type:UNK_TYPE1 size:0x1
0x80A88FD0 = D_80A88FD0; // type:UNK_TYPE1 size:0x1
0x80A89000 = D_80A89000; // type:UNK_TYPE1 size:0x1
0x80A890A8 = D_80A890A8; // type:UNK_TYPE1 size:0x1
0x80A890C8 = D_80A890C8; // type:UNK_TYPE1 size:0x1
0x80A8A0C8 = D_80A8A0C8; // type:UNK_TYPE1 size:0x1
0x80A8A108 = D_80A8A108; // type:UNK_TYPE1 size:0x1
0x80A8A188 = D_80A8A188; // type:UNK_TYPE1 size:0x1
0x80A8B188 = D_80A8B188; // type:UNK_TYPE1 size:0x1
0x80A8B250 = D_80A8B250; // type:UNK_TYPE4 size:0x4
0x80A8B25C = D_80A8B25C; // type:Color_RGBA8 size:0x18
0x80A8B280 = sDustTextures; // type:UNK_TYPE1 size:0x1
0x80A8B2A0 = D_80A8B2A0; // type:UNK_TYPE1 size:0x1
0x80A8B2CC = D_80A8B2CC; // type:UNK_TYPE1 size:0x1
0x80A8B2D8 = sAnimationInfo; // type:UNK_TYPE1 size:0x1
0x80A8B3D8 = D_80A8B3D8; // type:UNK_TYPE1 size:0x1
0x80A8B3E4 = D_80A8B3E4; // type:UNK_TYPE1 size:0x1
0x80A8B3F0 = D_80A8B3F0; // type:UNK_TYPE1 size:0x1
0x80A8B3FC = D_80A8B3FC; // type:UNK_TYPE1 size:0x1
0x80A8B408 = D_80A8B408; // type:UNK_TYPE1 size:0x1
0x80A8B420 = D_80A8B420; // type:f32 size:0x4
0x80A8B424 = D_80A8B424; // type:f32 size:0x4
0x80A8B428 = D_80A8B428; // type:f32 size:0x4
0x80A8B42C = D_80A8B42C; // type:f32 size:0x4
0x80A8B430 = D_80A8B430; // type:f32 size:0x4
0x80A8B434 = D_80A8B434; // type:f32 size:0x4
0x80A8B438 = D_80A8B438; // type:f32 size:0x4
0x80A8B43C = D_80A8B43C; // type:f32 size:0x4
0x80A8B440 = jtbl_D_80A8B440; // type:UNK_PTR size:0x4
0x80A8B478 = jtbl_D_80A8B478; // type:UNK_PTR size:0x4
0x80A8B48C = jtbl_D_80A8B48C; // type:UNK_PTR size:0x4
0x80A8FE10 = sAnimations; // type:UNK_TYPE1 size:0x1
0x80A8FEB0 = En_Trt_InitVars; // type:UNK_TYPE1 size:0x1
0x80A8FED0 = sActorScale; // type:UNK_TYPE4 size:0x4
0x80A8FED4 = sShop; // type:UNK_TYPE1 size:0x1
0x80A8FEEC = sSelectedItemPosition; // type:f32 size:0x4
0x80A8FEF0 = D_80A8FEF0; // type:f32 size:0x4
0x80A8FEF4 = D_80A8FEF4; // type:f32 size:0x4
0x80A8FEF8 = sInitChain; // type:UNK_TYPE1 size:0x1
0x80A8FEFC = sEyeTextures; // type:UNK_TYPE1 size:0x1
0x80A8FF10 = filename1; // type:char size:0x1
0x80A8FF20 = filename2; // type:char size:0x1
0x80A8FF30 = D_80A8FF30; // type:f32 size:0x4
0x80A8FF34 = jtbl_80A8FF34; // type:UNK_PTR size:0x4
0x80A8FF4C = D_80A8FF4C; // type:f32 size:0x4
0x80A8FF50 = D_80A8FF50; // type:f32 size:0x4
0x80A8FF54 = D_80A8FF54; // type:f32 size:0x4
0x80A8FF58 = D_80A8FF58; // type:f32 size:0x4
0x80A8FF5C = D_80A8FF5C; // type:f32 size:0x4
0x80A8FF60 = D_80A8FF60; // type:f32 size:0x4
0x80A8FF64 = D_80A8FF64; // type:f32 size:0x4
0x80A8FF68 = D_80A8FF68; // type:f32 size:0x4
0x80A8FF6C = D_80A8FF6C; // type:f32 size:0x4
0x80A906E0 = En_Test5_InitVars; // type:UNK_TYPE1 size:0x1
0x80A93E60 = En_Test6_InitVars; // type:UNK_TYPE1 size:0x1
0x80A93E80 = D_80A93E80; // type:UNK_TYPE1 size:0x1
0x80A9402C = D_80A9402C; // type:UNK_TYPE1 size:0x1
0x80A94048 = D_80A94048; // type:UNK_TYPE1 size:0x1
0x80A9404C = D_80A9404C; // type:UNK_TYPE1 size:0x1
0x80A94050 = D_80A94050; // type:UNK_TYPE1 size:0x1
0x80A94054 = D_80A94054; // type:UNK_TYPE2 size:0x2
0x80A94058 = D_80A94058; // type:UNK_TYPE2 size:0x2
0x80A9405C = D_80A9405C; // type:UNK_TYPE1 size:0x1
0x80A94068 = D_80A94068; // type:UNK_TYPE1 size:0x1
0x80A9406C = D_80A9406C; // type:UNK_TYPE1 size:0x1
0x80A94070 = D_80A94070; // type:UNK_TYPE1 size:0x1
0x80A94074 = D_80A94074; // type:UNK_TYPE2 size:0x2
0x80A94078 = D_80A94078; // type:UNK_TYPE2 size:0x2
0x80A94080 = D_80A94080; // type:f32 size:0x4
0x80A94084 = D_80A94084; // type:f32 size:0x4
0x80A94088 = D_80A94088; // type:f32 size:0x4
0x80A9408C = D_80A9408C; // type:f32 size:0x4
0x80A94090 = D_80A94090; // type:f32 size:0x4
0x80A94094 = D_80A94094; // type:f32 size:0x4
0x80A94098 = D_80A94098; // type:f32 size:0x4
0x80A9409C = D_80A9409C; // type:f32 size:0x4
0x80A940A0 = D_80A940A0; // type:f32 size:0x4
0x80A940A4 = D_80A940A4; // type:f32 size:0x4
0x80A940A8 = D_80A940A8; // type:f32 size:0x4
0x80A940AC = D_80A940AC; // type:f32 size:0x4
0x80A940B0 = jtbl_80A940B0; // type:UNK_PTR size:0x4
0x80A941E0 = jtbl_80A941E0; // type:UNK_PTR size:0x4
0x80A942BC = D_80A942BC; // type:f32 size:0x4
0x80A942C0 = D_80A942C0; // type:f32 size:0x4
0x80A942C4 = jtbl_80A942C4; // type:UNK_PTR size:0x4
0x80A942EC = D_80A942EC; // type:f32 size:0x4
0x80A942F0 = D_80A942F0; // type:f32 size:0x4
0x80A942F4 = jtbl_80A942F4; // type:UNK_PTR size:0x4
0x80A9431C = D_80A9431C; // type:f32 size:0x4
0x80A94320 = D_80A94320; // type:f32 size:0x4
0x80A94324 = D_80A94324; // type:f32 size:0x4
0x80A94328 = D_80A94328; // type:f32 size:0x4
0x80A9432C = D_80A9432C; // type:f32 size:0x4
0x80A94330 = D_80A94330; // type:f32 size:0x4
0x80A94334 = D_80A94334; // type:f32 size:0x4
0x80A94338 = jtbl_80A94338; // type:UNK_PTR size:0x4
0x80A94360 = D_80A94360; // type:f32 size:0x4
0x80A94364 = D_80A94364; // type:f32 size:0x4
0x80A94910 = D_80A94910; // type:UNK_TYPE4 size:0x4
0x80A99010 = D_80A99010; // type:UNK_TYPE4 size:0x4
0x80A990F0 = En_Az_InitVars; // type:UNK_TYPE1 size:0x1
0x80A99110 = D_80A99110; // type:UNK_TYPE1 size:0x1
0x80A9913C = D_80A9913C; // type:UNK_TYPE4 size:0x4
0x80A99140 = D_80A99140; // type:UNK_TYPE1 size:0x1
0x80A9914C = D_80A9914C; // type:UNK_TYPE1 size:0x1
0x80A9915C = D_80A9915C; // type:UNK_TYPE1 size:0x1
0x80A9916C = D_80A9916C; // type:UNK_TYPE4 size:0x4
0x80A99180 = D_80A99180; // type:UNK_TYPE4 size:0x4
0x80A99194 = D_80A99194; // type:UNK_TYPE1 size:0x1
0x80A9919C = D_80A9919C; // type:UNK_TYPE1 size:0x1
0x80A991A4 = D_80A991A4; // type:UNK_TYPE1 size:0x1
0x80A9930C = D_80A9930C; // type:UNK_TYPE1 size:0x1
0x80A993AC = D_80A993AC; // type:UNK_TYPE1 size:0x1
0x80A993D0 = D_80A993D0; // type:UNK_TYPE1 size:0x1
0x80A993F4 = sYoungerBrotherEyeTextures; // type:UNK_TYPE1 size:0x1
0x80A99404 = sYoungerBrotherBeltTextures; // type:UNK_TYPE1 size:0x1
0x80A99410 = D_80A99410; // type:UNK_TYPE1 size:0x1
0x80A9941C = D_80A9941C; // type:UNK_TYPE1 size:0x1
0x80A99428 = D_80A99428; // type:UNK_TYPE1 size:0x1
0x80A99440 = jtbl_80A99440; // type:UNK_PTR size:0x4
0x80A9945C = D_80A9945C; // type:f32 size:0x4
0x80A99460 = D_80A99460; // type:f32 size:0x4
0x80A99464 = D_80A99464; // type:f32 size:0x4
0x80A99468 = D_80A99468; // type:f32 size:0x4
0x80A9946C = jtbl_80A9946C; // type:UNK_PTR size:0x4
0x80A99488 = jtbl_80A99488; // type:UNK_PTR size:0x4
0x80A99578 = jtbl_80A99578; // type:UNK_PTR size:0x4
0x80A99638 = jtbl_80A99638; // type:UNK_PTR size:0x4
0x80A99660 = D_80A99660; // type:f32 size:0x4
0x80A99664 = D_80A99664; // type:f32 size:0x4
0x80A99668 = jtbl_80A99668; // type:UNK_PTR size:0x4
0x80A99684 = D_80A99684; // type:f32 size:0x4
0x80A99688 = D_80A99688; // type:f32 size:0x4
0x80A9968C = D_80A9968C; // type:f32 size:0x4
0x80A99690 = D_80A99690; // type:f32 size:0x4
0x80A99694 = D_80A99694; // type:f32 size:0x4
0x80A99698 = D_80A99698; // type:f32 size:0x4
0x80A9969C = D_80A9969C; // type:f32 size:0x4
0x80A996A0 = D_80A996A0; // type:f32 size:0x4
0x80A996A4 = D_80A996A4; // type:f32 size:0x4
0x80A996A8 = D_80A996A8; // type:f32 size:0x4
0x80A99E80 = D_80A99E80; // type:UNK_TYPE1 size:0x1
0x80A99E8C = D_80A99E8C; // type:f32 size:0x4
0x80A99E90 = D_80A99E90; // type:f32 size:0x4
0x80A9AB50 = En_Estone_InitVars; // type:UNK_TYPE1 size:0x1
0x80A9AB70 = D_80A9AB70; // type:UNK_TYPE1 size:0x1
0x80A9ABA0 = D_80A9ABA0; // type:f32 size:0x4
0x80A9ABA4 = D_80A9ABA4; // type:f32 size:0x4
0x80A9ABA8 = D_80A9ABA8; // type:f32 size:0x4
0x80A9ABAC = D_80A9ABAC; // type:f32 size:0x4
0x80A9ABB0 = D_80A9ABB0; // type:f32 size:0x4
0x80A9ABB4 = D_80A9ABB4; // type:f32 size:0x4
0x80A9ABB8 = D_80A9ABB8; // type:f32 size:0x4
0x80A9ABBC = D_80A9ABBC; // type:f32 size:0x4
0x80A9ABC0 = D_80A9ABC0; // type:f32 size:0x4
0x80A9ABC4 = D_80A9ABC4; // type:f32 size:0x4
0x80A9ABC8 = D_80A9ABC8; // type:f32 size:0x4
0x80A9ABCC = D_80A9ABCC; // type:f32 size:0x4
0x80A9ABD0 = D_80A9ABD0; // type:f32 size:0x4
0x80A9ABD4 = D_80A9ABD4; // type:f32 size:0x4
0x80A9ABD8 = D_80A9ABD8; // type:f32 size:0x4
0x80A9ABDC = D_80A9ABDC; // type:f32 size:0x4
0x80A9ABE0 = D_80A9ABE0; // type:f32 size:0x4
0x80A9D860 = Bg_Hakugin_Post_InitVars; // type:UNK_TYPE1 size:0x1
0x80A9D880 = D_80A9D880; // type:f32 size:0x4
0x80A9D884 = D_80A9D884; // type:UNK_TYPE1 size:0x1
0x80A9D8B8 = D_80A9D8B8; // type:UNK_TYPE1 size:0x1
0x80A9D8E4 = D_80A9D8E4; // type:UNK_TYPE1 size:0x1
0x80A9D8E8 = D_80A9D8E8; // type:UNK_TYPE1 size:0x1
0x80A9D8EC = D_80A9D8EC; // type:UNK_TYPE1 size:0x1
0x80A9D8F8 = D_80A9D8F8; // type:UNK_TYPE1 size:0x1
0x80A9D8FC = D_80A9D8FC; // type:UNK_TYPE4 size:0x4
0x80A9D900 = D_80A9D900; // type:UNK_TYPE1 size:0x1
0x80A9D91C = D_80A9D91C; // type:UNK_TYPE1 size:0x1
0x80A9D930 = D_80A9D930; // type:f32 size:0x4
0x80A9D934 = D_80A9D934; // type:f32 size:0x4
0x80A9D938 = D_80A9D938; // type:f32 size:0x4
0x80A9D93C = D_80A9D93C; // type:f32 size:0x4
0x80A9D940 = D_80A9D940; // type:f32 size:0x4
0x80A9D944 = D_80A9D944; // type:f32 size:0x4
0x80A9D948 = D_80A9D948; // type:f32 size:0x4
0x80A9D94C = D_80A9D94C; // type:f32 size:0x4
0x80A9D950 = D_80A9D950; // type:f32 size:0x4
0x80A9D954 = D_80A9D954; // type:f32 size:0x4
0x80A9D958 = D_80A9D958; // type:f32 size:0x4
0x80A9D95C = D_80A9D95C; // type:f32 size:0x4
0x80A9D960 = D_80A9D960; // type:f32 size:0x4
0x80A9D964 = D_80A9D964; // type:f32 size:0x4
0x80A9D968 = D_80A9D968; // type:f32 size:0x4
0x80A9D96C = D_80A9D96C; // type:f32 size:0x4
0x80A9D970 = D_80A9D970; // type:f32 size:0x4
0x80A9D974 = D_80A9D974; // type:f32 size:0x4
0x80A9D978 = D_80A9D978; // type:f32 size:0x4
0x80A9D97C = D_80A9D97C; // type:f32 size:0x4
0x80A9D980 = D_80A9D980; // type:f32 size:0x4
0x80A9D984 = D_80A9D984; // type:f32 size:0x4
0x80A9D988 = D_80A9D988; // type:f32 size:0x4
0x80A9D98C = D_80A9D98C; // type:f32 size:0x4
0x80A9D990 = D_80A9D990; // type:f32 size:0x4
0x80A9D994 = D_80A9D994; // type:f32 size:0x4
0x80A9D998 = D_80A9D998; // type:f32 size:0x4
0x80A9D99C = D_80A9D99C; // type:f32 size:0x4
0x80A9D9A0 = D_80A9D9A0; // type:f32 size:0x4
0x80A9D9A4 = D_80A9D9A4; // type:f32 size:0x4
0x80A9D9A8 = D_80A9D9A8; // type:f32 size:0x4
0x80A9D9AC = D_80A9D9AC; // type:f32 size:0x4
0x80A9D9B0 = D_80A9D9B0; // type:f32 size:0x4
0x80A9D9B4 = D_80A9D9B4; // type:f32 size:0x4
0x80A9D9B8 = D_80A9D9B8; // type:f32 size:0x4
0x80A9D9BC = D_80A9D9BC; // type:f32 size:0x4
0x80A9DDC0 = D_80A9DDC0; // type:UNK_TYPE1 size:0x1
0x80A9E028 = D_80A9E028; // type:UNK_TYPE4 size:0x4
0x80A9E030 = D_80A9E030; // type:UNK_TYPE4 size:0x4
0x80A9E2C8 = D_80A9E2C8; // type:UNK_TYPE4 size:0x4
0x80A9F6A8 = D_80A9F6A8; // type:UNK_TYPE1 size:0x1
0x80A9F94C = D_80A9F94C; // type:UNK_TYPE1 size:0x1
0x80A9FD10 = Dm_Opstage_InitVars; // type:UNK_TYPE1 size:0x1
0x80A9FD30 = D_80A9FD30; // type:UNK_TYPE1 size:0x1
0x80A9FD40 = D_80A9FD40; // type:f32 size:0x4
0x80A9FD44 = D_80A9FD44; // type:f32 size:0x4
0x80A9FD48 = D_80A9FD48; // type:f32 size:0x4
0x80A9FD4C = D_80A9FD4C; // type:f32 size:0x4
0x80AA3580 = Dm_Stk_InitVars; // type:UNK_TYPE1 size:0x1
0x80AA35A0 = D_80AA35A0; // type:UNK_TYPE1 size:0x1
0x80AA35CC = D_80AA35CC; // type:UNK_PTR size:0x4
0x80AA35D8 = D_80AA35D8; // type:UNK_TYPE1 size:0x1
0x80AA35F8 = D_80AA35F8; // type:UNK_TYPE1 size:0x1
0x80AA3CB8 = D_80AA3CB8; // type:UNK_TYPE4 size:0x4
0x80AA3CBC = D_80AA3CBC; // type:UNK_TYPE4 size:0x4
0x80AA3CC0 = jtbl_80AA3CC0; // type:UNK_PTR size:0x4
0x80AA4124 = jtbl_80AA4124; // type:UNK_PTR size:0x4
0x80AA418C = jtbl_80AA418C; // type:UNK_PTR size:0x4
0x80AA4450 = jtbl_80AA4450; // type:UNK_PTR size:0x4
0x80AA44A8 = jtbl_80AA44A8; // type:UNK_PTR size:0x4
0x80AA454C = D_80AA454C; // type:f32 size:0x4
0x80AA4550 = D_80AA4550; // type:f32 size:0x4
0x80AA4554 = D_80AA4554; // type:f32 size:0x4
0x80AA4558 = D_80AA4558; // type:f32 size:0x4
0x80AA455C = D_80AA455C; // type:f32 size:0x4
0x80AA4560 = jtbl_80AA4560; // type:UNK_PTR size:0x4
0x80AA4654 = D_80AA4654; // type:f32 size:0x4
0x80AA4658 = D_80AA4658; // type:f32 size:0x4
0x80AA465C = D_80AA465C; // type:f32 size:0x4
0x80AA4660 = jtbl_80AA4660; // type:UNK_PTR size:0x4
0x80AA4774 = D_80AA4774; // type:f32 size:0x4
0x80AA4778 = jtbl_80AA4778; // type:UNK_PTR size:0x4
0x80AA479C = jtbl_80AA479C; // type:UNK_PTR size:0x4
0x80AA6F90 = Dm_Char00_InitVars; // type:UNK_TYPE1 size:0x1
0x80AA6FB0 = D_80AA6FB0; // type:UNK_TYPE1 size:0x1
0x80AA77A8 = D_80AA77A8; // type:UNK_TYPE1 size:0x1
0x80AA77D8 = D_80AA77D8; // type:UNK_TYPE1 size:0x1
0x80AA7808 = D_80AA7808; // type:UNK_TYPE1 size:0x1
0x80AA7820 = jtbl_80AA7820; // type:UNK_PTR size:0x4
0x80AA78EC = jtbl_80AA78EC; // type:UNK_PTR size:0x4
0x80AA79A8 = jtbl_80AA79A8; // type:UNK_PTR size:0x4
0x80AA79FC = D_80AA79FC; // type:f32 size:0x4
0x80AA7A00 = jtbl_80AA7A00; // type:UNK_PTR size:0x4
0x80AA7AE0 = jtbl_80AA7AE0; // type:UNK_PTR size:0x4
0x80AA7C20 = D_80AA7C20; // type:f32 size:0x4
0x80AA7C24 = D_80AA7C24; // type:f32 size:0x4
0x80AA7C28 = D_80AA7C28; // type:f32 size:0x4
0x80AA7C2C = D_80AA7C2C; // type:f32 size:0x4
0x80AA7C30 = D_80AA7C30; // type:f32 size:0x4
0x80AA7C34 = D_80AA7C34; // type:f32 size:0x4
0x80AA7C38 = D_80AA7C38; // type:f32 size:0x4
0x80AA7C3C = D_80AA7C3C; // type:f32 size:0x4
0x80AA7C40 = D_80AA7C40; // type:f32 size:0x4
0x80AA7C44 = D_80AA7C44; // type:f32 size:0x4
0x80AA9DC0 = D_80AA9DC0; // type:UNK_TYPE2 size:0x2
0x80AA9DC2 = D_80AA9DC2; // type:UNK_TYPE2 size:0x2
0x80AA9DD0 = D_80AA9DD0; // type:UNK_TYPE2 size:0x2
0x80AAAA90 = Dm_Char01_InitVars; // type:UNK_TYPE1 size:0x1
0x80AAAAB0 = D_80AAAAB0; // type:UNK_TYPE1 size:0x1
0x80AAAAB4 = D_80AAAAB4; // type:UNK_TYPE2 size:0x2
0x80AAAAB8 = D_80AAAAB8; // type:f32 size:0x4
0x80AAAABC = D_80AAAABC; // type:f32 size:0x4
0x80AAAAC0 = D_80AAAAC0; // type:UNK_TYPE2 size:0x2
0x80AAAAC4 = D_80AAAAC4; // type:UNK_TYPE2 size:0x2
0x80AAAAC8 = D_80AAAAC8; // type:UNK_TYPE2 size:0x2
0x80AAAACC = D_80AAAACC; // type:UNK_TYPE2 size:0x2
0x80AAAAD0 = D_80AAAAD0; // type:f32 size:0x4
0x80AAAAD4 = D_80AAAAD4; // type:f32 size:0x4
0x80AAAAD8 = D_80AAAAD8; // type:f32 size:0x4
0x80AAAADC = D_80AAAADC; // type:f32 size:0x4
0x80AAAAE0 = D_80AAAAE0; // type:f32 size:0x4
0x80AAAAE4 = D_80AAAAE4; // type:f32 size:0x4
0x80AAAAE8 = D_80AAAAE8; // type:f32 size:0x4
0x80AAAAEC = D_80AAAAEC; // type:f32 size:0x4
0x80AAAAF0 = D_80AAAAF0; // type:f32 size:0x4
0x80AAAAF4 = D_80AAAAF4; // type:f32 size:0x4
0x80AAAAF8 = D_80AAAAF8; // type:f32 size:0x4
0x80AAAE20 = D_80AAAE20; // type:UNK_TYPE1 size:0x1
0x80AAAE22 = D_80AAAE22; // type:UNK_TYPE1 size:0x1
0x80AAAE24 = D_80AAAE24; // type:UNK_TYPE1 size:0x1
0x80AAAE26 = D_80AAAE26; // type:UNK_TYPE1 size:0x1
0x80AAB390 = Dm_Char02_InitVars; // type:UNK_TYPE1 size:0x1
0x80AAB3B0 = D_80AAB3B0; // type:UNK_TYPE1 size:0x1
0x80AAB410 = D_80AAB410; // type:f32 size:0x4
0x80AABB60 = Dm_Char03_InitVars; // type:UNK_TYPE1 size:0x1
0x80AABB80 = D_80AABB80; // type:UNK_TYPE1 size:0x1
0x80AABBA0 = D_80AABBA0; // type:f32 size:0x4
0x80AABBA4 = D_80AABBA4; // type:f32 size:0x4
0x80AAC440 = Dm_Char04_InitVars; // type:UNK_TYPE1 size:0x1
0x80AAC460 = D_80AAC460; // type:UNK_TYPE1 size:0x1
0x80AAC490 = D_80AAC490; // type:UNK_TYPE1 size:0x1
0x80AAC4C0 = D_80AAC4C0; // type:UNK_TYPE1 size:0x1
0x80AAC4F0 = D_80AAC4F0; // type:UNK_TYPE1 size:0x1
0x80AAC500 = D_80AAC500; // type:f32 size:0x4
0x80AAC504 = D_80AAC504; // type:f32 size:0x4
0x80AAC508 = D_80AAC508; // type:f32 size:0x4
0x80AAC50C = D_80AAC50C; // type:f32 size:0x4
0x80AAE240 = Dm_Char05_InitVars; // type:UNK_TYPE1 size:0x1
0x80AAE260 = D_80AAE260; // type:UNK_TYPE1 size:0x1
0x80AAE278 = D_80AAE278; // type:UNK_TYPE1 size:0x1
0x80AAE2A8 = D_80AAE2A8; // type:UNK_PTR size:0x4
0x80AAE2C0 = D_80AAE2C0; // type:UNK_TYPE1 size:0x1
0x80AAE2F0 = D_80AAE2F0; // type:UNK_TYPE1 size:0x1
0x80AAE300 = D_80AAE300; // type:UNK_TYPE4 size:0x4
0x80AAE310 = jtbl_80AAE310; // type:UNK_PTR size:0x4
0x80AAE344 = jtbl_80AAE344; // type:UNK_PTR size:0x4
0x80AAE358 = jtbl_80AAE358; // type:UNK_PTR size:0x4
0x80AAE36C = jtbl_80AAE36C; // type:UNK_PTR size:0x4
0x80AAE380 = jtbl_80AAE380; // type:UNK_PTR size:0x4
0x80AAE3B4 = D_80AAE3B4; // type:f32 size:0x4
0x80AAE3B8 = D_80AAE3B8; // type:f32 size:0x4
0x80AAE3BC = D_80AAE3BC; // type:f32 size:0x4
0x80AAE3C0 = D_80AAE3C0; // type:f32 size:0x4
0x80AAE3C4 = D_80AAE3C4; // type:f32 size:0x4
0x80AAE960 = Dm_Char06_InitVars; // type:UNK_TYPE1 size:0x1
0x80AAEFF0 = Dm_Char07_InitVars; // type:UNK_TYPE1 size:0x1
0x80AB1370 = Dm_Char08_InitVars; // type:UNK_TYPE1 size:0x1
0x80AB1390 = D_80AB1390; // type:CamData size:0x8
0x80AB1398 = D_80AB1398; // type:SurfaceType size:0x8
0x80AB13A0 = D_80AB13A0; // type:CollisionPoly size:0xCC
0x80AB14D0 = sTurtleGreatBayTempleColPolygons2; // type:CollisionPoly[] size:0xCC
0x80AB1600 = D_80AB1600; // type:Vec3s[] size:0x48
0x80AB1648 = D_80AB1648; // type:Vec3s[] size:0x48
0x80AB1690 = sTurtleGreatBayTempleCol; // type:CollisionHeader size:0x2C
0x80AB16A8 = D_80AB16A8; // type:UNK_PTR size:0x4
0x80AB16BC = sLargeTurtleAnimationInfo; // type:AnimationInfo[] size:0xE0
0x80AB1764 = sInitChain; // type:InitChainEntry size:0x1
0x80AB1770 = D_80AB1770; // type:s16 size:0x2
0x80AB1774 = sLargeTurtleBubblePrimColor; // type:Color_RGBA8 size:0x4
0x80AB1778 = sLargeTurtleBubbleEnvColor; // type:Color_RGBA8 size:0x4
0x80AB177C = sLargeTurtleBubbelAccel; // type:Vec3f size:0xC
0x80AB1788 = sLargeTurtleEyeTextures; // type:TexturePtr size:0x1
0x80AB17B0 = jtbl_80AB17B0; // type:UNK_PTR size:0x4
0x80AB17C8 = D_80AB17C8; // type:f32 size:0x4
0x80AB17CC = D_80AB17CC; // type:f32 size:0x4
0x80AB17D0 = D_80AB17D0; // type:f32 size:0x4
0x80AB17D4 = D_80AB17D4; // type:f32 size:0x4
0x80AB17D8 = D_80AB17D8; // type:f32 size:0x4
0x80AB17DC = D_80AB17DC; // type:f32 size:0x4
0x80AB17E0 = D_80AB17E0; // type:f32 size:0x4
0x80AB17E4 = D_80AB17E4; // type:f32 size:0x4
0x80AB17E8 = D_80AB17E8; // type:f32 size:0x4
0x80AB17EC = D_80AB17EC; // type:f32 size:0x4
0x80AB17F0 = D_80AB17F0; // type:f32 size:0x4
0x80AB17F4 = D_80AB17F4; // type:f32 size:0x4
0x80AB17F8 = D_80AB17F8; // type:f32 size:0x4
0x80AB17FC = jtbl_80AB17FC; // type:UNK_PTR size:0x4
0x80AB1834 = D_80AB1834; // type:f32 size:0x4
0x80AB1838 = jtbl_80AB1838; // type:UNK_PTR size:0x4
0x80AB1894 = jtbl_80AB1894; // type:UNK_PTR size:0x4
0x80AB18BC = jtbl_80AB18BC; // type:UNK_PTR size:0x4
0x80AB18D8 = jtbl_80AB18D8; // type:UNK_PTR size:0x4
0x80AB18F0 = jtbl_80AB18F0; // type:UNK_PTR size:0x4
0x80AB1904 = D_80AB1904; // type:f32 size:0x4
0x80AB1908 = D_80AB1908; // type:f32 size:0x4
0x80AB190C = D_80AB190C; // type:f32 size:0x4
0x80AB1910 = D_80AB1910; // type:f32 size:0x4
0x80AB1914 = D_80AB1914; // type:f32 size:0x4
0x80AB1918 = D_80AB1918; // type:f32 size:0x4
0x80AB191C = D_80AB191C; // type:f32 size:0x4
0x80AB1920 = jtbl_80AB1920; // type:UNK_PTR size:0x4
0x80AB1978 = D_80AB1978; // type:f32 size:0x4
0x80AB197C = D_80AB197C; // type:f32 size:0x4
0x80AB1980 = D_80AB1980; // type:f32 size:0x4
0x80AB1984 = D_80AB1984; // type:f32 size:0x4
0x80AB1988 = D_80AB1988; // type:f32 size:0x4
0x80AB198C = D_80AB198C; // type:f32 size:0x4
0x80AB1990 = D_80AB1990; // type:f32 size:0x4
0x80AB1994 = D_80AB1994; // type:f32 size:0x4
0x80AB1998 = D_80AB1998; // type:f32 size:0x4
0x80AB199C = D_80AB199C; // type:f32 size:0x4
0x80AB19A0 = D_80AB19A0; // type:f32 size:0x4
0x80AB2690 = Dm_Char09_InitVars; // type:UNK_TYPE1 size:0x1
0x80AB26B0 = D_80AB26B0; // type:UNK_PTR size:0x4
0x80AB26D0 = D_80AB26D0; // type:f32 size:0x4
0x80AB26D4 = D_80AB26D4; // type:f32 size:0x4
0x80AB26D8 = D_80AB26D8; // type:f32 size:0x4
0x80AB26DC = D_80AB26DC; // type:f32 size:0x4
0x80AB26E0 = D_80AB26E0; // type:f32 size:0x4
0x80AB26E4 = D_80AB26E4; // type:f32 size:0x4
0x80AB26E8 = D_80AB26E8; // type:f32 size:0x4
0x80AB49C0 = Obj_Tokeidai_InitVars; // type:UNK_TYPE1 size:0x1
0x80AB49E0 = D_80AB49E0; // type:UNK_TYPE1 size:0x1
0x80AB49F0 = D_80AB49F0; // type:f32 size:0x4
0x80AB49F4 = D_80AB49F4; // type:f32 size:0x4
0x80AB49F8 = D_80AB49F8; // type:f32 size:0x4
0x80AB49FC = D_80AB49FC; // type:f32 size:0x4
0x80AB4A00 = D_80AB4A00; // type:f32 size:0x4
0x80AB4A04 = D_80AB4A04; // type:f32 size:0x4
0x80AB4A08 = D_80AB4A08; // type:f32 size:0x4
0x80AB4A0C = D_80AB4A0C; // type:f32 size:0x4
0x80AB4A10 = D_80AB4A10; // type:f32 size:0x4
0x80AB4A14 = D_80AB4A14; // type:f32 size:0x4
0x80AB4A18 = jtbl_80AB4A18; // type:UNK_PTR size:0x4
0x80AB4A48 = D_80AB4A48; // type:f32 size:0x4
0x80AB4A4C = D_80AB4A4C; // type:f32 size:0x4
0x80AB4A50 = D_80AB4A50; // type:f32 size:0x4
0x80AB4A54 = D_80AB4A54; // type:f32 size:0x4
0x80AB4A58 = D_80AB4A58; // type:f32 size:0x4
0x80AB4A5C = D_80AB4A5C; // type:f32 size:0x4
0x80AB4A60 = D_80AB4A60; // type:f32 size:0x4
0x80AB4A64 = D_80AB4A64; // type:f32 size:0x4
0x80AB9CF0 = En_Mnk_InitVars; // type:UNK_TYPE1 size:0x1
0x80AB9D10 = D_80AB9D10; // type:UNK_TYPE1 size:0x1
0x80AB9D3C = D_80AB9D3C; // type:UNK_TYPE1 size:0x1
0x80AB9D60 = D_80AB9D60; // type:UNK_TYPE1 size:0x1
0x80AB9D84 = D_80AB9D84; // type:UNK_TYPE1 size:0x1
0x80AB9D90 = D_80AB9D90; // type:UNK_TYPE1 size:0x1
0x80AB9D9C = D_80AB9D9C; // type:UNK_TYPE1 size:0x1
0x80AB9DD8 = D_80AB9DD8; // type:UNK_TYPE1 size:0x1
0x80AB9DF4 = D_80AB9DF4; // type:UNK_TYPE1 size:0x1
0x80AB9DF8 = D_80AB9DF8; // type:UNK_TYPE1 size:0x1
0x80AB9DFC = D_80AB9DFC; // type:UNK_TYPE1 size:0x1
0x80AB9E08 = D_80AB9E08; // type:UNK_TYPE1 size:0x1
0x80AB9E30 = D_80AB9E30; // type:f32 size:0x4
0x80AB9E34 = D_80AB9E34; // type:f32 size:0x4
0x80AB9E38 = jtbl_80AB9E38; // type:UNK_PTR size:0x4
0x80AB9E60 = jtbl_80AB9E60; // type:UNK_PTR size:0x4
0x80AB9E8C = D_80AB9E8C; // type:f32 size:0x4
0x80AB9E90 = D_80AB9E90; // type:f32 size:0x4
0x80AB9E94 = jtbl_80AB9E94; // type:UNK_PTR size:0x4
0x80AB9EB4 = jtbl_80AB9EB4; // type:UNK_PTR size:0x4
0x80AB9EDC = jtbl_80AB9EDC; // type:UNK_PTR size:0x4
0x80AB9EFC = jtbl_80AB9EFC; // type:UNK_PTR size:0x4
0x80AB9F88 = jtbl_80AB9F88; // type:UNK_PTR size:0x4
0x80AB9F9C = D_80AB9F9C; // type:f32 size:0x4
0x80AB9FA0 = D_80AB9FA0; // type:f32 size:0x4
0x80AB9FA4 = D_80AB9FA4; // type:f32 size:0x4
0x80AB9FA8 = D_80AB9FA8; // type:f32 size:0x4
0x80AB9FAC = jtbl_80AB9FAC; // type:UNK_PTR size:0x4
0x80AB9FC0 = jtbl_80AB9FC0; // type:UNK_PTR size:0x4
0x80ABB040 = En_Egblock_InitVars; // type:UNK_TYPE1 size:0x1
0x80ABB060 = D_80ABB060; // type:f32 size:0x4
0x80ABB064 = D_80ABB064; // type:f32 size:0x4
0x80ABB068 = D_80ABB068; // type:f32 size:0x4
0x80ABB06C = D_80ABB06C; // type:f32 size:0x4
0x80ABBDD0 = En_Guard_Nuts_InitVars; // type:UNK_TYPE1 size:0x1
0x80ABBDF0 = D_80ABBDF0; // type:UNK_TYPE1 size:0x1
0x80ABBE1C = D_80ABBE1C; // type:UNK_TYPE4 size:0x4
0x80ABBE20 = D_80ABBE20; // type:UNK_TYPE4 size:0x4
0x80ABBE24 = D_80ABBE24; // type:UNK_TYPE1 size:0x1
0x80ABBE38 = D_80ABBE38; // type:UNK_TYPE1 size:0x1
0x80ABBE4C = D_80ABBE4C; // type:UNK_TYPE1 size:0x1
0x80ABBE5C = D_80ABBE5C; // type:UNK_TYPE1 size:0x1
0x80ABBE60 = D_80ABBE60; // type:UNK_TYPE1 size:0x1
0x80ABBE70 = D_80ABBE70; // type:f32 size:0x4
0x80ABBE74 = D_80ABBE74; // type:f32 size:0x4
0x80ABCF60 = Bg_Hakugin_Bombwall_InitVars; // type:UNK_TYPE1 size:0x1
0x80ABCF80 = D_80ABCF80; // type:UNK_TYPE1 size:0x1
0x80ABCFAC = D_80ABCFAC; // type:UNK_TYPE1 size:0x1
0x80ABCFB0 = D_80ABCFB0; // type:UNK_TYPE1 size:0x1
0x80ABCFB4 = D_80ABCFB4; // type:UNK_TYPE1 size:0x1
0x80ABCFC0 = D_80ABCFC0; // type:UNK_TYPE4 size:0x4
0x80ABCFC4 = D_80ABCFC4; // type:UNK_TYPE4 size:0x4
0x80ABCFDC = D_80ABCFDC; // type:f32 size:0x4
0x80ABD020 = D_80ABD020; // type:UNK_TYPE4 size:0x4
0x80ABD034 = D_80ABD034; // type:UNK_TYPE1 size:0x1
0x80ABD040 = D_80ABD040; // type:UNK_TYPE1 size:0x1
0x80ABD050 = D_80ABD050; // type:f32 size:0x4
0x80ABD054 = D_80ABD054; // type:f32 size:0x4
0x80ABD058 = D_80ABD058; // type:f32 size:0x4
0x80ABD05C = D_80ABD05C; // type:f32 size:0x4
0x80ABD060 = D_80ABD060; // type:f32 size:0x4
0x80ABD064 = D_80ABD064; // type:f32 size:0x4
0x80ABD068 = D_80ABD068; // type:f32 size:0x4
0x80ABD06C = D_80ABD06C; // type:f32 size:0x4
0x80ABD070 = D_80ABD070; // type:f32 size:0x4
0x80ABD730 = Obj_Tokei_Tobira_InitVars; // type:UNK_TYPE1 size:0x1
0x80ABD750 = D_80ABD750; // type:UNK_TYPE1 size:0x1
0x80ABD760 = D_80ABD760; // type:UNK_TYPE1 size:0x1
0x80ABD76C = D_80ABD76C; // type:UNK_TYPE1 size:0x1
0x80ABD770 = D_80ABD770; // type:UNK_TYPE1 size:0x1
0x80ABD778 = D_80ABD778; // type:UNK_TYPE1 size:0x1
0x80ABD780 = D_80ABD780; // type:UNK_TYPE1 size:0x1
0x80ABD790 = D_80ABD790; // type:f32 size:0x4
0x80ABD794 = D_80ABD794; // type:f32 size:0x4
0x80ABD798 = D_80ABD798; // type:f32 size:0x4
0x80ABD79C = D_80ABD79C; // type:f32 size:0x4
0x80ABDC50 = Bg_Hakugin_Elvpole_InitVars; // type:UNK_TYPE1 size:0x1
0x80AC0090 = En_Ma4_InitVars; // type:UNK_TYPE1 size:0x1
0x80AC00B0 = D_80AC00B0; // type:UNK_TYPE1 size:0x1
0x80AC00DC = D_80AC00DC; // type:UNK_TYPE1 size:0x1
0x80AC00E8 = D_80AC00E8; // type:UNK_TYPE1 size:0x1
0x80AC00FC = D_80AC00FC; // type:UNK_TYPE1 size:0x1
0x80AC010C = D_80AC010C; // type:UNK_TYPE1 size:0x1
0x80AC024C = D_80AC024C; // type:UNK_TYPE4 size:0x4
0x80AC0250 = D_80AC0250; // type:UNK_TYPE4 size:0x4
0x80AC0254 = D_80AC0254; // type:UNK_TYPE2 size:0x2
0x80AC0258 = D_80AC0258; // type:UNK_TYPE2 size:0x2
0x80AC025C = D_80AC025C; // type:UNK_TYPE4 size:0x4
0x80AC0260 = D_80AC0260; // type:UNK_TYPE2 size:0x2
0x80AC0264 = D_80AC0264; // type:UNK_TYPE4 size:0x4
0x80AC0270 = D_80AC0270; // type:f32 size:0x4
0x80AC0274 = D_80AC0274; // type:f32 size:0x4
0x80AC0278 = D_80AC0278; // type:f32 size:0x4
0x80AC027C = jtbl_80AC027C; // type:UNK_PTR size:0x4
0x80AC0300 = jtbl_80AC0300; // type:UNK_PTR size:0x4
0x80AC03E4 = jtbl_80AC03E4; // type:UNK_PTR size:0x4
0x80AC1090 = En_Twig_InitVars; // type:UNK_TYPE1 size:0x1
0x80AC10B0 = D_80AC10B0; // type:UNK_TYPE1 size:0x1
0x80AC10BC = D_80AC10BC; // type:UNK_TYPE2 size:0x2
0x80AC10C0 = D_80AC10C0; // type:UNK_TYPE1 size:0x1
0x80AC10D0 = D_80AC10D0; // type:UNK_TYPE1 size:0x1
0x80AC10DC = D_80AC10DC; // type:UNK_TYPE1 size:0x1
0x80AC10E8 = D_80AC10E8; // type:UNK_TYPE1 size:0x1
0x80AC10F4 = D_80AC10F4; // type:UNK_TYPE1 size:0x1
0x80AC10F8 = D_80AC10F8; // type:UNK_TYPE1 size:0x1
0x80AC1100 = D_80AC1100; // type:f32 size:0x4
0x80AC1104 = D_80AC1104; // type:f32 size:0x4
0x80AC1108 = D_80AC1108; // type:f32 size:0x4
0x80AC110C = D_80AC110C; // type:f32 size:0x4
0x80AC1110 = D_80AC1110; // type:f32 size:0x4
0x80AC1114 = D_80AC1114; // type:f32 size:0x4
0x80AC1118 = D_80AC1118; // type:f32 size:0x4
0x80AC1230 = D_80AC1230; // type:UNK_TYPE1 size:0x1
0x80AC1234 = D_80AC1234; // type:UNK_TYPE1 size:0x1
0x80AC1238 = D_80AC1238; // type:UNK_TYPE1 size:0x1
0x80AC1D80 = En_Po_Fusen_InitVars; // type:UNK_TYPE1 size:0x1
0x80AC1DA0 = D_80AC1DA0; // type:UNK_TYPE1 size:0x1
0x80AC1DCC = D_80AC1DCC; // type:UNK_TYPE1 size:0x1
0x80AC1DF0 = D_80AC1DF0; // type:f32 size:0x4
0x80AC1DF4 = D_80AC1DF4; // type:f32 size:0x4
0x80AC1DF8 = D_80AC1DF8; // type:f32 size:0x4
0x80AC1DFC = D_80AC1DFC; // type:f32 size:0x4
0x80AC1E00 = D_80AC1E00; // type:f32 size:0x4
0x80AC1E04 = D_80AC1E04; // type:f32 size:0x4
0x80AC2580 = En_Door_Etc_InitVars; // type:UNK_TYPE1 size:0x1
0x80AC25A0 = sCylinderInit; // type:UNK_TYPE1 size:0x1
0x80AC25CC = sObjInfo; // type:UNK_TYPE2 size:0x2
0x80AC2634 = sInitChain; // type:UNK_TYPE1 size:0x1
0x80AC2650 = D_80AC2650; // type:f32 size:0x4
0x80AC4510 = En_Bigokuta_InitVars; // type:UNK_TYPE1 size:0x1
0x80AC4530 = D_80AC4530; // type:UNK_TYPE1 size:0x1
0x80AC455C = D_80AC455C; // type:UNK_TYPE1 size:0x1
0x80AC4588 = D_80AC4588; // type:UNK_TYPE1 size:0x1
0x80AC4590 = D_80AC4590; // type:UNK_TYPE1 size:0x1
0x80AC45A4 = D_80AC45A4; // type:UNK_TYPE1 size:0x1
0x80AC45B0 = D_80AC45B0; // type:UNK_TYPE1 size:0x1
0x80AC45B4 = D_80AC45B4; // type:UNK_TYPE1 size:0x1
0x80AC45B8 = D_80AC45B8; // type:UNK_TYPE1 size:0x1
0x80AC45BC = D_80AC45BC; // type:UNK_TYPE1 size:0x1
0x80AC45D0 = D_80AC45D0; // type:UNK_TYPE1 size:0x1
0x80AC460C = D_80AC460C; // type:UNK_TYPE1 size:0x1
0x80AC4610 = D_80AC4610; // type:f32 size:0x4
0x80AC4614 = D_80AC4614; // type:f32 size:0x4
0x80AC4618 = D_80AC4618; // type:f32 size:0x4
0x80AC461C = D_80AC461C; // type:f32 size:0x4
0x80AC4620 = D_80AC4620; // type:f32 size:0x4
0x80AC4624 = D_80AC4624; // type:f32 size:0x4
0x80AC4628 = D_80AC4628; // type:f32 size:0x4
0x80AC462C = D_80AC462C; // type:f32 size:0x4
0x80AC4630 = D_80AC4630; // type:f32 size:0x4
0x80AC4634 = D_80AC4634; // type:f32 size:0x4
0x80AC4638 = D_80AC4638; // type:f32 size:0x4
0x80AC463C = D_80AC463C; // type:f32 size:0x4
0x80AC4640 = D_80AC4640; // type:f32 size:0x4
0x80AC4644 = D_80AC4644; // type:f32 size:0x4
0x80AC4648 = D_80AC4648; // type:f32 size:0x4
0x80AC464C = D_80AC464C; // type:f32 size:0x4
0x80AC4650 = D_80AC4650; // type:f32 size:0x4
0x80AC4654 = D_80AC4654; // type:f32 size:0x4
0x80AC4658 = D_80AC4658; // type:f32 size:0x4
0x80AC465C = D_80AC465C; // type:f32 size:0x4
0x80AC4660 = D_80AC4660; // type:f32 size:0x4
0x80AC4664 = D_80AC4664; // type:f32 size:0x4
0x80AC4668 = D_80AC4668; // type:f32 size:0x4
0x80AC466C = D_80AC466C; // type:f32 size:0x4
0x80AC4670 = D_80AC4670; // type:f32 size:0x4
0x80AC4674 = D_80AC4674; // type:f32 size:0x4
0x80AC4678 = D_80AC4678; // type:f32 size:0x4
0x80AC467C = D_80AC467C; // type:f32 size:0x4
0x80AC4680 = D_80AC4680; // type:f32 size:0x4
0x80AC4F10 = Bg_Icefloe_InitVars; // type:UNK_TYPE1 size:0x1
0x80AC4F30 = D_80AC4F30; // type:UNK_TYPE4 size:0x4
0x80AC4F38 = D_80AC4F38; // type:UNK_TYPE4 size:0x4
0x80AC4F3C = D_80AC4F3C; // type:UNK_TYPE1 size:0x1
0x80AC4F40 = D_80AC4F40; // type:UNK_TYPE1 size:0x1
0x80AC4F50 = D_80AC4F50; // type:f32 size:0x4
0x80AC4F54 = D_80AC4F54; // type:f32 size:0x4
0x80AC4F58 = D_80AC4F58; // type:f32 size:0x4
0x80AC4F5C = D_80AC4F5C; // type:f32 size:0x4
0x80AC4F60 = D_80AC4F60; // type:f32 size:0x4
0x80AC4F64 = D_80AC4F64; // type:f32 size:0x4
0x80AC5060 = D_80AC5060; // type:UNK_TYPE1 size:0x1
0x80AC5630 = sTransTriforceDL; // type:UNK_TYPE1 size:0x1
0x80AC5660 = sTransTriforceVtx; // type:UNK_TYPE1 size:0x1
0x80AC5700 = TransitionTriforce_InitVars; // type:UNK_PTR size:0x4
0x80AC5730 = D_80AC5730; // type:f32 size:0x4
0x80AC5734 = D_80AC5734; // type:f32 size:0x4
0x80AC5738 = D_80AC5738; // type:f32 size:0x4
0x80AC573C = D_80AC573C; // type:f32 size:0x4
0x80AC5C20 = D_80AC5C20; // type:UNK_TYPE1 size:0x1
0x80AC5DB0 = D_80AC5DB0; // type:UNK_TYPE1 size:0x1
0x80AC65B0 = D_80AC65B0; // type:UNK_TYPE1 size:0x1
0x80AC66A8 = TransitionWipe1_InitVars; // type:UNK_PTR size:0x4
0x80AC66D0 = D_80AC66D0; // type:f32 size:0x4
0x80AC6C60 = D_80AC6C60; // type:UNK_TYPE1 size:0x1
0x80AC7060 = D_80AC7060; // type:UNK_TYPE1 size:0x1
0x80AC7460 = D_80AC7460; // type:UNK_TYPE1 size:0x1
0x80AC7860 = D_80AC7860; // type:UNK_TYPE1 size:0x1
0x80AC7C60 = D_80AC7C60; // type:UNK_TYPE1 size:0x1
0x80AC8060 = D_80AC8060; // type:UNK_TYPE1 size:0x1
0x80AC8250 = D_80AC8250; // type:UNK_TYPE1 size:0x1
0x80AC8280 = D_80AC8280; // type:UNK_TYPE1 size:0x1
0x80AC8350 = D_80AC8350; // type:UNK_PTR size:0x4
0x80AC8370 = TransitionWipe3_InitVars; // type:UNK_PTR size:0x4
0x80AC83A0 = D_80AC83A0; // type:f32 size:0x4
0x80AC8650 = TransitionWipe4_InitVars; // type:UNK_PTR size:0x4
0x80AC8680 = D_80AC8680; // type:f32 size:0x4
0x80AC8684 = D_80AC8684; // type:f32 size:0x4
0x80AC8688 = D_80AC8688; // type:f32 size:0x4
0x80AC8AB0 = TransitionWipe5_InitVars; // type:UNK_PTR size:0x4
0x80AC8AE0 = D_80AC8AE0; // type:f32 size:0x4
0x80AC8AE4 = D_80AC8AE4; // type:f32 size:0x4
0x80AC8AE8 = D_80AC8AE8; // type:f32 size:0x4
0x80AC93B0 = Effect_Ss_Sbn_InitVars; // type:UNK_TYPE1 size:0x1
0x80AC93B8 = D_80AC93B8; // type:UNK_TYPE1 size:0x1
0x80AC93E8 = D_80AC93E8; // type:UNK_TYPE1 size:0x1
0x80AC9400 = D_80AC9400; // type:f32 size:0x4
0x80AC9404 = D_80AC9404; // type:f32 size:0x4
0x80AC9408 = D_80AC9408; // type:f32 size:0x4
0x80AC940C = D_80AC940C; // type:f32 size:0x4
0x80AC9410 = D_80AC9410; // type:f32 size:0x4
0x80AC9414 = D_80AC9414; // type:f32 size:0x4
0x80AC9418 = D_80AC9418; // type:f32 size:0x4
0x80AC941C = D_80AC941C; // type:f32 size:0x4
0x80AC9420 = D_80AC9420; // type:f32 size:0x4
0x80AC9D50 = Obj_Ocarinalift_InitVars; // type:UNK_TYPE1 size:0x1
0x80AC9D70 = D_80AC9D70; // type:UNK_TYPE1 size:0x1
0x80AC9D90 = D_80AC9D90; // type:f32 size:0x4
0x80AC9D94 = D_80AC9D94; // type:f32 size:0x4
0x80AC9D98 = D_80AC9D98; // type:f32 size:0x4
0x80AC9D9C = D_80AC9D9C; // type:f32 size:0x4
0x80AC9DA0 = D_80AC9DA0; // type:f32 size:0x4
0x80AC9DA4 = D_80AC9DA4; // type:f32 size:0x4
0x80AC9DA8 = D_80AC9DA8; // type:f32 size:0x4
0x80ACA9D0 = En_Time_Tag_InitVars; // type:UNK_TYPE1 size:0x1
0x80ACA9F0 = jtbl_80ACA9F0; // type:UNK_PTR size:0x4
0x80ACB120 = Bg_Open_Shutter_InitVars; // type:UNK_TYPE1 size:0x1
0x80ACB140 = D_80ACB140; // type:UNK_TYPE1 size:0x1
0x80ACB150 = D_80ACB150; // type:f32 size:0x4
0x80ACB390 = Bg_Open_Spot_InitVars; // type:UNK_TYPE1 size:0x1
0x80ACB3B0 = D_80ACB3B0; // type:UNK_TYPE1 size:0x1
0x80ACB630 = Bg_Fu_Kaiten_InitVars; // type:ActorInit size:0x20
0x80ACB650 = D_80ACB650; // type:f32 size:0x4
0x80ACC2A0 = Obj_Aqua_InitVars; // type:UNK_TYPE1 size:0x1
0x80ACC2C0 = D_80ACC2C0; // type:UNK_TYPE1 size:0x1
0x80ACC2EC = D_80ACC2EC; // type:UNK_TYPE1 size:0x1
0x80ACC308 = D_80ACC308; // type:UNK_TYPE1 size:0x1
0x80ACC314 = D_80ACC314; // type:UNK_TYPE1 size:0x1
0x80ACC320 = D_80ACC320; // type:UNK_TYPE1 size:0x1
0x80ACC330 = D_80ACC330; // type:f32 size:0x4
0x80ACC334 = D_80ACC334; // type:f32 size:0x4
0x80ACC338 = D_80ACC338; // type:f32 size:0x4
0x80ACC33C = D_80ACC33C; // type:f32 size:0x4
0x80ACC340 = D_80ACC340; // type:f32 size:0x4
0x80ACC344 = D_80ACC344; // type:f32 size:0x4
0x80ACC348 = D_80ACC348; // type:f32 size:0x4
0x80ACC34C = D_80ACC34C; // type:f32 size:0x4
0x80ACC350 = D_80ACC350; // type:f32 size:0x4
0x80ACC354 = D_80ACC354; // type:f32 size:0x4
0x80ACC358 = D_80ACC358; // type:f32 size:0x4
0x80ACC35C = D_80ACC35C; // type:f32 size:0x4
0x80ACDA10 = En_Elforg_InitVars; // type:UNK_TYPE1 size:0x1
0x80ACDA30 = D_80ACDA30; // type:UNK_TYPE1 size:0x1
0x80ACDA5C = D_80ACDA5C; // type:UNK_TYPE1 size:0x1
0x80ACDA68 = D_80ACDA68; // type:UNK_TYPE1 size:0x1
0x80ACDA74 = D_80ACDA74; // type:UNK_TYPE1 size:0x1
0x80ACDA88 = D_80ACDA88; // type:UNK_TYPE1 size:0x1
0x80ACDAA0 = jtbl_80ACDAA0; // type:UNK_PTR size:0x4
0x80ACDAC0 = jtbl_80ACDAC0; // type:UNK_PTR size:0x4
0x80ACDAE0 = D_80ACDAE0; // type:f32 size:0x4
0x80ACDAE4 = D_80ACDAE4; // type:f32 size:0x4
0x80ACDAE8 = D_80ACDAE8; // type:f32 size:0x4
0x80ACDAEC = D_80ACDAEC; // type:f32 size:0x4
0x80ACDAF0 = D_80ACDAF0; // type:f32 size:0x4
0x80ACDAF4 = D_80ACDAF4; // type:f32 size:0x4
0x80ACE250 = En_Elfbub_InitVars; // type:UNK_TYPE1 size:0x1
0x80ACE270 = D_80ACE270; // type:UNK_TYPE1 size:0x1
0x80ACE29C = D_80ACE29C; // type:UNK_TYPE1 size:0x1
0x80ACE2A0 = D_80ACE2A0; // type:UNK_TYPE1 size:0x1
0x80ACE2A4 = D_80ACE2A4; // type:UNK_TYPE1 size:0x1
0x80ACE2B0 = D_80ACE2B0; // type:f32 size:0x4
0x80ACE2B4 = D_80ACE2B4; // type:f32 size:0x4
0x80ACF5F0 = En_Fu_Mato_InitVars; // type:UNK_TYPE1 size:0x1
0x80ACF610 = D_80ACF610; // type:UNK_TYPE1 size:0x1
0x80ACF63C = D_80ACF63C; // type:UNK_TYPE4 size:0x4
0x80ACF654 = D_80ACF654; // type:UNK_TYPE1 size:0x1
0x80ACF684 = D_80ACF684; // type:UNK_TYPE4 size:0x4
0x80ACF690 = D_80ACF690; // type:UNK_TYPE4 size:0x4
0x80ACF6A0 = D_80ACF6A0; // type:f32 size:0x4
0x80ACF6A4 = D_80ACF6A4; // type:f32 size:0x4
0x80AD05D0 = En_Fu_Kago_InitVars; // type:UNK_TYPE1 size:0x1
0x80AD05F0 = D_80AD05F0; // type:UNK_TYPE1 size:0x1
0x80AD061C = D_80AD061C; // type:UNK_PTR size:0x4
0x80AD0634 = D_80AD0634; // type:UNK_TYPE4 size:0x4
0x80AD067C = D_80AD067C; // type:UNK_TYPE4 size:0x4
0x80AD06C4 = D_80AD06C4; // type:UNK_TYPE4 size:0x4
0x80AD070C = D_80AD070C; // type:UNK_TYPE4 size:0x4
0x80AD0714 = D_80AD0714; // type:UNK_TYPE1 size:0x1
0x80AD0720 = D_80AD0720; // type:f32 size:0x4
0x80AD0724 = D_80AD0724; // type:f32 size:0x4
0x80AD0728 = D_80AD0728; // type:f32 size:0x4
0x80AD072C = D_80AD072C; // type:f32 size:0x4
0x80AD0730 = D_80AD0730; // type:f32 size:0x4
0x80AD0734 = D_80AD0734; // type:f32 size:0x4
0x80AD0738 = D_80AD0738; // type:f32 size:0x4
0x80AD22A0 = En_Osn_InitVars; // type:UNK_TYPE1 size:0x1
0x80AD22C0 = D_80AD22C0; // type:UNK_PTR size:0x4
0x80AD2518 = D_80AD2518; // type:UNK_TYPE1 size:0x1
0x80AD2544 = D_80AD2544; // type:UNK_TYPE1 size:0x1
0x80AD2550 = D_80AD2550; // type:UNK_TYPE1 size:0x1
0x80AD2570 = D_80AD2570; // type:UNK_TYPE1 size:0x1
0x80AD2574 = D_80AD2574; // type:UNK_TYPE4 size:0x4
0x80AD2580 = D_80AD2580; // type:UNK_TYPE4 size:0x4
0x80AD2588 = D_80AD2588; // type:UNK_TYPE4 size:0x4
0x80AD258C = D_80AD258C; // type:UNK_TYPE4 size:0x4
0x80AD2590 = D_80AD2590; // type:UNK_TYPE4 size:0x4
0x80AD2594 = D_80AD2594; // type:UNK_TYPE4 size:0x4
0x80AD2598 = D_80AD2598; // type:UNK_TYPE4 size:0x4
0x80AD25A0 = jtbl_80AD25A0; // type:UNK_PTR size:0x4
0x80AD25F0 = jtbl_80AD25F0; // type:UNK_PTR size:0x4
0x80AD2640 = jtbl_80AD2640; // type:UNK_PTR size:0x4
0x80AD2740 = jtbl_80AD2740; // type:UNK_PTR size:0x4
0x80AD27A0 = D_80AD27A0; // type:f32 size:0x4
0x80AD3250 = Bg_Ctower_Gear_InitVars; // type:UNK_TYPE1 size:0x1
0x80AD3270 = D_80AD3270; // type:UNK_TYPE4 size:0x4
0x80AD32A0 = D_80AD32A0; // type:UNK_TYPE4 size:0x4
0x80AD32C4 = D_80AD32C4; // type:UNK_TYPE1 size:0x1
0x80AD32D0 = D_80AD32D0; // type:UNK_TYPE1 size:0x1
0x80AD32DC = D_80AD32DC; // type:UNK_TYPE1 size:0x1
0x80AD32E8 = D_80AD32E8; // type:UNK_TYPE1 size:0x1
0x80AD57E0 = D_80AD57E0; // type:UNK_TYPE1 size:0x1
0x80AD5880 = En_Trt2_InitVars; // type:UNK_TYPE1 size:0x1
0x80AD58A0 = D_80AD58A0; // type:UNK_TYPE1 size:0x1
0x80AD58CC = D_80AD58CC; // type:UNK_PTR size:0x4
0x80AD58D8 = D_80AD58D8; // type:UNK_TYPE1 size:0x1
0x80AD58F8 = D_80AD58F8; // type:UNK_TYPE4 size:0x4
0x80AD5904 = D_80AD5904; // type:f32 size:0x4
0x80AD5908 = D_80AD5908; // type:f32 size:0x4
0x80AD590C = D_80AD590C; // type:f32 size:0x4
0x80AD5910 = D_80AD5910; // type:UNK_PTR size:0x4
0x80AD5964 = D_80AD5964; // type:UNK_TYPE1 size:0x1
0x80AD596C = D_80AD596C; // type:UNK_TYPE4 size:0x4
0x80AD5978 = D_80AD5978; // type:UNK_TYPE1 size:0x1
0x80AD5990 = D_80AD5990; // type:f32 size:0x4
0x80AD5994 = D_80AD5994; // type:f32 size:0x4
0x80AD5998 = D_80AD5998; // type:f32 size:0x4
0x80AD599C = D_80AD599C; // type:f32 size:0x4
0x80AD59A0 = D_80AD59A0; // type:f32 size:0x4
0x80AD6600 = Obj_Tokei_Step_InitVars; // type:UNK_TYPE1 size:0x1
0x80AD6620 = D_80AD6620; // type:UNK_TYPE4 size:0x4
0x80AD663C = D_80AD663C; // type:UNK_TYPE4 size:0x4
0x80AD6658 = D_80AD6658; // type:UNK_TYPE1 size:0x1
0x80AD6664 = D_80AD6664; // type:UNK_TYPE1 size:0x1
0x80AD6680 = D_80AD6680; // type:f32 size:0x4
0x80AD6684 = D_80AD6684; // type:f32 size:0x4
0x80AD6CF0 = Bg_Lotus_InitVars; // type:UNK_TYPE1 size:0x1
0x80AD6D10 = D_80AD6D10; // type:UNK_TYPE1 size:0x1
0x80AD6D20 = D_80AD6D20; // type:f32 size:0x4
0x80AD6D24 = D_80AD6D24; // type:f32 size:0x4
0x80AD6D28 = D_80AD6D28; // type:f32 size:0x4
0x80AD6D2C = D_80AD6D2C; // type:f32 size:0x4
0x80AD6D30 = D_80AD6D30; // type:f32 size:0x4
0x80AD8DC0 = En_Kame_InitVars; // type:UNK_TYPE1 size:0x1
0x80AD8DE0 = D_80AD8DE0; // type:UNK_TYPE1 size:0x1
0x80AD8E0C = D_80AD8E0C; // type:UNK_TYPE1 size:0x1
0x80AD8E14 = D_80AD8E14; // type:UNK_TYPE1 size:0x1
0x80AD8E34 = D_80AD8E34; // type:UNK_TYPE4 size:0x4
0x80AD8E44 = D_80AD8E44; // type:UNK_TYPE1 size:0x1
0x80AD8E50 = D_80AD8E50; // type:UNK_TYPE4 size:0x4
0x80AD8E54 = D_80AD8E54; // type:UNK_TYPE1 size:0x1
0x80AD8E58 = D_80AD8E58; // type:UNK_TYPE1 size:0x1
0x80AD8E5C = D_80AD8E5C; // type:UNK_TYPE1 size:0x1
0x80AD8E68 = D_80AD8E68; // type:UNK_TYPE1 size:0x1
0x80AD8EA4 = D_80AD8EA4; // type:UNK_TYPE1 size:0x1
0x80AD8EA5 = D_80AD8EA5; // type:UNK_TYPE1 size:0x1
0x80AD8EC0 = D_80AD8EC0; // type:f32 size:0x4
0x80AD8EC4 = D_80AD8EC4; // type:f32 size:0x4
0x80AD8EC8 = D_80AD8EC8; // type:f32 size:0x4
0x80AD8ECC = D_80AD8ECC; // type:f32 size:0x4
0x80AD8ED0 = D_80AD8ED0; // type:f32 size:0x4
0x80AD8ED4 = D_80AD8ED4; // type:f32 size:0x4
0x80AD8ED8 = D_80AD8ED8; // type:f32 size:0x4
0x80AD8EDC = D_80AD8EDC; // type:f32 size:0x4
0x80AD8EE0 = D_80AD8EE0; // type:f32 size:0x4
0x80AD8EE4 = D_80AD8EE4; // type:f32 size:0x4
0x80AD8EE8 = D_80AD8EE8; // type:f32 size:0x4
0x80AD8EEC = D_80AD8EEC; // type:f32 size:0x4
0x80AD8EF0 = D_80AD8EF0; // type:f32 size:0x4
0x80AD8EF4 = D_80AD8EF4; // type:f32 size:0x4
0x80AD8EF8 = D_80AD8EF8; // type:f32 size:0x4
0x80AD8EFC = D_80AD8EFC; // type:f32 size:0x4
0x80AD8F00 = D_80AD8F00; // type:f32 size:0x4
0x80AD8F04 = D_80AD8F04; // type:f32 size:0x4
0x80AD8F08 = D_80AD8F08; // type:f32 size:0x4
0x80AD8F0C = D_80AD8F0C; // type:f32 size:0x4
0x80AD8F10 = D_80AD8F10; // type:f32 size:0x4
0x80AD8F14 = D_80AD8F14; // type:f32 size:0x4
0x80AD8F18 = D_80AD8F18; // type:f32 size:0x4
0x80AD8F1C = D_80AD8F1C; // type:f32 size:0x4
0x80AD8F20 = D_80AD8F20; // type:f32 size:0x4
0x80AD8F24 = D_80AD8F24; // type:f32 size:0x4
0x80AD8F28 = D_80AD8F28; // type:f32 size:0x4
0x80ADA280 = Obj_Takaraya_Wall_InitVars; // type:UNK_TYPE1 size:0x1
0x80ADA2A0 = D_80ADA2A0; // type:UNK_TYPE1 size:0x1
0x80ADA2CC = D_80ADA2CC; // type:UNK_TYPE1 size:0x1
0x80ADA2D0 = D_80ADA2D0; // type:f32 size:0x4
0x80ADA450 = D_80ADA450; // type:UNK_TYPE4 size:0x4
0x80ADA458 = D_80ADA458; // type:UNK_TYPE1 size:0x1
0x80ADA508 = D_80ADA508; // type:UNK_TYPE4 size:0x4
0x80ADA50C = D_80ADA50C; // type:UNK_TYPE4 size:0x4
0x80ADA510 = D_80ADA510; // type:UNK_TYPE1 size:0x1
0x80ADA930 = D_80ADA930; // type:UNK_TYPE1 size:0x1
0x80ADA988 = D_80ADA988; // type:f32 size:0x4
0x80ADA98C = D_80ADA98C; // type:UNK_TYPE4 size:0x4
0x80ADA9A4 = D_80ADA9A4; // type:UNK_TYPE4 size:0x4
0x80ADAAC8 = D_80ADAAC8; // type:f32 size:0x4
0x80ADAACC = D_80ADAACC; // type:f32 size:0x4
0x80ADAAE0 = D_80ADAAE0; // type:f32 size:0x4
0x80ADAAE8 = D_80ADAAE8; // type:UNK_TYPE1 size:0x1
0x80ADAD80 = Bg_Fu_Mizu_InitVars; // type:UNK_TYPE1 size:0x1
0x80ADD910 = D_80ADD910; // type:UNK_TYPE1 size:0x1
0x80ADD918 = D_80ADD918; // type:UNK_TYPE1 size:0x1
0x80ADD920 = D_80ADD920; // type:UNK_TYPE1 size:0x1
0x80ADD928 = D_80ADD928; // type:UNK_TYPE1 size:0x1
0x80ADD930 = D_80ADD930; // type:UNK_TYPE1 size:0x1
0x80ADD938 = D_80ADD938; // type:UNK_TYPE1 size:0x1
0x80ADD940 = D_80ADD940; // type:UNK_TYPE1 size:0x1
0x80ADD944 = En_Sellnuts_InitVars; // type:UNK_TYPE1 size:0x1
0x80ADD964 = D_80ADD964; // type:UNK_TYPE1 size:0x1
0x80ADD990 = sAnimationInfo; // type:UNK_TYPE1 size:0x1
0x80ADDB00 = D_80ADDB00; // type:UNK_TYPE1 size:0x1
0x80ADDB10 = jtbl_80ADDB10; // type:UNK_PTR size:0x4
0x80ADDB4C = D_80ADDB4C; // type:f32 size:0x4
0x80ADDB50 = D_80ADDB50; // type:f32 size:0x4
0x80ADDB54 = D_80ADDB54; // type:f32 size:0x4
0x80ADDB58 = D_80ADDB58; // type:f32 size:0x4
0x80ADDB5C = D_80ADDB5C; // type:f32 size:0x4
0x80ADDB60 = D_80ADDB60; // type:f32 size:0x4
0x80ADDB64 = D_80ADDB64; // type:f32 size:0x4
0x80ADDB68 = D_80ADDB68; // type:f32 size:0x4
0x80ADDB6C = D_80ADDB6C; // type:f32 size:0x4
0x80ADDB70 = jtbl_80ADDB70; // type:UNK_PTR size:0x4
0x80ADDB9C = D_80ADDB9C; // type:f32 size:0x4
0x80ADDBA0 = jtbl_80ADDBA0; // type:UNK_PTR size:0x4
0x80ADDC14 = jtbl_80ADDC14; // type:UNK_PTR size:0x4
0x80ADDC84 = D_80ADDC84; // type:f32 size:0x4
0x80ADDC88 = D_80ADDC88; // type:f32 size:0x4
0x80ADDC8C = D_80ADDC8C; // type:f32 size:0x4
0x80ADDC90 = D_80ADDC90; // type:f32 size:0x4
0x80ADDC94 = D_80ADDC94; // type:f32 size:0x4
0x80ADDC98 = D_80ADDC98; // type:f32 size:0x4
0x80ADDC9C = D_80ADDC9C; // type:f32 size:0x4
0x80ADDCA0 = D_80ADDCA0; // type:f32 size:0x4
0x80ADE930 = Bg_Dkjail_Ivy_InitVars; // type:UNK_TYPE1 size:0x1
0x80ADE950 = D_80ADE950; // type:UNK_TYPE1 size:0x1
0x80ADE97C = D_80ADE97C; // type:UNK_TYPE1 size:0x1
0x80ADE984 = D_80ADE984; // type:UNK_TYPE2 size:0x2
0x80ADE98C = D_80ADE98C; // type:UNK_TYPE1 size:0x1
0x80ADE9A0 = D_80ADE9A0; // type:f32 size:0x4
0x80ADE9A4 = D_80ADE9A4; // type:f32 size:0x4
0x80ADE9A8 = D_80ADE9A8; // type:f32 size:0x4
0x80ADE9AC = D_80ADE9AC; // type:f32 size:0x4
0x80ADE9B0 = D_80ADE9B0; // type:f32 size:0x4
0x80ADE9B4 = D_80ADE9B4; // type:f32 size:0x4
0x80ADE9B8 = D_80ADE9B8; // type:f32 size:0x4
0x80ADE9BC = D_80ADE9BC; // type:f32 size:0x4
0x80ADEB30 = Obj_Visiblock_InitVars; // type:UNK_TYPE1 size:0x1
0x80ADEB50 = D_80ADEB50; // type:UNK_TYPE1 size:0x1
0x80ADFAE0 = En_Takaraya_InitVars; // type:UNK_TYPE1 size:0x1
0x80ADFB00 = D_80ADFB00; // type:UNK_TYPE4 size:0x4
0x80ADFB10 = D_80ADFB10; // type:UNK_TYPE4 size:0x4
0x80ADFB20 = D_80ADFB20; // type:UNK_TYPE1 size:0x1
0x80ADFB28 = D_80ADFB28; // type:UNK_TYPE4 size:0x4
0x80ADFB2C = D_80ADFB2C; // type:UNK_TYPE1 size:0x1
0x80ADFB38 = D_80ADFB38; // type:UNK_TYPE1 size:0x1
0x80ADFB39 = D_80ADFB39; // type:UNK_TYPE1 size:0x1
0x80ADFB44 = D_80ADFB44; // type:UNK_TYPE1 size:0x1
0x80ADFB50 = D_80ADFB50; // type:UNK_TYPE1 size:0x1
0x80ADFB60 = D_80ADFB60; // type:f32 size:0x4
0x80ADFB64 = D_80ADFB64; // type:f32 size:0x4
0x80AE1170 = En_Tsn_InitVars; // type:UNK_TYPE1 size:0x1
0x80AE1190 = D_80AE1190; // type:UNK_TYPE1 size:0x1
0x80AE11BC = D_80AE11BC; // type:UNK_TYPE4 size:0x4
0x80AE11C8 = D_80AE11C8; // type:UNK_TYPE1 size:0x1
0x80AE11D0 = jtbl_80AE11D0; // type:UNK_PTR size:0x4
0x80AE1224 = jtbl_80AE1224; // type:UNK_PTR size:0x4
0x80AE127C = jtbl_80AE127C; // type:UNK_PTR size:0x4
0x80AE1AB0 = En_Ds2n_InitVars; // type:UNK_TYPE1 size:0x1
0x80AE1AD0 = D_80AE1AD0; // type:UNK_PTR size:0x4
0x80AE1AE8 = D_80AE1AE8; // type:UNK_TYPE4 size:0x4
0x80AE1AF4 = D_80AE1AF4; // type:UNK_TYPE1 size:0x1
0x80AE5B00 = En_Fsn_InitVars; // type:UNK_TYPE1 size:0x1
0x80AE5B20 = sAnimations; // type:UNK_TYPE1 size:0x1
0x80AE5BF0 = D_80AE5BF0; // type:UNK_TYPE1 size:0x1
0x80AE5C1C = sShopItemPositions; // type:UNK_TYPE4 size:0x4
0x80AE5C40 = D_80AE5C40; // type:UNK_TYPE4 size:0x4
0x80AE5C4C = sEyeTextures; // type:UNK_TYPE1 size:0x1
0x80AE5C60 = jtbl_80AE5C60; // type:UNK_PTR size:0x4
0x80AE5CC4 = jtbl_80AE5CC4; // type:UNK_PTR size:0x4
0x80AE5D0C = D_80AE5D0C; // type:f32 size:0x4
0x80AE5D10 = D_80AE5D10; // type:f32 size:0x4
0x80AE5D14 = D_80AE5D14; // type:f32 size:0x4
0x80AE5D18 = D_80AE5D18; // type:f32 size:0x4
0x80AE5D1C = D_80AE5D1C; // type:f32 size:0x4
0x80AE5D20 = D_80AE5D20; // type:f32 size:0x4
0x80AE5D24 = D_80AE5D24; // type:f32 size:0x4
0x80AE5D28 = D_80AE5D28; // type:f32 size:0x4
0x80AE5D2C = D_80AE5D2C; // type:f32 size:0x4
0x80AE5D30 = D_80AE5D30; // type:f32 size:0x4
0x80AE6F00 = D_80AE6F00; // type:UNK_TYPE1 size:0x1
0x80AE70B0 = D_80AE70B0; // type:UNK_TYPE1 size:0x1
0x80AE70B8 = D_80AE70B8; // type:UNK_TYPE1 size:0x1
0x80AE71C4 = D_80AE71C4; // type:UNK_TYPE1 size:0x1
0x80AE71F8 = En_Shn_InitVars; // type:UNK_TYPE1 size:0x1
0x80AE7218 = D_80AE7218; // type:UNK_TYPE1 size:0x1
0x80AE7270 = D_80AE7270; // type:UNK_TYPE1 size:0x1
0x80AE7280 = jtbl_80AE7280; // type:UNK_PTR size:0x4
0x80AE8890 = En_Stop_heishi_InitVars; // type:UNK_TYPE1 size:0x1
0x80AE88B0 = sCylinderInit; // type:UNK_TYPE1 size:0x1
0x80AE88DC = D_80AE88DC; // type:UNK_TYPE1 size:0x1
0x80AE897C = D_80AE897C; // type:UNK_TYPE1 size:0x1
0x80AE8A1C = sAnimations; // type:UNK_TYPE1 size:0x1
0x80AE8A24 = D_80AE8A24; // type:UNK_TYPE1 size:0x1
0x80AE8A2C = D_80AE8A2C; // type:UNK_TYPE1 size:0x1
0x80AE8A30 = D_80AE8A30; // type:UNK_TYPE1 size:0x1
0x80AE8A40 = D_80AE8A40; // type:f32 size:0x4
0x80AE8A44 = jtbl_80AE8A44; // type:UNK_PTR size:0x4
0x80AE9800 = Obj_Bigicicle_InitVars; // type:UNK_TYPE1 size:0x1
0x80AE9820 = D_80AE9820; // type:UNK_TYPE1 size:0x1
0x80AE984C = D_80AE984C; // type:UNK_TYPE1 size:0x1
0x80AE9878 = D_80AE9878; // type:UNK_PTR size:0x4
0x80AE987C = D_80AE987C; // type:UNK_TYPE1 size:0x1
0x80AE9888 = D_80AE9888; // type:UNK_TYPE1 size:0x1
0x80AE9890 = D_80AE9890; // type:UNK_TYPE4 size:0x4
0x80AE9894 = D_80AE9894; // type:UNK_TYPE1 size:0x1
0x80AE9898 = D_80AE9898; // type:UNK_TYPE1 size:0x1
0x80AE989C = D_80AE989C; // type:UNK_TYPE1 size:0x1
0x80AE98A8 = D_80AE98A8; // type:UNK_TYPE1 size:0x1
0x80AE98C0 = D_80AE98C0; // type:f32 size:0x4
0x80AE98C4 = D_80AE98C4; // type:f32 size:0x4
0x80AE98C8 = D_80AE98C8; // type:f32 size:0x4
0x80AE98CC = D_80AE98CC; // type:f32 size:0x4
0x80AE98D0 = D_80AE98D0; // type:f32 size:0x4
0x80AE98D4 = D_80AE98D4; // type:f32 size:0x4
0x80AE98D8 = D_80AE98D8; // type:f32 size:0x4
0x80AE98DC = D_80AE98DC; // type:f32 size:0x4
0x80AE98E0 = D_80AE98E0; // type:f32 size:0x4
0x80AEBD30 = En_Lift_Nuts_InitVars; // type:UNK_TYPE1 size:0x1
0x80AEBD50 = D_80AEBD50; // type:UNK_TYPE1 size:0x1
0x80AEBF18 = D_80AEBF18; // type:UNK_TYPE1 size:0x1
0x80AEBF28 = D_80AEBF28; // type:UNK_TYPE1 size:0x1
0x80AEBF54 = D_80AEBF54; // type:UNK_TYPE1 size:0x1
0x80AEBF60 = D_80AEBF60; // type:UNK_TYPE1 size:0x1
0x80AEBF64 = D_80AEBF64; // type:UNK_TYPE4 size:0x4
0x80AEBF68 = D_80AEBF68; // type:UNK_TYPE2 size:0x2
0x80AEBF6C = D_80AEBF6C; // type:UNK_TYPE4 size:0x4
0x80AEBF70 = D_80AEBF70; // type:UNK_TYPE4 size:0x4
0x80AEBF74 = D_80AEBF74; // type:UNK_TYPE4 size:0x4
0x80AEBF78 = D_80AEBF78; // type:UNK_TYPE4 size:0x4
0x80AEBF7C = D_80AEBF7C; // type:UNK_TYPE1 size:0x1
0x80AEBF90 = jtbl_80AEBF90; // type:UNK_PTR size:0x4
0x80AEC018 = jtbl_80AEC018; // type:UNK_PTR size:0x4
0x80AEC034 = D_80AEC034; // type:f32 size:0x4
0x80AEF800 = D_80AEF800; // type:UNK_TYPE1 size:0x1
0x80AEF810 = En_Tk_InitVars; // type:UNK_TYPE1 size:0x1
0x80AEF830 = D_80AEF830; // type:UNK_TYPE1 size:0x1
0x80AEF868 = D_80AEF868; // type:UNK_TYPE1 size:0x1
0x80AEF8EC = D_80AEF8EC; // type:UNK_TYPE1 size:0x1
0x80AEF8F0 = D_80AEF8F0; // type:UNK_TYPE1 size:0x1
0x80AEF9B4 = D_80AEF9B4; // type:f32 size:0xC4
0x80AEFA78 = D_80AEFA78; // type:UNK_TYPE1 size:0x1
0x80AEFA84 = D_80AEFA84; // type:UNK_TYPE1 size:0x1
0x80AEFA90 = D_80AEFA90; // type:UNK_TYPE1 size:0x1
0x80AEFAA0 = jtbl_80AEFAA0; // type:UNK_PTR size:0x4
0x80AEFABC = jtbl_80AEFABC; // type:UNK_PTR size:0x4
0x80AEFB18 = jtbl_80AEFB18; // type:UNK_PTR size:0x4
0x80AEFB34 = jtbl_80AEFB34; // type:UNK_PTR size:0x4
0x80AEFB78 = jtbl_80AEFB78; // type:UNK_PTR size:0x4
0x80AEFBBC = D_80AEFBBC; // type:f32 size:0x4
0x80AEFBC0 = D_80AEFBC0; // type:f32 size:0x4
0x80AEFBC4 = jtbl_80AEFBC4; // type:UNK_PTR size:0x4
0x80AF0050 = D_80AF0050; // type:UNK_TYPE1 size:0x1
0x80AF00F0 = Bg_Market_Step_InitVars; // type:UNK_TYPE1 size:0x1
0x80AF0110 = D_80AF0110; // type:UNK_TYPE1 size:0x1
0x80AF0120 = sMarketDLs; // type:UNK_TYPE1 size:0x1
0x80AF0128 = sBankAdvertisementsAndFakeDoorDLs; // type:UNK_TYPE1 size:0x1
0x80AF0720 = Obj_Lupygamelift_InitVars; // type:UNK_TYPE1 size:0x1
0x80AF0740 = D_80AF0740; // type:UNK_TYPE1 size:0x1
0x80AF0750 = D_80AF0750; // type:f32 size:0x4
0x80AF0754 = D_80AF0754; // type:f32 size:0x4
0x80AF0758 = D_80AF0758; // type:f32 size:0x4
0x80AF075C = D_80AF075C; // type:f32 size:0x4
0x80AF0760 = D_80AF0760; // type:f32 size:0x4
0x80AF0764 = D_80AF0764; // type:f32 size:0x4
0x80AF0770 = D_80AF0770; // type:f32 size:0x4
0x80AF0774 = D_80AF0774; // type:f32 size:0x4
0x80AF0778 = D_80AF0778; // type:f32 size:0x4
0x80AF33F0 = En_Test7_InitVars; // type:UNK_TYPE1 size:0x1
0x80AF3404 = D_80AF3404; // type:UNK_TYPE1 size:0x1
0x80AF3410 = D_80AF3410; // type:UNK_TYPE4 size:0x4
0x80AF3414 = D_80AF3414; // type:UNK_TYPE1 size:0x1
0x80AF3420 = D_80AF3420; // type:UNK_TYPE1 size:0x1
0x80AF342C = D_80AF342C; // type:UNK_TYPE4 size:0x4
0x80AF3430 = D_80AF3430; // type:UNK_TYPE4 size:0x4
0x80AF3434 = D_80AF3434; // type:UNK_TYPE4 size:0x4
0x80AF3438 = D_80AF3438; // type:UNK_TYPE4 size:0x4
0x80AF3450 = D_80AF3450; // type:UNK_TYPE2 size:0x2
0x80AF3452 = D_80AF3452; // type:UNK_TYPE2 size:0x2
0x80AF3454 = D_80AF3454; // type:f32 size:0x4
0x80AF3460 = D_80AF3460; // type:f32 size:0x4
0x80AF3464 = D_80AF3464; // type:f32 size:0x4
0x80AF3468 = D_80AF3468; // type:f32 size:0x4
0x80AF346C = D_80AF346C; // type:f32 size:0x4
0x80AF3470 = D_80AF3470; // type:f32 size:0x4
0x80AF3474 = D_80AF3474; // type:f32 size:0x4
0x80AF3478 = D_80AF3478; // type:f32 size:0x4
0x80AF347C = D_80AF347C; // type:f32 size:0x4
0x80AF3480 = D_80AF3480; // type:f32 size:0x4
0x80AF3484 = D_80AF3484; // type:f32 size:0x4
0x80AF3488 = D_80AF3488; // type:f32 size:0x4
0x80AF348C = D_80AF348C; // type:f32 size:0x4
0x80AF3490 = D_80AF3490; // type:f32 size:0x4
0x80AF3494 = D_80AF3494; // type:f32 size:0x4
0x80AF3498 = D_80AF3498; // type:f32 size:0x4
0x80AF349C = D_80AF349C; // type:f32 size:0x4
0x80AF34A0 = D_80AF34A0; // type:f32 size:0x4
0x80AF34A4 = D_80AF34A4; // type:f32 size:0x4
0x80AF34A8 = D_80AF34A8; // type:f32 size:0x4
0x80AF34AC = D_80AF34AC; // type:f32 size:0x4
0x80AF34B0 = D_80AF34B0; // type:f32 size:0x4
0x80AF34B4 = D_80AF34B4; // type:f32 size:0x4
0x80AF34B8 = D_80AF34B8; // type:f32 size:0x4
0x80AF34BC = D_80AF34BC; // type:f32 size:0x4
0x80AF34C0 = D_80AF34C0; // type:f32 size:0x4
0x80AF34C4 = D_80AF34C4; // type:f32 size:0x4
0x80AF34C8 = D_80AF34C8; // type:f32 size:0x4
0x80AF34CC = D_80AF34CC; // type:f32 size:0x4
0x80AF34D0 = D_80AF34D0; // type:f32 size:0x4
0x80AF34D4 = D_80AF34D4; // type:f32 size:0x4
0x80AF34D8 = D_80AF34D8; // type:f32 size:0x4
0x80AF34DC = D_80AF34DC; // type:f32 size:0x4
0x80AF34E0 = D_80AF34E0; // type:f32 size:0x4
0x80AF34E4 = D_80AF34E4; // type:f32 size:0x4
0x80AF34E8 = D_80AF34E8; // type:f32 size:0x4
0x80AF34EC = D_80AF34EC; // type:f32 size:0x4
0x80AF34F0 = D_80AF34F0; // type:f32 size:0x4
0x80AF34F4 = D_80AF34F4; // type:f32 size:0x4
0x80AF34F8 = D_80AF34F8; // type:f32 size:0x4
0x80AF38B0 = D_80AF38B0; // type:UNK_TYPE1 size:0x1
0x80AF38F0 = D_80AF38F0; // type:Vec3f size:0xC
0x80AF38FC = D_80AF38FC; // type:UNK_TYPE4 size:0x4
0x80AF3900 = D_80AF3900; // type:Vec3f size:0xC
0x80AF3E80 = Obj_Lightblock_InitVars; // type:UNK_TYPE1 size:0x1
0x80AF3EA0 = D_80AF3EA0; // type:UNK_TYPE1 size:0x1
0x80AF3ECC = D_80AF3ECC; // type:UNK_TYPE1 size:0x1
0x80AF3EEC = D_80AF3EEC; // type:UNK_TYPE1 size:0x1
0x80AF4330 = Mir_Ray2_InitVars; // type:UNK_TYPE1 size:0x1
0x80AF4350 = D_80AF4350; // type:UNK_TYPE1 size:0x1
0x80AF4374 = D_80AF4374; // type:UNK_TYPE1 size:0x1
0x80AF4390 = D_80AF4390; // type:f32 size:0x4
0x80AF63C0 = En_Wdhand_InitVars; // type:UNK_TYPE1 size:0x1
0x80AF63E0 = D_80AF63E0; // type:UNK_TYPE1 size:0x1
0x80AF64DC = D_80AF64DC; // type:UNK_TYPE1 size:0x1
0x80AF64EC = D_80AF64EC; // type:UNK_TYPE1 size:0x1
0x80AF64F4 = D_80AF64F4; // type:UNK_TYPE1 size:0x1
0x80AF6514 = D_80AF6514; // type:UNK_TYPE1 size:0x1
0x80AF6518 = D_80AF6518; // type:f32 size:0x4
0x80AF6520 = D_80AF6520; // type:UNK_TYPE1 size:0x1
0x80AF6530 = D_80AF6530; // type:f32 size:0x4
0x80AF6534 = D_80AF6534; // type:f32 size:0x4
0x80AF6538 = D_80AF6538; // type:f32 size:0x4
0x80AF653C = D_80AF653C; // type:f32 size:0x4
0x80AF6540 = D_80AF6540; // type:f32 size:0x4
0x80AF6544 = D_80AF6544; // type:f32 size:0x4
0x80AF6548 = D_80AF6548; // type:f32 size:0x4
0x80AF654C = D_80AF654C; // type:f32 size:0x4
0x80AF6550 = D_80AF6550; // type:f32 size:0x4
0x80AF6554 = D_80AF6554; // type:f32 size:0x4
0x80AF6558 = D_80AF6558; // type:f32 size:0x4
0x80AF655C = D_80AF655C; // type:f32 size:0x4
0x80AF6560 = D_80AF6560; // type:f32 size:0x4
0x80AF6564 = D_80AF6564; // type:f32 size:0x4
0x80AF6568 = D_80AF6568; // type:f32 size:0x4
0x80AF656C = D_80AF656C; // type:f32 size:0x4
0x80AF6570 = D_80AF6570; // type:f32 size:0x4
0x80AF6574 = D_80AF6574; // type:f32 size:0x4
0x80AF6578 = D_80AF6578; // type:f32 size:0x4
0x80AF657C = D_80AF657C; // type:f32 size:0x4
0x80AF6580 = D_80AF6580; // type:f32 size:0x4
0x80AF6CD0 = En_Gamelupy_InitVars; // type:UNK_TYPE1 size:0x1
0x80AF6CF0 = D_80AF6CF0; // type:UNK_TYPE1 size:0x1
0x80AF6D1C = D_80AF6D1C; // type:UNK_TYPE1 size:0x1
0x80AF6D30 = D_80AF6D30; // type:UNK_TYPE1 size:0x1
0x80AF6D34 = D_80AF6D34; // type:UNK_TYPE1 size:0x1
0x80AF6D40 = D_80AF6D40; // type:f32 size:0x4
0x80AF6D44 = D_80AF6D44; // type:f32 size:0x4
0x80AF6D48 = D_80AF6D48; // type:f32 size:0x4
0x80AF7510 = Bg_Danpei_Movebg_InitVars; // type:UNK_TYPE1 size:0x1
0x80AF7530 = D_80AF7530; // type:UNK_TYPE1 size:0x1
0x80AF7534 = D_80AF7534; // type:UNK_TYPE1 size:0x1
0x80AF7538 = D_80AF7538; // type:UNK_TYPE1 size:0x1
0x80AF753C = D_80AF753C; // type:UNK_TYPE1 size:0x1
0x80AF7550 = D_80AF7550; // type:f32 size:0x4
0x80AF7554 = D_80AF7554; // type:f32 size:0x4
0x80AF7A70 = En_Snowwd_InitVars; // type:UNK_TYPE1 size:0x1
0x80AF7A90 = D_80AF7A90; // type:UNK_TYPE1 size:0x1
0x80AF7ABC = D_80AF7ABC; // type:UNK_TYPE1 size:0x1
0x80AF7AC8 = D_80AF7AC8; // type:UNK_TYPE1 size:0x1
0x80AF7AD4 = D_80AF7AD4; // type:UNK_TYPE1 size:0x1
0x80AF7AD8 = D_80AF7AD8; // type:UNK_TYPE1 size:0x1
0x80AFAD80 = D_80AFAD80; // type:UNK_TYPE1 size:0x1
0x80AFB30C = D_80AFB30C; // type:UNK_TYPE1 size:0x1
0x80AFB3C0 = D_80AFB3C0; // type:UNK_TYPE1 size:0x1
0x80AFB3FC = D_80AFB3FC; // type:UNK_TYPE1 size:0x1
0x80AFB41C = D_80AFB41C; // type:UNK_TYPE1 size:0x1
0x80AFB430 = D_80AFB430; // type:UNK_TYPE1 size:0x1
0x80AFB5A0 = D_80AFB5A0; // type:UNK_TYPE1 size:0x1
0x80AFB60C = D_80AFB60C; // type:UNK_TYPE1 size:0x1
0x80AFB614 = D_80AFB614; // type:UNK_TYPE1 size:0x1
0x80AFB61C = D_80AFB61C; // type:UNK_TYPE1 size:0x1
0x80AFB624 = D_80AFB624; // type:UNK_TYPE1 size:0x1
0x80AFB62C = D_80AFB62C; // type:UNK_TYPE1 size:0x1
0x80AFB634 = D_80AFB634; // type:UNK_TYPE1 size:0x1
0x80AFB63C = D_80AFB63C; // type:UNK_TYPE1 size:0x1
0x80AFB644 = D_80AFB644; // type:UNK_TYPE1 size:0x1
0x80AFB650 = D_80AFB650; // type:UNK_TYPE1 size:0x1
0x80AFB658 = D_80AFB658; // type:UNK_TYPE1 size:0x1
0x80AFB6BC = D_80AFB6BC; // type:UNK_TYPE1 size:0x1
0x80AFB710 = D_80AFB710; // type:UNK_TYPE1 size:0x1
0x80AFB744 = D_80AFB744; // type:UNK_TYPE1 size:0x1
0x80AFB74C = D_80AFB74C; // type:UNK_TYPE1 size:0x1
0x80AFB764 = D_80AFB764; // type:UNK_TYPE1 size:0x1
0x80AFB770 = En_Pm_InitVars; // type:UNK_TYPE1 size:0x1
0x80AFB790 = D_80AFB790; // type:UNK_TYPE1 size:0x1
0x80AFB7BC = D_80AFB7BC; // type:UNK_TYPE1 size:0x1
0x80AFB7E8 = D_80AFB7E8; // type:UNK_TYPE1 size:0x1
0x80AFB7F4 = D_80AFB7F4; // type:UNK_TYPE1 size:0x1
0x80AFB8D4 = D_80AFB8D4; // type:UNK_TYPE1 size:0x1
0x80AFB8E0 = D_80AFB8E0; // type:UNK_TYPE1 size:0x1
0x80AFB8EC = D_80AFB8EC; // type:UNK_TYPE1 size:0x1
0x80AFB8F8 = D_80AFB8F8; // type:UNK_TYPE1 size:0x1
0x80AFB900 = D_80AFB900; // type:UNK_PTR size:0x4
0x80AFB914 = D_80AFB914; // type:UNK_TYPE4 size:0x4
0x80AFB920 = jtbl_80AFB920; // type:UNK_PTR size:0x4
0x80AFB9B4 = jtbl_80AFB9B4; // type:UNK_PTR size:0x4
0x80AFB9F4 = jtbl_80AFB9F4; // type:UNK_PTR size:0x4
0x80AFBA5C = jtbl_80AFBA5C; // type:UNK_PTR size:0x4
0x80AFBA7C = jtbl_80AFBA7C; // type:UNK_PTR size:0x4
0x80AFBAA4 = jtbl_80AFBAA4; // type:UNK_PTR size:0x4
0x80AFBADC = jtbl_80AFBADC; // type:UNK_PTR size:0x4
0x80AFBAF4 = jtbl_80AFBAF4; // type:UNK_PTR size:0x4
0x80AFBB2C = jtbl_80AFBB2C; // type:UNK_PTR size:0x4
0x80AFBB54 = jtbl_80AFBB54; // type:UNK_PTR size:0x4
0x80AFBB98 = jtbl_80AFBB98; // type:UNK_PTR size:0x4
0x80AFBBFC = jtbl_80AFBBFC; // type:UNK_PTR size:0x4
0x80AFBD68 = D_80AFBD68; // type:f32 size:0x4
0x80AFBD6C = jtbl_80AFBD6C; // type:UNK_PTR size:0x4
0x80AFBDD4 = jtbl_80AFBDD4; // type:UNK_PTR size:0x4
0x80AFBE28 = jtbl_80AFBE28; // type:UNK_PTR size:0x4
0x80AFD1B0 = En_Gakufu_InitVars; // type:UNK_TYPE1 size:0x1
0x80AFD1D0 = D_80AFD1D0; // type:UNK_TYPE1 size:0x1
0x80AFD1DC = D_80AFD1DC; // type:UNK_TYPE1 size:0x1
0x80AFD1F4 = D_80AFD1F4; // type:UNK_TYPE1 size:0x1
0x80AFD204 = D_80AFD204; // type:f32 size:0x4
0x80AFD218 = D_80AFD218; // type:UNK_TYPE1 size:0x1
0x80AFD230 = D_80AFD230; // type:UNK_TYPE1 size:0x1
0x80AFD270 = D_80AFD270; // type:UNK_TYPE1 size:0x1
0x80AFD2B0 = D_80AFD2B0; // type:f32 size:0x4
0x80AFD8D0 = Elf_Msg4_InitVars; // type:UNK_TYPE1 size:0x1
0x80AFD8F0 = D_80AFD8F0; // type:UNK_TYPE1 size:0x1
0x80AFD900 = D_80AFD900; // type:char size:0x1
0x80AFD908 = D_80AFD908; // type:char size:0x1
0x80AFD910 = D_80AFD910; // type:f32 size:0x4
0x80AFD914 = D_80AFD914; // type:f32 size:0x4
0x80AFD918 = D_80AFD918; // type:f32 size:0x4
0x80AFD91C = D_80AFD91C; // type:f32 size:0x4
0x80AFDBB0 = Elf_Msg5_InitVars; // type:UNK_TYPE1 size:0x1
0x80AFDBD0 = D_80AFDBD0; // type:UNK_TYPE1 size:0x1
0x80AFDBE0 = D_80AFDBE0; // type:char size:0x1
0x80AFDBE8 = D_80AFDBE8; // type:char size:0x1
0x80AFDBF4 = D_80AFDBF4; // type:char size:0x1
0x80AFE730 = D_80AFE730; // type:UNK_TYPE1 size:0x1
0x80AFE75C = En_Col_Man_InitVars; // type:UNK_TYPE1 size:0x1
0x80AFE77C = D_80AFE77C; // type:UNK_TYPE1 size:0x1
0x80AFE780 = D_80AFE780; // type:UNK_TYPE1 size:0x1
0x80AFE790 = D_80AFE790; // type:f32 size:0x4
0x80AFE794 = jtbl_80AFE794; // type:UNK_PTR size:0x4
0x80AFE7A8 = D_80AFE7A8; // type:f32 size:0x4
0x80AFE7AC = D_80AFE7AC; // type:f32 size:0x4
0x80AFE7B0 = D_80AFE7B0; // type:f32 size:0x4
0x80AFE7B4 = D_80AFE7B4; // type:f32 size:0x4
0x80AFE7B8 = D_80AFE7B8; // type:f32 size:0x4
0x80AFE7BC = D_80AFE7BC; // type:f32 size:0x4
0x80B011E0 = En_Talk_Gibud_InitVars; // type:UNK_TYPE1 size:0x1
0x80B01200 = D_80B01200; // type:UNK_PTR size:0x4
0x80B01350 = D_80B01350; // type:UNK_TYPE1 size:0x1
0x80B0137C = D_80B0137C; // type:UNK_TYPE1 size:0x1
0x80B0139C = D_80B0139C; // type:UNK_PTR size:0x4
0x80B013A8 = D_80B013A8; // type:UNK_TYPE1 size:0x1
0x80B01448 = D_80B01448; // type:UNK_TYPE1 size:0x1
0x80B01454 = D_80B01454; // type:UNK_TYPE4 size:0x4
0x80B01460 = D_80B01460; // type:UNK_TYPE4 size:0x4
0x80B01470 = D_80B01470; // type:f32 size:0x4
0x80B01474 = D_80B01474; // type:f32 size:0x4
0x80B01478 = D_80B01478; // type:f32 size:0x4
0x80B0147C = D_80B0147C; // type:f32 size:0x4
0x80B01480 = D_80B01480; // type:f32 size:0x4
0x80B01484 = D_80B01484; // type:f32 size:0x4
0x80B01488 = jtbl_80B01488; // type:UNK_PTR size:0x4
0x80B014B0 = jtbl_80B014B0; // type:UNK_PTR size:0x4
0x80B014E8 = jtbl_80B014E8; // type:UNK_PTR size:0x4
0x80B0152C = jtbl_80B0152C; // type:UNK_PTR size:0x4
0x80B01568 = D_80B01568; // type:f32 size:0x4
0x80B02930 = En_Giant_InitVars; // type:UNK_TYPE1 size:0x1
0x80B02950 = D_80B02950; // type:UNK_TYPE1 size:0x1
0x80B0298C = D_80B0298C; // type:UNK_TYPE1 size:0x1
0x80B029A0 = jtbl_80B029A0; // type:UNK_PTR size:0x4
0x80B029E0 = jtbl_80B029E0; // type:UNK_PTR size:0x4
0x80B02A0C = jtbl_80B02A0C; // type:UNK_PTR size:0x4
0x80B02A38 = jtbl_80B02A38; // type:UNK_PTR size:0x4
0x80B02A74 = jtbl_80B02A74; // type:UNK_PTR size:0x4
0x80B04F30 = Obj_Snowball_InitVars; // type:UNK_TYPE1 size:0x1
0x80B04F50 = D_80B04F50; // type:UNK_TYPE1 size:0x1
0x80B04F74 = D_80B04F74; // type:UNK_TYPE1 size:0x1
0x80B04F84 = D_80B04F84; // type:UNK_TYPE1 size:0x1
0x80B04FAC = D_80B04FAC; // type:UNK_TYPE1 size:0x1
0x80B04FB4 = D_80B04FB4; // type:UNK_TYPE1 size:0x1
0x80B04FB8 = D_80B04FB8; // type:UNK_TYPE1 size:0x1
0x80B04FBC = D_80B04FBC; // type:UNK_TYPE1 size:0x1
0x80B04FC8 = D_80B04FC8; // type:UNK_TYPE4 size:0x4
0x80B04FD4 = D_80B04FD4; // type:UNK_TYPE1 size:0x1
0x80B04FD8 = D_80B04FD8; // type:UNK_TYPE1 size:0x1
0x80B04FE4 = D_80B04FE4; // type:UNK_TYPE1 size:0x1
0x80B04FF0 = D_80B04FF0; // type:f32 size:0x4
0x80B04FF4 = D_80B04FF4; // type:f32 size:0x4
0x80B04FF8 = D_80B04FF8; // type:f32 size:0x4
0x80B04FFC = D_80B04FFC; // type:f32 size:0x4
0x80B05000 = D_80B05000; // type:f32 size:0x4
0x80B05004 = D_80B05004; // type:f32 size:0x4
0x80B05008 = D_80B05008; // type:f32 size:0x4
0x80B0500C = D_80B0500C; // type:f32 size:0x4
0x80B05010 = D_80B05010; // type:f32 size:0x4
0x80B05014 = D_80B05014; // type:f32 size:0x4
0x80B05018 = D_80B05018; // type:f32 size:0x4
0x80B0501C = D_80B0501C; // type:f32 size:0x4
0x80B05020 = D_80B05020; // type:f32 size:0x4
0x80B05024 = D_80B05024; // type:f32 size:0x4
0x80B05028 = D_80B05028; // type:f32 size:0x4
0x80B0502C = D_80B0502C; // type:f32 size:0x4
0x80B05030 = D_80B05030; // type:f32 size:0x4
0x80B05034 = D_80B05034; // type:f32 size:0x4
0x80B05038 = D_80B05038; // type:f32 size:0x4
0x80B0503C = D_80B0503C; // type:f32 size:0x4
0x80B05040 = D_80B05040; // type:f32 size:0x4
0x80B05044 = D_80B05044; // type:f32 size:0x4
0x80B05048 = D_80B05048; // type:f32 size:0x4
0x80B0504C = D_80B0504C; // type:f32 size:0x4
0x80B05050 = D_80B05050; // type:f32 size:0x4
0x80B05054 = D_80B05054; // type:f32 size:0x4
0x80B0E6E0 = Boss_Hakugin_InitVars; // type:UNK_TYPE1 size:0x1
0x80B0E700 = D_80B0E700; // type:UNK_TYPE1 size:0x1
0x80B0E9AC = D_80B0E9AC; // type:UNK_TYPE1 size:0x1
0x80B0E9BC = D_80B0E9BC; // type:UNK_TYPE1 size:0x1
0x80B0E9D4 = D_80B0E9D4; // type:UNK_TYPE1 size:0x1
0x80B0E9F8 = D_80B0E9F8; // type:UNK_TYPE1 size:0x1
0x80B0EA08 = D_80B0EA08; // type:UNK_TYPE1 size:0x1
0x80B0EA34 = D_80B0EA34; // type:UNK_TYPE1 size:0x1
0x80B0EA60 = D_80B0EA60; // type:UNK_TYPE1 size:0x1
0x80B0EA80 = D_80B0EA80; // type:UNK_TYPE1 size:0x1
0x80B0EA88 = D_80B0EA88; // type:UNK_TYPE4 size:0x4
0x80B0EA8C = D_80B0EA8C; // type:UNK_TYPE1 size:0x1
0x80B0EA94 = D_80B0EA94; // type:UNK_TYPE1 size:0x1
0x80B0EA95 = D_80B0EA95; // type:UNK_TYPE1 size:0x1
0x80B0EA9A = D_80B0EA9A; // type:UNK_TYPE1 size:0x1
0x80B0EA9C = D_80B0EA9C; // type:UNK_TYPE1 size:0x1
0x80B0EAA4 = D_80B0EAA4; // type:UNK_TYPE1 size:0x1
0x80B0EAA5 = D_80B0EAA5; // type:UNK_TYPE1 size:0x1
0x80B0EAAC = D_80B0EAAC; // type:UNK_TYPE1 size:0x1
0x80B0EAB0 = D_80B0EAB0; // type:UNK_TYPE1 size:0x1
0x80B0EAC4 = D_80B0EAC4; // type:UNK_TYPE1 size:0x1
0x80B0EAC8 = D_80B0EAC8; // type:UNK_TYPE1 size:0x1
0x80B0EACC = D_80B0EACC; // type:UNK_TYPE1 size:0x1
0x80B0EAD0 = D_80B0EAD0; // type:UNK_TYPE1 size:0x1
0x80B0EAD4 = D_80B0EAD4; // type:UNK_TYPE4 size:0x4
0x80B0EAD8 = D_80B0EAD8; // type:UNK_TYPE1 size:0x1
0x80B0EAE8 = D_80B0EAE8; // type:UNK_TYPE1 size:0x1
0x80B0EAF4 = D_80B0EAF4; // type:UNK_TYPE1 size:0x1
0x80B0EB00 = D_80B0EB00; // type:UNK_TYPE1 size:0x1
0x80B0EB0C = D_80B0EB0C; // type:UNK_TYPE1 size:0x1
0x80B0EB18 = D_80B0EB18; // type:UNK_TYPE1 size:0x1
0x80B0EB24 = D_80B0EB24; // type:UNK_TYPE1 size:0x1
0x80B0EB38 = D_80B0EB38; // type:UNK_TYPE1 size:0x1
0x80B0EB60 = D_80B0EB60; // type:UNK_TYPE1 size:0x1
0x80B0EB68 = D_80B0EB68; // type:UNK_TYPE4 size:0x4
0x80B0EB6C = D_80B0EB6C; // type:UNK_TYPE4 size:0x4
0x80B0EB70 = D_80B0EB70; // type:UNK_TYPE4 size:0x4
0x80B0EB88 = D_80B0EB88; // type:UNK_TYPE4 size:0x4
0x80B0EBA4 = D_80B0EBA4; // type:UNK_TYPE4 size:0x4
0x80B0EBC4 = D_80B0EBC4; // type:UNK_TYPE4 size:0x4
0x80B0EBFC = D_80B0EBFC; // type:UNK_TYPE4 size:0x4
0x80B0EC38 = D_80B0EC38; // type:UNK_TYPE1 size:0x1
0x80B0EC50 = D_80B0EC50; // type:f32 size:0x4
0x80B0EC54 = D_80B0EC54; // type:f32 size:0x4
0x80B0EC58 = D_80B0EC58; // type:f32 size:0x4
0x80B0EC5C = D_80B0EC5C; // type:f32 size:0x4
0x80B0EC60 = D_80B0EC60; // type:f32 size:0x4
0x80B0EC64 = D_80B0EC64; // type:f32 size:0x4
0x80B0EC68 = D_80B0EC68; // type:f32 size:0x4
0x80B0EC6C = D_80B0EC6C; // type:f32 size:0x4
0x80B0EC70 = D_80B0EC70; // type:f32 size:0x4
0x80B0EC74 = D_80B0EC74; // type:f32 size:0x4
0x80B0EC78 = D_80B0EC78; // type:f32 size:0x4
0x80B0EC7C = D_80B0EC7C; // type:f32 size:0x4
0x80B0EC80 = D_80B0EC80; // type:f32 size:0x4
0x80B0EC84 = D_80B0EC84; // type:f32 size:0x4
0x80B0EC88 = D_80B0EC88; // type:f32 size:0x4
0x80B0EC8C = D_80B0EC8C; // type:f32 size:0x4
0x80B0EC90 = D_80B0EC90; // type:f32 size:0x4
0x80B0EC94 = D_80B0EC94; // type:f32 size:0x4
0x80B0EC98 = D_80B0EC98; // type:f32 size:0x4
0x80B0EC9C = D_80B0EC9C; // type:f32 size:0x4
0x80B0ECA0 = D_80B0ECA0; // type:f32 size:0x4
0x80B0ECA4 = D_80B0ECA4; // type:f32 size:0x4
0x80B0ECA8 = D_80B0ECA8; // type:f32 size:0x4
0x80B0ECAC = D_80B0ECAC; // type:f32 size:0x4
0x80B0ECB0 = D_80B0ECB0; // type:f32 size:0x4
0x80B0ECB4 = D_80B0ECB4; // type:f32 size:0x4
0x80B0ECB8 = D_80B0ECB8; // type:f32 size:0x4
0x80B0ECBC = D_80B0ECBC; // type:f32 size:0x4
0x80B0ECC0 = D_80B0ECC0; // type:f32 size:0x4
0x80B0ECC4 = D_80B0ECC4; // type:f32 size:0x4
0x80B0ECC8 = D_80B0ECC8; // type:f32 size:0x4
0x80B0ECCC = D_80B0ECCC; // type:f32 size:0x4
0x80B0ECD0 = D_80B0ECD0; // type:f32 size:0x4
0x80B0ECD4 = D_80B0ECD4; // type:f32 size:0x4
0x80B0ECD8 = D_80B0ECD8; // type:f32 size:0x4
0x80B0ECDC = D_80B0ECDC; // type:f32 size:0x4
0x80B0ECE0 = D_80B0ECE0; // type:f32 size:0x4
0x80B0ECE4 = D_80B0ECE4; // type:f32 size:0x4
0x80B0ECE8 = D_80B0ECE8; // type:f32 size:0x4
0x80B0ECEC = D_80B0ECEC; // type:f32 size:0x4
0x80B0ECF0 = D_80B0ECF0; // type:f32 size:0x4
0x80B0ECF4 = D_80B0ECF4; // type:f32 size:0x4
0x80B0ECF8 = D_80B0ECF8; // type:f32 size:0x4
0x80B0ECFC = D_80B0ECFC; // type:f32 size:0x4
0x80B0ED00 = D_80B0ED00; // type:f32 size:0x4
0x80B0ED04 = D_80B0ED04; // type:f32 size:0x4
0x80B0ED08 = D_80B0ED08; // type:f32 size:0x4
0x80B0ED0C = D_80B0ED0C; // type:f32 size:0x4
0x80B0ED10 = D_80B0ED10; // type:f32 size:0x4
0x80B0ED14 = D_80B0ED14; // type:f32 size:0x4
0x80B0ED18 = D_80B0ED18; // type:f32 size:0x4
0x80B0ED1C = D_80B0ED1C; // type:f32 size:0x4
0x80B0ED20 = D_80B0ED20; // type:f32 size:0x4
0x80B0ED24 = D_80B0ED24; // type:f32 size:0x4
0x80B0ED28 = D_80B0ED28; // type:f32 size:0x4
0x80B0ED2C = D_80B0ED2C; // type:f32 size:0x4
0x80B0ED30 = D_80B0ED30; // type:f32 size:0x4
0x80B0ED34 = D_80B0ED34; // type:f32 size:0x4
0x80B0ED38 = D_80B0ED38; // type:f32 size:0x4
0x80B0ED3C = D_80B0ED3C; // type:f32 size:0x4
0x80B0ED40 = D_80B0ED40; // type:f32 size:0x4
0x80B0ED44 = D_80B0ED44; // type:f32 size:0x4
0x80B0ED48 = D_80B0ED48; // type:f32 size:0x4
0x80B0ED4C = D_80B0ED4C; // type:f32 size:0x4
0x80B0ED50 = D_80B0ED50; // type:f32 size:0x4
0x80B0ED54 = D_80B0ED54; // type:f32 size:0x4
0x80B0ED58 = D_80B0ED58; // type:f32 size:0x4
0x80B0ED5C = D_80B0ED5C; // type:f32 size:0x4
0x80B0ED60 = D_80B0ED60; // type:f32 size:0x4
0x80B0ED64 = D_80B0ED64; // type:f32 size:0x4
0x80B0ED68 = D_80B0ED68; // type:f32 size:0x4
0x80B0ED6C = D_80B0ED6C; // type:f32 size:0x4
0x80B0ED70 = D_80B0ED70; // type:f32 size:0x4
0x80B0ED74 = D_80B0ED74; // type:f32 size:0x4
0x80B0ED78 = D_80B0ED78; // type:f32 size:0x4
0x80B0ED7C = D_80B0ED7C; // type:f32 size:0x4
0x80B0ED80 = D_80B0ED80; // type:f32 size:0x4
0x80B0ED84 = D_80B0ED84; // type:f32 size:0x4
0x80B0ED88 = D_80B0ED88; // type:f32 size:0x4
0x80B0ED8C = D_80B0ED8C; // type:f32 size:0x4
0x80B0ED90 = D_80B0ED90; // type:f32 size:0x4
0x80B0ED94 = D_80B0ED94; // type:f32 size:0x4
0x80B0ED98 = D_80B0ED98; // type:f32 size:0x4
0x80B0ED9C = D_80B0ED9C; // type:f32 size:0x4
0x80B0EDA0 = D_80B0EDA0; // type:f32 size:0x4
0x80B0EDA4 = D_80B0EDA4; // type:f32 size:0x4
0x80B0EDA8 = D_80B0EDA8; // type:f32 size:0x4
0x80B0EDAC = D_80B0EDAC; // type:f32 size:0x4
0x80B0EDB0 = D_80B0EDB0; // type:f32 size:0x4
0x80B0EDB4 = D_80B0EDB4; // type:f32 size:0x4
0x80B0EDB8 = D_80B0EDB8; // type:f32 size:0x4
0x80B0EDBC = D_80B0EDBC; // type:f32 size:0x4
0x80B0EDC0 = D_80B0EDC0; // type:f32 size:0x4
0x80B0EDC4 = D_80B0EDC4; // type:f32 size:0x4
0x80B0EDC8 = D_80B0EDC8; // type:f32 size:0x4
0x80B0EDCC = D_80B0EDCC; // type:f32 size:0x4
0x80B0EDD0 = D_80B0EDD0; // type:f32 size:0x4
0x80B0EDD4 = D_80B0EDD4; // type:f32 size:0x4
0x80B0EDDC = D_80B0EDDC; // type:f32 size:0x4
0x80B0EDE0 = D_80B0EDE0; // type:f32 size:0x4
0x80B0EDE4 = D_80B0EDE4; // type:f32 size:0x4
0x80B0EDE8 = D_80B0EDE8; // type:f32 size:0x4
0x80B0EDEC = D_80B0EDEC; // type:f32 size:0x4
0x80B0EDF0 = D_80B0EDF0; // type:f32 size:0x4
0x80B0EDF4 = D_80B0EDF4; // type:f32 size:0x4
0x80B0EDF8 = D_80B0EDF8; // type:f32 size:0x4
0x80B0EDFC = D_80B0EDFC; // type:f32 size:0x4
0x80B0EE00 = D_80B0EE00; // type:f32 size:0x4
0x80B0EE04 = D_80B0EE04; // type:f32 size:0x4
0x80B0EE08 = D_80B0EE08; // type:f32 size:0x4
0x80B0EE10 = D_80B0EE10; // type:f32 size:0x4
0x80B0EE14 = D_80B0EE14; // type:f32 size:0x4
0x80B0EE18 = D_80B0EE18; // type:f32 size:0x4
0x80B11990 = En_Gb2_InitVars; // type:UNK_TYPE1 size:0x1
0x80B119B0 = D_80B119B0; // type:UNK_TYPE1 size:0x1
0x80B11A00 = D_80B11A00; // type:UNK_TYPE4 size:0x4
0x80B11A40 = D_80B11A40; // type:UNK_TYPE1 size:0x1
0x80B11A6C = D_80B11A6C; // type:UNK_TYPE4 size:0x4
0x80B11A9C = D_80B11A9C; // type:UNK_TYPE4 size:0x4
0x80B11AB4 = D_80B11AB4; // type:UNK_TYPE4 size:0x4
0x80B11AC4 = D_80B11AC4; // type:UNK_TYPE1 size:0x1
0x80B11ACC = D_80B11ACC; // type:UNK_TYPE4 size:0x4
0x80B11AE0 = jtbl_80B11AE0; // type:UNK_PTR size:0x4
0x80B11B38 = jtbl_80B11B38; // type:UNK_PTR size:0x4
0x80B11B50 = jtbl_80B11B50; // type:UNK_PTR size:0x4
0x80B11B84 = D_80B11B84; // type:f32 size:0x4
0x80B12370 = En_Onpuman_InitVars; // type:UNK_TYPE1 size:0x1
0x80B12390 = D_80B12390; // type:UNK_TYPE1 size:0x1
0x80B12800 = Bg_Tobira01_InitVars; // type:UNK_TYPE1 size:0x1
0x80B12820 = D_80B12820; // type:f32 size:0x4
0x80B1292C = En_Tag_Obj_InitVars; // type:UNK_TYPE1 size:0x1
0x80B13E70 = Obj_Dhouse_InitVars; // type:UNK_TYPE1 size:0x1
0x80B13E90 = D_80B13E90; // type:UNK_TYPE4 size:0x4
0x80B13FA8 = D_80B13FA8; // type:UNK_TYPE1 size:0x1
0x80B13FB4 = D_80B13FB4; // type:UNK_TYPE1 size:0x1
0x80B13FC4 = D_80B13FC4; // type:UNK_TYPE1 size:0x1
0x80B13FD0 = D_80B13FD0; // type:f32 size:0x4
0x80B13FD4 = D_80B13FD4; // type:f32 size:0x4
0x80B13FD8 = D_80B13FD8; // type:f32 size:0x4
0x80B13FDC = D_80B13FDC; // type:f32 size:0x4
0x80B13FE0 = D_80B13FE0; // type:f32 size:0x4
0x80B13FE4 = D_80B13FE4; // type:f32 size:0x4
0x80B13FE8 = D_80B13FE8; // type:f32 size:0x4
0x80B13FEC = D_80B13FEC; // type:f32 size:0x4
0x80B13FF0 = D_80B13FF0; // type:f32 size:0x4
0x80B13FF4 = D_80B13FF4; // type:f32 size:0x4
0x80B13FF8 = D_80B13FF8; // type:f32 size:0x4
0x80B13FFC = D_80B13FFC; // type:f32 size:0x4
0x80B14000 = D_80B14000; // type:f32 size:0x4
0x80B14004 = D_80B14004; // type:f32 size:0x4
0x80B14008 = D_80B14008; // type:f32 size:0x4
0x80B1400C = D_80B1400C; // type:f32 size:0x4
0x80B14010 = D_80B14010; // type:f32 size:0x4
0x80B15590 = Obj_Hakaisi_InitVars; // type:UNK_TYPE1 size:0x1
0x80B155B0 = D_80B155B0; // type:UNK_TYPE1 size:0x1
0x80B155BC = D_80B155BC; // type:UNK_TYPE1 size:0x1
0x80B155E0 = D_80B155E0; // type:UNK_TYPE4 size:0x4
0x80B155EC = D_80B155EC; // type:UNK_TYPE4 size:0x4
0x80B155F8 = D_80B155F8; // type:UNK_TYPE1 size:0x1
0x80B155FC = D_80B155FC; // type:UNK_TYPE1 size:0x1
0x80B15600 = D_80B15600; // type:UNK_TYPE1 size:0x1
0x80B15610 = jtbl_80B15610; // type:UNK_PTR size:0x4
0x80B15628 = D_80B15628; // type:f32 size:0x4
0x80B1562C = D_80B1562C; // type:f32 size:0x4
0x80B15630 = D_80B15630; // type:f32 size:0x4
0x80B16840 = Bg_Hakugin_Switch_InitVars; // type:UNK_TYPE1 size:0x1
0x80B16860 = D_80B16860; // type:UNK_TYPE1 size:0x1
0x80B1688C = D_80B1688C; // type:UNK_TYPE4 size:0x4
0x80B16904 = D_80B16904; // type:UNK_TYPE1 size:0x1
0x80B16910 = D_80B16910; // type:UNK_TYPE1 size:0x1
0x80B16920 = D_80B16920; // type:f32 size:0x4
0x80B16924 = D_80B16924; // type:f32 size:0x4
0x80B16928 = D_80B16928; // type:f32 size:0x4
0x80B1692C = D_80B1692C; // type:f32 size:0x4
0x80B16930 = D_80B16930; // type:f32 size:0x4
0x80B16AF0 = D_80B16AF0; // type:UNK_TYPE1 size:0x1
0x80B199E0 = En_Snowman_InitVars; // type:UNK_TYPE1 size:0x1
0x80B19A00 = D_80B19A00; // type:UNK_TYPE1 size:0x1
0x80B19A2C = D_80B19A2C; // type:UNK_TYPE1 size:0x1
0x80B19A58 = D_80B19A58; // type:UNK_TYPE1 size:0x1
0x80B19A78 = D_80B19A78; // type:UNK_TYPE1 size:0x1
0x80B19A80 = D_80B19A80; // type:UNK_TYPE1 size:0x1
0x80B19A84 = D_80B19A84; // type:UNK_TYPE1 size:0x1
0x80B19A88 = D_80B19A88; // type:UNK_TYPE1 size:0x1
0x80B19A94 = D_80B19A94; // type:UNK_TYPE1 size:0x1
0x80B19AA0 = D_80B19AA0; // type:UNK_TYPE4 size:0x4
0x80B19AAC = D_80B19AAC; // type:UNK_TYPE1 size:0x1
0x80B19AB8 = D_80B19AB8; // type:UNK_TYPE1 size:0x1
0x80B19AC4 = D_80B19AC4; // type:UNK_TYPE1 size:0x1
0x80B19AD0 = D_80B19AD0; // type:s8 size:0xC
0x80B19ADC = D_80B19ADC; // type:Vec3f size:0x3C
0x80B19B20 = D_80B19B20; // type:f32 size:0x4
0x80B19B24 = D_80B19B24; // type:f32 size:0x4
0x80B19B28 = D_80B19B28; // type:f32 size:0x4
0x80B19B2C = D_80B19B2C; // type:f32 size:0x4
0x80B19B30 = D_80B19B30; // type:f32 size:0x4
0x80B19B34 = D_80B19B34; // type:f32 size:0x4
0x80B19B38 = D_80B19B38; // type:f32 size:0x4
0x80B19B3C = D_80B19B3C; // type:f32 size:0x4
0x80B19B40 = D_80B19B40; // type:f32 size:0x4
0x80B19B44 = D_80B19B44; // type:f32 size:0x4
0x80B19B48 = D_80B19B48; // type:f32 size:0x4
0x80B19B4C = D_80B19B4C; // type:f32 size:0x4
0x80B19B50 = D_80B19B50; // type:f32 size:0x4
0x80B19B54 = D_80B19B54; // type:f32 size:0x4
0x80B19B58 = D_80B19B58; // type:f32 size:0x4
0x80B19B5C = D_80B19B5C; // type:f32 size:0x4
0x80B19B60 = D_80B19B60; // type:f32 size:0x4
0x80B19B64 = D_80B19B64; // type:f32 size:0x4
0x80B19B68 = D_80B19B68; // type:f32 size:0x4
0x80B19B6C = D_80B19B6C; // type:f32 size:0x4
0x80B19B70 = D_80B19B70; // type:f32 size:0x4
0x80B19B74 = D_80B19B74; // type:f32 size:0x4
0x80B19B78 = D_80B19B78; // type:f32 size:0x4
0x80B19B7C = D_80B19B7C; // type:f32 size:0x4
0x80B19B80 = D_80B19B80; // type:f32 size:0x4
0x80B19B84 = D_80B19B84; // type:f32 size:0x4
0x80B19B88 = D_80B19B88; // type:f32 size:0x4
0x80B19B8C = D_80B19B8C; // type:f32 size:0x4
0x80B19B90 = D_80B19B90; // type:f32 size:0x4
0x80B19B94 = D_80B19B94; // type:f32 size:0x4
0x80B1A320 = TG_Sw_InitVars; // type:UNK_TYPE1 size:0x1
0x80B1A340 = D_80B1A340; // type:f32 size:0x4
0x80B1A344 = D_80B1A344; // type:f32 size:0x4
0x80B1A348 = D_80B1A348; // type:f32 size:0x4
0x80B1A34C = D_80B1A34C; // type:f32 size:0x4
0x80B1DA30 = D_80B1DA30; // type:UNK_TYPE1 size:0x1
0x80B1DA40 = sPoSisterEnvColors; // type:UNK_TYPE1 size:0x1
0x80B1DA50 = En_Po_Sisters_InitVars; // type:UNK_TYPE1 size:0x1
0x80B1DA70 = D_80B1DA70; // type:UNK_TYPE1 size:0x1
0x80B1DA9C = D_80B1DA9C; // type:UNK_TYPE1 size:0x1
0x80B1DAA4 = D_80B1DAA4; // type:UNK_TYPE1 size:0x1
0x80B1DAC4 = D_80B1DAC4; // type:UNK_TYPE1 size:0x1
0x80B1DACC = D_80B1DACC; // type:UNK_TYPE1 size:0x1
0x80B1DADC = D_80B1DADC; // type:UNK_TYPE1 size:0x1
0x80B1DAEC = D_80B1DAEC; // type:UNK_TYPE1 size:0x1
0x80B1DAFC = D_80B1DAFC; // type:UNK_TYPE1 size:0x1
0x80B1DB08 = D_80B1DB08; // type:UNK_TYPE1 size:0x1
0x80B1DB10 = D_80B1DB10; // type:UNK_TYPE1 size:0x1
0x80B1DB11 = D_80B1DB11; // type:UNK_TYPE1 size:0x1
0x80B1DB12 = D_80B1DB12; // type:UNK_TYPE1 size:0x1
0x80B1DB13 = D_80B1DB13; // type:UNK_TYPE1 size:0x1
0x80B1DB20 = D_80B1DB20; // type:f32 size:0x4
0x80B1DB24 = D_80B1DB24; // type:f32 size:0x4
0x80B1DB28 = D_80B1DB28; // type:f32 size:0x4
0x80B1DB2C = D_80B1DB2C; // type:f32 size:0x4
0x80B1DB30 = D_80B1DB30; // type:f32 size:0x4
0x80B1DB34 = D_80B1DB34; // type:f32 size:0x4
0x80B1DB38 = D_80B1DB38; // type:f32 size:0x4
0x80B1DB3C = D_80B1DB3C; // type:f32 size:0x4
0x80B1DB40 = D_80B1DB40; // type:f32 size:0x4
0x80B1DB44 = D_80B1DB44; // type:f32 size:0x4
0x80B1DB48 = D_80B1DB48; // type:f32 size:0x4
0x80B1DB4C = D_80B1DB4C; // type:f32 size:0x4
0x80B1DB50 = D_80B1DB50; // type:f32 size:0x4
0x80B1DB54 = D_80B1DB54; // type:f32 size:0x4
0x80B1DB58 = D_80B1DB58; // type:f32 size:0x4
0x80B1DB5C = D_80B1DB5C; // type:f32 size:0x4
0x80B21620 = sCurrentDeadBodyPartIndex; // type:UNK_TYPE4 size:0x4
0x80B21624 = sDamageTable; // type:UNK_TYPE1 size:0x1
0x80B21644 = En_Pp_InitVars; // type:UNK_TYPE1 size:0x1
0x80B21664 = sMaskColliderJntSphElementsInit; // type:UNK_TYPE1 size:0x1
0x80B21688 = sMaskColliderJntSphInit; // type:UNK_TYPE1 size:0x1
0x80B21698 = sBodyColliderJntSphElementsInit; // type:UNK_TYPE1 size:0x1
0x80B216BC = sBodyColliderJntSphInit; // type:UNK_TYPE1 size:0x1
0x80B216CC = sQuadInit; // type:UNK_TYPE1 size:0x1
0x80B2171C = sDustPrimColor; // type:UNK_TYPE1 size:0x1
0x80B21720 = sDustEnvColor; // type:UNK_TYPE1 size:0x1
0x80B21724 = sAnimations; // type:UNK_TYPE1 size:0x1
0x80B2174C = sAnimationModes; // type:UNK_TYPE1 size:0x1
0x80B21758 = sLedgeCheckAngles; // type:UNK_TYPE2 size:0x2
0x80B21760 = sMaskFireVelocityAndAccel; // type:UNK_TYPE4 size:0x4
0x80B217CC = sVertexOffset1; // type:f32 size:0x4
0x80B217D8 = sVertexOffset2; // type:f32 size:0x4
0x80B217F0 = D_80B217F0; // type:f32 size:0x4
0x80B217F4 = jtbl_80B217F4; // type:UNK_PTR size:0x4
0x80B21810 = D_80B21810; // type:f32 size:0x4
0x80B21814 = D_80B21814; // type:f32 size:0x4
0x80B21818 = D_80B21818; // type:f32 size:0x4
0x80B2181C = D_80B2181C; // type:f32 size:0x4
0x80B21820 = D_80B21820; // type:f32 size:0x4
0x80B21824 = D_80B21824; // type:f32 size:0x4
0x80B21828 = D_80B21828; // type:f32 size:0x4
0x80B2182C = D_80B2182C; // type:f32 size:0x4
0x80B21830 = D_80B21830; // type:f32 size:0x4
0x80B21834 = D_80B21834; // type:f32 size:0x4
0x80B21838 = D_80B21838; // type:f32 size:0x4
0x80B2183C = D_80B2183C; // type:f32 size:0x4
0x80B22A60 = En_Hakurock_InitVars; // type:UNK_TYPE1 size:0x1
0x80B22A80 = D_80B22A80; // type:UNK_TYPE1 size:0x1
0x80B22AAC = D_80B22AAC; // type:UNK_TYPE1 size:0x1
0x80B22AC0 = D_80B22AC0; // type:f32 size:0x4
0x80B22AC4 = D_80B22AC4; // type:f32 size:0x4
0x80B22AC8 = D_80B22AC8; // type:f32 size:0x4
0x80B22ACC = D_80B22ACC; // type:f32 size:0x4
0x80B22AD0 = D_80B22AD0; // type:f32 size:0x4
0x80B22AD4 = D_80B22AD4; // type:f32 size:0x4
0x80B22AD8 = D_80B22AD8; // type:f32 size:0x4
0x80B22ADC = D_80B22ADC; // type:f32 size:0x4
0x80B22AE0 = D_80B22AE0; // type:f32 size:0x4
0x80B22AE4 = D_80B22AE4; // type:f32 size:0x4
0x80B23A80 = En_Hanabi_InitVars; // type:UNK_TYPE1 size:0x1
0x80B23AA0 = D_80B23AA0; // type:UNK_TYPE2 size:0x2
0x80B23C2C = D_80B23C2C; // type:UNK_TYPE1 size:0x1
0x80B23C40 = D_80B23C40; // type:UNK_TYPE1 size:0x1
0x80B23C60 = D_80B23C60; // type:f32 size:0x4
0x80B23C64 = D_80B23C64; // type:f32 size:0x4
0x80B23C68 = D_80B23C68; // type:f32 size:0x4
0x80B23C6C = D_80B23C6C; // type:f32 size:0x4
0x80B23C70 = D_80B23C70; // type:f32 size:0x4
0x80B23E80 = Obj_Dowsing_InitVars; // type:UNK_TYPE1 size:0x1
0x80B24460 = Obj_Wind_InitVars; // type:UNK_TYPE1 size:0x1
0x80B24480 = D_80B24480; // type:UNK_TYPE1 size:0x1
0x80B2448C = D_80B2448C; // type:UNK_TYPE1 size:0x1
0x80B245CC = D_80B245CC; // type:UNK_TYPE4 size:0x4
0x80B245D0 = D_80B245D0; // type:f32 size:0x4
0x80B25D20 = En_Racedog_InitVars; // type:UNK_TYPE1 size:0x1
0x80B25D40 = D_80B25D40; // type:s16 size:0x2
0x80B25D44 = D_80B25D44; // type:s16 size:0x2
0x80B25D48 = D_80B25D48; // type:s16 size:0x2
0x80B25D4C = D_80B25D4C; // type:s16 size:0x2
0x80B25D50 = D_80B25D50; // type:f32 size:0x38
0x80B25D88 = D_80B25D88; // type:UNK_TYPE1 size:0xE0
0x80B25E68 = D_80B25E68; // type:UNK_TYPE1 size:0x10
0x80B25E78 = D_80B25E78; // type:f32 size:0x20
0x80B25E98 = D_80B25E98; // type:UNK_TYPE1 size:0x2C
0x80B25EC4 = D_80B25EC4; // type:UNK_TYPE1 size:0xC
0x80B25ED0 = D_80B25ED0; // type:UNK_TYPE1 size:0x20
0x80B25EF0 = D_80B25EF0; // type:UNK_TYPE1 size:0x100
0x80B25FF0 = D_80B25FF0; // type:UNK_TYPE1 size:0x1
0x80B25FF4 = D_80B25FF4; // type:UNK_TYPE4 size:0x4
0x80B26000 = D_80B26000; // type:UNK_TYPE4 size:0x4
0x80B26010 = D_80B26010; // type:f32 size:0x4
0x80B26014 = D_80B26014; // type:f32 size:0x4
0x80B26018 = D_80B26018; // type:f32 size:0x4
0x80B2601C = D_80B2601C; // type:f32 size:0x4
0x80B26020 = D_80B26020; // type:f32 size:0x4
0x80B26024 = D_80B26024; // type:f32 size:0x4
0x80B26028 = D_80B26028; // type:f32 size:0x4
0x80B2602C = D_80B2602C; // type:f32 size:0x4
0x80B26030 = jtbl_80B26030; // type:UNK_PTR size:0x4
0x80B27C10 = En_Kendo_Js_InitVars; // type:UNK_TYPE1 size:0x1
0x80B27C30 = D_80B27C30; // type:UNK_TYPE1 size:0x1
0x80B27C5C = D_80B27C5C; // type:UNK_TYPE1 size:0x1
0x80B27C68 = D_80B27C68; // type:UNK_TYPE1 size:0x1
0x80B27CE0 = D_80B27CE0; // type:UNK_TYPE1 size:0x1
0x80B27CF4 = D_80B27CF4; // type:UNK_TYPE1 size:0x1
0x80B27D00 = D_80B27D00; // type:UNK_TYPE1 size:0x1
0x80B27D10 = D_80B27D10; // type:UNK_TYPE1 size:0x1
0x80B27D20 = jtbl_80B27D20; // type:UNK_PTR size:0x4
0x80B27DD0 = jtbl_80B27DD0; // type:UNK_PTR size:0x4
0x80B27DEC = jtbl_80B27DEC; // type:UNK_PTR size:0x4
0x80B282D0 = Bg_Botihasira_InitVars; // type:UNK_TYPE1 size:0x1
0x80B282F0 = D_80B282F0; // type:UNK_TYPE1 size:0x1
0x80B28320 = D_80B28320; // type:f32 size:0x4
0x80B2B2E0 = D_80B2B2E0; // type:UNK_TYPE4 size:0x4
0x80B2B2E4 = D_80B2B2E4; // type:UNK_TYPE4 size:0x4
0x80B2B2E8 = D_80B2B2E8; // type:UNK_TYPE4 size:0x4
0x80B2B2EC = D_80B2B2EC; // type:UNK_TYPE4 size:0x4
0x80B2B2F0 = D_80B2B2F0; // type:UNK_TYPE4 size:0x4
0x80B2B2F4 = D_80B2B2F4; // type:UNK_TYPE4 size:0x4
0x80B2B2F8 = En_Fish2_InitVars; // type:UNK_TYPE1 size:0x1
0x80B2B318 = D_80B2B318; // type:UNK_TYPE1 size:0x1
0x80B2B360 = D_80B2B360; // type:UNK_TYPE1 size:0x1
0x80B2B370 = D_80B2B370; // type:f32 size:0x4
0x80B2B380 = D_80B2B380; // type:f32 size:0x4
0x80B2B388 = D_80B2B388; // type:UNK_TYPE1 size:0x1
0x80B2B3A0 = D_80B2B3A0; // type:UNK_TYPE1 size:0x1
0x80B2B3A8 = D_80B2B3A8; // type:UNK_TYPE1 size:0x1
0x80B2B3C0 = D_80B2B3C0; // type:f32 size:0x4
0x80B2B3C4 = D_80B2B3C4; // type:f32 size:0x4
0x80B2B3C8 = D_80B2B3C8; // type:f32 size:0x4
0x80B2B3CC = D_80B2B3CC; // type:f32 size:0x4
0x80B2B3D0 = D_80B2B3D0; // type:f32 size:0x4
0x80B2B3D4 = D_80B2B3D4; // type:f32 size:0x4
0x80B2B3D8 = D_80B2B3D8; // type:f32 size:0x4
0x80B2B3DC = D_80B2B3DC; // type:f32 size:0x4
0x80B2B3E0 = D_80B2B3E0; // type:f32 size:0x4
0x80B2B3E4 = D_80B2B3E4; // type:f32 size:0x4
0x80B2B3E8 = D_80B2B3E8; // type:f32 size:0x4
0x80B2B3EC = D_80B2B3EC; // type:f32 size:0x4
0x80B2B3F0 = jtbl_80B2B3F0; // type:UNK_PTR size:0x4
0x80B2B418 = D_80B2B418; // type:f32 size:0x4
0x80B2B41C = D_80B2B41C; // type:f32 size:0x4
0x80B2B420 = D_80B2B420; // type:f32 size:0x4
0x80B2B424 = D_80B2B424; // type:f32 size:0x4
0x80B2B428 = D_80B2B428; // type:f32 size:0x4
0x80B2B42C = D_80B2B42C; // type:f32 size:0x4
0x80B2B430 = D_80B2B430; // type:f32 size:0x4
0x80B2B434 = D_80B2B434; // type:f32 size:0x4
0x80B2B438 = D_80B2B438; // type:f32 size:0x4
0x80B2B43C = D_80B2B43C; // type:f32 size:0x4
0x80B2B440 = D_80B2B440; // type:f32 size:0x4
0x80B2B444 = D_80B2B444; // type:f32 size:0x4
0x80B2B448 = D_80B2B448; // type:f32 size:0x4
0x80B2B44C = D_80B2B44C; // type:f32 size:0x4
0x80B2C200 = D_80B2C200; // type:UNK_TYPE1 size:0x1
0x80B2C20C = D_80B2C20C; // type:UNK_TYPE1 size:0x1
0x80B2C218 = D_80B2C218; // type:UNK_TYPE1 size:0x1
0x80B2C224 = D_80B2C224; // type:UNK_TYPE1 size:0x1
0x80B2C230 = D_80B2C230; // type:UNK_TYPE1 size:0x1
0x80B2C23C = D_80B2C23C; // type:UNK_TYPE1 size:0x1
0x80B2C288 = D_80B2C288; // type:UNK_TYPE1 size:0x1
0x80B2C2D4 = D_80B2C2D4; // type:UNK_TYPE1 size:0x1
0x80B2C320 = D_80B2C320; // type:UNK_TYPE1 size:0x1
0x80B2C36C = D_80B2C36C; // type:UNK_TYPE1 size:0x1
0x80B2C3B8 = D_80B2C3B8; // type:UNK_TYPE1 size:0x1
0x80B2C3E8 = D_80B2C3E8; // type:UNK_TYPE1 size:0x1
0x80B2C408 = D_80B2C408; // type:UNK_TYPE1 size:0x1
0x80B2C428 = D_80B2C428; // type:UNK_TYPE1 size:0x1
0x80B2C448 = D_80B2C448; // type:UNK_TYPE1 size:0x1
0x80B2C468 = D_80B2C468; // type:UNK_TYPE1 size:0x1
0x80B2C488 = D_80B2C488; // type:UNK_TYPE1 size:0x1
0x80B2C490 = D_80B2C490; // type:UNK_TYPE1 size:0x1
0x80B2C498 = En_Pst_InitVars; // type:UNK_TYPE1 size:0x1
0x80B2C4B8 = D_80B2C4B8; // type:UNK_TYPE1 size:0x1
0x80B2C4E4 = D_80B2C4E4; // type:UNK_PTR size:0x4
0x80B2C4F0 = D_80B2C4F0; // type:UNK_TYPE1 size:0x1
0x80B2C500 = D_80B2C500; // type:UNK_PTR size:0x4
0x80B2C520 = jtbl_80B2C520; // type:UNK_PTR size:0x4
0x80B2C534 = jtbl_80B2C534; // type:UNK_PTR size:0x4
0x80B2C548 = jtbl_80B2C548; // type:UNK_PTR size:0x4
0x80B2C55C = jtbl_80B2C55C; // type:UNK_PTR size:0x4
0x80B2F660 = En_Poh_InitVars; // type:UNK_TYPE1 size:0x1
0x80B2F680 = D_80B2F680; // type:UNK_TYPE1 size:0x1
0x80B2F6AC = D_80B2F6AC; // type:UNK_TYPE1 size:0x1
0x80B2F6D0 = D_80B2F6D0; // type:UNK_TYPE1 size:0x1
0x80B2F6E0 = D_80B2F6E0; // type:UNK_TYPE1 size:0x1
0x80B2F700 = D_80B2F700; // type:UNK_TYPE1 size:0x1
0x80B2F708 = D_80B2F708; // type:UNK_TYPE1 size:0x1
0x80B2F710 = D_80B2F710; // type:UNK_TYPE1 size:0x1
0x80B2F71C = D_80B2F71C; // type:UNK_TYPE1 size:0x1
0x80B2F734 = D_80B2F734; // type:UNK_TYPE1 size:0x1
0x80B2F760 = D_80B2F760; // type:f32 size:0x4
0x80B2F764 = D_80B2F764; // type:f32 size:0x4
0x80B2F768 = D_80B2F768; // type:f32 size:0x4
0x80B2F76C = D_80B2F76C; // type:f32 size:0x4
0x80B2F770 = D_80B2F770; // type:f32 size:0x4
0x80B2F774 = D_80B2F774; // type:f32 size:0x4
0x80B2F778 = D_80B2F778; // type:f32 size:0x4
0x80B2F77C = D_80B2F77C; // type:f32 size:0x4
0x80B2F780 = D_80B2F780; // type:f32 size:0x4
0x80B2F784 = D_80B2F784; // type:f32 size:0x4
0x80B2F788 = D_80B2F788; // type:f32 size:0x4
0x80B2F78C = D_80B2F78C; // type:f32 size:0x4
0x80B2F790 = D_80B2F790; // type:f32 size:0x4
0x80B2F794 = D_80B2F794; // type:f32 size:0x4
0x80B2F798 = D_80B2F798; // type:f32 size:0x4
0x80B2F79C = D_80B2F79C; // type:f32 size:0x4
0x80B2F7A0 = D_80B2F7A0; // type:f32 size:0x4
0x80B2F7A4 = D_80B2F7A4; // type:f32 size:0x4
0x80B2F7A8 = D_80B2F7A8; // type:f32 size:0x4
0x80B2F7AC = D_80B2F7AC; // type:f32 size:0x4
0x80B2F7B0 = D_80B2F7B0; // type:f32 size:0x4
0x80B31040 = Obj_Spidertent_InitVars; // type:UNK_TYPE1 size:0x1
0x80B31060 = D_80B31060; // type:UNK_TYPE1 size:0x1
0x80B311C8 = D_80B311C8; // type:UNK_TYPE1 size:0x1
0x80B311D8 = D_80B311D8; // type:UNK_TYPE1 size:0x1
0x80B31340 = D_80B31340; // type:UNK_TYPE1 size:0x1
0x80B31350 = D_80B31350; // type:UNK_TYPE1 size:0x1
0x80B313A0 = D_80B313A0; // type:ObjSpidertentStruct2 size:0x60
0x80B31400 = D_80B31400; // type:UNK_TYPE1 size:0x1
0x80B3140C = D_80B3140C; // type:UNK_TYPE1 size:0x1
0x80B31418 = D_80B31418; // type:UNK_TYPE1 size:0x1
0x80B31430 = D_80B31430; // type:f32 size:0x4
0x80B31434 = D_80B31434; // type:f32 size:0x4
0x80B31438 = D_80B31438; // type:f32 size:0x4
0x80B3143C = D_80B3143C; // type:f32 size:0x4
0x80B31440 = D_80B31440; // type:f32 size:0x4
0x80B33910 = En_Zoraegg_InitVars; // type:UNK_TYPE1 size:0x1
0x80B33930 = D_80B33930; // type:UNK_TYPE4 size:0x4
0x80B33940 = D_80B33940; // type:UNK_TYPE4 size:0x4
0x80B33950 = D_80B33950; // type:UNK_TYPE1 size:0x1
0x80B33960 = D_80B33960; // type:f32 size:0x4
0x80B33964 = D_80B33964; // type:f32 size:0x4
0x80B33968 = D_80B33968; // type:f32 size:0x4
0x80B3396C = D_80B3396C; // type:f32 size:0x4
0x80B33970 = jtbl_80B33970; // type:UNK_PTR size:0x4
0x80B339B8 = jtbl_80B339B8; // type:UNK_PTR size:0x4
0x80B33A00 = D_80B33A00; // type:f32 size:0x4
0x80B33A04 = D_80B33A04; // type:f32 size:0x4
0x80B33A08 = D_80B33A08; // type:f32 size:0x4
0x80B33A0C = D_80B33A0C; // type:f32 size:0x4
0x80B33A10 = D_80B33A10; // type:f32 size:0x4
0x80B33A14 = D_80B33A14; // type:f32 size:0x4
0x80B33A18 = D_80B33A18; // type:f32 size:0x4
0x80B33A1C = D_80B33A1C; // type:f32 size:0x4
0x80B33A20 = D_80B33A20; // type:f32 size:0x4
0x80B33A24 = D_80B33A24; // type:f32 size:0x4
0x80B33A28 = D_80B33A28; // type:f32 size:0x4
0x80B33A2C = D_80B33A2C; // type:f32 size:0x4
0x80B33A30 = D_80B33A30; // type:f32 size:0x4
0x80B33A34 = D_80B33A34; // type:f32 size:0x4
0x80B33A38 = D_80B33A38; // type:f32 size:0x4
0x80B33A3C = D_80B33A3C; // type:f32 size:0x4
0x80B33A40 = D_80B33A40; // type:f32 size:0x4
0x80B33A44 = D_80B33A44; // type:f32 size:0x4
0x80B33A48 = D_80B33A48; // type:f32 size:0x4
0x80B34B20 = En_Kbt_InitVars; // type:UNK_TYPE1 size:0x1
0x80B34B40 = D_80B34B40; // type:UNK_TYPE4 size:0x4
0x80B34B50 = D_80B34B50; // type:UNK_TYPE1 size:0x1
0x80B34B84 = D_80B34B84; // type:UNK_TYPE1 size:0x1
0x80B34B90 = D_80B34B90; // type:UNK_TYPE1 size:0x1
0x80B34B98 = D_80B34B98; // type:UNK_TYPE1 size:0x1
0x80B34BB0 = jtbl_80B34BB0; // type:UNK_PTR size:0x4
0x80B34BE4 = jtbl_80B34BE4; // type:UNK_PTR size:0x4
0x80B34CD0 = jtbl_80B34CD0; // type:UNK_PTR size:0x4
0x80B36BE0 = En_Gg_InitVars; // type:UNK_TYPE1 size:0x1
0x80B36C00 = D_80B36C00; // type:UNK_TYPE1 size:0x1
0x80B36C2C = D_80B36C2C; // type:UNK_TYPE1 size:0x1
0x80B36C38 = D_80B36C38; // type:UNK_TYPE1 size:0x1
0x80B36C58 = D_80B36C58; // type:UNK_TYPE4 size:0x4
0x80B36DD8 = D_80B36DD8; // type:UNK_TYPE4 size:0x4
0x80B36DE4 = D_80B36DE4; // type:UNK_TYPE4 size:0x4
0x80B36DF0 = D_80B36DF0; // type:UNK_TYPE1 size:0x1
0x80B36DFC = D_80B36DFC; // type:UNK_TYPE1 size:0x1
0x80B36E10 = jtbl_80B36E10; // type:UNK_PTR size:0x4
0x80B36E38 = jtbl_80B36E38; // type:UNK_PTR size:0x4
0x80B36E58 = jtbl_80B36E58; // type:UNK_PTR size:0x4
0x80B36E78 = D_80B36E78; // type:f32 size:0x4
0x80B36E7C = D_80B36E7C; // type:f32 size:0x4
0x80B36E80 = D_80B36E80; // type:f32 size:0x4
0x80B36E84 = D_80B36E84; // type:f32 size:0x4
0x80B36E88 = D_80B36E88; // type:f32 size:0x4
0x80B36E8C = D_80B36E8C; // type:f32 size:0x4
0x80B38680 = En_Maruta_InitVars; // type:UNK_TYPE1 size:0x1
0x80B386A0 = D_80B386A0; // type:UNK_TYPE4 size:0x4
0x80B386C0 = D_80B386C0; // type:UNK_TYPE1 size:0x1
0x80B386CC = D_80B386CC; // type:UNK_TYPE1 size:0x1
0x80B38754 = D_80B38754; // type:UNK_TYPE4 size:0x4
0x80B3876C = D_80B3876C; // type:UNK_TYPE4 size:0x4
0x80B38778 = D_80B38778; // type:UNK_TYPE4 size:0x4
0x80B38784 = D_80B38784; // type:UNK_TYPE4 size:0x4
0x80B38790 = D_80B38790; // type:UNK_TYPE4 size:0x4
0x80B3879C = D_80B3879C; // type:UNK_TYPE4 size:0x4
0x80B387A8 = D_80B387A8; // type:UNK_TYPE4 size:0x4
0x80B387B4 = D_80B387B4; // type:UNK_TYPE4 size:0x4
0x80B387C0 = D_80B387C0; // type:UNK_TYPE4 size:0x4
0x80B387CC = D_80B387CC; // type:UNK_TYPE4 size:0x4
0x80B387E4 = D_80B387E4; // type:UNK_TYPE4 size:0x4
0x80B38850 = D_80B38850; // type:UNK_TYPE4 size:0x4
0x80B388BC = D_80B388BC; // type:UNK_TYPE1 size:0x1
0x80B3891C = D_80B3891C; // type:UNK_TYPE1 size:0x1
0x80B3897C = D_80B3897C; // type:UNK_TYPE1 size:0x1
0x80B389DC = D_80B389DC; // type:UNK_TYPE1 size:0x1
0x80B38A3C = D_80B38A3C; // type:UNK_TYPE1 size:0x1
0x80B38A9C = D_80B38A9C; // type:UNK_TYPE1 size:0x1
0x80B38AFC = D_80B38AFC; // type:UNK_TYPE1 size:0x1
0x80B38B28 = D_80B38B28; // type:UNK_TYPE1 size:0x1
0x80B38B48 = D_80B38B48; // type:UNK_PTR size:0x4
0x80B38B54 = D_80B38B54; // type:UNK_TYPE4 size:0x4
0x80B38B60 = D_80B38B60; // type:UNK_TYPE4 size:0x4
0x80B38B64 = D_80B38B64; // type:UNK_TYPE4 size:0x4
0x80B38B70 = D_80B38B70; // type:f32 size:0x4
0x80B38B74 = D_80B38B74; // type:f32 size:0x4
0x80B38B78 = D_80B38B78; // type:f32 size:0x4
0x80B38B7C = jtbl_80B38B7C; // type:UNK_PTR size:0x4
0x80B38B98 = D_80B38B98; // type:f32 size:0x4
0x80B38B9C = D_80B38B9C; // type:f32 size:0x4
0x80B38BA0 = D_80B38BA0; // type:f32 size:0x4
0x80B38BA4 = D_80B38BA4; // type:f32 size:0x4
0x80B38BA8 = D_80B38BA8; // type:f32 size:0x4
0x80B38BAC = D_80B38BAC; // type:f32 size:0x4
0x80B38BB0 = D_80B38BB0; // type:f32 size:0x4
0x80B38BB4 = D_80B38BB4; // type:f32 size:0x4
0x80B38BB8 = D_80B38BB8; // type:f32 size:0x4
0x80B38BBC = D_80B38BBC; // type:f32 size:0x4
0x80B3A8C0 = Obj_Snowball2_InitVars; // type:UNK_TYPE1 size:0x1
0x80B3A8E0 = D_80B3A8E0; // type:UNK_TYPE1 size:0x1
0x80B3A904 = D_80B3A904; // type:UNK_TYPE1 size:0x1
0x80B3A914 = D_80B3A914; // type:UNK_TYPE1 size:0x1
0x80B3A918 = D_80B3A918; // type:UNK_TYPE1 size:0x1
0x80B3A91C = D_80B3A91C; // type:UNK_TYPE4 size:0x4
0x80B3A92C = D_80B3A92C; // type:UNK_TYPE1 size:0x1
0x80B3A938 = D_80B3A938; // type:UNK_TYPE2 size:0x2
0x80B3A93C = D_80B3A93C; // type:UNK_TYPE1 size:0x1
0x80B3A960 = D_80B3A960; // type:f32 size:0x4
0x80B3A964 = D_80B3A964; // type:f32 size:0x4
0x80B3A968 = D_80B3A968; // type:f32 size:0x4
0x80B3A96C = D_80B3A96C; // type:f32 size:0x4
0x80B3A970 = D_80B3A970; // type:f32 size:0x4
0x80B3A974 = D_80B3A974; // type:f32 size:0x4
0x80B3A978 = D_80B3A978; // type:f32 size:0x4
0x80B3A97C = D_80B3A97C; // type:f32 size:0x4
0x80B3A980 = D_80B3A980; // type:f32 size:0x4
0x80B3A984 = D_80B3A984; // type:f32 size:0x4
0x80B3A988 = D_80B3A988; // type:f32 size:0x4
0x80B3A98C = D_80B3A98C; // type:f32 size:0x4
0x80B3A990 = D_80B3A990; // type:f32 size:0x4
0x80B3A994 = D_80B3A994; // type:f32 size:0x4
0x80B3A998 = D_80B3A998; // type:f32 size:0x4
0x80B3A99C = D_80B3A99C; // type:f32 size:0x4
0x80B3A9A0 = D_80B3A9A0; // type:f32 size:0x4
0x80B3A9A4 = D_80B3A9A4; // type:f32 size:0x4
0x80B3A9A8 = D_80B3A9A8; // type:f32 size:0x4
0x80B3A9AC = D_80B3A9AC; // type:f32 size:0x4
0x80B3A9B0 = D_80B3A9B0; // type:f32 size:0x4
0x80B3A9B4 = D_80B3A9B4; // type:f32 size:0x4
0x80B3A9B8 = D_80B3A9B8; // type:f32 size:0x4
0x80B3A9BC = D_80B3A9BC; // type:f32 size:0x4
0x80B3A9C0 = D_80B3A9C0; // type:f32 size:0x4
0x80B3A9C4 = D_80B3A9C4; // type:f32 size:0x4
0x80B3A9C8 = D_80B3A9C8; // type:f32 size:0x4
0x80B3A9CC = D_80B3A9CC; // type:f32 size:0x4
0x80B3A9D0 = D_80B3A9D0; // type:f32 size:0x4
0x80B3A9D4 = D_80B3A9D4; // type:f32 size:0x4
0x80B3A9D8 = D_80B3A9D8; // type:f32 size:0x4
0x80B3A9DC = D_80B3A9DC; // type:f32 size:0x4
0x80B3A9E0 = D_80B3A9E0; // type:f32 size:0x4
0x80B3A9E4 = D_80B3A9E4; // type:f32 size:0x4
0x80B3A9E8 = D_80B3A9E8; // type:f32 size:0x4
0x80B3BEE0 = En_Gg2_InitVars; // type:UNK_TYPE1 size:0x1
0x80B3BF00 = D_80B3BF00; // type:UNK_TYPE4 size:0x4
0x80B3C080 = D_80B3C080; // type:UNK_TYPE4 size:0x4
0x80B3C084 = D_80B3C084; // type:UNK_TYPE4 size:0x4
0x80B3C088 = D_80B3C088; // type:UNK_TYPE1 size:0x1
0x80B3C094 = D_80B3C094; // type:UNK_TYPE1 size:0x1
0x80B3C0A0 = D_80B3C0A0; // type:UNK_TYPE1 size:0x1
0x80B3C0AC = D_80B3C0AC; // type:UNK_TYPE1 size:0x1
0x80B3C0C0 = jtbl_80B3C0C0; // type:UNK_PTR size:0x4
0x80B3C0E4 = D_80B3C0E4; // type:f32 size:0x4
0x80B3C0E8 = D_80B3C0E8; // type:f32 size:0x4
0x80B3C0EC = D_80B3C0EC; // type:f32 size:0x4
0x80B3C940 = Obj_Ghaka_InitVars; // type:UNK_TYPE1 size:0x1
0x80B3C960 = D_80B3C960; // type:UNK_TYPE1 size:0x1
0x80B3C96C = D_80B3C96C; // type:UNK_TYPE1 size:0x1
0x80B3C980 = D_80B3C980; // type:f32 size:0x4
0x80B3C984 = D_80B3C984; // type:f32 size:0x4
0x80B3DC60 = En_Dnp_InitVars; // type:UNK_TYPE1 size:0x1
0x80B3DC80 = D_80B3DC80; // type:UNK_TYPE1 size:0x1
0x80B3DCAC = D_80B3DCAC; // type:UNK_TYPE1 size:0x1
0x80B3DCB8 = sAnimations; // type:UNK_TYPE1 size:0x1
0x80B3DE58 = D_80B3DE58; // type:UNK_TYPE1 size:0x1
0x80B3DE74 = sCsAnimations; // type:UNK_TYPE1 size:0x1
0x80B3DEAC = sEyeTextures; // type:UNK_TYPE1 size:0x1
0x80B3DEC0 = D_80B3DEC0; // type:f32 size:0x4
0x80B3DEC4 = D_80B3DEC4; // type:f32 size:0x4
0x80B3DEC8 = D_80B3DEC8; // type:f32 size:0x4
0x80B3DECC = D_80B3DECC; // type:f32 size:0x4
0x80B3DED0 = D_80B3DED0; // type:f32 size:0x4
0x80B3FBD0 = En_Dai_InitVars; // type:UNK_TYPE1 size:0x1
0x80B3FBF0 = D_80B3FBF0; // type:UNK_TYPE4 size:0x4
0x80B3FBFC = sAnimationInfo; // type:UNK_TYPE1 size:0x1
0x80B3FC8C = D_80B3FC8C; // type:UNK_TYPE1 size:0x1
0x80B3FCB4 = D_80B3FCB4; // type:UNK_TYPE4 size:0x4
0x80B3FCE4 = D_80B3FCE4; // type:UNK_TYPE4 size:0x4
0x80B3FD14 = D_80B3FD14; // type:UNK_TYPE2 size:0x2
0x80B3FD2C = D_80B3FD2C; // type:UNK_TYPE4 size:0x4
0x80B3FD4C = D_80B3FD4C; // type:UNK_TYPE4 size:0x4
0x80B3FD6C = D_80B3FD6C; // type:UNK_TYPE2 size:0x2
0x80B3FD7C = D_80B3FD7C; // type:UNK_TYPE4 size:0x4
0x80B3FDE8 = D_80B3FDE8; // type:UNK_TYPE4 size:0x4
0x80B3FDF4 = D_80B3FDF4; // type:UNK_TYPE4 size:0x4
0x80B3FE00 = D_80B3FE00; // type:UNK_TYPE2 size:0x2
0x80B3FE08 = D_80B3FE08; // type:UNK_TYPE4 size:0x4
0x80B3FE38 = D_80B3FE38; // type:UNK_TYPE1 size:0x1
0x80B3FE4C = D_80B3FE4C; // type:f32 size:0x4
0x80B3FE50 = D_80B3FE50; // type:f32 size:0x4
0x80B3FE54 = D_80B3FE54; // type:f32 size:0x4
0x80B3FE58 = D_80B3FE58; // type:UNK_TYPE1 size:0x1
0x80B3FE70 = sEyeTextures; // type:TexturePtr[] size:0x4
0x80B3FE90 = D_80B3FE90; // type:f32 size:0x4
0x80B3FE94 = D_80B3FE94; // type:f32 size:0x4
0x80B40760 = Bg_Goron_Oyu_InitVars; // type:UNK_TYPE1 size:0x1
0x80B40780 = D_80B40780; // type:UNK_TYPE1 size:0x1
0x80B43250 = En_Kgy_InitVars; // type:UNK_TYPE1 size:0x1
0x80B43270 = D_80B43270; // type:UNK_TYPE1 size:0x1
0x80B43298 = D_80B43298; // type:EffectShieldParticleInit size:0x40
0x80B432C6 = D_80B432C6; // type:UNK_TYPE1 size:0x1
0x80B432C8 = D_80B432C8; // type:UNK_TYPE1 size:0x1
0x80B432CA = D_80B432CA; // type:UNK_TYPE1 size:0x1
0x80B432D8 = D_80B432D8; // type:UNK_TYPE1 size:0x1
0x80B432E4 = D_80B432E4; // type:UNK_TYPE1 size:0x1
0x80B432F0 = D_80B432F0; // type:f32 size:0x4
0x80B432F4 = D_80B432F4; // type:f32 size:0x4
0x80B432F8 = jtbl_80B432F8; // type:UNK_PTR size:0x4
0x80B4330C = jtbl_80B4330C; // type:UNK_PTR size:0x4
0x80B43370 = jtbl_80B43370; // type:UNK_PTR size:0x4
0x80B43400 = jtbl_80B43400; // type:UNK_PTR size:0x4
0x80B43414 = jtbl_80B43414; // type:UNK_PTR size:0x4
0x80B43460 = D_80B43460; // type:f32 size:0x4
0x80B4E890 = En_Invadepoh_InitVars; // type:UNK_TYPE1 size:0x1
0x80B4E8B0 = D_80B4E8B0; // type:UNK_TYPE1 size:0x1
0x80B4E8DC = D_80B4E8DC; // type:UNK_TYPE1 size:0x1
0x80B4E908 = D_80B4E908; // type:UNK_TYPE1 size:0x1
0x80B4E934 = D_80B4E934; // type:UNK_TYPE4 size:0x4
0x80B4E938 = D_80B4E938; // type:f32 size:0x4
0x80B4E940 = D_80B4E940; // type:UNK_TYPE4 size:0x4
0x80B4E944 = sRomaniEyeTextures; // type:UNK_TYPE4 size:0x4
0x80B4E958 = sRomaniMouthTextures; // type:UNK_TYPE4 size:0x4
0x80B4E968 = D_80B4E968; // type:UNK_TYPE1 size:0x1
0x80B4E96C = sCremiaEyeTextures; // type:UNK_TYPE4 size:0x4
0x80B4E984 = sCremiaMouthTextures; // type:UNK_TYPE4 size:0x4
0x80B4E994 = D_80B4E994; // type:UNK_TYPE1 size:0x1
0x80B4E998 = D_80B4E998; // type:UNK_TYPE1 size:0x1
0x80B4E99C = D_80B4E99C; // type:UNK_TYPE1 size:0x1
0x80B4E9A0 = D_80B4E9A0; // type:UNK_TYPE1 size:0x1
0x80B4E9A4 = D_80B4E9A4; // type:UNK_TYPE1 size:0x1
0x80B4E9AC = D_80B4E9AC; // type:UNK_TYPE1 size:0x1
0x80B4E9B4 = D_80B4E9B4; // type:UNK_TYPE1 size:0x1
0x80B4E9BC = D_80B4E9BC; // type:UNK_TYPE1 size:0x1
0x80B4E9C0 = D_80B4E9C0; // type:UNK_TYPE1 size:0x1
0x80B4E9C4 = D_80B4E9C4; // type:UNK_TYPE1 size:0x1
0x80B4E9CC = D_80B4E9CC; // type:UNK_TYPE1 size:0x1
0x80B4E9D4 = D_80B4E9D4; // type:UNK_TYPE1 size:0x1
0x80B4E9DC = D_80B4E9DC; // type:UNK_TYPE1 size:0x1
0x80B4E9E4 = D_80B4E9E4; // type:UNK_TYPE1 size:0x1
0x80B4E9EC = D_80B4E9EC; // type:UNK_TYPE1 size:0x1
0x80B4E9F4 = D_80B4E9F4; // type:UNK_TYPE1 size:0x1
0x80B4E9FC = D_80B4E9FC; // type:UNK_TYPE1 size:0x1
0x80B4EA04 = D_80B4EA04; // type:UNK_TYPE1 size:0x1
0x80B4EA24 = D_80B4EA24; // type:UNK_TYPE1 size:0x1
0x80B4EA2C = D_80B4EA2C; // type:UNK_TYPE1 size:0x1
0x80B4EA40 = D_80B4EA40; // type:UNK_PTR size:0x4
0x80B4EA50 = D_80B4EA50; // type:UNK_PTR size:0x4
0x80B4EA60 = D_80B4EA60; // type:UNK_PTR size:0x4
0x80B4EA70 = D_80B4EA70; // type:UNK_PTR size:0x4
0x80B4EA80 = D_80B4EA80; // type:UNK_TYPE1 size:0x1
0x80B4EA88 = D_80B4EA88; // type:UNK_TYPE1 size:0x1
0x80B4EA90 = D_80B4EA90; // type:UNK_PTR size:0x4
0x80B4EAB0 = D_80B4EAB0; // type:UNK_TYPE1 size:0x1
0x80B4EAB4 = D_80B4EAB4; // type:UNK_TYPE1 size:0x1
0x80B4EAB8 = D_80B4EAB8; // type:UNK_TYPE1 size:0x1
0x80B4EABC = D_80B4EABC; // type:UNK_TYPE1 size:0x1
0x80B4EAC0 = D_80B4EAC0; // type:UNK_TYPE1 size:0x1
0x80B4EAC8 = D_80B4EAC8; // type:UNK_TYPE1 size:0x1
0x80B4EAD0 = D_80B4EAD0; // type:UNK_TYPE1 size:0x1
0x80B4EAD8 = D_80B4EAD8; // type:UNK_TYPE1 size:0x1
0x80B4EAE0 = D_80B4EAE0; // type:UNK_TYPE1 size:0x1
0x80B4EAE8 = D_80B4EAE8; // type:UNK_TYPE1 size:0x1
0x80B4EAF0 = D_80B4EAF0; // type:UNK_TYPE1 size:0x1
0x80B4EAF8 = D_80B4EAF8; // type:UNK_TYPE1 size:0x1
0x80B4EB00 = D_80B4EB00; // type:UNK_PTR size:0x4
0x80B4EB10 = D_80B4EB10; // type:UNK_TYPE1 size:0x1
0x80B4EB14 = D_80B4EB14; // type:UNK_TYPE1 size:0x1
0x80B4EB18 = D_80B4EB18; // type:UNK_TYPE1 size:0x1
0x80B4EB20 = D_80B4EB20; // type:UNK_TYPE1 size:0x1
0x80B4EB28 = D_80B4EB28; // type:UNK_TYPE1 size:0x1
0x80B4EB30 = D_80B4EB30; // type:UNK_TYPE1 size:0x1
0x80B4EB38 = D_80B4EB38; // type:UNK_TYPE1 size:0x1
0x80B4EB40 = D_80B4EB40; // type:UNK_TYPE1 size:0x1
0x80B4EB48 = D_80B4EB48; // type:UNK_TYPE1 size:0x1
0x80B4EB50 = D_80B4EB50; // type:UNK_TYPE1 size:0x1
0x80B4EB58 = D_80B4EB58; // type:UNK_TYPE1 size:0x1
0x80B4EB60 = D_80B4EB60; // type:UNK_TYPE1 size:0x1
0x80B4EB80 = D_80B4EB80; // type:UNK_TYPE1 size:0x1
0x80B4EB88 = D_80B4EB88; // type:UNK_TYPE1 size:0x1
0x80B4EB9C = D_80B4EB9C; // type:UNK_PTR size:0x4
0x80B4EBAC = D_80B4EBAC; // type:UNK_PTR size:0x4
0x80B4EBBC = D_80B4EBBC; // type:UNK_PTR size:0x4
0x80B4EBCC = D_80B4EBCC; // type:UNK_PTR size:0x4
0x80B4EBDC = D_80B4EBDC; // type:UNK_PTR size:0x4
0x80B4EBF4 = D_80B4EBF4; // type:UNK_TYPE1 size:0x1
0x80B4EBF8 = D_80B4EBF8; // type:UNK_TYPE1 size:0x1
0x80B4EC00 = D_80B4EC00; // type:UNK_TYPE1 size:0x1
0x80B4EC08 = D_80B4EC08; // type:UNK_PTR size:0x4
0x80B4EC0C = D_80B4EC0C; // type:UNK_TYPE1 size:0x1
0x80B4EC18 = D_80B4EC18; // type:UNK_TYPE1 size:0x1
0x80B4EC1C = D_80B4EC1C; // type:UNK_TYPE1 size:0x1
0x80B4EC20 = D_80B4EC20; // type:UNK_TYPE1 size:0x1
0x80B4EC24 = D_80B4EC24; // type:UNK_TYPE1 size:0x1
0x80B4EC34 = D_80B4EC34; // type:UNK_TYPE1 size:0x1
0x80B4EC44 = D_80B4EC44; // type:UNK_TYPE1 size:0x1
0x80B4EC54 = D_80B4EC54; // type:UNK_TYPE1 size:0x1
0x80B4EC68 = D_80B4EC68; // type:UNK_TYPE1 size:0x1
0x80B4EC80 = D_80B4EC80; // type:UNK_TYPE1 size:0x1
0x80B4EC98 = D_80B4EC98; // type:UNK_TYPE1 size:0x1
0x80B4ECB0 = D_80B4ECB0; // type:UNK_PTR size:0x4
0x80B4ECE8 = D_80B4ECE8; // type:UNK_PTR size:0x4
0x80B4ED20 = D_80B4ED20; // type:UNK_TYPE2 size:0x2
0x80B4ED30 = D_80B4ED30; // type:UNK_TYPE4 size:0x4
0x80B4ED6C = D_80B4ED6C; // type:UNK_TYPE1 size:0x1
0x80B4EDC0 = D_80B4EDC0; // type:UNK_TYPE1 size:0x1
0x80B4EDC8 = D_80B4EDC8; // type:UNK_TYPE1 size:0x1
0x80B4EDD0 = D_80B4EDD0; // type:UNK_TYPE1 size:0x1
0x80B4EE0C = D_80B4EE0C; // type:UNK_TYPE1 size:0x1
0x80B4EE24 = D_80B4EE24; // type:UNK_TYPE1 size:0x1
0x80B4EE30 = D_80B4EE30; // type:UNK_TYPE1 size:0x1
0x80B4EE7C = D_80B4EE7C; // type:f32 size:0x4
0x80B4EE80 = D_80B4EE80; // type:f32 size:0x4
0x80B4EE84 = D_80B4EE84; // type:f32 size:0x4
0x80B4EE88 = D_80B4EE88; // type:f32 size:0x4
0x80B4EE8C = D_80B4EE8C; // type:f32 size:0x4
0x80B4EE90 = D_80B4EE90; // type:f32 size:0x4
0x80B4EE94 = D_80B4EE94; // type:f32 size:0x4
0x80B4EE98 = D_80B4EE98; // type:f32 size:0x4
0x80B4EE9C = D_80B4EE9C; // type:f32 size:0x4
0x80B4EEA0 = D_80B4EEA0; // type:f32 size:0x4
0x80B4EEA4 = D_80B4EEA4; // type:f32 size:0x4
0x80B4EEA8 = D_80B4EEA8; // type:f32 size:0x4
0x80B4EEAC = D_80B4EEAC; // type:f32 size:0x4
0x80B4EEB0 = D_80B4EEB0; // type:f32 size:0x4
0x80B4EEB4 = D_80B4EEB4; // type:f32 size:0x4
0x80B4EEB8 = D_80B4EEB8; // type:f32 size:0x4
0x80B4EEBC = D_80B4EEBC; // type:f32 size:0x4
0x80B4EEC0 = D_80B4EEC0; // type:f32 size:0x4
0x80B4EEC4 = D_80B4EEC4; // type:f32 size:0x4
0x80B4EEC8 = D_80B4EEC8; // type:f32 size:0x4
0x80B4EECC = D_80B4EECC; // type:f32 size:0x4
0x80B4EED0 = D_80B4EED0; // type:f32 size:0x4
0x80B4EED4 = D_80B4EED4; // type:f32 size:0x4
0x80B4EED8 = D_80B4EED8; // type:f32 size:0x4
0x80B4EEDC = D_80B4EEDC; // type:f32 size:0x4
0x80B4EEE0 = D_80B4EEE0; // type:f32 size:0x4
0x80B4EEE4 = D_80B4EEE4; // type:f32 size:0x4
0x80B4EEE8 = D_80B4EEE8; // type:f32 size:0x4
0x80B4EEEC = D_80B4EEEC; // type:f32 size:0x4
0x80B4EEF0 = D_80B4EEF0; // type:f32 size:0x4
0x80B4EEF4 = D_80B4EEF4; // type:f32 size:0x4
0x80B4EEF8 = D_80B4EEF8; // type:f32 size:0x4
0x80B4EEFC = D_80B4EEFC; // type:f32 size:0x4
0x80B4EF00 = D_80B4EF00; // type:f32 size:0x4
0x80B4EF04 = D_80B4EF04; // type:f32 size:0x4
0x80B4EF08 = D_80B4EF08; // type:f32 size:0x4
0x80B4EF0C = D_80B4EF0C; // type:f32 size:0x4
0x80B4EF10 = D_80B4EF10; // type:f32 size:0x4
0x80B4EF14 = D_80B4EF14; // type:f32 size:0x4
0x80B4EF18 = D_80B4EF18; // type:f32 size:0x4
0x80B4EF1C = D_80B4EF1C; // type:f32 size:0x4
0x80B4EF20 = D_80B4EF20; // type:f32 size:0x4
0x80B4EF24 = D_80B4EF24; // type:f32 size:0x4
0x80B4EF28 = D_80B4EF28; // type:f32 size:0x4
0x80B4EF2C = D_80B4EF2C; // type:f32 size:0x4
0x80B4EF30 = D_80B4EF30; // type:f32 size:0x4
0x80B4EF34 = D_80B4EF34; // type:f32 size:0x4
0x80B4EF38 = D_80B4EF38; // type:f32 size:0x4
0x80B4EF3C = D_80B4EF3C; // type:f32 size:0x4
0x80B4EF40 = D_80B4EF40; // type:f32 size:0x4
0x80B4EF44 = D_80B4EF44; // type:f32 size:0x4
0x80B4EF48 = D_80B4EF48; // type:f32 size:0x4
0x80B4EF4C = D_80B4EF4C; // type:f32 size:0x4
0x80B4EF50 = D_80B4EF50; // type:f32 size:0x4
0x80B4EF54 = D_80B4EF54; // type:f32 size:0x4
0x80B4EF58 = D_80B4EF58; // type:f32 size:0x4
0x80B4EF5C = D_80B4EF5C; // type:f32 size:0x4
0x80B4EF60 = D_80B4EF60; // type:f32 size:0x4
0x80B4EF64 = D_80B4EF64; // type:f32 size:0x4
0x80B4EF68 = D_80B4EF68; // type:f32 size:0x4
0x80B4EF6C = D_80B4EF6C; // type:f32 size:0x4
0x80B4EF70 = D_80B4EF70; // type:f32 size:0x4
0x80B4EF74 = D_80B4EF74; // type:f32 size:0x4
0x80B4EF78 = D_80B4EF78; // type:f32 size:0x4
0x80B4EF7C = D_80B4EF7C; // type:f32 size:0x4
0x80B4EF80 = D_80B4EF80; // type:f32 size:0x4
0x80B4EF84 = D_80B4EF84; // type:f32 size:0x4
0x80B4EF88 = D_80B4EF88; // type:f32 size:0x4
0x80B4EF8C = D_80B4EF8C; // type:f32 size:0x4
0x80B4EF90 = D_80B4EF90; // type:f32 size:0x4
0x80B4EF94 = D_80B4EF94; // type:f32 size:0x4
0x80B4EF98 = D_80B4EF98; // type:f32 size:0x4
0x80B4EF9C = D_80B4EF9C; // type:f32 size:0x4
0x80B4EFA0 = D_80B4EFA0; // type:f32 size:0x4
0x80B4EFA4 = D_80B4EFA4; // type:f32 size:0x4
0x80B4EFA8 = D_80B4EFA8; // type:f32 size:0x4
0x80B4EFAC = D_80B4EFAC; // type:f32 size:0x4
0x80B4EFB0 = D_80B4EFB0; // type:f32 size:0x4
0x80B4EFB4 = D_80B4EFB4; // type:f32 size:0x4
0x80B4EFB8 = D_80B4EFB8; // type:f32 size:0x4
0x80B4EFBC = D_80B4EFBC; // type:f32 size:0x4
0x80B4EFC0 = D_80B4EFC0; // type:f32 size:0x4
0x80B4EFC4 = D_80B4EFC4; // type:f32 size:0x4
0x80B4EFC8 = D_80B4EFC8; // type:f32 size:0x4
0x80B4EFCC = D_80B4EFCC; // type:f32 size:0x4
0x80B4EFD0 = D_80B4EFD0; // type:f32 size:0x4
0x80B4EFD4 = D_80B4EFD4; // type:f32 size:0x4
0x80B4EFD8 = D_80B4EFD8; // type:f32 size:0x4
0x80B4EFDC = D_80B4EFDC; // type:f32 size:0x4
0x80B4EFE0 = D_80B4EFE0; // type:f32 size:0x4
0x80B4EFE4 = D_80B4EFE4; // type:f32 size:0x4
0x80B4EFE8 = D_80B4EFE8; // type:f32 size:0x4
0x80B4EFEC = D_80B4EFEC; // type:f32 size:0x4
0x80B4EFF0 = D_80B4EFF0; // type:f32 size:0x4
0x80B4EFF4 = D_80B4EFF4; // type:f32 size:0x4
0x80B4EFF8 = D_80B4EFF8; // type:f32 size:0x4
0x80B4EFFC = D_80B4EFFC; // type:f32 size:0x4
0x80B4F000 = D_80B4F000; // type:f32 size:0x4
0x80B4F004 = D_80B4F004; // type:f32 size:0x4
0x80B4F008 = D_80B4F008; // type:f32 size:0x4
0x80B4F00C = D_80B4F00C; // type:f32 size:0x4
0x80B4F010 = D_80B4F010; // type:f32 size:0x4
0x80B4F014 = D_80B4F014; // type:f32 size:0x4
0x80B4F018 = D_80B4F018; // type:f32 size:0x4
0x80B4F01C = D_80B4F01C; // type:f32 size:0x4
0x80B4F020 = D_80B4F020; // type:f32 size:0x4
0x80B4F024 = D_80B4F024; // type:f32 size:0x4
0x80B4F028 = D_80B4F028; // type:f32 size:0x4
0x80B4F02C = D_80B4F02C; // type:f32 size:0x4
0x80B4F030 = D_80B4F030; // type:f32 size:0x4
0x80B4F034 = D_80B4F034; // type:f32 size:0x4
0x80B4F038 = D_80B4F038; // type:f32 size:0x4
0x80B4F03C = D_80B4F03C; // type:f32 size:0x4
0x80B4F040 = D_80B4F040; // type:f32 size:0x4
0x80B4F044 = D_80B4F044; // type:f32 size:0x4
0x80B4F048 = D_80B4F048; // type:f32 size:0x4
0x80B4F04C = D_80B4F04C; // type:f32 size:0x4
0x80B4F050 = D_80B4F050; // type:f32 size:0x4
0x80B4F054 = D_80B4F054; // type:f32 size:0x4
0x80B4F058 = D_80B4F058; // type:f32 size:0x4
0x80B4F05C = D_80B4F05C; // type:f32 size:0x4
0x80B4F060 = D_80B4F060; // type:f32 size:0x4
0x80B4F064 = D_80B4F064; // type:f32 size:0x4
0x80B4F068 = D_80B4F068; // type:f32 size:0x4
0x80B4F06C = D_80B4F06C; // type:f32 size:0x4
0x80B4F070 = D_80B4F070; // type:f32 size:0x4
0x80B4F074 = D_80B4F074; // type:f32 size:0x4
0x80B4F078 = D_80B4F078; // type:f32 size:0x4
0x80B502A0 = D_80B502A0; // type:UNK_TYPE1 size:0x1
0x80B502E0 = D_80B502E0; // type:UNK_TYPE1 size:0x1
0x80B50320 = D_80B50320; // type:UNK_TYPE4 size:0x4
0x80B50324 = D_80B50324; // type:UNK_TYPE4 size:0x4
0x80B50328 = D_80B50328; // type:UNK_TYPE4 size:0x4
0x80B5032C = D_80B5032C; // type:UNK_TYPE4 size:0x4
0x80B50340 = D_80B50340; // type:UNK_TYPE1 size:0x1
0x80B50348 = D_80B50348; // type:UNK_TYPE1 size:0x1
0x80B50350 = D_80B50350; // type:UNK_TYPE1 size:0x1
0x80B503F0 = D_80B503F0; // type:UNK_TYPE4 size:0x4
0x80B503F4 = D_80B503F4; // type:UNK_TYPE4 size:0x4
0x80B503F8 = D_80B503F8; // type:UNK_TYPE4 size:0x4
0x80B503FC = sAlienEyeBeamTexAnim; // type:UNK_TYPE4 size:0x4
0x80B50400 = sAlienEmptyTexAnim; // type:UNK_TYPE4 size:0x4
0x80B50404 = D_80B50404; // type:UNK_TYPE2 size:0x2
0x80B50406 = D_80B50406; // type:UNK_TYPE2 size:0x2
0x80B5040A = D_80B5040A; // type:UNK_TYPE1 size:0x1
0x80B5040C = D_80B5040C; // type:UNK_TYPE4 size:0x4
0x80B531F0 = En_Gk_InitVars; // type:UNK_TYPE1 size:0x1
0x80B53210 = D_80B53210; // type:UNK_TYPE1 size:0x1
0x80B5323C = D_80B5323C; // type:UNK_TYPE1 size:0x1
0x80B53248 = D_80B53248; // type:UNK_TYPE1 size:0x1
0x80B53268 = D_80B53268; // type:UNK_TYPE4 size:0x4
0x80B53340 = D_80B53340; // type:UNK_TYPE4 size:0x4
0x80B533A0 = D_80B533A0; // type:UNK_TYPE1 size:0x1
0x80B533A4 = D_80B533A4; // type:UNK_TYPE1 size:0x1
0x80B533A8 = D_80B533A8; // type:UNK_TYPE4 size:0x4
0x80B533B4 = D_80B533B4; // type:UNK_TYPE4 size:0x4
0x80B533C0 = D_80B533C0; // type:UNK_TYPE4 size:0x4
0x80B533CC = D_80B533CC; // type:UNK_TYPE4 size:0x4
0x80B533D8 = D_80B533D8; // type:UNK_TYPE4 size:0x4
0x80B533E4 = D_80B533E4; // type:UNK_TYPE1 size:0x1
0x80B53400 = jtbl_80B53400; // type:UNK_PTR size:0x4
0x80B53418 = jtbl_80B53418; // type:UNK_PTR size:0x4
0x80B53434 = D_80B53434; // type:f32 size:0x4
0x80B53438 = jtbl_80B53438; // type:UNK_PTR size:0x4
0x80B5346C = D_80B5346C; // type:f32 size:0x4
0x80B53470 = jtbl_80B53470; // type:UNK_PTR size:0x4
0x80B5348C = D_80B5348C; // type:f32 size:0x4
0x80B53490 = D_80B53490; // type:f32 size:0x4
0x80B53494 = D_80B53494; // type:f32 size:0x4
0x80B53498 = D_80B53498; // type:f32 size:0x4
0x80B5349C = D_80B5349C; // type:f32 size:0x4
0x80B534A0 = D_80B534A0; // type:f32 size:0x4
0x80B534A4 = D_80B534A4; // type:f32 size:0x4
0x80B534A8 = D_80B534A8; // type:f32 size:0x4
0x80B534AC = D_80B534AC; // type:f32 size:0x4
0x80B581D0 = D_80B581D0; // type:UNK_TYPE1 size:0x1
0x80B58618 = D_80B58618; // type:UNK_TYPE1 size:0x1
0x80B58718 = D_80B58718; // type:UNK_TYPE1 size:0x1
0x80B58784 = D_80B58784; // type:UNK_TYPE1 size:0x1
0x80B58808 = D_80B58808; // type:UNK_TYPE1 size:0x1
0x80B5885C = D_80B5885C; // type:UNK_TYPE1 size:0x1
0x80B58938 = D_80B58938; // type:UNK_TYPE1 size:0x1
0x80B58944 = D_80B58944; // type:UNK_TYPE1 size:0x1
0x80B5894C = D_80B5894C; // type:UNK_TYPE1 size:0x1
0x80B58954 = D_80B58954; // type:UNK_TYPE1 size:0x1
0x80B58980 = D_80B58980; // type:UNK_TYPE1 size:0x1
0x80B58988 = D_80B58988; // type:UNK_TYPE1 size:0x1
0x80B58994 = D_80B58994; // type:UNK_TYPE1 size:0x1
0x80B5899C = D_80B5899C; // type:UNK_TYPE1 size:0x1
0x80B589AC = D_80B589AC; // type:UNK_TYPE1 size:0x1
0x80B589FC = D_80B589FC; // type:UNK_TYPE1 size:0x1
0x80B58A04 = D_80B58A04; // type:UNK_TYPE1 size:0x1
0x80B58A24 = D_80B58A24; // type:UNK_TYPE1 size:0x1
0x80B58A3C = D_80B58A3C; // type:UNK_TYPE1 size:0x1
0x80B58A44 = D_80B58A44; // type:UNK_TYPE1 size:0x1
0x80B58ABC = D_80B58ABC; // type:UNK_TYPE1 size:0x1
0x80B58AC4 = D_80B58AC4; // type:UNK_TYPE1 size:0x1
0x80B58AE8 = D_80B58AE8; // type:UNK_TYPE1 size:0x1
0x80B58AF4 = D_80B58AF4; // type:UNK_TYPE1 size:0x1
0x80B58B3C = D_80B58B3C; // type:UNK_TYPE1 size:0x1
0x80B58B7C = D_80B58B7C; // type:UNK_TYPE1 size:0x1
0x80B58B88 = D_80B58B88; // type:UNK_TYPE1 size:0x1
0x80B58B90 = D_80B58B90; // type:UNK_TYPE1 size:0x1
0x80B58B9C = En_An_InitVars; // type:UNK_TYPE1 size:0x1
0x80B58BBC = D_80B58BBC; // type:UNK_TYPE1 size:0x1
0x80B58BE8 = D_80B58BE8; // type:UNK_TYPE1 size:0x1
0x80B58BF4 = D_80B58BF4; // type:UNK_TYPE1 size:0x1
0x80B58E34 = D_80B58E34; // type:UNK_TYPE1 size:0x1
0x80B58E40 = D_80B58E40; // type:UNK_TYPE1 size:0x1
0x80B58E54 = D_80B58E54; // type:UNK_TYPE1 size:0x1
0x80B58E60 = D_80B58E60; // type:UNK_TYPE1 size:0x1
0x80B58E68 = D_80B58E68; // type:UNK_TYPE1 size:0x1
0x80B58E74 = D_80B58E74; // type:UNK_TYPE1 size:0x1
0x80B58E7C = D_80B58E7C; // type:UNK_TYPE1 size:0x1
0x80B58E88 = D_80B58E88; // type:UNK_TYPE1 size:0x1
0x80B58E90 = D_80B58E90; // type:UNK_TYPE1 size:0x1
0x80B58E9C = D_80B58E9C; // type:UNK_TYPE1 size:0x1
0x80B58EA4 = D_80B58EA4; // type:UNK_TYPE1 size:0x1
0x80B58EAC = D_80B58EAC; // type:UNK_TYPE4 size:0x4
0x80B58ED4 = D_80B58ED4; // type:UNK_TYPE1 size:0x1
0x80B58EE0 = D_80B58EE0; // type:UNK_TYPE1 size:0x1
0x80B58EEC = D_80B58EEC; // type:UNK_TYPE1 size:0x1
0x80B58F10 = jtbl_80B58F10; // type:UNK_PTR size:0x4
0x80B58F48 = jtbl_80B58F48; // type:UNK_PTR size:0x4
0x80B58F70 = jtbl_80B58F70; // type:UNK_PTR size:0x4
0x80B58F8C = jtbl_80B58F8C; // type:UNK_PTR size:0x4
0x80B58FA4 = jtbl_80B58FA4; // type:UNK_PTR size:0x4
0x80B58FC4 = jtbl_80B58FC4; // type:UNK_PTR size:0x4
0x80B58FDC = jtbl_80B58FDC; // type:UNK_PTR size:0x4
0x80B59004 = jtbl_80B59004; // type:UNK_PTR size:0x4
0x80B5903C = jtbl_80B5903C; // type:UNK_PTR size:0x4
0x80B59064 = jtbl_80B59064; // type:UNK_PTR size:0x4
0x80B59138 = jtbl_80B59138; // type:UNK_PTR size:0x4
0x80B591D8 = jtbl_80B591D8; // type:UNK_PTR size:0x4
0x80B5933C = jtbl_80B5933C; // type:UNK_PTR size:0x4
0x80B594A4 = jtbl_80B594A4; // type:UNK_PTR size:0x4
0x80B594D4 = jtbl_80B594D4; // type:UNK_PTR size:0x4
0x80B5950C = jtbl_80B5950C; // type:UNK_PTR size:0x4
0x80B5955C = jtbl_80B5955C; // type:UNK_PTR size:0x4
0x80B595BC = jtbl_80B595BC; // type:UNK_PTR size:0x4
0x80B59610 = jtbl_80B59610; // type:UNK_PTR size:0x4
0x80B5970C = D_80B5970C; // type:f32 size:0x4
0x80B59710 = jtbl_80B59710; // type:UNK_PTR size:0x4
0x80B5976C = jtbl_80B5976C; // type:UNK_PTR size:0x4
0x80B59780 = jtbl_80B59780; // type:UNK_PTR size:0x4
0x80B5B1F0 = D_80B5B1F0; // type:UNK_TYPE4 size:0x4
0x80B5B1F4 = En_Bee_InitVars; // type:UNK_TYPE1 size:0x1
0x80B5B214 = D_80B5B214; // type:UNK_TYPE1 size:0x1
0x80B5B234 = D_80B5B234; // type:UNK_TYPE1 size:0x1
0x80B5B260 = D_80B5B260; // type:f32 size:0x4
0x80B5E380 = En_Ot_InitVars; // type:UNK_TYPE1 size:0x1
0x80B5E3A0 = D_80B5E3A0; // type:UNK_TYPE1 size:0x1
0x80B5E3CC = D_80B5E3CC; // type:UNK_TYPE4 size:0x4
0x80B5E3FC = D_80B5E3FC; // type:UNK_TYPE1 size:0x1
0x80B5E408 = D_80B5E408; // type:UNK_TYPE1 size:0x1
0x80B5E40C = D_80B5E40C; // type:UNK_TYPE1 size:0x1
0x80B5E410 = D_80B5E410; // type:UNK_TYPE1 size:0x1
0x80B5E420 = D_80B5E420; // type:f32 size:0x4
0x80B5E424 = D_80B5E424; // type:f32 size:0x4
0x80B5E428 = D_80B5E428; // type:f32 size:0x4
0x80B5E42C = D_80B5E42C; // type:f32 size:0x4
0x80B5E430 = D_80B5E430; // type:f32 size:0x4
0x80B5E434 = D_80B5E434; // type:f32 size:0x4
0x80B5E438 = D_80B5E438; // type:f32 size:0x4
0x80B5E43C = D_80B5E43C; // type:f32 size:0x4
0x80B5E440 = D_80B5E440; // type:f32 size:0x4
0x80B5E444 = D_80B5E444; // type:f32 size:0x4
0x80B5E448 = D_80B5E448; // type:f32 size:0x4
0x80B5E44C = D_80B5E44C; // type:f32 size:0x4
0x80B5E450 = D_80B5E450; // type:f32 size:0x4
0x80B5E454 = D_80B5E454; // type:f32 size:0x4
0x80B5E458 = D_80B5E458; // type:f32 size:0x4
0x80B5E45C = D_80B5E45C; // type:f32 size:0x4
0x80B5E460 = jtbl_80B5E460; // type:UNK_PTR size:0x4
0x80B5E47C = jtbl_80B5E47C; // type:UNK_PTR size:0x4
0x80B5E498 = jtbl_80B5E498; // type:UNK_PTR size:0x4
0x80B5E4B0 = D_80B5E4B0; // type:f32 size:0x4
0x80B5E4B4 = D_80B5E4B4; // type:f32 size:0x4
0x80B5E4B8 = D_80B5E4B8; // type:f32 size:0x4
0x80B5E4BC = D_80B5E4BC; // type:f32 size:0x4
0x80B5E4C0 = D_80B5E4C0; // type:f32 size:0x4
0x80B5E4C4 = D_80B5E4C4; // type:f32 size:0x4
0x80B5E880 = D_80B5E880; // type:UNK_TYPE1 size:0x1
0x80B5E884 = D_80B5E884; // type:UNK_TYPE1 size:0x1
0x80B5E888 = D_80B5E888; // type:UNK_TYPE1 size:0x1
0x80B605D0 = D_80B605D0; // type:UNK_TYPE4 size:0x4
0x80B605D4 = En_Dragon_InitVars; // type:UNK_TYPE1 size:0x1
0x80B605F4 = D_80B605F4; // type:UNK_TYPE1 size:0x1
0x80B60614 = D_80B60614; // type:UNK_TYPE1 size:0x1
0x80B60734 = D_80B60734; // type:UNK_TYPE1 size:0x1
0x80B60744 = D_80B60744; // type:UNK_TYPE1 size:0x1
0x80B60754 = D_80B60754; // type:UNK_TYPE1 size:0x1
0x80B60758 = D_80B60758; // type:UNK_TYPE1 size:0x1
0x80B60764 = D_80B60764; // type:UNK_TYPE1 size:0x1
0x80B60770 = D_80B60770; // type:Vec3f size:0xC
0x80B6077C = D_80B6077C; // type:Vec3f size:0xC
0x80B60788 = D_80B60788; // type:Vec3f size:0x60
0x80B607E8 = D_80B607E8; // type:Vec3f size:0x60
0x80B60848 = D_80B60848; // type:UNK_TYPE1 size:0x1
0x80B60858 = D_80B60858; // type:UNK_TYPE1 size:0x1
0x80B60878 = D_80B60878; // type:UNK_TYPE4 size:0x4
0x80B60890 = D_80B60890; // type:f32 size:0x4
0x80B60894 = D_80B60894; // type:f32 size:0x4
0x80B60898 = D_80B60898; // type:f32 size:0x4
0x80B6089C = D_80B6089C; // type:f32 size:0x4
0x80B608A0 = D_80B608A0; // type:f32 size:0x4
0x80B608A4 = D_80B608A4; // type:f32 size:0x4
0x80B608A8 = D_80B608A8; // type:f32 size:0x4
0x80B608AC = D_80B608AC; // type:f32 size:0x4
0x80B608B0 = D_80B608B0; // type:f32 size:0x4
0x80B608B4 = D_80B608B4; // type:f32 size:0x4
0x80B608B8 = jtbl_80B608B8; // type:UNK_PTR size:0x4
0x80B612F0 = Obj_Dora_InitVars; // type:UNK_TYPE1 size:0x1
0x80B61310 = D_80B61310; // type:UNK_TYPE1 size:0x1
0x80B61478 = D_80B61478; // type:UNK_TYPE1 size:0x1
0x80B61488 = D_80B61488; // type:UNK_TYPE1 size:0x1
0x80B614A8 = D_80B614A8; // type:UNK_PTR size:0x4
0x80B614B4 = D_80B614B4; // type:f32 size:0x4
0x80B614B8 = D_80B614B8; // type:f32 size:0x4
0x80B614BC = D_80B614BC; // type:f32 size:0x4
0x80B614C0 = D_80B614C0; // type:f32 size:0x4
0x80B614C4 = D_80B614C4; // type:f32 size:0x4
0x80B614C8 = D_80B614C8; // type:f32 size:0x4
0x80B614CC = D_80B614CC; // type:f32 size:0x4
0x80B614D0 = D_80B614D0; // type:f32 size:0x4
0x80B614D4 = D_80B614D4; // type:f32 size:0x4
0x80B614D8 = D_80B614D8; // type:f32 size:0x4
0x80B614DC = D_80B614DC; // type:f32 size:0x4
0x80B614E0 = D_80B614E0; // type:f32 size:0x4
0x80B614E4 = D_80B614E4; // type:f32 size:0x4
0x80B64FF0 = En_Bigpo_InitVars; // type:UNK_TYPE1 size:0x1
0x80B65010 = D_80B65010; // type:UNK_TYPE1 size:0x1
0x80B6503C = D_80B6503C; // type:UNK_TYPE1 size:0x1
0x80B65044 = D_80B65044; // type:UNK_TYPE1 size:0x1
0x80B65064 = D_80B65064; // type:UNK_TYPE1 size:0x1
0x80B6506C = D_80B6506C; // type:UNK_TYPE1 size:0x1
0x80B65078 = D_80B65078; // type:UNK_TYPE1 size:0x1
0x80B65084 = D_80B65084; // type:UNK_TYPE1 size:0x1
0x80B650B0 = D_80B650B0; // type:f32 size:0x4
0x80B650B4 = D_80B650B4; // type:f32 size:0x4
0x80B650B8 = D_80B650B8; // type:f32 size:0x4
0x80B650BC = D_80B650BC; // type:f32 size:0x4
0x80B650C0 = D_80B650C0; // type:f32 size:0x4
0x80B650C4 = D_80B650C4; // type:f32 size:0x4
0x80B650C8 = D_80B650C8; // type:f32 size:0x4
0x80B650CC = D_80B650CC; // type:f32 size:0x4
0x80B650D0 = D_80B650D0; // type:f32 size:0x4
0x80B650D4 = D_80B650D4; // type:f32 size:0x4
0x80B650D8 = D_80B650D8; // type:f32 size:0x4
0x80B650DC = D_80B650DC; // type:f32 size:0x4
0x80B650E0 = D_80B650E0; // type:f32 size:0x4
0x80B650E4 = D_80B650E4; // type:f32 size:0x4
0x80B650E8 = D_80B650E8; // type:f32 size:0x4
0x80B650EC = D_80B650EC; // type:f32 size:0x4
0x80B650F0 = D_80B650F0; // type:f32 size:0x4
0x80B650F4 = D_80B650F4; // type:f32 size:0x4
0x80B650F8 = D_80B650F8; // type:f32 size:0x4
0x80B650FC = D_80B650FC; // type:f32 size:0x4
0x80B65100 = D_80B65100; // type:f32 size:0x4
0x80B65104 = D_80B65104; // type:f32 size:0x4
0x80B65108 = D_80B65108; // type:f32 size:0x4
0x80B6510C = D_80B6510C; // type:f32 size:0x4
0x80B65110 = D_80B65110; // type:f32 size:0x4
0x80B65114 = D_80B65114; // type:f32 size:0x4
0x80B65118 = D_80B65118; // type:f32 size:0x4
0x80B6511C = D_80B6511C; // type:f32 size:0x4
0x80B66640 = Obj_Kendo_Kanban_InitVars; // type:UNK_TYPE1 size:0x1
0x80B66660 = D_80B66660; // type:UNK_TYPE4 size:0x4
0x80B6666C = D_80B6666C; // type:UNK_TYPE4 size:0x4
0x80B66678 = D_80B66678; // type:UNK_TYPE4 size:0x4
0x80B66684 = D_80B66684; // type:UNK_TYPE4 size:0x4
0x80B66690 = D_80B66690; // type:UNK_TYPE4 size:0x4
0x80B6669C = D_80B6669C; // type:UNK_TYPE4 size:0x4
0x80B666A8 = D_80B666A8; // type:UNK_TYPE4 size:0x4
0x80B666B4 = D_80B666B4; // type:UNK_TYPE4 size:0x4
0x80B666C0 = D_80B666C0; // type:UNK_TYPE4 size:0x4
0x80B666C4 = D_80B666C4; // type:UNK_TYPE4 size:0x4
0x80B666C8 = D_80B666C8; // type:UNK_PTR size:0x4
0x80B666CC = D_80B666CC; // type:UNK_TYPE4 size:0x4
0x80B666D0 = D_80B666D0; // type:UNK_TYPE4 size:0x4
0x80B666DC = D_80B666DC; // type:UNK_TYPE4 size:0x4
0x80B666E8 = D_80B666E8; // type:UNK_TYPE4 size:0x4
0x80B666F4 = D_80B666F4; // type:UNK_TYPE4 size:0x4
0x80B6670C = D_80B6670C; // type:UNK_TYPE4 size:0x4
0x80B66718 = D_80B66718; // type:UNK_TYPE4 size:0x4
0x80B66724 = D_80B66724; // type:UNK_TYPE4 size:0x4
0x80B66730 = D_80B66730; // type:UNK_TYPE4 size:0x4
0x80B6673C = D_80B6673C; // type:UNK_TYPE1 size:0x1
0x80B667B4 = D_80B667B4; // type:UNK_TYPE1 size:0x1
0x80B667C4 = D_80B667C4; // type:UNK_TYPE1 size:0x1
0x80B667F0 = D_80B667F0; // type:UNK_TYPE1 size:0x1
0x80B66810 = D_80B66810; // type:UNK_PTR size:0x4
0x80B6681C = D_80B6681C; // type:UNK_TYPE4 size:0x4
0x80B66828 = D_80B66828; // type:UNK_TYPE4 size:0x4
0x80B66840 = D_80B66840; // type:f32 size:0x4
0x80B66844 = D_80B66844; // type:f32 size:0x4
0x80B66848 = D_80B66848; // type:f32 size:0x4
0x80B6684C = D_80B6684C; // type:f32 size:0x4
0x80B66850 = D_80B66850; // type:f32 size:0x4
0x80B66854 = D_80B66854; // type:f32 size:0x4
0x80B66CB0 = Obj_Hariko_InitVars; // type:UNK_TYPE1 size:0x1
0x80B66CD0 = D_80B66CD0; // type:f32 size:0x4
0x80B685A0 = En_Sth_InitVars; // type:UNK_TYPE1 size:0x1
0x80B685C0 = D_80B685C0; // type:UNK_TYPE1 size:0x1
0x80B68640 = D_80B68640; // type:UNK_TYPE1 size:0x1
0x80B68740 = D_80B68740; // type:UNK_TYPE1 size:0x1
0x80B687C0 = D_80B687C0; // type:UNK_TYPE1 size:0x1
0x80B68840 = D_80B68840; // type:UNK_TYPE1 size:0x1
0x80B69040 = D_80B69040; // type:UNK_TYPE1 size:0x1
0x80B69440 = D_80B69440; // type:UNK_TYPE1 size:0x1
0x80B69540 = D_80B69540; // type:UNK_TYPE1 size:0x1
0x80B695D0 = D_80B695D0; // type:UNK_TYPE1 size:0x1
0x80B69710 = D_80B69710; // type:UNK_TYPE1 size:0x1
0x80B69740 = D_80B69740; // type:UNK_TYPE1 size:0x1
0x80B697A0 = D_80B697A0; // type:UNK_TYPE1 size:0x1
0x80B699A0 = D_80B699A0; // type:UNK_TYPE1 size:0x1
0x80B69AD0 = D_80B69AD0; // type:UNK_TYPE1 size:0x1
0x80B69CC0 = D_80B69CC0; // type:UNK_TYPE1 size:0x1
0x80B69EB0 = D_80B69EB0; // type:UNK_TYPE1 size:0x1
0x80B6A0B0 = D_80B6A0B0; // type:UNK_TYPE1 size:0x1
0x80B6A1D0 = D_80B6A1D0; // type:UNK_TYPE1 size:0x1
0x80B6A4F0 = D_80B6A4F0; // type:UNK_TYPE1 size:0x1
0x80B6A678 = D_80B6A678; // type:UNK_TYPE1 size:0x1
0x80B6AC20 = D_80B6AC20; // type:UNK_TYPE1 size:0x1
0x80B6AC80 = D_80B6AC80; // type:UNK_TYPE1 size:0x1
0x80B6AC90 = D_80B6AC90; // type:UNK_TYPE1 size:0x1
0x80B6B284 = D_80B6B284; // type:UNK_TYPE1 size:0x1
0x80B6B2E4 = D_80B6B2E4; // type:UNK_TYPE1 size:0x1
0x80B6B2F4 = D_80B6B2F4; // type:UNK_TYPE1 size:0x1
0x80B6B990 = D_80B6B990; // type:UNK_TYPE1 size:0x1
0x80B6B9F0 = D_80B6B9F0; // type:UNK_TYPE1 size:0x1
0x80B6BA00 = D_80B6BA00; // type:UNK_TYPE1 size:0x1
0x80B6C00C = D_80B6C00C; // type:UNK_TYPE1 size:0x1
0x80B6C06C = D_80B6C06C; // type:UNK_TYPE1 size:0x1
0x80B6C07C = D_80B6C07C; // type:UNK_TYPE1 size:0x1
0x80B6C688 = D_80B6C688; // type:UNK_TYPE1 size:0x1
0x80B6C6E8 = D_80B6C6E8; // type:UNK_TYPE1 size:0x1
0x80B6C6F8 = D_80B6C6F8; // type:UNK_TYPE1 size:0x1
0x80B6CB10 = D_80B6CB10; // type:UNK_TYPE1 size:0x1
0x80B6CB70 = D_80B6CB70; // type:UNK_TYPE1 size:0x1
0x80B6CB80 = D_80B6CB80; // type:UNK_TYPE1 size:0x1
0x80B6D024 = D_80B6D024; // type:UNK_TYPE1 size:0x1
0x80B6D084 = D_80B6D084; // type:UNK_TYPE1 size:0x1
0x80B6D094 = D_80B6D094; // type:UNK_TYPE1 size:0x1
0x80B6D124 = D_80B6D124; // type:UNK_TYPE1 size:0x1
0x80B6D18C = D_80B6D18C; // type:UNK_TYPE1 size:0x1
0x80B6D19C = D_80B6D19C; // type:UNK_TYPE1 size:0x1
0x80B6D1C8 = D_80B6D1C8; // type:UNK_PTR size:0x4
0x80B6D1E8 = D_80B6D1E8; // type:UNK_TYPE2 size:0x2
0x80B6D1F0 = D_80B6D1F0; // type:UNK_TYPE2 size:0x2
0x80B6D1F8 = D_80B6D1F8; // type:UNK_TYPE2 size:0x2
0x80B6D200 = D_80B6D200; // type:UNK_TYPE1 size:0x1
0x80B6D20C = D_80B6D20C; // type:UNK_TYPE1 size:0x1
0x80B6D220 = jtbl_80B6D220; // type:UNK_PTR size:0x4
0x80B6D234 = jtbl_80B6D234; // type:UNK_PTR size:0x4
0x80B6D274 = jtbl_80B6D274; // type:UNK_PTR size:0x4
0x80B6DB50 = Bg_Sinkai_Kabe_InitVars; // type:UNK_TYPE1 size:0x1
0x80B6DB70 = D_80B6DB70; // type:UNK_TYPE4 size:0x4
0x80B6DB80 = D_80B6DB80; // type:f32 size:0x4
0x80B6DB84 = D_80B6DB84; // type:f32 size:0x4
0x80B6DB88 = D_80B6DB88; // type:f32 size:0x4
0x80B6DF80 = Bg_Haka_Curtain_InitVars; // type:UNK_TYPE1 size:0x1
0x80B6DFA0 = D_80B6DFA0; // type:UNK_TYPE1 size:0x1
0x80B6E6D0 = Bg_Kin2_Bombwall_InitVars; // type:UNK_TYPE1 size:0x1
0x80B6E6F0 = D_80B6E6F0; // type:UNK_TYPE1 size:0x1
0x80B6E71C = D_80B6E71C; // type:UNK_TYPE1 size:0x1
0x80B6E720 = D_80B6E720; // type:UNK_TYPE1 size:0x1
0x80B6E724 = D_80B6E724; // type:UNK_TYPE1 size:0x1
0x80B6E730 = D_80B6E730; // type:UNK_TYPE1 size:0x1
0x80B6E734 = D_80B6E734; // type:UNK_TYPE1 size:0x1
0x80B6E735 = D_80B6E735; // type:UNK_TYPE1 size:0x1
0x80B6E738 = D_80B6E738; // type:UNK_TYPE1 size:0x1
0x80B6E748 = D_80B6E748; // type:UNK_TYPE1 size:0x1
0x80B6E760 = D_80B6E760; // type:f32 size:0x4
0x80B6E764 = D_80B6E764; // type:f32 size:0x4
0x80B6EDC0 = Bg_Kin2_Fence_InitVars; // type:UNK_TYPE1 size:0x1
0x80B6EDE0 = D_80B6EDE0; // type:UNK_TYPE1 size:0x1
0x80B6EE70 = D_80B6EE70; // type:UNK_TYPE1 size:0x1
0x80B6EE80 = D_80B6EE80; // type:UNK_TYPE1 size:0x1
0x80B6EEE0 = D_80B6EEE0; // type:UNK_TYPE1 size:0x1
0x80B6EEE4 = D_80B6EEE4; // type:UNK_TYPE1 size:0x1
0x80B6EEE8 = D_80B6EEE8; // type:UNK_TYPE1 size:0x1
0x80B6F970 = Bg_Kin2_Picture_InitVars; // type:UNK_TYPE1 size:0x1
0x80B6F990 = D_80B6F990; // type:UNK_TYPE1 size:0x1
0x80B6FA08 = D_80B6FA08; // type:UNK_TYPE1 size:0x1
0x80B6FA18 = D_80B6FA18; // type:UNK_TYPE1 size:0x1
0x80B6FA24 = D_80B6FA24; // type:UNK_TYPE1 size:0x1
0x80B6FA40 = D_80B6FA40; // type:f32 size:0x4
0x80B6FA44 = D_80B6FA44; // type:f32 size:0x4
0x80B6FA48 = D_80B6FA48; // type:f32 size:0x4
0x80B6FA4C = D_80B6FA4C; // type:f32 size:0x4
0x80B6FA50 = D_80B6FA50; // type:f32 size:0x4
0x80B6FA54 = D_80B6FA54; // type:f32 size:0x4
0x80B6FA58 = D_80B6FA58; // type:f32 size:0x4
0x80B6FA5C = D_80B6FA5C; // type:f32 size:0x4
0x80B70730 = Bg_Kin2_Shelf_InitVars; // type:UNK_TYPE1 size:0x1
0x80B70750 = D_80B70750; // type:f32 size:0x4
0x80B70758 = D_80B70758; // type:f32 size:0x4
0x80B70760 = D_80B70760; // type:UNK_TYPE4 size:0x4
0x80B70768 = D_80B70768; // type:f32 size:0x4
0x80B70770 = D_80B70770; // type:f32 size:0x4
0x80B70778 = D_80B70778; // type:UNK_TYPE1 size:0x1
0x80B7077C = D_80B7077C; // type:UNK_TYPE1 size:0x1
0x80B70780 = D_80B70780; // type:UNK_TYPE1 size:0x1
0x80B70788 = D_80B70788; // type:UNK_TYPE1 size:0x1
0x80B70790 = D_80B70790; // type:f32 size:0x4
0x80B70794 = D_80B70794; // type:f32 size:0x4
0x80B70798 = D_80B70798; // type:f32 size:0x4
0x80B7079C = D_80B7079C; // type:f32 size:0x4
0x80B707A0 = D_80B707A0; // type:f32 size:0x4
0x80B707A4 = D_80B707A4; // type:f32 size:0x4
0x80B732B0 = En_Rail_Skb_InitVars; // type:UNK_TYPE1 size:0x1
0x80B732D0 = D_80B732D0; // type:UNK_TYPE1 size:0x1
0x80B73408 = D_80B73408; // type:UNK_TYPE1 size:0x1
0x80B73450 = D_80B73450; // type:UNK_TYPE1 size:0x1
0x80B73460 = D_80B73460; // type:UNK_TYPE1 size:0x1
0x80B7346C = D_80B7346C; // type:UNK_TYPE1 size:0x1
0x80B7348C = D_80B7348C; // type:UNK_TYPE4 size:0x4
0x80B73490 = D_80B73490; // type:UNK_TYPE1 size:0x1
0x80B73498 = D_80B73498; // type:UNK_TYPE4 size:0x4
0x80B734A4 = D_80B734A4; // type:UNK_TYPE4 size:0x4
0x80B734B0 = D_80B734B0; // type:UNK_TYPE1 size:0x1
0x80B734B4 = D_80B734B4; // type:UNK_TYPE1 size:0x1
0x80B734B8 = D_80B734B8; // type:UNK_TYPE1 size:0x1
0x80B734C4 = D_80B734C4; // type:UNK_TYPE4 size:0x4
0x80B734D0 = D_80B734D0; // type:UNK_TYPE1 size:0x1
0x80B734E0 = D_80B734E0; // type:f32 size:0x4
0x80B734E4 = D_80B734E4; // type:f32 size:0x4
0x80B734E8 = jtbl_80B734E8; // type:UNK_PTR size:0x4
0x80B73504 = D_80B73504; // type:f32 size:0x4
0x80B73508 = D_80B73508; // type:f32 size:0x4
0x80B7350C = D_80B7350C; // type:f32 size:0x4
0x80B73510 = jtbl_80B73510; // type:UNK_PTR size:0x4
0x80B73538 = D_80B73538; // type:f32 size:0x4
0x80B7353C = D_80B7353C; // type:f32 size:0x4
0x80B73540 = jtbl_80B73540; // type:UNK_PTR size:0x4
0x80B73574 = jtbl_80B73574; // type:UNK_PTR size:0x4
0x80B75800 = En_Jg_InitVars; // type:UNK_TYPE1 size:0x1
0x80B75820 = D_80B75820; // type:UNK_TYPE1 size:0x1
0x80B7584C = D_80B7584C; // type:UNK_TYPE1 size:0x1
0x80B75858 = D_80B75858; // type:UNK_TYPE1 size:0x1
0x80B75878 = D_80B75878; // type:UNK_TYPE1 size:0x1
0x80B759A8 = D_80B759A8; // type:UNK_TYPE1 size:0x1
0x80B759B4 = D_80B759B4; // type:UNK_TYPE1 size:0x1
0x80B759C0 = D_80B759C0; // type:UNK_TYPE1 size:0x1
0x80B759CC = D_80B759CC; // type:UNK_TYPE1 size:0x1
0x80B759D8 = D_80B759D8; // type:UNK_TYPE1 size:0x1
0x80B759F0 = D_80B759F0; // type:f32 size:0x4
0x80B759F4 = D_80B759F4; // type:f32 size:0x4
0x80B759F8 = jtbl_80B759F8; // type:UNK_PTR size:0x4
0x80B75A14 = jtbl_80B75A14; // type:UNK_PTR size:0x4
0x80B75A80 = jtbl_80B75A80; // type:UNK_PTR size:0x4
0x80B75A9C = jtbl_80B75A9C; // type:UNK_PTR size:0x4
0x80B75AC0 = jtbl_80B75AC0; // type:UNK_PTR size:0x4
0x80B774F0 = En_Tru_Mt_InitVars; // type:UNK_TYPE1 size:0x1
0x80B77510 = D_80B77510; // type:UNK_TYPE1 size:0x1
0x80B7753C = D_80B7753C; // type:UNK_TYPE1 size:0x1
0x80B7755C = sAnimationInfo; // type:UNK_TYPE1 size:0x1
0x80B7765C = D_80B7765C; // type:UNK_TYPE1 size:0x1
0x80B77668 = D_80B77668; // type:UNK_TYPE1 size:0x1
0x80B77674 = D_80B77674; // type:UNK_TYPE4 size:0x4
0x80B77680 = D_80B77680; // type:f32 size:0x4
0x80B77684 = D_80B77684; // type:f32 size:0x4
0x80B77688 = D_80B77688; // type:f32 size:0x4
0x80B7C0F0 = Obj_Um_InitVars; // type:UNK_TYPE1 size:0x1
0x80B7C110 = sEyeTextures; // type:UNK_TYPE1 size:0x1
0x80B7C128 = sMouthTextures; // type:UNK_TYPE1 size:0x1
0x80B7C138 = sCylinderInit; // type:UNK_TYPE1 size:0x1
0x80B7C164 = D_80B7C164; // type:UNK_TYPE4 size:0x4
0x80B7C254 = sInitChain; // type:UNK_TYPE4 size:0x4
0x80B7C25C = sUmAnims; // type:UNK_TYPE1 size:0x28
0x80B7C284 = D_80B7C284; // type:UNK_TYPE4 size:0x4
0x80B7C290 = D_80B7C290; // type:UNK_TYPE4 size:0x4
0x80B7C29C = D_80B7C29C; // type:UNK_TYPE4 size:0x4
0x80B7C2A8 = D_80B7C2A8; // type:UNK_PTR size:0x4
0x80B7C2B4 = D_80B7C2B4; // type:UNK_TYPE4 size:0x4
0x80B7C2CC = D_80B7C2CC; // type:UNK_TYPE4 size:0x4
0x80B7C2E4 = D_80B7C2E4; // type:UNK_TYPE4 size:0x4
0x80B7C2FC = D_80B7C2FC; // type:UNK_TYPE4 size:0x4
0x80B7C308 = D_80B7C308; // type:UNK_TYPE4 size:0x4
0x80B7C314 = D_80B7C314; // type:UNK_TYPE4 size:0x4
0x80B7C320 = D_80B7C320; // type:f32 size:0x4
0x80B7C324 = D_80B7C324; // type:f32 size:0x4
0x80B7C328 = jtbl_80B7C328; // type:UNK_PTR size:0x4
0x80B7C398 = D_80B7C398; // type:f32 size:0x4
0x80B7C39C = D_80B7C39C; // type:f32 size:0x4
0x80B7C3A0 = D_80B7C3A0; // type:f32 size:0x4
0x80B7C3A4 = jtbl_80B7C3A4; // type:UNK_PTR size:0x4
0x80B7C3BC = D_80B7C3BC; // type:f32 size:0x4
0x80B7C3C0 = D_80B7C3C0; // type:f32 size:0x4
0x80B7C3C4 = D_80B7C3C4; // type:f32 size:0x4
0x80B7C3C8 = D_80B7C3C8; // type:f32 size:0x4
0x80B7C3CC = D_80B7C3CC; // type:f32 size:0x4
0x80B7C3D0 = jtbl_80B7C3D0; // type:UNK_PTR size:0x4
0x80B7C3E8 = D_80B7C3E8; // type:f32 size:0x4
0x80B7C3EC = D_80B7C3EC; // type:f32 size:0x4
0x80B7C3F0 = D_80B7C3F0; // type:f32 size:0x4
0x80B7C3F4 = D_80B7C3F4; // type:f32 size:0x4
0x80B7C3F8 = D_80B7C3F8; // type:f32 size:0x4
0x80B7C3FC = D_80B7C3FC; // type:f32 size:0x4
0x80B7C400 = D_80B7C400; // type:f32 size:0x4
0x80B7E4E0 = En_Neo_Reeba_InitVars; // type:UNK_TYPE1 size:0x1
0x80B7E500 = D_80B7E500; // type:UNK_TYPE1 size:0x1
0x80B7E520 = D_80B7E520; // type:UNK_TYPE1 size:0x1
0x80B7E54C = D_80B7E54C; // type:f32 size:0x4
0x80B7E578 = D_80B7E578; // type:f32 size:0x4
0x80B7E5A4 = D_80B7E5A4; // type:UNK_TYPE1 size:0x1
0x80B7E5B0 = D_80B7E5B0; // type:UNK_TYPE1 size:0x1
0x80B7E5BC = D_80B7E5BC; // type:UNK_TYPE1 size:0x1
0x80B7E5C0 = D_80B7E5C0; // type:UNK_TYPE1 size:0x1
0x80B7E5C4 = D_80B7E5C4; // type:UNK_TYPE1 size:0x1
0x80B7E5D0 = D_80B7E5D0; // type:f32 size:0x4
0x80B7E5D4 = D_80B7E5D4; // type:f32 size:0x4
0x80B7E5D8 = D_80B7E5D8; // type:f32 size:0x4
0x80B7E5DC = D_80B7E5DC; // type:f32 size:0x4
0x80B7E5E0 = D_80B7E5E0; // type:f32 size:0x4
0x80B7E5E4 = D_80B7E5E4; // type:f32 size:0x4
0x80B7E5E8 = D_80B7E5E8; // type:f32 size:0x4
0x80B7E5EC = jtbl_80B7E5EC; // type:UNK_PTR size:0x4
0x80B7E624 = jtbl_80B7E624; // type:UNK_PTR size:0x4
0x80B7E660 = D_80B7E660; // type:f32 size:0x4
0x80B7E664 = D_80B7E664; // type:f32 size:0x4
0x80B7EA00 = Bg_Mbar_Chair_InitVars; // type:ActorInit size:0x20
0x80B7EA20 = bgMbarChairInitVars; // type:ActorInitVar size:0x10
0x80B7F620 = Bg_Ikana_Block_InitVars; // type:UNK_TYPE1 size:0x1
0x80B7F640 = D_80B7F640; // type:UNK_TYPE1 size:0x1
0x80B7F650 = D_80B7F650; // type:f32 size:0x4
0x80B7F654 = D_80B7F654; // type:f32 size:0x4
0x80B7F658 = D_80B7F658; // type:f32 size:0x4
0x80B7F65C = D_80B7F65C; // type:f32 size:0x4
0x80B7FF30 = Bg_Ikana_Mirror_InitVars; // type:UNK_TYPE1 size:0x1
0x80B7FF50 = D_80B7FF50; // type:UNK_TYPE1 size:0x1
0x80B8016C = D_80B8016C; // type:UNK_TYPE1 size:0x1
0x80B8017C = D_80B8017C; // type:UNK_TYPE1 size:0x1
0x80B8019C = D_80B8019C; // type:UNK_TYPE1 size:0x1
0x80B801A8 = D_80B801A8; // type:UNK_TYPE1 size:0x1
0x80B801B4 = D_80B801B4; // type:UNK_TYPE1 size:0x1
0x80B801C0 = D_80B801C0; // type:UNK_TYPE1 size:0x1
0x80B8021C = D_80B8021C; // type:UNK_TYPE1 size:0x1
0x80B80230 = D_80B80230; // type:f32 size:0x4
0x80B80248 = D_80B80248; // type:UNK_TYPE1 size:0x1
0x80B820C0 = Bg_Ikana_Rotaryroom_InitVars; // type:UNK_TYPE1 size:0x1
0x80B820E0 = D_80B820E0; // type:UNK_TYPE1 size:0x1
0x80B82128 = D_80B82128; // type:UNK_TYPE1 size:0x1
0x80B82138 = D_80B82138; // type:UNK_TYPE1 size:0x1
0x80B8215C = D_80B8215C; // type:UNK_TYPE1 size:0x1
0x80B8216C = D_80B8216C; // type:UNK_TYPE4 size:0x4
0x80B82178 = D_80B82178; // type:UNK_TYPE4 size:0x4
0x80B82184 = D_80B82184; // type:UNK_TYPE1 size:0x1
0x80B821C4 = D_80B821C4; // type:UNK_TYPE2 size:0x2
0x80B82200 = D_80B82200; // type:f32 size:0x4
0x80B82214 = D_80B82214; // type:UNK_TYPE1 size:0x1
0x80B82218 = D_80B82218; // type:UNK_TYPE1 size:0x1
0x80B8221C = D_80B8221C; // type:UNK_TYPE1 size:0x1
0x80B82220 = D_80B82220; // type:f32 size:0x4
0x80B82224 = D_80B82224; // type:f32 size:0x4
0x80B82228 = D_80B82228; // type:f32 size:0x4
0x80B8222C = D_80B8222C; // type:f32 size:0x4
0x80B83A00 = Bg_Dblue_Balance_InitVars; // type:UNK_TYPE1 size:0x1
0x80B83A20 = sTypeInfo; // type:UNK_TYPE4 size:0x4
0x80B83A74 = D_80B83A74; // type:UNK_TYPE1 size:0x1
0x80B83A90 = D_80B83A90; // type:UNK_TYPE1 size:0x1
0x80B83A92 = D_80B83A92; // type:UNK_TYPE1 size:0x1
0x80B83A94 = D_80B83A94; // type:UNK_TYPE1 size:0x1
0x80B83A98 = D_80B83A98; // type:UNK_TYPE1 size:0x1
0x80B83AA0 = D_80B83AA0; // type:f32 size:0x4
0x80B83AA4 = D_80B83AA4; // type:f32 size:0x4
0x80B83AA8 = D_80B83AA8; // type:f32 size:0x4
0x80B83AAC = D_80B83AAC; // type:f32 size:0x4
0x80B83AB0 = D_80B83AB0; // type:f32 size:0x4
0x80B83AB4 = D_80B83AB4; // type:f32 size:0x4
0x80B83AB8 = D_80B83AB8; // type:f32 size:0x4
0x80B83ABC = D_80B83ABC; // type:f32 size:0x4
0x80B83AC0 = D_80B83AC0; // type:f32 size:0x4
0x80B83AC4 = D_80B83AC4; // type:f32 size:0x4
0x80B83AC8 = D_80B83AC8; // type:f32 size:0x4
0x80B83ACC = D_80B83ACC; // type:f32 size:0x4
0x80B83AD0 = D_80B83AD0; // type:f32 size:0x4
0x80B83AD4 = D_80B83AD4; // type:f32 size:0x4
0x80B83C70 = D_80B83C70; // type:UNK_TYPE1 size:0x1
0x80B83C74 = D_80B83C74; // type:UNK_TYPE1 size:0x1
0x80B85350 = Bg_Dblue_Waterfall_InitVars; // type:UNK_TYPE1 size:0x1
0x80B85370 = D_80B85370; // type:UNK_TYPE1 size:0x1
0x80B8539C = D_80B8539C; // type:UNK_TYPE1 size:0x1
0x80B853A0 = D_80B853A0; // type:UNK_TYPE1 size:0x1
0x80B853A4 = D_80B853A4; // type:UNK_TYPE2 size:0x2
0x80B853A8 = D_80B853A8; // type:UNK_TYPE1 size:0x1
0x80B853C0 = D_80B853C0; // type:f32 size:0x4
0x80B853C4 = D_80B853C4; // type:f32 size:0x4
0x80B853C8 = D_80B853C8; // type:f32 size:0x4
0x80B853CC = D_80B853CC; // type:f32 size:0x4
0x80B853D0 = D_80B853D0; // type:f32 size:0x4
0x80B853D4 = D_80B853D4; // type:f32 size:0x4
0x80B853D8 = D_80B853D8; // type:f32 size:0x4
0x80B853DC = D_80B853DC; // type:f32 size:0x4
0x80B853E0 = D_80B853E0; // type:f32 size:0x4
0x80B853E4 = D_80B853E4; // type:f32 size:0x4
0x80B853E8 = D_80B853E8; // type:f32 size:0x4
0x80B853EC = D_80B853EC; // type:f32 size:0x4
0x80B853F0 = D_80B853F0; // type:f32 size:0x4
0x80B853F4 = D_80B853F4; // type:f32 size:0x4
0x80B853F8 = D_80B853F8; // type:f32 size:0x4
0x80B853FC = D_80B853FC; // type:f32 size:0x4
0x80B85400 = D_80B85400; // type:f32 size:0x4
0x80B8A8D0 = D_80B8A8D0; // type:UNK_TYPE1 size:0x1
0x80B8A8E4 = D_80B8A8E4; // type:UNK_TYPE4 size:0x4
0x80B8AA04 = D_80B8AA04; // type:UNK_TYPE4 size:0x4
0x80B8AB24 = D_80B8AB24; // type:UNK_TYPE1 size:0x1
0x80B8AB30 = D_80B8AB30; // type:UNK_TYPE1 size:0x1
0x80B8AB3C = D_80B8AB3C; // type:UNK_TYPE1 size:0x1
0x80B8AB5C = En_Kaizoku_InitVars; // type:UNK_TYPE1 size:0x1
0x80B8AB7C = D_80B8AB7C; // type:UNK_TYPE1 size:0x1
0x80B8ABA8 = D_80B8ABA8; // type:UNK_TYPE1 size:0x1
0x80B8ABF8 = D_80B8ABF8; // type:UNK_TYPE1 size:0x1
0x80B8AC44 = D_80B8AC44; // type:UNK_TYPE1 size:0x1
0x80B8AC58 = D_80B8AC58; // type:UNK_TYPE1 size:0x1
0x80B8AC5C = D_80B8AC5C; // type:UNK_TYPE1 size:0x1
0x80B8AC60 = D_80B8AC60; // type:UNK_TYPE1 size:0x1
0x80B8AC6C = D_80B8AC6C; // type:UNK_TYPE1 size:0x1
0x80B8AC78 = D_80B8AC78; // type:UNK_TYPE1 size:0x1
0x80B8AC84 = D_80B8AC84; // type:UNK_TYPE1 size:0x1
0x80B8AC90 = D_80B8AC90; // type:UNK_TYPE1 size:0x1
0x80B8AC9C = D_80B8AC9C; // type:UNK_TYPE1 size:0x1
0x80B8ACA8 = D_80B8ACA8; // type:UNK_TYPE1 size:0x1
0x80B8ACB4 = D_80B8ACB4; // type:UNK_TYPE1 size:0x1
0x80B8ACC0 = D_80B8ACC0; // type:UNK_TYPE1 size:0x1
0x80B8ACCC = D_80B8ACCC; // type:UNK_TYPE1 size:0x1
0x80B8ACE0 = D_80B8ACE0; // type:f32 size:0x4
0x80B8ACE4 = jtbl_80B8ACE4; // type:UNK_PTR size:0x4
0x80B8AD04 = D_80B8AD04; // type:f32 size:0x4
0x80B8AD08 = D_80B8AD08; // type:f32 size:0x4
0x80B8AD0C = D_80B8AD0C; // type:f32 size:0x4
0x80B8AD10 = D_80B8AD10; // type:f32 size:0x4
0x80B8AD14 = D_80B8AD14; // type:f32 size:0x4
0x80B8AD18 = D_80B8AD18; // type:f32 size:0x4
0x80B8AD1C = D_80B8AD1C; // type:f32 size:0x4
0x80B8AD20 = D_80B8AD20; // type:f32 size:0x4
0x80B8AD24 = D_80B8AD24; // type:f32 size:0x4
0x80B8AD28 = D_80B8AD28; // type:f32 size:0x4
0x80B8AD2C = D_80B8AD2C; // type:f32 size:0x4
0x80B8AD30 = D_80B8AD30; // type:f32 size:0x4
0x80B8AD34 = D_80B8AD34; // type:f32 size:0x4
0x80B8AD38 = D_80B8AD38; // type:f32 size:0x4
0x80B8AD3C = D_80B8AD3C; // type:f32 size:0x4
0x80B8AD40 = D_80B8AD40; // type:f32 size:0x4
0x80B8AD44 = D_80B8AD44; // type:f32 size:0x4
0x80B8AD48 = D_80B8AD48; // type:f32 size:0x4
0x80B8AD4C = D_80B8AD4C; // type:f32 size:0x4
0x80B8AD50 = D_80B8AD50; // type:f32 size:0x4
0x80B8AD54 = D_80B8AD54; // type:f32 size:0x4
0x80B8AD58 = D_80B8AD58; // type:f32 size:0x4
0x80B8AD5C = D_80B8AD5C; // type:f32 size:0x4
0x80B8AD60 = D_80B8AD60; // type:f32 size:0x4
0x80B8AD64 = D_80B8AD64; // type:f32 size:0x4
0x80B8AD68 = D_80B8AD68; // type:f32 size:0x4
0x80B8AD6C = D_80B8AD6C; // type:f32 size:0x4
0x80B8AD70 = jtbl_80B8AD70; // type:UNK_PTR size:0x4
0x80B8ADAC = D_80B8ADAC; // type:f32 size:0x4
0x80B8ADB0 = D_80B8ADB0; // type:f32 size:0x4
0x80B8ADB4 = D_80B8ADB4; // type:f32 size:0x4
0x80B8CE20 = En_Ge2_InitVars; // type:UNK_TYPE1 size:0x1
0x80B8CE40 = sCylinderInit; // type:ColliderCylinderInit size:0x2C
0x80B8CE6C = effectVelocity; // type:Vec3f size:0xC
0x80B8CE78 = effectAccel; // type:Vec3f size:0xC
0x80B8CE84 = effectPrimColor; // type:Color_RGBA8 size:0x4
0x80B8CE88 = effectEnvColor; // type:Color_RGBA8 size:0x4
0x80B8CE8C = sFocusOffset; // type:Vec3f size:0x1
0x80B8CE98 = sEyeTextures; // type:TexturePtr size:0xC
0x80B8CEB0 = jtbl_80B8CEB0; // type:UNK_PTR size:0x4
0x80B8E150 = En_Ma_Yts_InitVars; // type:UNK_TYPE1 size:0x1
0x80B8E170 = D_80B8E170; // type:ColliderCylinderInit size:0x2C
0x80B8E19C = D_80B8E19C; // type:CollisionCheckInfoInit2 size:0xC
0x80B8E308 = D_80B8E308; // type:void* size:0x4
0x80B8E318 = D_80B8E318; // type:UNK_TYPE1 size:0x1
0x80B8E32C = D_80B8E32C; // type:UNK_TYPE2 size:0x2
0x80B8E330 = jtbl_80B8E330; // type:UNK_PTR size:0x4
0x80B8E34C = jtbl_80B8E34C; // type:UNK_PTR size:0x4
0x80B913F0 = En_Ma_Yto_InitVars; // type:UNK_TYPE1 size:0x1
0x80B91410 = D_80B91410; // type:UNK_TYPE1 size:0x1
0x80B9143C = D_80B9143C; // type:UNK_TYPE1 size:0x1
0x80B91448 = D_80B91448; // type:UNK_TYPE1 size:0x1
0x80B915F0 = D_80B915F0; // type:UNK_TYPE2 size:0x2
0x80B91600 = jtbl_80B91600; // type:UNK_PTR size:0x4
0x80B91614 = jtbl_80B91614; // type:UNK_PTR size:0x4
0x80B91628 = jtbl_80B91628; // type:UNK_PTR size:0x4
0x80B9163C = jtbl_80B9163C; // type:UNK_PTR size:0x4
0x80B91650 = jtbl_80B91650; // type:UNK_PTR size:0x4
0x80B9166C = jtbl_80B9166C; // type:UNK_PTR size:0x4
0x80B91688 = jtbl_80B91688; // type:UNK_PTR size:0x4
0x80B916C8 = jtbl_80B916C8; // type:UNK_PTR size:0x4
0x80B916E4 = jtbl_80B916E4; // type:UNK_PTR size:0x4
0x80B91770 = jtbl_80B91770; // type:UNK_PTR size:0x4
0x80B91EA0 = Obj_Tokei_Turret_InitVars; // type:UNK_TYPE1 size:0x1
0x80B91EC0 = D_80B91EC0; // type:UNK_TYPE1 size:0x1
0x80B91ED0 = D_80B91ED0; // type:f32 size:0x4
0x80B92940 = Bg_Dblue_Elevator_InitVars; // type:UNK_TYPE1 size:0x1
0x80B92960 = D_80B92960; // type:UNK_TYPE4 size:0x4
0x80B92964 = D_80B92964; // type:UNK_PTR size:0x4
0x80B9296C = D_80B9296C; // type:UNK_TYPE1 size:0x1
0x80B929D0 = D_80B929D0; // type:UNK_TYPE2 size:0x2
0x80B929D8 = D_80B929D8; // type:UNK_TYPE2 size:0x2
0x80B929DE = D_80B929DE; // type:UNK_TYPE1 size:0x1
0x80B929E0 = D_80B929E0; // type:UNK_TYPE1 size:0x1
0x80B929E2 = D_80B929E2; // type:UNK_TYPE1 size:0x1
0x80B929E3 = D_80B929E3; // type:UNK_TYPE1 size:0x1
0x80B929E4 = D_80B929E4; // type:UNK_TYPE1 size:0x1
0x80B929EA = D_80B929EA; // type:UNK_TYPE1 size:0x1
0x80B929EC = D_80B929EC; // type:UNK_TYPE1 size:0x1
0x80B92A00 = D_80B92A00; // type:f32 size:0x4
0x80B92A04 = D_80B92A04; // type:f32 size:0x4
0x80B92A08 = D_80B92A08; // type:f32 size:0x4
0x80B93200 = Obj_Warpstone_InitVars; // type:UNK_TYPE1 size:0x1
0x80B93220 = D_80B93220; // type:UNK_TYPE1 size:0x1
0x80B9324C = D_80B9324C; // type:UNK_TYPE1 size:0x1
0x80B93250 = D_80B93250; // type:UNK_TYPE1 size:0x1
0x80B93260 = D_80B93260; // type:f32 size:0x4
0x80B93264 = D_80B93264; // type:f32 size:0x4
0x80B93268 = D_80B93268; // type:f32 size:0x4
0x80B95860 = En_Zog_InitVars; // type:UNK_TYPE1 size:0x1
0x80B95880 = D_80B95880; // type:UNK_TYPE1 size:0x1
0x80B958AC = D_80B958AC; // type:UNK_TYPE4 size:0x4
0x80B958B8 = D_80B958B8; // type:UNK_TYPE4 size:0x4
0x80B958C0 = D_80B958C0; // type:UNK_TYPE1 size:0x1
0x80B958DC = D_80B958DC; // type:UNK_TYPE4 size:0x4
0x80B958E4 = D_80B958E4; // type:UNK_TYPE4 size:0x4
0x80B958F0 = D_80B958F0; // type:UNK_TYPE4 size:0x4
0x80B958F8 = D_80B958F8; // type:UNK_TYPE4 size:0x4
0x80B95904 = D_80B95904; // type:UNK_TYPE4 size:0x4
0x80B95918 = D_80B95918; // type:UNK_PTR size:0x4
0x80B9591C = D_80B9591C; // type:UNK_TYPE4 size:0x4
0x80B95920 = D_80B95920; // type:UNK_TYPE4 size:0x4
0x80B95924 = D_80B95924; // type:UNK_TYPE4 size:0x4
0x80B95928 = D_80B95928; // type:UNK_TYPE4 size:0x4
0x80B9592C = D_80B9592C; // type:UNK_PTR size:0x4
0x80B95930 = D_80B95930; // type:UNK_TYPE4 size:0x4
0x80B95934 = D_80B95934; // type:UNK_TYPE4 size:0x4
0x80B95938 = D_80B95938; // type:UNK_TYPE4 size:0x4
0x80B9593C = D_80B9593C; // type:UNK_TYPE1 size:0x1
0x80B95944 = D_80B95944; // type:UNK_TYPE1 size:0x1
0x80B95948 = D_80B95948; // type:UNK_TYPE1 size:0x1
0x80B95950 = D_80B95950; // type:UNK_TYPE1 size:0x1
0x80B95974 = D_80B95974; // type:UNK_PTR size:0x4
0x80B95984 = D_80B95984; // type:UNK_TYPE1 size:0x1
0x80B9598C = D_80B9598C; // type:UNK_TYPE1 size:0x1
0x80B95998 = D_80B95998; // type:UNK_TYPE1 size:0x1
0x80B959A4 = D_80B959A4; // type:UNK_TYPE1 size:0x1
0x80B959A8 = D_80B959A8; // type:UNK_TYPE1 size:0x1
0x80B959AC = D_80B959AC; // type:UNK_TYPE1 size:0x1
0x80B959B8 = D_80B959B8; // type:UNK_TYPE1 size:0x1
0x80B959BC = D_80B959BC; // type:f32 size:0x4
0x80B959C4 = D_80B959C4; // type:UNK_TYPE1 size:0x1
0x80B959C8 = D_80B959C8; // type:f32 size:0x4
0x80B959D0 = D_80B959D0; // type:f32 size:0x4
0x80B959D4 = D_80B959D4; // type:f32 size:0x4
0x80B959D8 = D_80B959D8; // type:f32 size:0x4
0x80B959DC = jtbl_80B959DC; // type:UNK_PTR size:0x4
0x80B95A14 = jtbl_80B95A14; // type:UNK_PTR size:0x4
0x80B95A50 = D_80B95A50; // type:f32 size:0x4
0x80B95A54 = D_80B95A54; // type:f32 size:0x4
0x80B95E10 = D_80B95E10; // type:UNK_TYPE1 size:0x1
0x80B96140 = Obj_Rotlift_InitVars; // type:UNK_TYPE1 size:0x1
0x80B96160 = D_80B96160; // type:UNK_PTR size:0x4
0x80B96178 = D_80B96178; // type:UNK_TYPE1 size:0x1
0x80B963C0 = Obj_Jg_Gakki_InitVars; // type:UNK_TYPE1 size:0x1
0x80B96540 = Bg_Inibs_Movebg_InitVars; // type:UNK_TYPE1 size:0x1
0x80B96560 = sOpaDLists; // type:UNK_TYPE1 size:0x1
0x80B96568 = sXluDLists; // type:UNK_TYPE1 size:0x1
0x80B96570 = sSandTexAnims; // type:UNK_TYPE1 size:0x1
0x80B96578 = D_80B96578; // type:UNK_TYPE1 size:0x1
0x80B998C0 = En_Zot_InitVars; // type:UNK_TYPE1 size:0x1
0x80B998E0 = D_80B998E0; // type:UNK_TYPE1 size:0x1
0x80B9990C = D_80B9990C; // type:UNK_TYPE1 size:0x1
0x80B99934 = D_80B99934; // type:UNK_TYPE1 size:0x1
0x80B99940 = D_80B99940; // type:UNK_TYPE4 size:0x4
0x80B99950 = jtbl_80B99950; // type:UNK_PTR size:0x4
0x80B999AC = jtbl_80B999AC; // type:UNK_PTR size:0x4
0x80B999C4 = jtbl_80B999C4; // type:UNK_PTR size:0x4
0x80B999F4 = jtbl_80B999F4; // type:UNK_PTR size:0x4
0x80B99A3C = jtbl_80B99A3C; // type:UNK_PTR size:0x4
0x80B99A54 = jtbl_80B99A54; // type:UNK_PTR size:0x4
0x80B99A84 = jtbl_80B99A84; // type:UNK_PTR size:0x4
0x80B99B00 = jtbl_80B99B00; // type:UNK_PTR size:0x4
0x80B99B28 = jtbl_80B99B28; // type:UNK_PTR size:0x4
0x80B99B4C = D_80B99B4C; // type:f32 size:0x4
0x80B99B50 = D_80B99B50; // type:f32 size:0x4
0x80B9A550 = Obj_Tree_InitVars; // type:UNK_TYPE1 size:0x1
0x80B9A570 = D_80B9A570; // type:UNK_TYPE1 size:0x1
0x80B9A59C = D_80B9A59C; // type:UNK_TYPE1 size:0x1
0x80B9A5BC = D_80B9A5BC; // type:UNK_PTR size:0x4
0x80B9A5D0 = D_80B9A5D0; // type:f32 size:0x4
0x80B9A920 = Obj_Y2lift_InitVars; // type:UNK_TYPE1 size:0x1
0x80B9A940 = D_80B9A940; // type:UNK_TYPE1 size:0x1
0x80B9AE50 = Obj_Y2shutter_InitVars; // type:UNK_TYPE1 size:0x1
0x80B9AE70 = D_80B9AE70; // type:UNK_TYPE1 size:0x40
0x80B9AEB0 = D_80B9AEB0; // type:UNK_TYPE1 size:0x1
0x80B9B660 = Obj_Boat_InitVars; // type:UNK_TYPE1 size:0x1
0x80B9B680 = D_80B9B680; // type:UNK_TYPE1 size:0x1
0x80B9C320 = Obj_Taru_InitVars; // type:UNK_TYPE1 size:0x1
0x80B9C340 = D_80B9C340; // type:UNK_TYPE1 size:0x1
0x80B9C36C = D_80B9C36C; // type:UNK_TYPE1 size:0x1
0x80B9C380 = D_80B9C380; // type:f32 size:0x4
0x80B9C384 = D_80B9C384; // type:f32 size:0x4
0x80B9C388 = D_80B9C388; // type:f32 size:0x4
0x80B9C38C = D_80B9C38C; // type:f32 size:0x4
0x80B9C390 = D_80B9C390; // type:f32 size:0x4
0x80B9C394 = D_80B9C394; // type:f32 size:0x4
0x80B9C398 = D_80B9C398; // type:f32 size:0x4
0x80B9C39C = D_80B9C39C; // type:f32 size:0x4
0x80B9DC70 = D_80B9DC70; // type:UNK_TYPE1 size:0x1
0x80B9DC8C = Obj_Hunsui_InitVars; // type:UNK_TYPE1 size:0x1
0x80B9DCAC = D_80B9DCAC; // type:UNK_TYPE1 size:0x1
0x80B9DCC0 = D_80B9DCC0; // type:f32 size:0x4
0x80B9DCC4 = D_80B9DCC4; // type:f32 size:0x4
0x80B9DCC8 = jtbl_80B9DCC8; // type:UNK_PTR size:0x4
0x80B9DCE0 = jtbl_80B9DCE0; // type:UNK_PTR size:0x4
0x80B9DCFC = D_80B9DCFC; // type:f32 size:0x4
0x80B9DD00 = D_80B9DD00; // type:f32 size:0x4
0x80B9DD04 = D_80B9DD04; // type:f32 size:0x4
0x80B9DD08 = D_80B9DD08; // type:f32 size:0x4
0x80B9DD0C = D_80B9DD0C; // type:f32 size:0x4
0x80B9DD10 = D_80B9DD10; // type:f32 size:0x4
0x80B9DD14 = D_80B9DD14; // type:f32 size:0x4
0x80B9DED0 = D_80B9DED0; // type:UNK_TYPE1 size:0x1
0x80B9DED4 = D_80B9DED4; // type:UNK_TYPE1 size:0x1
0x80B9DED8 = D_80B9DED8; // type:UNK_TYPE1 size:0x1
0x80B9DED9 = D_80B9DED9; // type:UNK_TYPE1 size:0x1
0x80B9DEDA = D_80B9DEDA; // type:UNK_TYPE1 size:0x1
0x80B9E1F0 = En_Jc_Mato_InitVars; // type:UNK_TYPE1 size:0x1
0x80B9E210 = D_80B9E210; // type:UNK_TYPE1 size:0x1
0x80B9E23C = D_80B9E23C; // type:UNK_TYPE1 size:0x1
0x80B9E25C = D_80B9E25C; // type:UNK_TYPE1 size:0x1
0x80B9F400 = Mir_Ray3_InitVars; // type:UNK_TYPE1 size:0x1
0x80B9F420 = D_80B9F420; // type:UNK_TYPE1 size:0x1
0x80B9F470 = D_80B9F470; // type:UNK_TYPE1 size:0x1
0x80B9F4A0 = D_80B9F4A0; // type:f32 size:0x4
0x80B9F4A4 = D_80B9F4A4; // type:f32 size:0x4
0x80B9F4A8 = D_80B9F4A8; // type:f32 size:0x4
0x80B9F4AC = D_80B9F4AC; // type:f32 size:0x4
0x80B9F4B0 = D_80B9F4B0; // type:f32 size:0x4
0x80B9F4B4 = D_80B9F4B4; // type:f32 size:0x4
0x80B9F4B8 = D_80B9F4B8; // type:f32 size:0x4
0x80B9F4BC = D_80B9F4BC; // type:f32 size:0x4
0x80B9F4C0 = D_80B9F4C0; // type:f32 size:0x4
0x80B9F4C4 = D_80B9F4C4; // type:f32 size:0x4
0x80BA10B0 = En_Zob_InitVars; // type:UNK_TYPE1 size:0x1
0x80BA10D0 = D_80BA10D0; // type:UNK_TYPE1 size:0x1
0x80BA10FC = D_80BA10FC; // type:UNK_TYPE1 size:0x1
0x80BA1120 = D_80BA1120; // type:UNK_TYPE1 size:0x1
0x80BA1130 = jtbl_80BA1130; // type:UNK_PTR size:0x4
0x80BA1148 = D_80BA1148; // type:f32 size:0x4
0x80BA114C = D_80BA114C; // type:f32 size:0x4
0x80BA1150 = jtbl_80BA1150; // type:UNK_PTR size:0x4
0x80BA1194 = jtbl_80BA1194; // type:UNK_PTR size:0x4
0x80BA22E0 = Elf_Msg6_InitVars; // type:UNK_TYPE1 size:0x1
0x80BA2300 = D_80BA2300; // type:UNK_TYPE1 size:0x1
0x80BA2310 = D_80BA2310; // type:f32 size:0x4
0x80BA2314 = D_80BA2314; // type:f32 size:0x4
0x80BA2318 = D_80BA2318; // type:f32 size:0x4
0x80BA231C = D_80BA231C; // type:f32 size:0x4
0x80BA2320 = jtbl_80BA2320; // type:UNK_PTR size:0x4
0x80BA3490 = Obj_Nozoki_InitVars; // type:UNK_TYPE1 size:0x1
0x80BA34B0 = D_80BA34B0; // type:UNK_TYPE1 size:0x1
0x80BA34B8 = D_80BA34B8; // type:UNK_TYPE1 size:0x1
0x80BA34C0 = D_80BA34C0; // type:UNK_TYPE1 size:0x1
0x80BA34CC = D_80BA34CC; // type:UNK_TYPE1 size:0x1
0x80BA34D8 = D_80BA34D8; // type:f32 size:0x4
0x80BA34E4 = D_80BA34E4; // type:UNK_TYPE1 size:0x1
0x80BA34F0 = D_80BA34F0; // type:UNK_TYPE1 size:0x1
0x80BA34FC = D_80BA34FC; // type:UNK_TYPE1 size:0x1
0x80BA3510 = D_80BA3510; // type:f32 size:0x4
0x80BA3514 = D_80BA3514; // type:f32 size:0x4
0x80BA36B0 = D_80BA36B0; // type:UNK_TYPE1 size:0x1
0x80BA36B4 = D_80BA36B4; // type:UNK_TYPE1 size:0x1
0x80BA36B8 = D_80BA36B8; // type:f32 size:0x4
0x80BA4FD0 = En_Toto_InitVars; // type:UNK_TYPE1 size:0x1
0x80BA4FF0 = D_80BA4FF0; // type:UNK_TYPE1 size:0x1
0x80BA501C = D_80BA501C; // type:UNK_TYPE1 size:0x1
0x80BA5028 = D_80BA5028; // type:UNK_TYPE1 size:0x1
0x80BA502C = D_80BA502C; // type:UNK_TYPE1 size:0x1
0x80BA5034 = D_80BA5034; // type:UNK_TYPE1 size:0x1
0x80BA5038 = D_80BA5038; // type:UNK_TYPE1 size:0x1
0x80BA5044 = D_80BA5044; // type:UNK_TYPE1 size:0x1
0x80BA5048 = D_80BA5048; // type:UNK_TYPE1 size:0x1
0x80BA5068 = D_80BA5068; // type:UNK_TYPE1 size:0x1
0x80BA5074 = D_80BA5074; // type:UNK_TYPE1 size:0x1
0x80BA5078 = D_80BA5078; // type:UNK_TYPE1 size:0x1
0x80BA5088 = D_80BA5088; // type:UNK_TYPE1 size:0x1
0x80BA50BC = D_80BA50BC; // type:UNK_TYPE1 size:0x1
0x80BA50DC = D_80BA50DC; // type:UNK_TYPE1 size:0x1
0x80BA510C = D_80BA510C; // type:UNK_TYPE1 size:0x1
0x80BA5120 = D_80BA5120; // type:UNK_TYPE2 size:0x2
0x80BA5128 = D_80BA5128; // type:UNK_TYPE1 size:0x1
0x80BA512C = D_80BA512C; // type:UNK_PTR size:0x4
0x80BA5174 = D_80BA5174; // type:UNK_PTR size:0x4
0x80BA51B8 = D_80BA51B8; // type:UNK_TYPE1 size:0x1
0x80BA51C4 = D_80BA51C4; // type:UNK_TYPE4 size:0x4
0x80BA51D0 = D_80BA51D0; // type:f32 size:0x4
0x80BA51D4 = D_80BA51D4; // type:f32 size:0x4
0x80BA80A0 = En_Railgibud_InitVars; // type:UNK_TYPE1 size:0x1
0x80BA80C0 = sAnimations; // type:UNK_PTR size:0x4
0x80BA82A0 = D_80BA82A0; // type:UNK_TYPE1 size:0x1
0x80BA82CC = D_80BA82CC; // type:UNK_TYPE1 size:0x1
0x80BA82EC = D_80BA82EC; // type:UNK_PTR size:0x4
0x80BA82F8 = D_80BA82F8; // type:UNK_TYPE4 size:0x4
0x80BA82FC = D_80BA82FC; // type:UNK_TYPE1 size:0x1
0x80BA8308 = D_80BA8308; // type:UNK_TYPE4 size:0x4
0x80BA8314 = D_80BA8314; // type:UNK_TYPE4 size:0x4
0x80BA8320 = D_80BA8320; // type:UNK_TYPE4 size:0x4
0x80BA8330 = D_80BA8330; // type:f32 size:0x4
0x80BA8334 = D_80BA8334; // type:f32 size:0x4
0x80BA8338 = D_80BA8338; // type:f32 size:0x4
0x80BA833C = D_80BA833C; // type:f32 size:0x4
0x80BA8340 = D_80BA8340; // type:f32 size:0x4
0x80BA8344 = D_80BA8344; // type:f32 size:0x4
0x80BA8348 = D_80BA8348; // type:f32 size:0x4
0x80BA834C = D_80BA834C; // type:f32 size:0x4
0x80BA8350 = jtbl_80BA8350; // type:UNK_PTR size:0x4
0x80BA838C = D_80BA838C; // type:f32 size:0x4
0x80BA8390 = jtbl_80BA8390; // type:UNK_PTR size:0x4
0x80BA83AC = D_80BA83AC; // type:f32 size:0x4
0x80BA83B0 = jtbl_80BA83B0; // type:UNK_PTR size:0x4
0x80BA83C4 = jtbl_80BA83C4; // type:UNK_PTR size:0x4
0x80BAA380 = En_Baba_InitVars; // type:UNK_TYPE1 size:0x1
0x80BAA3A0 = D_80BAA3A0; // type:UNK_TYPE4 size:0x4
0x80BAA430 = D_80BAA430; // type:UNK_TYPE1 size:0x1
0x80BAA45C = D_80BAA45C; // type:UNK_TYPE1 size:0x1
0x80BAA468 = D_80BAA468; // type:UNK_TYPE1 size:0x1
0x80BAA488 = D_80BAA488; // type:UNK_TYPE1 size:0x1
0x80BAA4A8 = D_80BAA4A8; // type:UNK_TYPE1 size:0x1
0x80BAA4B4 = D_80BAA4B4; // type:UNK_TYPE1 size:0x1
0x80BAA4D4 = D_80BAA4D4; // type:UNK_TYPE4 size:0x4
0x80BAA4E0 = jtbl_80BAA4E0; // type:UNK_PTR size:0x4
0x80BAA504 = D_80BAA504; // type:f32 size:0x4
0x80BAA508 = D_80BAA508; // type:f32 size:0x4
0x80BAA50C = D_80BAA50C; // type:f32 size:0x4
0x80BAE6B0 = En_Suttari_InitVars; // type:UNK_TYPE1 size:0x1
0x80BAE6D0 = sAnimations; // type:UNK_TYPE4 size:0x4
0x80BAE7A8 = sCylinderInit; // type:UNK_TYPE1 size:0x1
0x80BAE7D4 = sColChkInfoInit2; // type:UNK_TYPE1 size:0x1
0x80BAE7E0 = sDamageTable; // type:UNK_TYPE1 size:0x1
0x80BAE800 = D_80BAE800; // type:UNK_TYPE1 size:0x1
0x80BAE820 = D_80BAE820; // type:UNK_TYPE1 size:0x1
0x80BAE8F8 = D_80BAE8F8; // type:UNK_TYPE1 size:0x1
0x80BAE938 = D_80BAE938; // type:UNK_TYPE4 size:0x4
0x80BAE944 = D_80BAE944; // type:UNK_TYPE4 size:0x4
0x80BAE950 = D_80BAE950; // type:UNK_TYPE1 size:0x1
0x80BAE95C = D_80BAE95C; // type:UNK_TYPE1 size:0x1
0x80BAE970 = jtbl_80BAE970; // type:UNK_PTR size:0x4
0x80BAE990 = jtbl_80BAE990; // type:UNK_PTR size:0x4
0x80BAE9B4 = jtbl_80BAE9B4; // type:UNK_PTR size:0x4
0x80BAE9D8 = jtbl_80BAE9D8; // type:UNK_PTR size:0x4
0x80BAEA04 = D_80BAEA04; // type:f32 size:0x4
0x80BAEA08 = D_80BAEA08; // type:f32 size:0x4
0x80BAEA0C = D_80BAEA0C; // type:f32 size:0x4
0x80BAEA10 = D_80BAEA10; // type:f32 size:0x4
0x80BAEA14 = jtbl_80BAEA14; // type:UNK_PTR size:0x4
0x80BAEA50 = jtbl_80BAEA50; // type:UNK_PTR size:0x4
0x80BAEA8C = D_80BAEA8C; // type:f32 size:0x4
0x80BAEA90 = D_80BAEA90; // type:f32 size:0x4
0x80BAEA94 = D_80BAEA94; // type:f32 size:0x4
0x80BB0520 = En_Zod_InitVars; // type:UNK_TYPE1 size:0x1
0x80BB0540 = D_80BB0540; // type:UNK_TYPE1 size:0x1
0x80BB056C = D_80BB056C; // type:UNK_TYPE1 size:0x1
0x80BB0580 = D_80BB0580; // type:UNK_TYPE1 size:0x1
0x80BB058C = D_80BB058C; // type:UNK_TYPE4 size:0x4
0x80BB05B4 = D_80BB05B4; // type:UNK_TYPE4 size:0x4
0x80BB05DC = D_80BB05DC; // type:UNK_TYPE4 size:0x4
0x80BB0604 = D_80BB0604; // type:UNK_TYPE4 size:0x4
0x80BB062C = D_80BB062C; // type:UNK_TYPE1 size:0x1
0x80BB0640 = D_80BB0640; // type:f32 size:0x4
0x80BB0644 = D_80BB0644; // type:f32 size:0x4
0x80BB0648 = D_80BB0648; // type:f32 size:0x4
0x80BB064C = D_80BB064C; // type:f32 size:0x4
0x80BB0650 = D_80BB0650; // type:f32 size:0x4
0x80BB0654 = D_80BB0654; // type:f32 size:0x4
0x80BB0658 = D_80BB0658; // type:f32 size:0x4
0x80BB065C = D_80BB065C; // type:f32 size:0x4
0x80BB0660 = D_80BB0660; // type:f32 size:0x4
0x80BB0664 = jtbl_80BB0664; // type:UNK_PTR size:0x4
0x80BB06A0 = jtbl_80BB06A0; // type:UNK_PTR size:0x4
0x80BB1500 = En_Kujiya_InitVars; // type:UNK_TYPE1 size:0x1
0x80BB1520 = jtbl_80BB1520; // type:UNK_PTR size:0x4
0x80BB154C = jtbl_80BB154C; // type:UNK_PTR size:0x4
0x80BB3E50 = En_Geg_InitVars; // type:UNK_TYPE1 size:0x1
0x80BB3E70 = D_80BB3E70; // type:UNK_TYPE1 size:0x1
0x80BB3E9C = D_80BB3E9C; // type:UNK_TYPE1 size:0x1
0x80BB3EC8 = D_80BB3EC8; // type:UNK_TYPE1 size:0x1
0x80BB3ED4 = D_80BB3ED4; // type:UNK_TYPE1 size:0x1
0x80BB3EF4 = D_80BB3EF4; // type:UNK_TYPE1 size:0x1
0x80BB4044 = D_80BB4044; // type:UNK_TYPE1 size:0x1
0x80BB405C = D_80BB405C; // type:EffectTireMarkInit size:0x8
0x80BB4064 = D_80BB4064; // type:UNK_TYPE4 size:0x4
0x80BB4070 = D_80BB4070; // type:UNK_TYPE4 size:0x4
0x80BB407C = D_80BB407C; // type:UNK_TYPE1 size:0x1
0x80BB4088 = D_80BB4088; // type:UNK_TYPE1 size:0x1
0x80BB40A0 = jtbl_80BB40A0; // type:UNK_PTR size:0x4
0x80BB4150 = jtbl_80BB4150; // type:UNK_PTR size:0x4
0x80BB4208 = jtbl_80BB4208; // type:UNK_PTR size:0x4
0x80BB42AC = D_80BB42AC; // type:f32 size:0x4
0x80BB42B0 = D_80BB42B0; // type:f32 size:0x4
0x80BB42B4 = D_80BB42B4; // type:f32 size:0x4
0x80BB4A70 = Obj_Kinoko_InitVars; // type:UNK_TYPE1 size:0x1
0x80BB4A90 = D_80BB4A90; // type:f32 size:0x4
0x80BB4A94 = D_80BB4A94; // type:f32 size:0x4
0x80BB4A98 = D_80BB4A98; // type:f32 size:0x4
0x80BB4D70 = Obj_Yasi_InitVars; // type:UNK_TYPE1 size:0x1
0x80BB4D90 = D_80BB4D90; // type:UNK_TYPE1 size:0x1
0x80BB4DA0 = D_80BB4DA0; // type:f32 size:0x4
0x80BB4DA4 = D_80BB4DA4; // type:f32 size:0x4
0x80BB4DA8 = D_80BB4DA8; // type:f32 size:0x4
0x80BB4DAC = D_80BB4DAC; // type:f32 size:0x4
0x80BB5E00 = En_Tanron1_InitVars; // type:UNK_TYPE1 size:0x1
0x80BB5E28 = D_80BB5E28; // type:UNK_TYPE1 size:0x1
0x80BB6228 = D_80BB6228; // type:UNK_TYPE1 size:0x1
0x80BB6628 = D_80BB6628; // type:UNK_TYPE1 size:0x1
0x80BB6688 = D_80BB6688; // type:UNK_TYPE1 size:0x1
0x80BB6700 = D_80BB6700; // type:UNK_TYPE1 size:0x1
0x80BB6720 = D_80BB6720; // type:f32 size:0x4
0x80BB6724 = D_80BB6724; // type:f32 size:0x4
0x80BB6728 = D_80BB6728; // type:f32 size:0x4
0x80BB672C = D_80BB672C; // type:f32 size:0x4
0x80BB6730 = D_80BB6730; // type:f32 size:0x4
0x80BB8150 = En_Tanron2_InitVars; // type:UNK_TYPE1 size:0x1
0x80BB8170 = D_80BB8170; // type:UNK_TYPE1 size:0x1
0x80BB8190 = D_80BB8190; // type:UNK_TYPE1 size:0x1
0x80BB81BC = D_80BB81BC; // type:UNK_TYPE1 size:0x1
0x80BB81E8 = D_80BB81E8; // type:UNK_TYPE1 size:0x1
0x80BB81EC = D_80BB81EC; // type:UNK_TYPE1 size:0x1
0x80BB81F0 = D_80BB81F0; // type:f32 size:0x4
0x80BB81F4 = D_80BB81F4; // type:f32 size:0x4
0x80BB81F8 = D_80BB81F8; // type:f32 size:0x4
0x80BB81FC = D_80BB81FC; // type:f32 size:0x4
0x80BB8200 = D_80BB8200; // type:f32 size:0x4
0x80BB8204 = D_80BB8204; // type:f32 size:0x4
0x80BB8208 = D_80BB8208; // type:f32 size:0x4
0x80BB820C = D_80BB820C; // type:f32 size:0x4
0x80BB8210 = D_80BB8210; // type:f32 size:0x4
0x80BB8214 = D_80BB8214; // type:f32 size:0x4
0x80BB8218 = D_80BB8218; // type:f32 size:0x4
0x80BB821C = D_80BB821C; // type:f32 size:0x4
0x80BB8450 = D_80BB8450; // type:UNK_TYPE4 size:0x4
0x80BB8454 = D_80BB8454; // type:f32 size:0x4
0x80BB8458 = D_80BB8458; // type:EnTanron2* size:0x148
0x80BB9720 = D_80BB9720; // type:UNK_TYPE4 size:0x4
0x80BB972C = D_80BB972C; // type:UNK_TYPE4 size:0x4
0x80BB9730 = En_Tanron3_InitVars; // type:UNK_TYPE1 size:0x1
0x80BB9750 = D_80BB9750; // type:UNK_TYPE1 size:0x1
0x80BB97A8 = D_80BB97A8; // type:UNK_TYPE1 size:0x1
0x80BB97AC = D_80BB97AC; // type:UNK_TYPE1 size:0x1
0x80BB97B0 = D_80BB97B0; // type:f32 size:0x4
0x80BB97B4 = D_80BB97B4; // type:f32 size:0x4
0x80BB97B8 = D_80BB97B8; // type:f32 size:0x4
0x80BB97BC = D_80BB97BC; // type:f32 size:0x4
0x80BB97C0 = D_80BB97C0; // type:f32 size:0x4
0x80BB97C4 = D_80BB97C4; // type:f32 size:0x4
0x80BB97C8 = D_80BB97C8; // type:f32 size:0x4
0x80BB97CC = D_80BB97CC; // type:f32 size:0x4
0x80BB97D0 = D_80BB97D0; // type:f32 size:0x4
0x80BB97D4 = D_80BB97D4; // type:f32 size:0x4
0x80BBAB10 = Obj_Chan_InitVars; // type:UNK_TYPE1 size:0x1
0x80BBAB30 = sObjChanCylinderInit; // type:UNK_TYPE1 size:0x1
0x80BBAB5C = sObjChanInitChain; // type:UNK_TYPE1 size:0x1
0x80BBAB60 = sObjChanFlameSize; // type:UNK_TYPE4 size:0x4
0x80BBAB78 = sObjChanFlameYOffset; // type:f32 size:0x4
0x80BBAB80 = D_80BBAB80; // type:f32 size:0x4
0x80BBAB84 = D_80BBAB84; // type:f32 size:0x4
0x80BBAB88 = D_80BBAB88; // type:f32 size:0x4
0x80BBAB8C = D_80BBAB8C; // type:f32 size:0x4
0x80BBAB90 = D_80BBAB90; // type:f32 size:0x4
0x80BBAB94 = D_80BBAB94; // type:f32 size:0x4
0x80BBAB98 = D_80BBAB98; // type:f32 size:0x4
0x80BBAB9C = D_80BBAB9C; // type:f32 size:0x4
0x80BBABA0 = D_80BBABA0; // type:f32 size:0x4
0x80BBABA4 = D_80BBABA4; // type:f32 size:0x4
0x80BBAC90 = sObjChanLoaded; // type:UNK_TYPE1 size:0x1
0x80BBC6D0 = En_Zos_InitVars; // type:UNK_TYPE1 size:0x1
0x80BBC6F0 = D_80BBC6F0; // type:UNK_TYPE1 size:0x1
0x80BBC71C = D_80BBC71C; // type:UNK_TYPE1 size:0x1
0x80BBC750 = D_80BBC750; // type:UNK_TYPE1 size:0x1
0x80BBC75C = sEyeTextures; // type:UNK_TYPE1 size:0x1
0x80BBC770 = D_80BBC770; // type:f32 size:0x4
0x80BBC774 = jtbl_80BBC774; // type:UNK_PTR size:0x4
0x80BBF800 = En_S_Goro_InitVars; // type:ActorInit size:0x20
0x80BBF820 = sCylinderInit; // type:ColliderCylinderInit size:0x2C
0x80BBF84C = sColChkInfoInit; // type:CollisionCheckInfoInit2 size:0xC
0x80BBF858 = sDamageTable; // type:DamageTable size:0x20
0x80BBF878 = sAnimationInfo; // type:AnimationInfoS size:0x100
0x80BBF978 = sEyeTextures; // type:TexturePtr size:0x18
0x80BBF990 = jtbl_80BBF990; // type:UNK_PTR size:0x4
0x80BBF9B4 = jtbl_80BBF9B4; // type:UNK_PTR size:0x4
0x80BBFA34 = D_80BBFA34; // type:f32 size:0x4
0x80BBFA38 = D_80BBFA38; // type:f32 size:0x4
0x80BBFA3C = D_80BBFA3C; // type:f32 size:0x4
0x80BBFA40 = D_80BBFA40; // type:f32 size:0x4
0x80BBFA44 = D_80BBFA44; // type:f32 size:0x4
0x80BBFA48 = jtbl_80BBFA48; // type:UNK_PTR size:0x4
0x80BC13F0 = D_80BC13F0; // type:UNK_TYPE1 size:0x1
0x80BC1464 = D_80BC1464; // type:UNK_TYPE1 size:0x1
0x80BC1574 = D_80BC1574; // type:UNK_TYPE1 size:0x1
0x80BC15C8 = D_80BC15C8; // type:UNK_TYPE1 size:0x1
0x80BC15D0 = En_Nb_InitVars; // type:UNK_TYPE1 size:0x1
0x80BC15F0 = D_80BC15F0; // type:UNK_TYPE1 size:0x1
0x80BC161C = D_80BC161C; // type:UNK_TYPE1 size:0x1
0x80BC1628 = sAnimationInfo; // type:UNK_TYPE1 size:0x1
0x80BC1690 = jtbl_80BC1690; // type:UNK_PTR size:0x4
0x80BC16B8 = jtbl_80BC16B8; // type:UNK_PTR size:0x4
0x80BC16D0 = jtbl_80BC16D0; // type:UNK_PTR size:0x4
0x80BC35F0 = D_80BC35F0; // type:UNK_TYPE1 size:0x1
0x80BC360C = D_80BC360C; // type:UNK_TYPE1 size:0x1
0x80BC362C = D_80BC362C; // type:UNK_TYPE1 size:0x1
0x80BC364C = D_80BC364C; // type:UNK_TYPE1 size:0x1
0x80BC366C = D_80BC366C; // type:UNK_TYPE1 size:0x1
0x80BC368C = En_Ja_InitVars; // type:UNK_TYPE1 size:0x1
0x80BC36AC = D_80BC36AC; // type:UNK_TYPE4 size:0x4
0x80BC36B8 = D_80BC36B8; // type:UNK_TYPE4 size:0x4
0x80BC36C4 = D_80BC36C4; // type:UNK_TYPE4 size:0x4
0x80BC36D0 = D_80BC36D0; // type:UNK_TYPE4 size:0x4
0x80BC36DC = D_80BC36DC; // type:UNK_TYPE1 size:0x1
0x80BC3708 = D_80BC3708; // type:UNK_TYPE1 size:0x1
0x80BC3714 = D_80BC3714; // type:UNK_TYPE1 size:0x1
0x80BC3774 = D_80BC3774; // type:UNK_TYPE1 size:0x1
0x80BC3780 = D_80BC3780; // type:UNK_TYPE1 size:0x1
0x80BC378C = D_80BC378C; // type:f32 size:0x4
0x80BC3790 = D_80BC3790; // type:f32 size:0x4
0x80BC3794 = D_80BC3794; // type:UNK_TYPE4 size:0x4
0x80BC3798 = D_80BC3798; // type:f32 size:0x4
0x80BC379C = D_80BC379C; // type:f32 size:0x4
0x80BC37A0 = D_80BC37A0; // type:UNK_TYPE4 size:0x4
0x80BC37A4 = D_80BC37A4; // type:UNK_TYPE1 size:0x1
0x80BC37AC = D_80BC37AC; // type:UNK_TYPE1 size:0x1
0x80BC37B4 = D_80BC37B4; // type:UNK_TYPE1 size:0x1
0x80BC37BC = D_80BC37BC; // type:UNK_TYPE1 size:0x1
0x80BC37D0 = D_80BC37D0; // type:f32 size:0x4
0x80BC37D4 = D_80BC37D4; // type:f32 size:0x4
0x80BC37D8 = D_80BC37D8; // type:f32 size:0x4
0x80BC4600 = Bg_F40_Block_InitVars; // type:UNK_TYPE1 size:0x1
0x80BC4620 = D_80BC4620; // type:UNK_TYPE1 size:0x1
0x80BC4668 = D_80BC4668; // type:UNK_TYPE1 size:0x1
0x80BC4680 = jtbl_80BC4680; // type:UNK_PTR size:0x4
0x80BC4DD0 = Bg_F40_Switch_InitVars; // type:UNK_TYPE1 size:0x1
0x80BC4DF0 = sBgF40SwitchGlobalsInitialized; // type:s32 size:0x4
0x80BC4DF4 = sBgF40SwitchGlobalFlags; // type:BgF40SwitchGlobalFlags size:0x10
0x80BC4E04 = D_80BC4E04; // type:UNK_TYPE1 size:0x1
0x80BC4E20 = D_80BC4E20; // type:f32 size:0x4
0x80BC4E24 = D_80BC4E24; // type:f32 size:0x4
0x80BC4E28 = D_80BC4E28; // type:f32 size:0x4
0x80BC4E2C = D_80BC4E2C; // type:f32 size:0x4
0x80BC4E30 = D_80BC4E30; // type:f32 size:0x4
0x80BC4E34 = D_80BC4E34; // type:f32 size:0x4
0x80BC4E38 = D_80BC4E38; // type:f32 size:0x4
0x80BC4F20 = sBgF40SwitchLastUpdateFrame; // type:u32 size:0x4
0x80BC6760 = En_Po_Composer_InitVars; // type:UNK_TYPE1 size:0x1
0x80BC6780 = D_80BC6780; // type:UNK_TYPE1 size:0x1
0x80BC67AC = D_80BC67AC; // type:UNK_TYPE1 size:0x1
0x80BC67D0 = D_80BC67D0; // type:UNK_TYPE1 size:0x1
0x80BC67E0 = D_80BC67E0; // type:UNK_TYPE1 size:0x1
0x80BC67E8 = D_80BC67E8; // type:UNK_TYPE1 size:0x1
0x80BC6808 = D_80BC6808; // type:UNK_TYPE1 size:0x1
0x80BC6940 = D_80BC6940; // type:UNK_TYPE4 size:0x4
0x80BC6944 = D_80BC6944; // type:UNK_TYPE4 size:0x4
0x80BC6948 = D_80BC6948; // type:UNK_TYPE1 size:0x1
0x80BC694C = D_80BC694C; // type:UNK_TYPE1 size:0x1
0x80BC6950 = D_80BC6950; // type:UNK_TYPE1 size:0x1
0x80BC6954 = D_80BC6954; // type:UNK_TYPE1 size:0x1
0x80BC6958 = D_80BC6958; // type:UNK_TYPE1 size:0x1
0x80BC695C = D_80BC695C; // type:UNK_TYPE4 size:0x4
0x80BC6960 = jtbl_80BC6960; // type:UNK_PTR size:0x4
0x80BC6988 = D_80BC6988; // type:f32 size:0x4
0x80BC698C = D_80BC698C; // type:f32 size:0x4
0x80BC6990 = D_80BC6990; // type:f32 size:0x4
0x80BC7960 = En_Guruguru_InitVars; // type:UNK_TYPE1 size:0x1
0x80BC7980 = D_80BC7980; // type:UNK_TYPE1 size:0x1
0x80BC79A0 = D_80BC79A0; // type:UNK_TYPE1 size:0x1
0x80BC79CC = sAnimations; // type:UNK_TYPE1 size:0x1
0x80BC79D4 = sAnimationModes; // type:UNK_TYPE1 size:0x1
0x80BC79D8 = sPlaySpeeds; // type:UNK_TYPE1 size:0x1
0x80BC79E0 = D_80BC79E0; // type:UNK_TYPE1 size:0x1
0x80BC79E8 = D_80BC79E8; // type:UNK_TYPE1 size:0x1
0x80BC7EF0 = Oceff_Wipe5_InitVars; // type:UNK_TYPE1 size:0x1
0x80BC7F10 = D_80BC7F10; // type:UNK_TYPE1 size:0x1
0x80BC7F18 = D_80BC7F18; // type:UNK_TYPE1 size:0x1
0x80BC7F20 = D_80BC7F20; // type:UNK_TYPE1 size:0x1
0x80BC8720 = D_80BC8720; // type:UNK_TYPE1 size:0x1
0x80BC8F20 = D_80BC8F20; // type:UNK_TYPE1 size:0x1
0x80BC8F3E = D_80BC8F3E; // type:UNK_TYPE1 size:0x1
0x80BC8F3F = D_80BC8F3F; // type:UNK_TYPE1 size:0x1
0x80BC8F5E = D_80BC8F5E; // type:UNK_TYPE1 size:0x1
0x80BC8F5F = D_80BC8F5F; // type:UNK_TYPE1 size:0x1
0x80BC8F7E = D_80BC8F7E; // type:UNK_TYPE1 size:0x1
0x80BC8F7F = D_80BC8F7F; // type:UNK_TYPE1 size:0x1
0x80BC8F90 = D_80BC8F90; // type:UNK_TYPE1 size:0x1
0x80BC9080 = D_80BC9080; // type:UNK_TYPE1 size:0x1
0x80BC9090 = D_80BC9090; // type:UNK_TYPE1 size:0x1
0x80BC9188 = D_80BC9188; // type:UNK_TYPE1 size:0x1
0x80BC9198 = D_80BC9198; // type:UNK_TYPE1 size:0x1
0x80BC91B0 = D_80BC91B0; // type:f32 size:0x4
0x80BC91B4 = D_80BC91B4; // type:f32 size:0x4
0x80BC91B8 = D_80BC91B8; // type:f32 size:0x4
0x80BCA380 = En_Stone_heishi_InitVars; // type:UNK_TYPE1 size:0x1
0x80BCA3A0 = D_80BCA3A0; // type:UNK_TYPE1 size:0x1
0x80BCA3CC = D_80BCA3CC; // type:UNK_TYPE1 size:0x1
0x80BCA3E0 = D_80BCA3E0; // type:UNK_TYPE1 size:0x1
0x80BCA3F4 = D_80BCA3F4; // type:UNK_TYPE1 size:0x1
0x80BCA3FC = D_80BCA3FC; // type:UNK_TYPE1 size:0x1
0x80BCA404 = D_80BCA404; // type:f32 size:0x4
0x80BCA408 = D_80BCA408; // type:f32 size:0x4
0x80BCA40C = D_80BCA40C; // type:f32 size:0x4
0x80BCA410 = jtbl_80BCA410; // type:UNK_PTR size:0x4
0x80BCA8B0 = Oceff_Wipe6_InitVars; // type:UNK_TYPE1 size:0x1
0x80BCA8D0 = D_80BCA8D0; // type:UNK_TYPE1 size:0x1
0x80BCA8D8 = D_80BCA8D8; // type:UNK_TYPE1 size:0x1
0x80BCA8E0 = D_80BCA8E0; // type:UNK_TYPE1 size:0x1
0x80BCA8FE = D_80BCA8FE; // type:UNK_TYPE1 size:0x1
0x80BCA8FF = D_80BCA8FF; // type:UNK_TYPE1 size:0x1
0x80BCA91E = D_80BCA91E; // type:UNK_TYPE1 size:0x1
0x80BCA91F = D_80BCA91F; // type:UNK_TYPE1 size:0x1
0x80BCA93E = D_80BCA93E; // type:UNK_TYPE1 size:0x1
0x80BCA93F = D_80BCA93F; // type:UNK_TYPE1 size:0x1
0x80BCA950 = D_80BCA950; // type:UNK_TYPE1 size:0x1
0x80BCAA40 = D_80BCAA40; // type:UNK_TYPE1 size:0x1
0x80BCAA50 = D_80BCAA50; // type:UNK_TYPE1 size:0x1
0x80BCAB60 = D_80BCAB60; // type:f32 size:0x4
0x80BCAB64 = D_80BCAB64; // type:f32 size:0x4
0x80BCAB68 = D_80BCAB68; // type:f32 size:0x4
0x80BCCB20 = En_Scopenuts_InitVars; // type:UNK_TYPE1 size:0x1
0x80BCCB40 = D_80BCCB40; // type:UNK_TYPE1 size:0x1
0x80BCCB6C = D_80BCCB6C; // type:UNK_TYPE1 size:0x1
0x80BCCCDC = D_80BCCCDC; // type:UNK_PTR size:0x4
0x80BCCCE4 = D_80BCCCE4; // type:UNK_TYPE1 size:0x1
0x80BCCCF0 = D_80BCCCF0; // type:UNK_TYPE1 size:0x1
0x80BCCD00 = D_80BCCD00; // type:f32 size:0x4
0x80BCCD04 = jtbl_80BCCD04; // type:UNK_PTR size:0x4
0x80BCCD40 = D_80BCCD40; // type:f32 size:0x4
0x80BCCD44 = D_80BCCD44; // type:f32 size:0x4
0x80BCCD48 = D_80BCCD48; // type:f32 size:0x4
0x80BCCD4C = D_80BCCD4C; // type:f32 size:0x4
0x80BCCD50 = D_80BCCD50; // type:f32 size:0x4
0x80BCCD54 = D_80BCCD54; // type:f32 size:0x4
0x80BCCD58 = D_80BCCD58; // type:f32 size:0x4
0x80BCCD5C = D_80BCCD5C; // type:f32 size:0x4
0x80BCCD60 = D_80BCCD60; // type:f32 size:0x4
0x80BCCD64 = D_80BCCD64; // type:f32 size:0x4
0x80BCCD68 = D_80BCCD68; // type:f32 size:0x4
0x80BCCD6C = D_80BCCD6C; // type:f32 size:0x4
0x80BCCD70 = D_80BCCD70; // type:f32 size:0x4
0x80BCCD74 = D_80BCCD74; // type:f32 size:0x4
0x80BCDB50 = En_Scopecrow_InitVars; // type:UNK_TYPE1 size:0x1
0x80BCDB70 = D_80BCDB70; // type:UNK_TYPE1 size:0x1
0x80BCDB94 = D_80BCDB94; // type:UNK_TYPE1 size:0x1
0x80BCDBA0 = D_80BCDBA0; // type:UNK_PTR size:0x4
0x80BCDBB0 = jtbl_80BCDBB0; // type:UNK_PTR size:0x4
0x80BCDBC8 = jtbl_80BCDBC8; // type:UNK_PTR size:0x4
0x80BCDBE0 = D_80BCDBE0; // type:f32 size:0x4
0x80BCDFC0 = Oceff_Wipe7_InitVars; // type:UNK_TYPE1 size:0x1
0x80BCDFE0 = D_80BCDFE0; // type:UNK_TYPE1 size:0x1
0x80BCE7E0 = D_80BCE7E0; // type:UNK_TYPE1 size:0x1
0x80BCE7E8 = D_80BCE7E8; // type:UNK_TYPE1 size:0x1
0x80BCE7F0 = D_80BCE7F0; // type:UNK_TYPE1 size:0x1
0x80BCE80E = D_80BCE80E; // type:UNK_TYPE1 size:0x1
0x80BCE80F = D_80BCE80F; // type:UNK_TYPE1 size:0x1
0x80BCE82E = D_80BCE82E; // type:UNK_TYPE1 size:0x1
0x80BCE82F = D_80BCE82F; // type:UNK_TYPE1 size:0x1
0x80BCE84E = D_80BCE84E; // type:UNK_TYPE1 size:0x1
0x80BCE84F = D_80BCE84F; // type:UNK_TYPE1 size:0x1
0x80BCE860 = D_80BCE860; // type:UNK_TYPE1 size:0x1
0x80BCE950 = D_80BCE950; // type:UNK_TYPE1 size:0x1
0x80BCE960 = D_80BCE960; // type:UNK_TYPE1 size:0x1
0x80BCEA70 = D_80BCEA70; // type:f32 size:0x4
0x80BCEA74 = D_80BCEA74; // type:f32 size:0x4
0x80BCEA78 = D_80BCEA78; // type:f32 size:0x4
0x80BCF070 = Eff_Kamejima_Wave_InitVars; // type:UNK_TYPE1 size:0x1
0x80BCF090 = D_80BCF090; // type:UNK_TYPE1 size:0x1
0x80BCF0A0 = D_80BCF0A0; // type:UNK_TYPE1 size:0x1
0x80BCF0B0 = D_80BCF0B0; // type:f32 size:0x4
0x80BCF0B4 = D_80BCF0B4; // type:f32 size:0x4
0x80BCF0B8 = D_80BCF0B8; // type:f32 size:0x4
0x80BCF0BC = D_80BCF0BC; // type:f32 size:0x4
0x80BCF0C0 = D_80BCF0C0; // type:f32 size:0x4
0x80BCF0C4 = D_80BCF0C4; // type:f32 size:0x4
0x80BCF0C8 = D_80BCF0C8; // type:f32 size:0x4
0x80BCF1C0 = sVtxAlpha; // type:UNK_TYPE1 size:0x1
0x80BCF1C1 = D_80BCF1C1; // type:UNK_TYPE1 size:0x1
0x80BCF1C4 = D_80BCF1C4; // type:UNK_TYPE1 size:0x1
0x80BCFF90 = En_Hg_InitVars; // type:UNK_TYPE1 size:0x1
0x80BCFFB0 = D_80BCFFB0; // type:UNK_TYPE1 size:0x1
0x80BCFFDC = D_80BCFFDC; // type:UNK_TYPE1 size:0x1
0x80BCFFFC = D_80BCFFFC; // type:UNK_TYPE1 size:0x1
0x80BD0008 = D_80BD0008; // type:UNK_TYPE1 size:0x1
0x80BD00C8 = D_80BD00C8; // type:UNK_TYPE4 size:0x4
0x80BD00D0 = D_80BD00D0; // type:f32 size:0x4
0x80BD00D4 = jtbl_80BD00D4; // type:UNK_PTR size:0x4
0x80BD00EC = jtbl_80BD00EC; // type:UNK_PTR size:0x4
0x80BD0E80 = En_Hgo_InitVars; // type:UNK_TYPE1 size:0x1
0x80BD0EA0 = D_80BD0EA0; // type:UNK_TYPE1 size:0x1
0x80BD0F48 = D_80BD0F48; // type:UNK_TYPE1 size:0x1
0x80BD0F74 = D_80BD0F74; // type:UNK_TYPE1 size:0x1
0x80BD0F80 = D_80BD0F80; // type:UNK_TYPE1 size:0x1
0x80BD0F90 = jtbl_80BD0F90; // type:UNK_PTR size:0x4
0x80BD0FAC = jtbl_80BD0FAC; // type:UNK_PTR size:0x4
0x80BD1010 = jtbl_80BD1010; // type:UNK_PTR size:0x4
0x80BD26C0 = En_Zov_InitVars; // type:UNK_TYPE1 size:0x1
0x80BD26E0 = D_80BD26E0; // type:UNK_TYPE1 size:0x1
0x80BD270C = D_80BD270C; // type:UNK_TYPE1 size:0x1
0x80BD2744 = D_80BD2744; // type:UNK_TYPE1 size:0x1
0x80BD2750 = D_80BD2750; // type:UNK_TYPE1 size:0x1
0x80BD275C = D_80BD275C; // type:UNK_TYPE4 size:0x4
0x80BD2768 = D_80BD2768; // type:UNK_TYPE1 size:0x1
0x80BD2770 = D_80BD2770; // type:UNK_TYPE1 size:0x1
0x80BD2774 = D_80BD2774; // type:UNK_TYPE1 size:0x1
0x80BD2780 = jtbl_80BD2780; // type:UNK_PTR size:0x4
0x80BD27B0 = jtbl_80BD27B0; // type:UNK_PTR size:0x4
0x80BD27CC = jtbl_80BD27CC; // type:UNK_PTR size:0x4
0x80BD3DB0 = D_80BD3DB0; // type:UNK_TYPE1 size:0x1
0x80BD3DE8 = D_80BD3DE8; // type:UNK_TYPE1 size:0x1
0x80BD3DF0 = D_80BD3DF0; // type:UNK_TYPE1 size:0x1
0x80BD3DF8 = D_80BD3DF8; // type:UNK_TYPE1 size:0x1
0x80BD3E08 = D_80BD3E08; // type:UNK_TYPE1 size:0x1
0x80BD3E14 = En_Ah_InitVars; // type:UNK_TYPE1 size:0x1
0x80BD3E34 = D_80BD3E34; // type:UNK_TYPE1 size:0x1
0x80BD3E60 = D_80BD3E60; // type:UNK_TYPE1 size:0x1
0x80BD3E6C = D_80BD3E6C; // type:UNK_PTR size:0x4
0x80BD3EBC = D_80BD3EBC; // type:UNK_TYPE1 size:0x1
0x80BD3EC4 = D_80BD3EC4; // type:UNK_TYPE1 size:0x1
0x80BD3ED0 = D_80BD3ED0; // type:UNK_TYPE1 size:0x1
0x80BD3ED8 = D_80BD3ED8; // type:UNK_TYPE1 size:0x1
0x80BD3EE4 = D_80BD3EE4; // type:UNK_TYPE1 size:0x1
0x80BD3EEC = D_80BD3EEC; // type:UNK_TYPE1 size:0x1
0x80BD3EF8 = D_80BD3EF8; // type:UNK_TYPE1 size:0x1
0x80BD3F00 = D_80BD3F00; // type:UNK_TYPE1 size:0x1
0x80BD3F0C = D_80BD3F0C; // type:UNK_TYPE1 size:0x1
0x80BD3F14 = D_80BD3F14; // type:UNK_TYPE1 size:0x1
0x80BD4670 = Obj_Hgdoor_InitVars; // type:UNK_TYPE1 size:0x1
0x80BD4690 = D_80BD4690; // type:UNK_TYPE2 size:0x2
0x80BD5250 = Bg_Ikana_Bombwall_InitVars; // type:UNK_TYPE1 size:0x1
0x80BD5270 = D_80BD5270; // type:UNK_TYPE1 size:0x1
0x80BD529C = D_80BD529C; // type:UNK_TYPE1 size:0x1
0x80BD52C8 = D_80BD52C8; // type:UNK_TYPE2 size:0x2
0x80BD52D0 = D_80BD52D0; // type:UNK_TYPE1 size:0x1
0x80BD52E0 = D_80BD52E0; // type:UNK_TYPE1 size:0x1
0x80BD52F0 = D_80BD52F0; // type:f32 size:0x4
0x80BD52F4 = D_80BD52F4; // type:f32 size:0x4
0x80BD52F8 = D_80BD52F8; // type:f32 size:0x4
0x80BD52FC = D_80BD52FC; // type:f32 size:0x4
0x80BD55D0 = Bg_Ikana_Ray_InitVars; // type:ActorInit size:0x20
0x80BD55F0 = bgIkanaRayCylinderInit; // type:ColliderCylinderInit size:0x2c
0x80BD561C = bgIkanaRayCompInit; // type:ActorInitVar size:0x10
0x80BD5CF0 = Bg_Ikana_Shutter_InitVars; // type:UNK_TYPE1 size:0x1
0x80BD5D10 = D_80BD5D10; // type:UNK_TYPE1 size:0x1
0x80BD5D20 = D_80BD5D20; // type:f32 size:0x4
0x80BD5D24 = D_80BD5D24; // type:f32 size:0x4
0x80BD6480 = Bg_Haka_Bombwall_InitVars; // type:UNK_TYPE1 size:0x1
0x80BD64A0 = D_80BD64A0; // type:UNK_TYPE1 size:0x1
0x80BD64CC = D_80BD64CC; // type:UNK_TYPE2 size:0x2
0x80BD64D4 = D_80BD64D4; // type:UNK_TYPE1 size:0x1
0x80BD64F0 = D_80BD64F0; // type:f32 size:0x4
0x80BD6880 = Bg_Haka_Tomb_InitVars; // type:UNK_TYPE1 size:0x1
0x80BD68A0 = D_80BD68A0; // type:UNK_TYPE1 size:0x1
0x80BD68A4 = D_80BD68A4; // type:UNK_TYPE1 size:0x1
0x80BD6DF0 = En_Sc_Ruppe_InitVars; // type:UNK_TYPE1 size:0x1
0x80BD6E10 = D_80BD6E10; // type:UNK_TYPE1 size:0x30
0x80BD6E40 = D_80BD6E40; // type:UNK_TYPE1 size:0x1
0x80BD6E70 = jtbl_80BD6E70; // type:UNK_PTR size:0x4
0x80BD6E88 = D_80BD6E88; // type:f32 size:0x4
0x80BD79C0 = Bg_Iknv_Doukutu_InitVars; // type:UNK_TYPE1 size:0x1
0x80BD79E0 = D_80BD79E0; // type:f32 size:0x4
0x80BD79E4 = D_80BD79E4; // type:f32 size:0x4
0x80BD79E8 = D_80BD79E8; // type:f32 size:0x4
0x80BD79EC = D_80BD79EC; // type:f32 size:0x4
0x80BD81D0 = Bg_Iknv_Obj_InitVars; // type:ActorInit size:0x20
0x80BD81F0 = BgIknvObjCollisionInit; // type:ColliderCylinderInit size:0x2c
0x80BDA460 = En_Pamera_InitVars; // type:UNK_TYPE1 size:0x1
0x80BDA480 = D_80BDA480; // type:UNK_TYPE1 size:0x1
0x80BDA4AC = D_80BDA4AC; // type:UNK_TYPE1 size:0x1
0x80BDA4B8 = D_80BDA4B8; // type:UNK_TYPE1 size:0x1
0x80BDA5F0 = D_80BDA5F0; // type:UNK_TYPE1 size:0x1
0x80BDA5FC = D_80BDA5FC; // type:UNK_TYPE1 size:0x1
0x80BDA604 = D_80BDA604; // type:UNK_TYPE1 size:0x1
0x80BDA610 = D_80BDA610; // type:UNK_TYPE1 size:0x1
0x80BDA620 = jtbl_80BDA620; // type:UNK_PTR size:0x4
0x80BDA63C = jtbl_80BDA63C; // type:UNK_PTR size:0x4
0x80BDA65C = jtbl_80BDA65C; // type:UNK_PTR size:0x4
0x80BDAF60 = Obj_HsStump_InitVars; // type:UNK_TYPE1 size:0x1
0x80BDAF80 = D_80BDAF80; // type:UNK_TYPE1 size:0x1
0x80BDAF84 = iceSmokeAccel; // type:Vec3f size:0xc
0x80BDAF90 = D_80BDAF90; // type:f32 size:0x4
0x80BDAF94 = D_80BDAF94; // type:f32 size:0x4
0x80BDAF98 = D_80BDAF98; // type:f32 size:0x4
0x80BDAF9C = D_80BDAF9C; // type:f32 size:0x4
0x80BDAFA0 = D_80BDAFA0; // type:f32 size:0x4
0x80BDC0B0 = En_Hidden_Nuts_InitVars; // type:UNK_TYPE1 size:0x1
0x80BDC0D0 = D_80BDC0D0; // type:UNK_TYPE1 size:0x1
0x80BDC0FC = D_80BDC0FC; // type:UNK_TYPE1 size:0x1
0x80BDC120 = D_80BDC120; // type:UNK_TYPE1 size:0x1
0x80BDC12C = D_80BDC12C; // type:UNK_TYPE1 size:0x1
0x80BDC138 = D_80BDC138; // type:UNK_TYPE1 size:0x1
0x80BDC144 = D_80BDC144; // type:UNK_TYPE1 size:0x1
0x80BDC148 = D_80BDC148; // type:UNK_TYPE1 size:0x1
0x80BDC14C = D_80BDC14C; // type:UNK_TYPE1 size:0x1
0x80BDC158 = D_80BDC158; // type:UNK_TYPE1 size:0x1
0x80BDC164 = D_80BDC164; // type:UNK_TYPE1 size:0x1
0x80BDC168 = D_80BDC168; // type:UNK_TYPE1 size:0x1
0x80BDDCD0 = En_Zow_InitVars; // type:UNK_TYPE1 size:0x1
0x80BDDCF0 = D_80BDDCF0; // type:UNK_TYPE1 size:0x1
0x80BDDD1C = D_80BDDD1C; // type:UNK_TYPE4 size:0x4
0x80BDDD28 = D_80BDDD28; // type:UNK_TYPE4 size:0x4
0x80BDDD34 = D_80BDDD34; // type:Vec3f size:0xC
0x80BDDD40 = D_80BDDD40; // type:UNK_TYPE1 size:0x1
0x80BDDD4C = D_80BDDD4C; // type:UNK_TYPE1 size:0x1
0x80BDDD58 = D_80BDDD58; // type:UNK_TYPE4 size:0x4
0x80BDDD70 = D_80BDDD70; // type:f32 size:0x4
0x80BDDD74 = D_80BDDD74; // type:f32 size:0x4
0x80BDDD78 = D_80BDDD78; // type:f32 size:0x4
0x80BDDD7C = D_80BDDD7C; // type:f32 size:0x4
0x80BDDD80 = D_80BDDD80; // type:f32 size:0x4
0x80BDDD84 = D_80BDDD84; // type:f32 size:0x4
0x80BDDD88 = D_80BDDD88; // type:f32 size:0x4
0x80BDDD8C = D_80BDDD8C; // type:f32 size:0x4
0x80BDDD90 = D_80BDDD90; // type:f32 size:0x4
0x80BDDD94 = D_80BDDD94; // type:f32 size:0x4
0x80BDDD98 = jtbl_80BDDD98; // type:UNK_PTR size:0x4
0x80BDE140 = En_Talk_InitVars; // type:UNK_TYPE1 size:0x1
0x80BDFC70 = D_80BDFC70; // type:UNK_TYPE1 size:0x1
0x80BDFCBC = D_80BDFCBC; // type:UNK_TYPE1 size:0x1
0x80BDFD14 = D_80BDFD14; // type:UNK_TYPE1 size:0x1
0x80BDFDD0 = D_80BDFDD0; // type:UNK_TYPE1 size:0x1
0x80BDFDE8 = D_80BDFDE8; // type:UNK_TYPE1 size:0x1
0x80BDFDF8 = D_80BDFDF8; // type:UNK_TYPE1 size:0x1
0x80BDFE7C = D_80BDFE7C; // type:UNK_TYPE1 size:0x1
0x80BDFE84 = D_80BDFE84; // type:UNK_TYPE1 size:0x1
0x80BDFE8C = D_80BDFE8C; // type:UNK_TYPE1 size:0x1
0x80BDFED4 = D_80BDFED4; // type:UNK_TYPE1 size:0x1
0x80BDFF24 = D_80BDFF24; // type:UNK_TYPE1 size:0x1
0x80BDFF98 = En_Al_InitVars; // type:UNK_TYPE1 size:0x1
0x80BDFFB8 = D_80BDFFB8; // type:UNK_TYPE1 size:0x1
0x80BDFFE4 = D_80BDFFE4; // type:UNK_TYPE1 size:0x1
0x80BDFFF0 = D_80BDFFF0; // type:UNK_TYPE1 size:0x1
0x80BE0070 = D_80BE0070; // type:UNK_TYPE1 size:0x1
0x80BE007C = D_80BE007C; // type:UNK_TYPE4 size:0x4
0x80BE0094 = D_80BE0094; // type:UNK_TYPE1 size:0x1
0x80BE00A0 = jtbl_80BE00A0; // type:UNK_PTR size:0x4
0x80BE00C8 = jtbl_80BE00C8; // type:UNK_PTR size:0x4
0x80BE0110 = jtbl_80BE0110; // type:UNK_PTR size:0x4
0x80BE014C = jtbl_80BE014C; // type:UNK_PTR size:0x4
0x80BE0160 = jtbl_80BE0160; // type:UNK_PTR size:0x4
0x80BE0198 = jtbl_80BE0198; // type:UNK_PTR size:0x4
0x80BE18D0 = D_80BE18D0; // type:UNK_TYPE1 size:0x1
0x80BE1914 = D_80BE1914; // type:UNK_TYPE1 size:0x1
0x80BE1940 = D_80BE1940; // type:UNK_TYPE1 size:0x1
0x80BE1970 = D_80BE1970; // type:UNK_TYPE1 size:0x1
0x80BE1984 = D_80BE1984; // type:UNK_TYPE1 size:0x1
0x80BE1998 = D_80BE1998; // type:UNK_TYPE1 size:0x1
0x80BE19A0 = D_80BE19A0; // type:UNK_TYPE1 size:0x1
0x80BE1A0C = D_80BE1A0C; // type:UNK_TYPE1 size:0x1
0x80BE1A78 = En_Tab_InitVars; // type:UNK_TYPE1 size:0x1
0x80BE1A98 = D_80BE1A98; // type:UNK_TYPE1 size:0x1
0x80BE1AC4 = D_80BE1AC4; // type:UNK_TYPE1 size:0x1
0x80BE1AD0 = D_80BE1AD0; // type:UNK_TYPE1 size:0x1
0x80BE1AF0 = D_80BE1AF0; // type:UNK_TYPE1 size:0x1
0x80BE1AFC = D_80BE1AFC; // type:UNK_TYPE1 size:0x1
0x80BE1B04 = D_80BE1B04; // type:UNK_TYPE1 size:0x1
0x80BE1B10 = D_80BE1B10; // type:UNK_TYPE1 size:0x1
0x80BE1B18 = D_80BE1B18; // type:UNK_TYPE1 size:0x1
0x80BE1B24 = D_80BE1B24; // type:UNK_TYPE1 size:0x1
0x80BE1F90 = En_Nimotsu_InitVars; // type:UNK_TYPE1 size:0x1
0x80BE1FB0 = D_80BE1FB0; // type:UNK_TYPE1 size:0x1
0x80BE1FE0 = D_80BE1FE0; // type:f32 size:0x4
0x80BE21D0 = En_Hit_Tag_InitVars; // type:UNK_TYPE1 size:0x1
0x80BE21F0 = D_80BE21F0; // type:UNK_TYPE1 size:0x1
0x80BE3990 = En_Ruppecrow_InitVars; // type:UNK_TYPE1 size:0x1
0x80BE39B0 = D_80BE39B0; // type:UNK_TYPE1 size:0x1
0x80BE39D4 = D_80BE39D4; // type:UNK_TYPE1 size:0x1
0x80BE39E0 = D_80BE39E0; // type:UNK_PTR size:0x4
0x80BE39E4 = D_80BE39E4; // type:UNK_TYPE1 size:0x1
0x80BE39EC = D_80BE39EC; // type:UNK_TYPE1 size:0x1
0x80BE3A0C = D_80BE3A0C; // type:UNK_TYPE1 size:0x1
0x80BE3A20 = D_80BE3A20; // type:f32 size:0x4
0x80BE3A24 = D_80BE3A24; // type:f32 size:0x4
0x80BE3A28 = D_80BE3A28; // type:f32 size:0x4
0x80BE3A2C = D_80BE3A2C; // type:f32 size:0x4
0x80BE3A30 = D_80BE3A30; // type:f32 size:0x4
0x80BE3A34 = D_80BE3A34; // type:f32 size:0x4
0x80BE3A38 = D_80BE3A38; // type:f32 size:0x4
0x80BE3A3C = D_80BE3A3C; // type:f32 size:0x4
0x80BE3A40 = D_80BE3A40; // type:f32 size:0x4
0x80BE4880 = En_Tanron4_InitVars; // type:UNK_TYPE1 size:0x1
0x80BE48A0 = D_80BE48A0; // type:f32 size:0x4
0x80BE48A4 = D_80BE48A4; // type:f32 size:0x4
0x80BE48A8 = D_80BE48A8; // type:f32 size:0x4
0x80BE48AC = D_80BE48AC; // type:f32 size:0x4
0x80BE48B0 = D_80BE48B0; // type:f32 size:0x4
0x80BE48B4 = D_80BE48B4; // type:f32 size:0x4
0x80BE5D80 = D_80BE5D80; // type:UNK_TYPE4 size:0x4
0x80BE5D84 = En_Tanron5_InitVars; // type:UNK_TYPE1 size:0x1
0x80BE5DA4 = D_80BE5DA4; // type:UNK_TYPE1 size:0x1
0x80BE5DD0 = D_80BE5DD0; // type:f32 size:0x4
0x80BE5DD4 = D_80BE5DD4; // type:UNK_TYPE2 size:0x2
0x80BE5E24 = D_80BE5E24; // type:UNK_TYPE1 size:0x1
0x80BE5E74 = D_80BE5E74; // type:UNK_TYPE1 size:0x1
0x80BE5ED0 = D_80BE5ED0; // type:f32 size:0x4
0x80BE5ED4 = D_80BE5ED4; // type:f32 size:0x4
0x80BE5ED8 = D_80BE5ED8; // type:f32 size:0x4
0x80BE5EDC = D_80BE5EDC; // type:f32 size:0x4
0x80BE5EE0 = D_80BE5EE0; // type:f32 size:0x4
0x80BE5EE4 = D_80BE5EE4; // type:f32 size:0x4
0x80BE5EE8 = D_80BE5EE8; // type:f32 size:0x4
0x80BE5EEC = D_80BE5EEC; // type:f32 size:0x4
0x80BE5EF0 = D_80BE5EF0; // type:f32 size:0x4
0x80BE5EF4 = D_80BE5EF4; // type:f32 size:0x4
0x80BE5EF8 = D_80BE5EF8; // type:f32 size:0x4
0x80BE5EFC = D_80BE5EFC; // type:f32 size:0x4
0x80BE5F00 = D_80BE5F00; // type:f32 size:0x4
0x80BE5F04 = D_80BE5F04; // type:f32 size:0x4
0x80BE6150 = En_Tanron6_InitVars; // type:UNK_TYPE1 size:0x1
0x80BE6170 = D_80BE6170; // type:UNK_TYPE1 size:0x1
0x80BE78D0 = En_Daiku2_InitVars; // type:UNK_TYPE1 size:0x1
0x80BE78F0 = sTextIds; // type:s16 size:0x1
0x80BE7900 = D_80BE7900; // type:UNK_TYPE1 size:0x1
0x80BE792C = sAnimations; // type:AnimationHeader* size:0x1
0x80BE7958 = D_80BE7958; // type:UNK_TYPE1 size:0x1
0x80BE7970 = D_80BE7970; // type:f32 size:0x4
0x80BE7974 = D_80BE7974; // type:f32 size:0x4
0x80BE7978 = D_80BE7978; // type:f32 size:0x4
0x80BE797C = D_80BE797C; // type:f32 size:0x4
0x80BE7980 = D_80BE7980; // type:f32 size:0x4
0x80BE83F0 = En_Muto_InitVars; // type:UNK_TYPE1 size:0x1
0x80BE8410 = D_80BE8410; // type:UNK_TYPE1 size:0x1
0x80BE841C = D_80BE841C; // type:UNK_TYPE1 size:0x1
0x80BE8448 = D_80BE8448; // type:UNK_TYPE1 size:0x1
0x80BE8450 = D_80BE8450; // type:UNK_TYPE1 size:0x1
0x80BE8DF0 = En_Baisen_InitVars; // type:UNK_TYPE1 size:0x1
0x80BE8E10 = D_80BE8E10; // type:UNK_TYPE1 size:0x1
0x80BE8E3C = D_80BE8E3C; // type:UNK_TYPE1 size:0x1
0x80BE8E4C = sAnimations; // type:UNK_TYPE1 size:0x1
0x80BE8E58 = D_80BE8E58; // type:UNK_TYPE1 size:0x1
0x80BE9430 = En_Heishi_InitVars; // type:UNK_TYPE1 size:0x1
0x80BE9450 = sCylinderInit; // type:UNK_TYPE1 size:0x1
0x80BE947C = sAnimations; // type:UNK_TYPE1 size:0x1
0x80BE9490 = sAnimationModes; // type:UNK_TYPE1 size:0x1
0x80BE9A30 = En_Demo_heishi_InitVars; // type:UNK_TYPE1 size:0x1
0x80BE9A50 = sCylinderInit; // type:UNK_TYPE1 size:0x1
0x80BE9A7C = sTextIds; // type:UNK_TYPE1 size:0x1
0x80BE9A80 = sAnimations; // type:UNK_TYPE1 size:0x1
0x80BE9A94 = sAnimationModes; // type:UNK_TYPE1 size:0x1
0x80BEB1B0 = En_Dt_InitVars; // type:UNK_TYPE1 size:0x1
0x80BEB1D0 = D_80BEB1D0; // type:UNK_TYPE1 size:0x1
0x80BEB208 = D_80BEB208; // type:UNK_TYPE1 size:0x1
0x80BEB268 = D_80BEB268; // type:UNK_TYPE2 size:0x2
0x80BEB26A = D_80BEB26A; // type:UNK_TYPE2 size:0x2
0x80BEB29C = D_80BEB29C; // type:UNK_TYPE1 size:0x1
0x80BEB2C8 = D_80BEB2C8; // type:UNK_TYPE1 size:0x1
0x80BEB2E0 = D_80BEB2E0; // type:UNK_TYPE1 size:0x1
0x80BEB2E8 = D_80BEB2E8; // type:UNK_TYPE1 size:0x1
0x80BEB348 = D_80BEB348; // type:UNK_TYPE1 size:0x1
0x80BEB35C = D_80BEB35C; // type:UNK_TYPE1 size:0x1
0x80BEB860 = En_Cha_InitVars; // type:UNK_TYPE1 size:0x1
0x80BEB880 = D_80BEB880; // type:UNK_TYPE1 size:0x1
0x80BEB8B0 = D_80BEB8B0; // type:f32 size:0x4
0x80BEB8B4 = D_80BEB8B4; // type:f32 size:0x4
0x80BEB8B8 = D_80BEB8B8; // type:f32 size:0x4
0x80BEB8BC = D_80BEB8BC; // type:f32 size:0x4
0x80BEBA70 = Obj_Dinner_InitVars; // type:UNK_TYPE1 size:0x1
0x80BEC190 = Eff_Lastday_InitVars; // type:UNK_TYPE1 size:0x1
0x80BECAB0 = Bg_Ikana_Dharma_InitVars; // type:UNK_TYPE1 size:0x1
0x80BECAD0 = D_80BECAD0; // type:UNK_TYPE1 size:0x1
0x80BECAFC = D_80BECAFC; // type:UNK_TYPE1 size:0x1
0x80BECB10 = D_80BECB10; // type:f32 size:0x4
0x80BECB14 = D_80BECB14; // type:f32 size:0x4
0x80BECB18 = D_80BECB18; // type:f32 size:0x4
0x80BECB1C = D_80BECB1C; // type:f32 size:0x4
0x80BECBD0 = D_80BECBD0; // type:UNK_TYPE1 size:0x1
0x80BF02D0 = En_Akindonuts_InitVars; // type:UNK_TYPE1 size:0x1
0x80BF02F0 = D_80BF02F0; // type:UNK_TYPE1 size:0x1
0x80BF031C = D_80BF031C; // type:UNK_TYPE1 size:0x1
0x80BF048C = D_80BF048C; // type:UNK_TYPE1 size:0x1
0x80BF0494 = D_80BF0494; // type:UNK_TYPE1 size:0x1
0x80BF049C = D_80BF049C; // type:UNK_TYPE1 size:0x1
0x80BF04A4 = D_80BF04A4; // type:UNK_TYPE1 size:0x1
0x80BF04AC = D_80BF04AC; // type:UNK_TYPE1 size:0x1
0x80BF04B4 = D_80BF04B4; // type:UNK_TYPE1 size:0x1
0x80BF04C0 = D_80BF04C0; // type:f32 size:0x4
0x80BF04C4 = jtbl_80BF04C4; // type:UNK_PTR size:0x4
0x80BF0504 = jtbl_80BF0504; // type:UNK_PTR size:0x4
0x80BF052C = jtbl_80BF052C; // type:UNK_PTR size:0x4
0x80BF0588 = jtbl_80BF0588; // type:UNK_PTR size:0x4
0x80BF05FC = jtbl_80BF05FC; // type:UNK_PTR size:0x4
0x80BF06C0 = jtbl_80BF06C0; // type:UNK_PTR size:0x4
0x80BF06DC = jtbl_80BF06DC; // type:UNK_PTR size:0x4
0x80BF0718 = jtbl_80BF0718; // type:UNK_PTR size:0x4
0x80BF0754 = D_80BF0754; // type:f32 size:0x4
0x80BF0758 = D_80BF0758; // type:f32 size:0x4
0x80BF075C = D_80BF075C; // type:f32 size:0x4
0x80BF0760 = D_80BF0760; // type:f32 size:0x4
0x80BF0764 = D_80BF0764; // type:f32 size:0x4
0x80BF0768 = D_80BF0768; // type:f32 size:0x4
0x80BF076C = D_80BF076C; // type:f32 size:0x4
0x80BF0770 = D_80BF0770; // type:f32 size:0x4
0x80BF0774 = D_80BF0774; // type:f32 size:0x4
0x80BF0778 = D_80BF0778; // type:f32 size:0x4
0x80BF077C = D_80BF077C; // type:f32 size:0x4
0x80BF0780 = D_80BF0780; // type:f32 size:0x4
0x80BF10C0 = Eff_Stk_InitVars; // type:UNK_TYPE1 size:0x1
0x80BF10E0 = D_80BF10E0; // type:f32 size:0x4
0x80BF10E4 = D_80BF10E4; // type:f32 size:0x4
0x80BF10E8 = D_80BF10E8; // type:f32 size:0x4
0x80BF3260 = D_80BF3260; // type:UNK_TYPE1 size:0x1
0x80BF3318 = D_80BF3318; // type:UNK_TYPE1 size:0x1
0x80BF3354 = D_80BF3354; // type:UNK_TYPE1 size:0x1
0x80BF335C = D_80BF335C; // type:UNK_TYPE1 size:0x1
0x80BF33E0 = D_80BF33E0; // type:UNK_TYPE1 size:0x1
0x80BF33E8 = D_80BF33E8; // type:UNK_TYPE1 size:0x1
0x80BF33F0 = D_80BF33F0; // type:UNK_TYPE1 size:0x1
0x80BF33F8 = En_Ig_InitVars; // type:UNK_TYPE1 size:0x1
0x80BF3418 = D_80BF3418; // type:UNK_TYPE1 size:0x1
0x80BF3444 = D_80BF3444; // type:UNK_TYPE1 size:0x1
0x80BF3470 = D_80BF3470; // type:UNK_TYPE1 size:0x1
0x80BF347C = D_80BF347C; // type:UNK_TYPE1 size:0x1
0x80BF351C = D_80BF351C; // type:UNK_TYPE1 size:0x1
0x80BF3528 = D_80BF3528; // type:UNK_TYPE1 size:0x1
0x80BF3534 = D_80BF3534; // type:UNK_TYPE1 size:0x1
0x80BF3550 = jtbl_80BF3550; // type:UNK_PTR size:0x4
0x80BF3564 = jtbl_80BF3564; // type:UNK_PTR size:0x4
0x80BF357C = jtbl_80BF357C; // type:UNK_PTR size:0x4
0x80BF35B0 = jtbl_80BF35B0; // type:UNK_PTR size:0x4
0x80BF35E0 = jtbl_80BF35E0; // type:UNK_PTR size:0x4
0x80BF3614 = D_80BF3614; // type:f32 size:0x4
0x80BF3618 = jtbl_80BF3618; // type:UNK_PTR size:0x4
0x80BF5740 = En_Rg_InitVars; // type:UNK_TYPE1 size:0x1
0x80BF5760 = D_80BF5760; // type:UNK_TYPE1 size:0x1
0x80BF578C = D_80BF578C; // type:UNK_TYPE1 size:0x1
0x80BF57B8 = D_80BF57B8; // type:UNK_TYPE1 size:0x1
0x80BF57C4 = D_80BF57C4; // type:UNK_TYPE1 size:0x1
0x80BF57E4 = D_80BF57E4; // type:UNK_TYPE1 size:0x1
0x80BF5914 = D_80BF5914; // type:UNK_TYPE1 size:0x1
0x80BF5934 = D_80BF5934; // type:UNK_TYPE1 size:0x1
0x80BF5954 = D_80BF5954; // type:UNK_TYPE1 size:0x1
0x80BF5960 = D_80BF5960; // type:UNK_TYPE1 size:0x1
0x80BF596C = D_80BF596C; // type:UNK_TYPE1 size:0x1
0x80BF59F0 = D_80BF59F0; // type:EffectTireMarkInit size:0x8
0x80BF59F8 = D_80BF59F8; // type:UNK_TYPE1 size:0x1
0x80BF5A10 = D_80BF5A10; // type:f32 size:0x4
0x80BF5A14 = D_80BF5A14; // type:f32 size:0x4
0x80BF5A18 = D_80BF5A18; // type:f32 size:0x4
0x80BF5A1C = D_80BF5A1C; // type:f32 size:0x4
0x80BF5A20 = D_80BF5A20; // type:f32 size:0x4
0x80BF5A24 = D_80BF5A24; // type:f32 size:0x4
0x80BF5A28 = D_80BF5A28; // type:f32 size:0x4
0x80BF5A2C = D_80BF5A2C; // type:f32 size:0x4
0x80BF5A30 = D_80BF5A30; // type:f32 size:0x4
0x80BF5A34 = D_80BF5A34; // type:f32 size:0x4
0x80BF5A38 = D_80BF5A38; // type:f32 size:0x4
0x80BF5A3C = D_80BF5A3C; // type:f32 size:0x4
0x80BF5A40 = D_80BF5A40; // type:f32 size:0x4
0x80BF5A44 = D_80BF5A44; // type:f32 size:0x4
0x80BF5C10 = D_80BF5C10; // type:UNK_TYPE1 size:0x1
0x80BF6F80 = En_Osk_InitVars; // type:UNK_TYPE1 size:0x1
0x80BF6FA0 = D_80BF6FA0; // type:UNK_PTR size:0x4
0x80BF6FB4 = D_80BF6FB4; // type:UNK_TYPE1 size:0x1
0x80BF6FE4 = D_80BF6FE4; // type:UNK_PTR size:0x4
0x80BF7018 = D_80BF7018; // type:UNK_TYPE1 size:0x1
0x80BF7024 = D_80BF7024; // type:UNK_TYPE1 size:0x1
0x80BF7030 = jtbl_80BF7030; // type:UNK_PTR size:0x4
0x80BF704C = D_80BF704C; // type:f32 size:0x4
0x80BF7050 = jtbl_80BF7050; // type:UNK_PTR size:0x4
0x80BF7074 = jtbl_80BF7074; // type:UNK_PTR size:0x4
0x80BF70A0 = jtbl_80BF70A0; // type:UNK_PTR size:0x4
0x80BF70C8 = D_80BF70C8; // type:f32 size:0x4
0x80BF70CC = D_80BF70CC; // type:f32 size:0x4
0x80BF70D0 = D_80BF70D0; // type:f32 size:0x4
0x80BF70D4 = D_80BF70D4; // type:f32 size:0x4
0x80BF70D8 = jtbl_80BF70D8; // type:UNK_PTR size:0x4
0x80BF70FC = jtbl_80BF70FC; // type:UNK_PTR size:0x4
0x80BF711C = jtbl_80BF711C; // type:UNK_PTR size:0x4
0x80BF7148 = D_80BF7148; // type:f32 size:0x4
0x80BF714C = D_80BF714C; // type:f32 size:0x4
0x80BF7920 = En_Sth2_InitVars; // type:UNK_TYPE1 size:0x1
0x80BF7940 = D_80BF7940; // type:UNK_TYPE1 size:0x1
0x80BF79C0 = D_80BF79C0; // type:UNK_TYPE1 size:0x1
0x80BF7AC0 = D_80BF7AC0; // type:UNK_TYPE1 size:0x1
0x80BF7B40 = D_80BF7B40; // type:UNK_TYPE1 size:0x1
0x80BF7BC0 = D_80BF7BC0; // type:UNK_TYPE1 size:0x1
0x80BF83C0 = D_80BF83C0; // type:UNK_TYPE1 size:0x1
0x80BF87C0 = D_80BF87C0; // type:UNK_TYPE1 size:0x1
0x80BF88C0 = D_80BF88C0; // type:UNK_TYPE1 size:0x1
0x80BF8950 = D_80BF8950; // type:UNK_TYPE1 size:0x1
0x80BF8A90 = D_80BF8A90; // type:UNK_TYPE1 size:0x1
0x80BF8AC0 = D_80BF8AC0; // type:UNK_TYPE1 size:0x1
0x80BF8B20 = D_80BF8B20; // type:UNK_TYPE1 size:0x1
0x80BF8D20 = D_80BF8D20; // type:UNK_TYPE1 size:0x1
0x80BF8E50 = D_80BF8E50; // type:UNK_TYPE1 size:0x1
0x80BF9040 = D_80BF9040; // type:UNK_TYPE1 size:0x1
0x80BF9230 = D_80BF9230; // type:UNK_TYPE1 size:0x1
0x80BF9430 = D_80BF9430; // type:UNK_TYPE1 size:0x1
0x80BF9550 = D_80BF9550; // type:UNK_TYPE1 size:0x1
0x80BF9870 = D_80BF9870; // type:UNK_TYPE1 size:0x1
0x80BF99F8 = D_80BF99F8; // type:UNK_TYPE1 size:0x1
0x80BF9FA0 = D_80BF9FA0; // type:UNK_TYPE1 size:0x1
0x80BFA000 = D_80BFA000; // type:UNK_TYPE1 size:0x1
0x80BFA010 = D_80BFA010; // type:UNK_TYPE1 size:0x1
0x80BFA01C = D_80BFA01C; // type:UNK_TYPE1 size:0x1
0x80BFB290 = En_Yb_InitVars; // type:UNK_TYPE1 size:0x1
0x80BFB2B0 = D_80BFB2B0; // type:UNK_TYPE1 size:0x1
0x80BFB2DC = D_80BFB2DC; // type:UNK_TYPE1 size:0x1
0x80BFB2E0 = D_80BFB2E0; // type:UNK_TYPE1 size:0x1
0x80BFB2E8 = D_80BFB2E8; // type:UNK_TYPE1 size:0x1
0x80BFB2F4 = D_80BFB2F4; // type:UNK_TYPE1 size:0x1
0x80BFB300 = D_80BFB300; // type:UNK_TYPE1 size:0x1
0x80BFB310 = D_80BFB310; // type:f32 size:0x4
0x80BFB314 = D_80BFB314; // type:f32 size:0x4
0x80BFB318 = D_80BFB318; // type:f32 size:0x4
0x80BFCCC0 = En_Rz_InitVars; // type:UNK_TYPE1 size:0x1
0x80BFCCE0 = D_80BFCCE0; // type:UNK_TYPE1 size:0x1
0x80BFCCEC = D_80BFCCEC; // type:UNK_TYPE4 size:0x4
0x80BFCCF0 = D_80BFCCF0; // type:UNK_TYPE4 size:0x4
0x80BFCCF4 = D_80BFCCF4; // type:UNK_TYPE1 size:0x1
0x80BFCD20 = D_80BFCD20; // type:UNK_TYPE1 size:0x1
0x80BFCD3C = D_80BFCD3C; // type:UNK_TYPE1 size:0x1
0x80BFCD58 = D_80BFCD58; // type:UNK_TYPE1 size:0x1
0x80BFCD60 = D_80BFCD60; // type:UNK_TYPE1 size:0x1
0x80BFCD70 = D_80BFCD70; // type:f32 size:0x4
0x80BFCD74 = D_80BFCD74; // type:f32 size:0x4
0x80BFCD78 = D_80BFCD78; // type:f32 size:0x4
0x80BFCD7C = D_80BFCD7C; // type:f32 size:0x4
0x80BFD260 = En_Scopecoin_InitVars; // type:UNK_TYPE1 size:0x1
0x80BFD280 = sRupeeTextures; // type:UNK_TYPE1 size:0x1
0x80BFDEA0 = D_80BFDEA0; // type:UNK_TYPE1 size:0x1
0x80BFDEB4 = D_80BFDEB4; // type:UNK_TYPE1 size:0x1
0x80BFDF28 = En_Bjt_InitVars; // type:UNK_TYPE1 size:0x1
0x80BFDF48 = D_80BFDF48; // type:UNK_TYPE1 size:0x1
0x80BFDF74 = D_80BFDF74; // type:UNK_TYPE1 size:0x1
0x80BFDF80 = D_80BFDF80; // type:UNK_TYPE1 size:0x1
0x80BFDFE0 = D_80BFDFE0; // type:UNK_TYPE1 size:0x1
0x80BFDFF0 = jtbl_80BFDFF0; // type:UNK_PTR size:0x4
0x80BFE014 = D_80BFE014; // type:f32 size:0x4
0x80BFE018 = D_80BFE018; // type:f32 size:0x4
0x80BFE01C = D_80BFE01C; // type:f32 size:0x4
0x80BFE020 = D_80BFE020; // type:f32 size:0x4
0x80BFE024 = D_80BFE024; // type:f32 size:0x4
0x80BFE028 = jtbl_80BFE028; // type:UNK_PTR size:0x4
0x80C009F0 = D_80C009F0; // type:UNK_TYPE4 size:0x4
0x80C009F4 = D_80C009F4; // type:UNK_TYPE4 size:0x4
0x80C009F8 = En_Bomjima_InitVars; // type:UNK_TYPE1 size:0x1
0x80C00A18 = D_80C00A18; // type:UNK_TYPE1 size:0x1
0x80C00A44 = D_80C00A44; // type:UNK_TYPE1 size:0x1
0x80C00A4C = D_80C00A4C; // type:UNK_TYPE1 size:0x1
0x80C00A54 = D_80C00A54; // type:UNK_TYPE1 size:0x1
0x80C00A70 = D_80C00A70; // type:UNK_TYPE1 size:0x1
0x80C00A8C = D_80C00A8C; // type:UNK_TYPE1 size:0x1
0x80C00A94 = D_80C00A94; // type:UNK_TYPE1 size:0x1
0x80C00AE4 = D_80C00AE4; // type:UNK_TYPE1 size:0x1
0x80C00AF8 = D_80C00AF8; // type:UNK_TYPE2 size:0x2
0x80C00B08 = D_80C00B08; // type:UNK_TYPE1 size:0x1
0x80C00B18 = D_80C00B18; // type:UNK_TYPE1 size:0x1
0x80C00B28 = D_80C00B28; // type:UNK_PTR size:0x4
0x80C00B3C = D_80C00B3C; // type:UNK_TYPE1 size:0x1
0x80C00B48 = D_80C00B48; // type:UNK_TYPE1 size:0x1
0x80C00B60 = D_80C00B60; // type:f32 size:0x4
0x80C03170 = D_80C03170; // type:UNK_TYPE4 size:0x4
0x80C03174 = En_Bomjimb_InitVars; // type:UNK_TYPE1 size:0x1
0x80C03194 = D_80C03194; // type:UNK_TYPE1 size:0x1
0x80C031C0 = D_80C031C0; // type:UNK_TYPE1 size:0x1
0x80C03218 = D_80C03218; // type:UNK_TYPE1 size:0x1
0x80C03230 = D_80C03230; // type:UNK_TYPE1 size:0x1
0x80C03240 = D_80C03240; // type:UNK_TYPE1 size:0x1
0x80C03250 = D_80C03250; // type:UNK_TYPE1 size:0x1
0x80C03260 = D_80C03260; // type:UNK_PTR size:0x4
0x80C03274 = D_80C03274; // type:UNK_TYPE1 size:0x1
0x80C03280 = D_80C03280; // type:UNK_TYPE1 size:0x1
0x80C032A0 = jtbl_80C032A0; // type:UNK_PTR size:0x4
0x80C032B4 = D_80C032B4; // type:f32 size:0x4
0x80C032B8 = D_80C032B8; // type:f32 size:0x4
0x80C032BC = D_80C032BC; // type:f32 size:0x4
0x80C032C0 = D_80C032C0; // type:f32 size:0x4
0x80C032C4 = D_80C032C4; // type:f32 size:0x4
0x80C032C8 = jtbl_80C032C8; // type:UNK_PTR size:0x4
0x80C04750 = En_Bombers_InitVars; // type:UNK_TYPE1 size:0x1
0x80C04770 = D_80C04770; // type:UNK_TYPE1 size:0x1
0x80C0479C = D_80C0479C; // type:UNK_TYPE1 size:0x1
0x80C047E0 = D_80C047E0; // type:UNK_TYPE1 size:0x1
0x80C047F8 = D_80C047F8; // type:UNK_TYPE1 size:0x1
0x80C04808 = D_80C04808; // type:UNK_TYPE1 size:0x1
0x80C04818 = D_80C04818; // type:UNK_PTR size:0x4
0x80C0482C = D_80C0482C; // type:UNK_TYPE1 size:0x1
0x80C04838 = D_80C04838; // type:UNK_TYPE1 size:0x1
0x80C05880 = En_Bombers2_InitVars; // type:UNK_TYPE1 size:0x1
0x80C058A0 = sTextIds; // type:u16 size:0x1
0x80C058B0 = sCylinderInit; // type:UNK_TYPE1 size:0x1
0x80C058DC = sAnimations; // type:AnimationHeader* size:0x1
0x80C058F8 = sAnimationModes; // type:u8 size:0x1
0x80C05900 = sSetPrimColorDL; // type:UNK_TYPE1 size:0x1
0x80C05910 = sSetPrimColorDlPtr; // type:Gfx* size:0x4
0x80C05914 = sEyeTextures; // type:void* size:0x1
0x80C05920 = D_80C05920; // type:UNK_TYPE4 size:0x4
0x80C05930 = jtbl_80C05930; // type:UNK_PTR size:0x4
0x80C06440 = En_Bombal_InitVars; // type:UNK_TYPE1 size:0x1
0x80C06460 = D_80C06460; // type:UNK_TYPE1 size:0x1
0x80C06490 = D_80C06490; // type:f32 size:0x4
0x80C06494 = D_80C06494; // type:f32 size:0x4
0x80C06498 = D_80C06498; // type:f32 size:0x4
0x80C06A10 = Obj_Moon_Stone_InitVars; // type:UNK_TYPE1 size:0x1
0x80C06FE0 = Obj_Mu_Pict_InitVars; // type:UNK_TYPE1 size:0x1
0x80C07000 = jtbl_80C07000; // type:UNK_PTR size:0x4
0x80C0701C = jtbl_80C0701C; // type:UNK_PTR size:0x4
0x80C07680 = Bg_Ikninside_InitVars; // type:UNK_TYPE1 size:0x1
0x80C076A0 = D_80C076A0; // type:UNK_TYPE4 size:0x4
0x80C076A8 = D_80C076A8; // type:UNK_TYPE1 size:0x1
0x80C076D4 = D_80C076D4; // type:UNK_TYPE1 size:0x1
0x80C07AC0 = Eff_Zoraband_InitVars; // type:UNK_TYPE1 size:0x1
0x80C07C20 = Obj_Kepn_Koya_InitVars; // type:UNK_TYPE1 size:0x1
0x80C07C40 = D_80C07C40; // type:UNK_TYPE1 size:0x1
0x80C08640 = Obj_Usiyane_InitVars; // type:UNK_TYPE1 size:0x1
0x80C08660 = D_80C08660; // type:UNK_TYPE1 size:0x1
0x80C0866C = D_80C0866C; // type:UNK_TYPE1 size:0x1
0x80C086B0 = D_80C086B0; // type:UNK_TYPE1 size:0x1
0x80C086C0 = D_80C086C0; // type:f32 size:0x4
0x80C086C4 = D_80C086C4; // type:f32 size:0x4
0x80C089E0 = En_Nnh_InitVars; // type:UNK_TYPE1 size:0x1
0x80C08A00 = D_80C08A00; // type:UNK_TYPE1 size:0x1
0x80C08DD0 = Obj_Kzsaku_InitVars; // type:UNK_TYPE1 size:0x1
0x80C09030 = Obj_Milk_Bin_InitVars; // type:UNK_TYPE1 size:0x1
0x80C09050 = D_80C09050; // type:UNK_TYPE1 size:0x1
0x80C09080 = D_80C09080; // type:f32 size:0x4
0x80C09D30 = En_Kitan_InitVars; // type:UNK_TYPE1 size:0x1
0x80C09D50 = D_80C09D50; // type:UNK_TYPE1 size:0x1
0x80C09D7C = D_80C09D7C; // type:UNK_TYPE1 size:0x1
0x80C09D80 = D_80C09D80; // type:UNK_TYPE1 size:0x1
0x80C09D84 = D_80C09D84; // type:UNK_TYPE1 size:0x1
0x80C09D90 = D_80C09D90; // type:f32 size:0x4
0x80C09D94 = D_80C09D94; // type:f32 size:0x4
0x80C09D98 = D_80C09D98; // type:f32 size:0x4
0x80C09D9C = jtbl_80C09D9C; // type:UNK_PTR size:0x4
0x80C09DB4 = D_80C09DB4; // type:f32 size:0x4
0x80C09DB8 = D_80C09DB8; // type:f32 size:0x4
0x80C0A600 = Bg_Astr_Bombwall_InitVars; // type:UNK_TYPE1 size:0x1
0x80C0A620 = D_80C0A620; // type:UNK_TYPE1 size:0x1
0x80C0A698 = D_80C0A698; // type:UNK_TYPE1 size:0x1
0x80C0A6A8 = D_80C0A6A8; // type:UNK_TYPE1 size:0x1
0x80C0A6B0 = D_80C0A6B0; // type:f32 size:0x4
0x80C0A6B4 = D_80C0A6B4; // type:f32 size:0x4
0x80C0B0C0 = Bg_Iknin_Susceil_InitVars; // type:UNK_TYPE1 size:0x1
0x80C0B0E4 = D_80C0B0E4; // type:f32 size:0x4
0x80C0B0E8 = D_80C0B0E8; // type:UNK_TYPE4 size:0x4
0x80C0B0F0 = D_80C0B0F0; // type:UNK_TYPE1 size:0x1
0x80C0B0F8 = D_80C0B0F8; // type:UNK_TYPE1 size:0x1
0x80C0B0FE = D_80C0B0FE; // type:UNK_TYPE1 size:0x1
0x80C0B0FF = D_80C0B0FF; // type:UNK_TYPE1 size:0x1
0x80C0B100 = D_80C0B100; // type:UNK_TYPE1 size:0x1
0x80C0B110 = D_80C0B110; // type:f32 size:0x4
0x80C0B114 = D_80C0B114; // type:f32 size:0x4
0x80C0B118 = D_80C0B118; // type:f32 size:0x4
0x80C0B11C = D_80C0B11C; // type:f32 size:0x4
0x80C0B120 = D_80C0B120; // type:f32 size:0x4
0x80C0B124 = D_80C0B124; // type:f32 size:0x4
0x80C0B128 = D_80C0B128; // type:f32 size:0x4
0x80C0B12C = D_80C0B12C; // type:f32 size:0x4
0x80C0B130 = D_80C0B130; // type:f32 size:0x4
0x80C0B134 = D_80C0B134; // type:f32 size:0x4
0x80C0B138 = D_80C0B138; // type:f32 size:0x4
0x80C0B13C = D_80C0B13C; // type:f32 size:0x4
0x80C0B140 = D_80C0B140; // type:f32 size:0x4
0x80C0F8D0 = D_80C0F8D0; // type:f32 size:0x4
0x80C0F8D4 = D_80C0F8D4; // type:UNK_TYPE1 size:0x1
0x80C0F9D0 = D_80C0F9D0; // type:UNK_TYPE1 size:0x1
0x80C0F9E0 = D_80C0F9E0; // type:UNK_TYPE1 size:0x1
0x80C0FA00 = En_Bsb_InitVars; // type:UNK_TYPE1 size:0x1
0x80C0FA20 = D_80C0FA20; // type:UNK_TYPE1 size:0x1
0x80C0FA84 = D_80C0FA84; // type:UNK_TYPE1 size:0x1
0x80C0FAA0 = D_80C0FAA0; // type:UNK_TYPE4 size:0x4
0x80C0FAAC = D_80C0FAAC; // type:UNK_TYPE4 size:0x4
0x80C0FAB8 = D_80C0FAB8; // type:UNK_TYPE4 size:0x4
0x80C0FAC0 = D_80C0FAC0; // type:UNK_TYPE4 size:0x4
0x80C0FAC8 = D_80C0FAC8; // type:UNK_TYPE4 size:0x4
0x80C0FAE0 = D_80C0FAE0; // type:f32 size:0x4
0x80C0FAE4 = D_80C0FAE4; // type:f32 size:0x4
0x80C0FAE8 = D_80C0FAE8; // type:f32 size:0x4
0x80C0FAEC = D_80C0FAEC; // type:f32 size:0x4
0x80C0FAF0 = D_80C0FAF0; // type:f32 size:0x4
0x80C0FAF4 = D_80C0FAF4; // type:f32 size:0x4
0x80C0FAF8 = D_80C0FAF8; // type:f32 size:0x4
0x80C0FAFC = D_80C0FAFC; // type:f32 size:0x4
0x80C0FB00 = D_80C0FB00; // type:f32 size:0x4
0x80C0FB04 = D_80C0FB04; // type:f32 size:0x4
0x80C0FB08 = D_80C0FB08; // type:f32 size:0x4
0x80C0FB0C = D_80C0FB0C; // type:f32 size:0x4
0x80C0FB10 = D_80C0FB10; // type:f32 size:0x4
0x80C0FB14 = D_80C0FB14; // type:f32 size:0x4
0x80C0FB18 = D_80C0FB18; // type:f32 size:0x4
0x80C0FB1C = D_80C0FB1C; // type:f32 size:0x4
0x80C0FB20 = D_80C0FB20; // type:f32 size:0x4
0x80C0FB24 = D_80C0FB24; // type:f32 size:0x4
0x80C0FB28 = D_80C0FB28; // type:f32 size:0x4
0x80C0FB2C = jtbl_80C0FB2C; // type:UNK_PTR size:0x4
0x80C0FB48 = D_80C0FB48; // type:f32 size:0x4
0x80C0FB4C = D_80C0FB4C; // type:f32 size:0x4
0x80C0FB50 = D_80C0FB50; // type:f32 size:0x4
0x80C0FB54 = jtbl_80C0FB54; // type:UNK_PTR size:0x4
0x80C0FB90 = jtbl_80C0FB90; // type:UNK_PTR size:0x4
0x80C0FBA8 = D_80C0FBA8; // type:f32 size:0x4
0x80C0FBAC = D_80C0FBAC; // type:f32 size:0x4
0x80C0FBB0 = D_80C0FBB0; // type:f32 size:0x4
0x80C0FBB4 = D_80C0FBB4; // type:f32 size:0x4
0x80C0FBB8 = D_80C0FBB8; // type:f32 size:0x4
0x80C0FBBC = D_80C0FBBC; // type:f32 size:0x4
0x80C0FBC0 = D_80C0FBC0; // type:f32 size:0x4
0x80C10690 = En_Recepgirl_InitVars; // type:UNK_TYPE1 size:0x1
0x80C106B0 = D_80C106B0; // type:UNK_TYPE4 size:0x4
0x80C106C0 = D_80C106C0; // type:UNK_TYPE1 size:0x1
0x80C106C8 = D_80C106C8; // type:UNK_TYPE4 size:0x4
0x80C106D0 = D_80C106D0; // type:f32 size:0x4
0x80C135A0 = En_Thiefbird_InitVars; // type:UNK_TYPE1 size:0x1
0x80C135C0 = D_80C135C0; // type:UNK_TYPE1 size:0x1
0x80C1362C = D_80C1362C; // type:UNK_TYPE1 size:0x1
0x80C1363C = D_80C1363C; // type:UNK_TYPE1 size:0x1
0x80C13644 = D_80C13644; // type:UNK_TYPE1 size:0x1
0x80C13664 = D_80C13664; // type:UNK_TYPE2 size:0x2
0x80C13670 = D_80C13670; // type:UNK_TYPE1 size:0x1
0x80C1367C = D_80C1367C; // type:UNK_TYPE1 size:0x1
0x80C1368C = D_80C1368C; // type:UNK_TYPE1 size:0x1
0x80C13698 = D_80C13698; // type:UNK_TYPE1 size:0x1
0x80C136B0 = D_80C136B0; // type:f32 size:0x4
0x80C136B4 = D_80C136B4; // type:f32 size:0x4
0x80C136B8 = D_80C136B8; // type:f32 size:0x4
0x80C136BC = D_80C136BC; // type:f32 size:0x4
0x80C136C0 = D_80C136C0; // type:f32 size:0x4
0x80C136C4 = D_80C136C4; // type:f32 size:0x4
0x80C136C8 = D_80C136C8; // type:f32 size:0x4
0x80C136CC = D_80C136CC; // type:f32 size:0x4
0x80C136D0 = D_80C136D0; // type:f32 size:0x4
0x80C136D4 = D_80C136D4; // type:f32 size:0x4
0x80C136D8 = D_80C136D8; // type:f32 size:0x4
0x80C136DC = D_80C136DC; // type:f32 size:0x4
0x80C136E0 = D_80C136E0; // type:f32 size:0x4
0x80C13920 = D_80C13920; // type:UNK_TYPE1 size:0x1
0x80C1392C = D_80C1392C; // type:UNK_TYPE1 size:0x1
0x80C15010 = En_Jgame_Tsn_InitVars; // type:UNK_TYPE1 size:0x1
0x80C15030 = D_80C15030; // type:UNK_PTR size:0x4
0x80C15078 = D_80C15078; // type:UNK_TYPE1 size:0x1
0x80C150A4 = D_80C150A4; // type:UNK_TYPE1 size:0x1
0x80C150B0 = jtbl_80C150B0; // type:UNK_PTR size:0x4
0x80C150CC = jtbl_80C150CC; // type:UNK_PTR size:0x4
0x80C15BA0 = Obj_Jgame_Light_InitVars; // type:UNK_TYPE1 size:0x1
0x80C15BC0 = D_80C15BC0; // type:UNK_TYPE1 size:0x1
0x80C15BEC = D_80C15BEC; // type:UNK_TYPE1 size:0x1
0x80C15DEC = D_80C15DEC; // type:UNK_TYPE1 size:0x1
0x80C15FF0 = D_80C15FF0; // type:UNK_TYPE1 size:0x1
0x80C16030 = D_80C16030; // type:UNK_TYPE1 size:0x1
0x80C160B0 = D_80C160B0; // type:UNK_TYPE1 size:0x1
0x80C16130 = D_80C16130; // type:f32 size:0x4
0x80C16134 = D_80C16134; // type:f32 size:0x4
0x80C16138 = D_80C16138; // type:f32 size:0x4
0x80C1613C = D_80C1613C; // type:f32 size:0x4
0x80C16140 = D_80C16140; // type:f32 size:0x4
0x80C16144 = D_80C16144; // type:f32 size:0x4
0x80C16400 = Obj_Yado_InitVars; // type:UNK_TYPE1 size:0x1
0x80C16420 = D_80C16420; // type:UNK_TYPE1 size:0x1
0x80C16470 = D_80C16470; // type:UNK_TYPE1 size:0x1
0x80C177B0 = Demo_Syoten_InitVars; // type:UNK_TYPE1 size:0x1
0x80C177D0 = D_80C177D0; // type:UNK_TYPE1 size:0x1
0x80C177D1 = D_80C177D1; // type:UNK_TYPE1 size:0x1
0x80C17820 = D_80C17820; // type:UNK_TYPE1 size:0x1
0x80C17821 = D_80C17821; // type:UNK_TYPE1 size:0x1
0x80C17824 = D_80C17824; // type:UNK_TYPE1 size:0x1
0x80C17834 = D_80C17834; // type:UNK_TYPE1 size:0x1
0x80C17850 = jtbl_80C17850; // type:UNK_PTR size:0x4
0x80C17864 = D_80C17864; // type:f32 size:0x4
0x80C17868 = D_80C17868; // type:f32 size:0x4
0x80C1786C = D_80C1786C; // type:f32 size:0x4
0x80C17870 = D_80C17870; // type:f32 size:0x4
0x80C17874 = jtbl_80C17874; // type:UNK_PTR size:0x4
0x80C18070 = Demo_Moonend_InitVars; // type:UNK_TYPE1 size:0x1
0x80C18090 = D_80C18090; // type:f32 size:0x4
0x80C18094 = D_80C18094; // type:f32 size:0x4
0x80C181E0 = Bg_Lbfshot_InitVars; // type:UNK_TYPE1 size:0x1
0x80C18200 = D_80C18200; // type:UNK_TYPE1 size:0x1
0x80C189A0 = Bg_Last_Bwall_InitVars; // type:UNK_TYPE1 size:0x1
0x80C189C0 = D_80C189C0; // type:UNK_TYPE1 size:0x1
0x80C18A38 = D_80C18A38; // type:UNK_TYPE1 size:0x1
0x80C18A48 = D_80C18A48; // type:UNK_PTR size:0x4
0x80C18A50 = D_80C18A50; // type:UNK_PTR size:0x4
0x80C18A60 = D_80C18A60; // type:UNK_TYPE1 size:0x1
0x80C18A78 = D_80C18A78; // type:UNK_TYPE1 size:0x1
0x80C18A84 = D_80C18A84; // type:UNK_TYPE1 size:0x1
0x80C18A90 = D_80C18A90; // type:UNK_TYPE1 size:0x1
0x80C18AA8 = D_80C18AA8; // type:UNK_TYPE1 size:0x1
0x80C18AB4 = D_80C18AB4; // type:UNK_TYPE1 size:0x1
0x80C18AC0 = D_80C18AC0; // type:UNK_TYPE1 size:0x1
0x80C18AC8 = D_80C18AC8; // type:UNK_TYPE1 size:0x1
0x80C18AD0 = D_80C18AD0; // type:f32 size:0x4
0x80C18AD4 = D_80C18AD4; // type:f32 size:0x4
0x80C19160 = En_And_InitVars; // type:UNK_TYPE1 size:0x1
0x80C19180 = D_80C19180; // type:UNK_PTR size:0x4
0x80C19200 = D_80C19200; // type:UNK_TYPE4 size:0x4
0x80C19218 = D_80C19218; // type:UNK_TYPE4 size:0x4
0x80C19220 = D_80C19220; // type:UNK_TYPE1 size:0x1
0x80C1AA40 = En_Invadepoh_Demo_InitVars; // type:UNK_TYPE1 size:0x1
0x80C1AA60 = D_80C1AA60; // type:UNK_TYPE1 size:0x1
0x80C1AA62 = D_80C1AA62; // type:UNK_TYPE1 size:0x1
0x80C1AA74 = D_80C1AA74; // type:UNK_TYPE1 size:0x1
0x80C1AA88 = D_80C1AA88; // type:UNK_TYPE1 size:0x1
0x80C1AAA0 = D_80C1AAA0; // type:UNK_TYPE1 size:0x1
0x80C1AAB0 = D_80C1AAB0; // type:UNK_TYPE1 size:0x1
0x80C1AAC8 = D_80C1AAC8; // type:UNK_TYPE1 size:0x1
0x80C1AAD8 = D_80C1AAD8; // type:UNK_PTR size:0x4
0x80C1AAEC = D_80C1AAEC; // type:UNK_PTR size:0x4
0x80C1AB00 = D_80C1AB00; // type:UNK_PTR size:0x4
0x80C1AB1C = D_80C1AB1C; // type:UNK_TYPE1 size:0x1
0x80C1AB28 = D_80C1AB28; // type:UNK_PTR size:0x4
0x80C1AB3C = D_80C1AB3C; // type:UNK_PTR size:0x4
0x80C1AB4C = D_80C1AB4C; // type:UNK_PTR size:0x4
0x80C1AB60 = D_80C1AB60; // type:f32 size:0x4
0x80C1AB64 = D_80C1AB64; // type:f32 size:0x4
0x80C1AB68 = D_80C1AB68; // type:f32 size:0x4
0x80C1AB6C = D_80C1AB6C; // type:f32 size:0x4
0x80C1AD40 = D_80C1AD40; // type:UNK_TYPE1 size:0x1
0x80C1AD80 = D_80C1AD80; // type:UNK_TYPE1 size:0x1
0x80C1B520 = Obj_Danpeilift_InitVars; // type:UNK_TYPE1 size:0x1
0x80C1B540 = D_80C1B540; // type:UNK_TYPE1 size:0x1
0x80C1B550 = D_80C1B550; // type:f32 size:0x4
0x80C1B554 = D_80C1B554; // type:f32 size:0x4
0x80C1B558 = D_80C1B558; // type:f32 size:0x4
0x80C1B55C = D_80C1B55C; // type:f32 size:0x4
0x80C1B560 = D_80C1B560; // type:f32 size:0x4
0x80C1B564 = D_80C1B564; // type:f32 size:0x4
0x80C1B568 = D_80C1B568; // type:f32 size:0x4
0x80C1B56C = D_80C1B56C; // type:f32 size:0x4
0x80C1B570 = D_80C1B570; // type:f32 size:0x4
0x80C1BBE0 = En_Fall2_InitVars; // type:UNK_TYPE1 size:0x1
0x80C1BC00 = D_80C1BC00; // type:UNK_TYPE1 size:0x1
0x80C1BC01 = D_80C1BC01; // type:UNK_TYPE1 size:0x1
0x80C1BC02 = D_80C1BC02; // type:UNK_TYPE1 size:0x1
0x80C1BC03 = D_80C1BC03; // type:UNK_TYPE1 size:0x1
0x80C1BCEE = D_80C1BCEE; // type:UNK_TYPE1 size:0x1
0x80C1BCEF = D_80C1BCEF; // type:UNK_TYPE1 size:0x1
0x80C1BCF0 = D_80C1BCF0; // type:f32 size:0x4
0x80C1BCF4 = D_80C1BCF4; // type:f32 size:0x4
0x80C1BCF8 = D_80C1BCF8; // type:f32 size:0x4
0x80C1C250 = Dm_Al_InitVars; // type:UNK_TYPE1 size:0x1
0x80C1C270 = D_80C1C270; // type:UNK_TYPE1 size:0x1
0x80C1C280 = D_80C1C280; // type:UNK_TYPE4 size:0x4
0x80C1C294 = sDlists; // type:UNK_TYPE4 size:0x4
0x80C1C2AC = D_80C1C2AC; // type:UNK_TYPE1 size:0x1
0x80C1C2B0 = jtbl_80C1C2B0; // type:UNK_PTR size:0x4
0x80C1C2E4 = jtbl_80C1C2E4; // type:UNK_PTR size:0x4
0x80C1D1A0 = Dm_An_InitVars; // type:UNK_TYPE1 size:0x1
0x80C1D1C0 = D_80C1D1C0; // type:UNK_TYPE1 size:0x1
0x80C1D2A0 = D_80C1D2A0; // type:UNK_TYPE4 size:0x4
0x80C1D2C8 = D_80C1D2C8; // type:UNK_TYPE1 size:0x1
0x80C1D2D4 = D_80C1D2D4; // type:UNK_TYPE1 size:0x1
0x80C1D2DC = D_80C1D2DC; // type:UNK_TYPE1 size:0x1
0x80C1D2E8 = D_80C1D2E8; // type:UNK_TYPE4 size:0x4
0x80C1D2F4 = D_80C1D2F4; // type:UNK_TYPE1 size:0x1
0x80C1D310 = jtbl_80C1D310; // type:UNK_PTR size:0x4
0x80C1DDC0 = Dm_Ah_InitVars; // type:UNK_TYPE1 size:0x1
0x80C1DDE0 = D_80C1DDE0; // type:UNK_PTR size:0x4
0x80C1DE00 = D_80C1DE00; // type:UNK_TYPE4 size:0x4
0x80C1DE14 = D_80C1DE14; // type:UNK_TYPE1 size:0x1
0x80C1DE20 = D_80C1DE20; // type:UNK_TYPE4 size:0x4
0x80C1DE28 = D_80C1DE28; // type:UNK_TYPE1 size:0x1
0x80C1E1E0 = Dm_Nb_InitVars; // type:UNK_TYPE1 size:0x1
0x80C1E200 = sAnimationInfo; // type:UNK_TYPE1 size:0x1
0x80C1E210 = D_80C1E210; // type:UNK_TYPE4 size:0x4
0x80C1E5C0 = En_Drs_InitVars; // type:UNK_TYPE1 size:0x1
0x80C1E5E0 = D_80C1E5E0; // type:UNK_TYPE1 size:0x1
0x80C1E60C = D_80C1E60C; // type:UNK_TYPE1 size:0x1
0x80C1E618 = D_80C1E618; // type:UNK_TYPE1 size:0x1
0x80C1E950 = En_Ending_Hero_InitVars; // type:UNK_TYPE1 size:0x1
0x80C1E970 = D_80C1E970; // type:UNK_TYPE1 size:0x1
0x80C1E984 = D_80C1E984; // type:UNK_TYPE1 size:0x1
0x80C1F150 = Dm_Bal_InitVars; // type:UNK_TYPE1 size:0x1
0x80C1F170 = sAnimationInfo; // type:UNK_PTR size:0x4
0x80C1F2C0 = D_80C1F2C0; // type:UNK_TYPE2 size:0x2
0x80C1F2C4 = D_80C1F2C4; // type:UNK_TYPE4 size:0x4
0x80C1F2D0 = D_80C1F2D0; // type:UNK_TYPE1 size:0x1
0x80C1F2E0 = D_80C1F2E0; // type:f32 size:0x4
0x80C1F2E4 = D_80C1F2E4; // type:f32 size:0x4
0x80C1F2E8 = D_80C1F2E8; // type:f32 size:0x4
0x80C1F2EC = D_80C1F2EC; // type:f32 size:0x4
0x80C1F2F0 = D_80C1F2F0; // type:f32 size:0x4
0x80C1F2F4 = D_80C1F2F4; // type:f32 size:0x4
0x80C1FC40 = En_Paper_InitVars; // type:UNK_TYPE1 size:0x1
0x80C1FC60 = D_80C1FC60; // type:UNK_TYPE4 size:0x4
0x80C1FC70 = D_80C1FC70; // type:f32 size:0x4
0x80C21C60 = En_Hint_Skb_InitVars; // type:UNK_TYPE1 size:0x1
0x80C21C80 = D_80C21C80; // type:UNK_TYPE1 size:0x1
0x80C21CC8 = D_80C21CC8; // type:UNK_TYPE1 size:0x1
0x80C21CD8 = D_80C21CD8; // type:UNK_TYPE1 size:0x1
0x80C21CE4 = D_80C21CE4; // type:UNK_TYPE1 size:0x1
0x80C21D04 = D_80C21D04; // type:UNK_TYPE1 size:0x1
0x80C21E3C = D_80C21E3C; // type:UNK_TYPE1 size:0x1
0x80C21E44 = D_80C21E44; // type:UNK_TYPE1 size:0x1
0x80C21E48 = D_80C21E48; // type:UNK_TYPE1 size:0x1
0x80C21E4C = D_80C21E4C; // type:UNK_TYPE1 size:0x1
0x80C21E58 = D_80C21E58; // type:UNK_TYPE4 size:0x4
0x80C21E64 = D_80C21E64; // type:UNK_TYPE4 size:0x4
0x80C21E70 = D_80C21E70; // type:UNK_TYPE1 size:0x1
0x80C21E80 = D_80C21E80; // type:f32 size:0x4
0x80C21E84 = D_80C21E84; // type:f32 size:0x4
0x80C21E88 = D_80C21E88; // type:f32 size:0x4
0x80C21E8C = D_80C21E8C; // type:f32 size:0x4
0x80C21E90 = D_80C21E90; // type:f32 size:0x4
0x80C21E94 = jtbl_80C21E94; // type:UNK_PTR size:0x4
0x80C21EB0 = jtbl_80C21EB0; // type:UNK_PTR size:0x4
0x80C21EC8 = jtbl_80C21EC8; // type:UNK_PTR size:0x4
0x80C21EF8 = jtbl_80C21EF8; // type:UNK_PTR size:0x4
0x80C21F2C = jtbl_80C21F2C; // type:UNK_PTR size:0x4
0x80C21F68 = D_80C21F68; // type:f32 size:0x4
0x80C21F6C = D_80C21F6C; // type:f32 size:0x4
0x80C21F70 = D_80C21F70; // type:f32 size:0x4
0x80C21F74 = D_80C21F74; // type:f32 size:0x4
0x80C22BD0 = Dm_Tag_InitVars; // type:UNK_TYPE1 size:0x1
0x80C22BF0 = D_80C22BF0; // type:UNK_TYPE1 size:0x1
0x80C22BFC = D_80C22BFC; // type:UNK_TYPE1 size:0x1
0x80C22C30 = D_80C22C30; // type:UNK_TYPE1 size:0x1
0x80C22C40 = jtbl_80C22C40; // type:UNK_PTR size:0x4
0x80C231C0 = En_Bh_InitVars; // type:UNK_TYPE1 size:0x1
0x80C231E0 = D_80C231E0; // type:f32 size:0x4
0x80C23400 = En_Ending_Hero2_InitVars; // type:UNK_TYPE1 size:0x1
0x80C23630 = En_Ending_Hero3_InitVars; // type:UNK_TYPE1 size:0x1
0x80C23860 = En_Ending_Hero4_InitVars; // type:UNK_TYPE1 size:0x1
0x80C23BD0 = En_Ending_Hero5_InitVars; // type:UNK_TYPE1 size:0x1
0x80C23BF0 = D_80C23BF0; // type:UNK_TYPE1 size:0x1
0x80C23C10 = jtbl_80C23C10; // type:UNK_PTR size:0x4
0x80C241E0 = En_Ending_Hero6_InitVars; // type:ActorInit size:0x20
0x80C24200 = D_80C24200; // type:FlexSkeletonHeader* size:0x24
0x80C24224 = D_80C24224; // type:AnimationHeader* size:0x24
0x80C24248 = D_80C24248; // type:s32 size:0x24
0x80C2426C = D_80C2426C; // type:Gfx* size:0x14
0x80C24280 = D_80C24280; // type:TexturePtr size:0x14
0x80C24294 = D_80C24294; // type:TexturePtr size:0xc
0x80C242A0 = jtbl_80C242A0; // type:UNK_PTR size:0x4
0x80C250F0 = Dm_Gm_InitVars; // type:UNK_TYPE1 size:0x1
0x80C25110 = D_80C25110; // type:UNK_TYPE1 size:0x1
0x80C251F0 = D_80C251F0; // type:UNK_TYPE4 size:0x4
0x80C25218 = D_80C25218; // type:UNK_TYPE1 size:0x1
0x80C25224 = D_80C25224; // type:UNK_TYPE1 size:0x1
0x80C2522C = D_80C2522C; // type:UNK_TYPE1 size:0x1
0x80C25238 = D_80C25238; // type:UNK_TYPE4 size:0x4
0x80C25244 = D_80C25244; // type:UNK_TYPE1 size:0x1
0x80C25260 = jtbl_80C25260; // type:UNK_PTR size:0x4
0x80C257D0 = Obj_Swprize_InitVars; // type:UNK_TYPE1 size:0x1
0x80C257F0 = D_80C257F0; // type:UNK_TYPE1 size:0x1
0x80C257F4 = D_80C257F4; // type:UNK_TYPE1 size:0x1
0x80C257F8 = D_80C257F8; // type:UNK_TYPE2 size:0x2
0x80C25800 = D_80C25800; // type:f32 size:0x4
0x80C25804 = D_80C25804; // type:f32 size:0x4
0x80C25B30 = En_Invisible_Ruppe_InitVars; // type:UNK_TYPE1 size:0x1
0x80C25B50 = D_80C25B50; // type:UNK_TYPE1 size:0x1
0x80C25CC0 = Obj_Ending_InitVars; // type:UNK_TYPE1 size:0x1
0x80C25CE0 = sModelInfo; // type:UNK_TYPE1 size:0x1
0x80C25CF8 = D_80C25CF8; // type:UNK_TYPE1 size:0x1
0x80C25FF0 = En_Rsn_InitVars; // type:UNK_TYPE1 size:0x1
0x80C26010 = D_80C26010; // type:UNK_TYPE1 size:0x1
0x80C26028 = D_80C26028; // type:UNK_TYPE4 size:0x4
